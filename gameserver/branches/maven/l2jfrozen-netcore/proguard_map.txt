com.l2jfrozen.netcore.AbstractPacket -> a.a.ap:
    java.nio.ByteBuffer _buf -> _b
    java.lang.Long _clientIdentifier -> _c
    void <init>() -> <init>
    com.l2jfrozen.netcore.MMOClient getClient() -> g
com.l2jfrozen.netcore.IAcceptFilter -> a.a.af:
    boolean accept(java.nio.channels.SocketChannel) -> a
com.l2jfrozen.netcore.IClientFactory -> a.a.cf:
    com.l2jfrozen.netcore.MMOClient create(com.l2jfrozen.netcore.MMOConnection) -> c
com.l2jfrozen.netcore.IMMOExecutor -> a.a.am:
    void execute(com.l2jfrozen.netcore.ReceivablePacket) -> e
com.l2jfrozen.netcore.IPacketHandler -> a.a.ph:
    com.l2jfrozen.netcore.ReceivablePacket handlePacket(java.nio.ByteBuffer,com.l2jfrozen.netcore.MMOClient) -> h
com.l2jfrozen.netcore.MMOClient -> a.a.A:
    long _nextIdentifier -> _n
    com.l2jfrozen.netcore.MMOConnection _con -> _c
    long _identifier -> _i
    void <init>(com.l2jfrozen.netcore.MMOConnection) -> <init>
    com.l2jfrozen.netcore.MMOConnection getConnection() -> gco
    long getIdentifier() -> gi
    boolean decrypt(java.nio.ByteBuffer,int) -> d
    boolean encrypt(java.nio.ByteBuffer,int) -> e
    void onDisconnection() -> onDisconnection
    void onForcedDisconnection(boolean) -> onForcedDisconnection
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.MMOClientsManager -> a.a.B:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map managedClients -> aj
    void <init>() -> <init>
    com.l2jfrozen.netcore.MMOClient getClient(java.lang.Long) -> a
    com.l2jfrozen.netcore.MMOClient removeClient(java.lang.Long) -> b
    com.l2jfrozen.netcore.MMOClient addClient(com.l2jfrozen.netcore.MMOClient) -> a
    com.l2jfrozen.netcore.MMOClientsManager getInstance() -> n
    void printClientsManagerStatus() -> o
    int getActiveClientsNumber() -> p
    void <init>(com.l2jfrozen.netcore.MMOClientsManager$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.MMOClientsManager$1 -> a.a.C:
com.l2jfrozen.netcore.MMOClientsManager$SingletonHolder -> a.a.D:
    com.l2jfrozen.netcore.MMOClientsManager _instance -> ak
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.MMOConnection -> a.a.E:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _selectorThreadName -> al
    java.net.Socket _socket -> am
    java.io.InputStream _socket_is -> an
    java.net.InetAddress _address -> ao
    java.nio.channels.ReadableByteChannel _readableByteChannel -> ap
    java.nio.channels.WritableByteChannel _writableByteChannel -> aq
    int _port -> _p
    com.l2jfrozen.netcore.NioNetStackList _sendQueue -> ar
    java.nio.channels.SelectionKey _selectionKey -> as
    java.nio.ByteBuffer _readBuffer -> at
    java.nio.ByteBuffer _primaryWriteBuffer -> au
    java.nio.ByteBuffer _secondaryWriteBuffer -> av
    boolean _pendingClose -> aw
    long _clientIdentifier -> ax
    void <init>(com.l2jfrozen.netcore.SelectorThread,java.net.Socket,java.nio.channels.SelectionKey) -> <init>
    void setClient(com.l2jfrozen.netcore.MMOClient) -> b
    com.l2jfrozen.netcore.MMOClient getClient() -> g
    void sendPacket(com.l2jfrozen.netcore.SendablePacket) -> a
    java.nio.channels.SelectionKey getSelectionKey() -> gs
    java.net.InetAddress getInetAddress() -> getInetAddress
    int getPort() -> getPort
    void close() -> close
    int read(java.nio.ByteBuffer) -> read
    int write(java.nio.ByteBuffer) -> write
    void createWriteBuffer(java.nio.ByteBuffer) -> createWriteBuffer
    boolean hasPendingWriteBuffer() -> hasPendingWriteBuffer
    void movePendingWriteBufferTo(java.nio.ByteBuffer) -> movePendingWriteBufferTo
    void setReadBuffer(java.nio.ByteBuffer) -> setReadBuffer
    java.nio.ByteBuffer getReadBuffer() -> getReadBuffer
    boolean isConnected() -> isConnected
    boolean isChannelConnected() -> isChannelConnected
    boolean isClosed() -> isClosed
    com.l2jfrozen.netcore.NioNetStackList getSendQueue() -> u
    void close(com.l2jfrozen.netcore.SendablePacket) -> b
    void close(com.l2jfrozen.netcore.SendablePacket[]) -> a
    void releaseBuffers() -> v
    com.l2jfrozen.netcore.SelectorThread getSelectorThread() -> x
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.NetcoreConfig -> com.l2jfrozen.netcore.NetcoreConfig:
    boolean SHOW_LICENCE -> SHOW_LICENCE
    boolean PACKET_HANDLER_DEBUG -> PACKET_HANDLER_DEBUG
    int MMO_SELECTOR_SLEEP_TIME -> MMO_SELECTOR_SLEEP_TIME
    int MMO_MAX_SEND_PER_PASS -> MMO_MAX_SEND_PER_PASS
    int MMO_MAX_READ_PER_PASS -> MMO_MAX_READ_PER_PASS
    int MMO_HELPER_BUFFER_COUNT -> MMO_HELPER_BUFFER_COUNT
    boolean ENABLE_MMOCORE_EXCEPTIONS -> ENABLE_MMOCORE_EXCEPTIONS
    boolean ENABLE_MMOCORE_DEBUG -> ENABLE_MMOCORE_DEBUG
    boolean ENABLE_MMOCORE_DEVELOP -> ENABLE_MMOCORE_DEVELOP
    boolean ENABLE_MMOCORE_PACKETS_LOG -> ENABLE_MMOCORE_PACKETS_LOG
    boolean ENABLE_CLIENT_FLOOD_PROTECTION -> ENABLE_CLIENT_FLOOD_PROTECTION
    int CLIENT_PACKET_QUEUE_SIZE -> CLIENT_PACKET_QUEUE_SIZE
    int CLIENT_PACKET_QUEUE_MAX_BURST_SIZE -> CLIENT_PACKET_QUEUE_MAX_BURST_SIZE
    int CLIENT_PACKET_QUEUE_MAX_PACKETS_PER_SECOND -> CLIENT_PACKET_QUEUE_MAX_PACKETS_PER_SECOND
    int CLIENT_PACKET_QUEUE_MEASURE_INTERVAL -> CLIENT_PACKET_QUEUE_MEASURE_INTERVAL
    int CLIENT_PACKET_QUEUE_MAX_AVERAGE_PACKETS_PER_SECOND -> CLIENT_PACKET_QUEUE_MAX_AVERAGE_PACKETS_PER_SECOND
    int CLIENT_PACKET_QUEUE_MAX_FLOODS_PER_MIN -> CLIENT_PACKET_QUEUE_MAX_FLOODS_PER_MIN
    int CLIENT_PACKET_QUEUE_MAX_OVERFLOWS_PER_MIN -> CLIENT_PACKET_QUEUE_MAX_OVERFLOWS_PER_MIN
    int CLIENT_PACKET_QUEUE_MAX_UNDERFLOWS_PER_MIN -> CLIENT_PACKET_QUEUE_MAX_UNDERFLOWS_PER_MIN
    int CLIENT_PACKET_QUEUE_MAX_UNKNOWN_PER_MIN -> CLIENT_PACKET_QUEUE_MAX_UNKNOWN_PER_MIN
    boolean DISABLE_FULL_PACKETS_FLOOD_PROTECTOR -> DISABLE_FULL_PACKETS_FLOOD_PROTECTOR
    int FLOOD_PACKET_PROTECTION_INTERVAL -> FLOOD_PACKET_PROTECTION_INTERVAL
    boolean LOG_PACKET_FLOODING -> LOG_PACKET_FLOODING
    int PACKET_FLOODING_PUNISHMENT_LIMIT -> PACKET_FLOODING_PUNISHMENT_LIMIT
    java.lang.String PACKET_FLOODING_PUNISHMENT_TYPE -> PACKET_FLOODING_PUNISHMENT_TYPE
    java.lang.String PROTECTED_OPCODES -> PROTECTED_OPCODES
    javolution.util.FastList GS_LIST_PROTECTED_OPCODES -> GS_LIST_PROTECTED_OPCODES
    javolution.util.FastList GS_LIST_PROTECTED_OPCODES2 -> GS_LIST_PROTECTED_OPCODES2
    javolution.util.FastList LS_LIST_PROTECTED_OPCODES -> LS_LIST_PROTECTED_OPCODES
    java.lang.String ALLOWED_OFFLINE_OPCODES -> ALLOWED_OFFLINE_OPCODES
    javolution.util.FastList LIST_ALLOWED_OFFLINE_OPCODES -> LIST_ALLOWED_OFFLINE_OPCODES
    javolution.util.FastList LIST_ALLOWED_OFFLINE_OPCODES2 -> LIST_ALLOWED_OFFLINE_OPCODES2
    boolean DUMP_CLOSE_CONNECTIONS -> DUMP_CLOSE_CONNECTIONS
    com.l2jfrozen.netcore.NetcoreConfig _instance -> _instance
    com.l2jfrozen.netcore.NetcoreConfig getInstance() -> getInstance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.NetcoreConfigFiles -> com.l2jfrozen.netcore.NetcoreConfigFiles:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String MAIN_CONFIGURATION_FILE -> MAIN_CONFIGURATION_FILE
    java.lang.String NETCORE_CONFIGURATION_FILE -> NETCORE_CONFIGURATION_FILE
    java.util.Properties configFiles -> configFiles
    void <init>() -> <init>
    void loadConfigurationFilesPaths() -> loadConfigurationFilesPaths
    void loadConfigurationFilesPaths(java.lang.String) -> loadConfigurationFilesPaths
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.NioNetStackList -> a.a.F:
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode _start -> ay
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNodeBuf _buf -> az
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode _end -> aA
    void <init>() -> <init>
    void addLast(java.lang.Object) -> addLast
    java.lang.Object removeFirst() -> removeFirst
    boolean isEmpty() -> isEmpty
    void clear() -> clear
com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode -> a.a.G:
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode _next -> aB
    java.lang.Object _value -> _v
    com.l2jfrozen.netcore.NioNetStackList this$0 -> aC
    void <init>(com.l2jfrozen.netcore.NioNetStackList) -> <init>
com.l2jfrozen.netcore.NioNetStackList$NioNetStackNodeBuf -> a.a.H:
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode _start -> ay
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode _end -> aA
    com.l2jfrozen.netcore.NioNetStackList this$0 -> aC
    void <init>(com.l2jfrozen.netcore.NioNetStackList) -> <init>
    void addLast(com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode) -> addLast
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode removeFirst() -> removeFirst
com.l2jfrozen.netcore.NioNetStringBuffer -> a.a.I:
    char[] _buf -> aD
    int _size -> _s
    int _len -> aE
    void <init>(int) -> <init>
    void clear() -> clear
    void append(char) -> append
    java.lang.String toString() -> toString
com.l2jfrozen.netcore.ReceivablePacket -> a.a.z:
    com.l2jfrozen.netcore.NioNetStringBuffer _sbuf -> _s
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    boolean read() -> read
    void run() -> run
    void readB(byte[]) -> B
    void readB(byte[],int,int) -> B
    int readC() -> C
    int readH(java.lang.String) -> H
    int readD() -> D
    long readQ() -> Q
    double readF() -> F
    java.lang.String readS() -> S
    void setBuffers(java.nio.ByteBuffer,com.l2jfrozen.netcore.MMOClient,com.l2jfrozen.netcore.NioNetStringBuffer) -> sB
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.SelectorConfig -> com.l2jfrozen.netcore.SelectorConfig:
    int readBufferSize -> readBufferSize
    int writeBufferSize -> writeBufferSize
    int helperBufferCount -> helperBufferCount
    int helperBufferSize -> helperBufferSize
    int maxSendPerPass -> maxSendPerPass
    int maxReadPerPass -> maxReadPerPass
    int sleepTime -> sleepTime
    void <init>() -> <init>
    int getReadBufferSize() -> getReadBufferSize
    void setReadBufferSize(int) -> setReadBufferSize
    int getWriteBufferSize() -> getWriteBufferSize
    void setWriteBufferSize(int) -> setWriteBufferSize
    int getHelperBufferCount() -> getHelperBufferCount
    void setHelperBufferCount(int) -> setHelperBufferCount
    int getHelperBufferSize() -> getHelperBufferSize
    void setHelperBufferSize(int) -> setHelperBufferSize
    int getMaxSendPerPass() -> getMaxSendPerPass
    void setMaxSendPerPass(int) -> setMaxSendPerPass
    int getMaxReadPerPass() -> getMaxReadPerPass
    void setMaxReadPerPass(int) -> setMaxReadPerPass
    int getSleepTime() -> getSleepTime
    void setSleepTime(int) -> setSleepTime
com.l2jfrozen.netcore.SelectorThread -> com.l2jfrozen.netcore.SelectorThread:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.nio.ByteOrder BYTE_ORDER -> BYTE_ORDER
    int HEADER_SIZE -> HEADER_SIZE
    java.nio.channels.Selector _selector -> _selector
    com.l2jfrozen.netcore.IPacketHandler _packetHandler -> _packetHandler
    com.l2jfrozen.netcore.IMMOExecutor _executor -> _executor
    com.l2jfrozen.netcore.IClientFactory _clientFactory -> _clientFactory
    com.l2jfrozen.netcore.IAcceptFilter _acceptFilter -> _acceptFilter
    int HELPER_BUFFER_SIZE -> HELPER_BUFFER_SIZE
    int HELPER_BUFFER_COUNT -> HELPER_BUFFER_COUNT
    int MAX_SEND_PER_PASS -> MAX_SEND_PER_PASS
    int MAX_READ_PER_PASS -> MAX_READ_PER_PASS
    long SLEEP_TIME -> st
    java.nio.ByteBuffer DIRECT_WRITE_BUFFER -> DIRECT_WRITE_BUFFER
    java.nio.ByteBuffer WRITE_BUFFER -> WRITE_BUFFER
    java.nio.ByteBuffer READ_BUFFER -> READ_BUFFER
    com.l2jfrozen.netcore.NioNetStringBuffer STRING_BUFFER -> STRING_BUFFER
    javolution.util.FastList _bufferPool -> _bufferPool
    com.l2jfrozen.netcore.NioNetStackList _pendingClose -> _pendingClose
    boolean _shutdown -> _shutdown
    java.util.HashMap selector_threads -> selector_threads
    com.l2jfrozen.netcore.SelectorThread getSelectorThread(java.lang.String) -> getSelectorThread
    void <init>(com.l2jfrozen.netcore.SelectorConfig,com.l2jfrozen.netcore.IMMOExecutor,com.l2jfrozen.netcore.IPacketHandler,com.l2jfrozen.netcore.IClientFactory,com.l2jfrozen.netcore.IAcceptFilter) -> <init>
    void openServerSocket(java.net.InetAddress,int) -> openServerSocket
    java.nio.ByteBuffer getPooledBuffer() -> getPooledBuffer
    void recycleBuffer(java.nio.ByteBuffer) -> recycleBuffer
    void run() -> run
    void finishConnection(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOConnection) -> finishConnection
    void acceptConnection(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOConnection) -> acceptConnection
    void readPacket(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOConnection) -> readPacket
    boolean tryReadPacket(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOClient,java.nio.ByteBuffer,com.l2jfrozen.netcore.MMOConnection) -> tryReadPacket
    void allocateReadBuffer(com.l2jfrozen.netcore.MMOConnection) -> allocateReadBuffer
    boolean parseClientPacket(int,java.nio.ByteBuffer,int,com.l2jfrozen.netcore.MMOClient) -> parseClientPacket
    void writeClosePacket(com.l2jfrozen.netcore.MMOConnection) -> writeClosePacket
    void writePacket(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOConnection) -> writePacket
    boolean prepareWriteBuffer(com.l2jfrozen.netcore.MMOConnection) -> prepareWriteBuffer
    void putPacketIntoWriteBuffer(com.l2jfrozen.netcore.MMOClient,com.l2jfrozen.netcore.SendablePacket) -> putPacketIntoWriteBuffer
    void closeConnection(com.l2jfrozen.netcore.MMOConnection) -> closeConnection
    void closeConnectionImpl(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOConnection,boolean,boolean) -> closeConnectionImpl
    void shutdown() -> shutdown
    boolean isShutdown() -> isShutdown
    void closeSelectorThread() -> closeSelectorThread
    void shutdownSelectorThreads() -> shutdownSelectorThreads
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.SendablePacket -> a.a.y:
    void <init>() -> <init>
    void putInt(int) -> pI
    void putDouble(double) -> pD
    void putFloat(float) -> pF
    void writeC(int) -> C
    void writeF(double) -> F
    void writeH(int) -> H
    void writeD(int) -> D
    void writeQ(long) -> Q
    void writeB(byte[]) -> B
    void writeS(java.lang.String) -> S
    void write() -> write
com.l2jfrozen.netcore.SessionKey -> a.a.aa:
    int playOkID1 -> a
    int playOkID2 -> b
    int loginOkID1 -> c
    int loginOkID2 -> d
    int clientKey -> e
    void <init>(int,int,int,int) -> <init>
    java.lang.String toString() -> toString
    boolean checkLoginPair(int,int) -> f
    boolean equals(com.l2jfrozen.netcore.SessionKey) -> equals
com.l2jfrozen.netcore.util.IPSubnet -> a.a.l:
    byte[] _addr -> _a
    byte[] _mask -> _m
    boolean _isIPv4 -> _i
    void <init>(java.lang.String) -> <init>
    void <init>(java.net.InetAddress,int) -> <init>
    byte[] getAddress() -> getAddress
    boolean applyMask(byte[]) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    byte[] getMask(int,int) -> gm
com.l2jfrozen.netcore.util.IPv4Filter -> a.a.m:
    java.util.HashMap _ipFloodMap -> C
    long SLEEP_TIME -> st
    void <init>() -> <init>
    int hash(byte[]) -> h
    boolean accept(java.nio.channels.SocketChannel) -> a
    void run() -> run
com.l2jfrozen.netcore.util.IPv4Filter$Flood -> a.a.n:
    long lastAccess -> D
    int trys -> E
    void <init>() -> <init>
com.l2jfrozen.netcore.util.PacketsFloodProtector -> a.a.o:
    com.l2jfrozen.netcore.util.PacketsFloodServer protected_server -> F
    void <init>() -> <init>
    void setProtectedServer(com.l2jfrozen.netcore.util.PacketsFloodServer) -> a
    boolean tryPerformAction(int,int,com.l2jfrozen.netcore.MMOClient) -> t
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.PacketsFloodServer -> a.a.p:
    boolean tryPerformAction(int,int,com.l2jfrozen.netcore.MMOClient) -> t
    boolean isOpCodeToBeTested(int,int) -> i
com.l2jfrozen.netcore.util.PacketsLoggerManager -> a.a.q:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _monitored_characters -> G
    java.util.Hashtable _character_blocked_packets -> H
    com.thoughtworks.xstream.XStream xstream -> I
    void <init>() -> <init>
    void startCharacterPacketsMonitoring(java.lang.String) -> c
    void stopCharacterPacketsMonitoring(java.lang.String) -> d
    void blockCharacterPacket(java.lang.String,java.lang.String) -> a
    void restoreCharacterPacket(java.lang.String,java.lang.String) -> b
    boolean isCharacterMonitored(java.lang.String) -> e
    boolean isCharacterPacketBlocked(java.lang.String,java.lang.String) -> c
    void logCharacterPacket(java.lang.String,java.lang.String) -> d
    void logReceivedPacket(com.l2jfrozen.netcore.ReceivablePacket) -> a
    com.l2jfrozen.netcore.util.PacketsLoggerManager getInstance() -> l
    void add(java.lang.String,java.lang.String,java.lang.String) -> ad
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.PacketsLoggerManager$SingletonHolder -> a.a.r:
    com.l2jfrozen.netcore.util.PacketsLoggerManager _instance -> J
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.crypt.BlowfishEngine -> a.a.s:
    int[] KP -> K
    int[] KS0 -> L
    int[] KS1 -> M
    int[] KS2 -> N
    int[] KS3 -> O
    int ROUNDS -> P
    int BLOCK_SIZE -> Q
    int SBOX_SK -> R
    int P_SZ -> S
    int[] S0 -> T
    int[] S1 -> U
    int[] S2 -> V
    int[] S3 -> W
    int[] P -> aa
    byte[] workingKey -> ab
    void <init>() -> <init>
    void init(byte[]) -> init
    java.lang.String getAlgorithmName() -> m
    int getBlockSize() -> b
    int func(int) -> a
    void processTable(int,int,int[]) -> a
    void setKey(byte[]) -> sk
    void tryEncryptBlock(byte[],int) -> a
    void tryEncryptBlock(byte[],int,byte[],int) -> a
    void encryptBlock(byte[],int) -> b
    void encryptBlock(byte[],int,byte[],int) -> b
    void tryDecryptBlock(byte[],int) -> c
    void tryDecryptBlock(byte[],int,byte[],int) -> c
    void decryptBlock(byte[],int) -> d
    void decryptBlock(byte[],int,byte[],int) -> d
    int bytesTo32bits(byte[],int) -> e
    void bits32ToBytes(int,byte[],int) -> a
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.crypt.LoginCrypt -> a.a.t:
    byte[] STATIC_BLOWFISH_KEY -> ac
    com.l2jfrozen.netcore.util.crypt.NewCrypt _STATIC_CRYPT -> ad
    com.l2jfrozen.netcore.util.crypt.NewCrypt _crypt -> ae
    boolean _static -> af
    void <init>() -> <init>
    void setKey(byte[]) -> sk
    boolean decrypt(byte[],int,int) -> a
    int encrypt(byte[],int,int) -> b
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.crypt.NewCrypt -> a.a.u:
    com.l2jfrozen.netcore.util.crypt.BlowfishEngine _cipher -> ag
    void <init>(byte[]) -> <init>
    void <init>(java.lang.String) -> <init>
    boolean verifyChecksum(byte[]) -> b
    boolean verifyChecksum(byte[],int,int) -> c
    void appendChecksum(byte[]) -> c
    void appendChecksum(byte[],int,int) -> d
    void encXORPass(byte[],int) -> f
    void encXORPass(byte[],int,int,int) -> a
    void decrypt(byte[],int,int) -> de
    void crypt(byte[],int,int) -> e
com.l2jfrozen.netcore.util.crypt.ScrambledKeyPair -> a.a.v:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.security.KeyPair _pair -> ah
    byte[] _scrambledModulus -> ai
    void <init>(java.security.KeyPair) -> <init>
    byte[] scrambleModulus(java.math.BigInteger) -> a
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.deamon.ServerDeamon -> a.a.S:
    java.nio.file.Path downloadedNetcoreTmpFile -> aF
    java.lang.String trustStoreFileName -> a
    java.lang.String trustStorePassword -> d
    java.lang.String deamonDebug -> e
    java.lang.String checkIpDisabled -> f
    java.lang.String connectionDisabled -> g
    java.lang.String connectionLocalDisabled -> h
    java.lang.String statusServiceDisabled -> i
    java.lang.String checkServiceDisabled -> j
    java.lang.String mavenPropertiesFile -> aG
    java.lang.String localhost -> v
    java.lang.String localhostIp -> w
    java.lang.String allowedIp -> k
    void <init>() -> <init>
    boolean checkServerPack() -> a
    java.lang.String getServerInfo() -> gs
    java.lang.String getServerStatus() -> b
    java.lang.String getRuntimeStatus() -> c
    java.lang.String getBugsReport() -> d
    boolean establishConnection() -> e
    boolean downloadNetcore() -> j
    void requestStatusService(java.lang.String,java.lang.String,java.lang.String) -> a
    void requestStatusServiceHttps(java.lang.String,java.lang.String,java.lang.String) -> b
    boolean requestCheckService(java.lang.String) -> a
    boolean requestCheckServiceHttps(java.lang.String) -> b
    java.lang.String sendPost(java.net.HttpURLConnection,java.lang.String) -> a
    boolean lambda$requestCheckServiceHttps$3(java.lang.String,javax.net.ssl.SSLSession) -> a
    boolean lambda$requestStatusServiceHttps$2(java.lang.String,javax.net.ssl.SSLSession) -> b
    boolean lambda$downloadNetcore$1(java.lang.String,javax.net.ssl.SSLSession) -> c
    boolean lambda$establishConnection$0(java.lang.String,javax.net.ssl.SSLSession) -> d
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.deamon.ServerDeamon$1 -> a.a.b:
com.l2jfrozen.netcore.util.deamon.ServerDeamon$DefaultTrustManager -> a.a.e:
    void <init>() -> <init>
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void <init>(com.l2jfrozen.netcore.util.deamon.ServerDeamon$1) -> <init>
com.l2jfrozen.netcore.util.deamon.ServerDeamonTask -> a.a.f:
    java.lang.String deamonDisabled -> l
    java.lang.String serverCheckDisabled -> m
    java.lang.String serverStatusDisabled -> n
    java.lang.String runtimeStatusDisabled -> o
    java.lang.String bugsReportDisabled -> p
    java.lang.String serverTypeClass -> aH
    java.lang.String serverModeField -> aI
    java.lang.String deamonDebug -> e
    long activationTime -> q
    long reactivationTime -> r
    boolean active -> active
    java.lang.Thread instance -> s
    void start() -> start
    void <init>() -> <init>
    void run() -> run
    void deactivateTask() -> f
    java.lang.String access$000() -> q
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.deamon.ServerDeamonTask$1 -> a.a.c:
    com.l2jfrozen.netcore.util.deamon.ServerDeamonTask this$0 -> x
    void <init>(com.l2jfrozen.netcore.util.deamon.ServerDeamonTask) -> <init>
    void run() -> run
com.l2jfrozen.netcore.util.deamon.data.DataConverter -> a.a.g:
    com.l2jfrozen.netcore.util.deamon.data.DataConverter instance -> t
    javax.xml.bind.Marshaller marshaller -> u
    javax.xml.bind.Unmarshaller unmarshaller -> y
    void <init>() -> <init>
    com.l2jfrozen.netcore.util.deamon.data.DataConverter getInstance() -> g
    java.lang.String getXML(java.io.Serializable) -> a
    java.io.Serializable getObject(java.lang.String) -> f
com.l2jfrozen.netcore.util.deamon.data.RuntimeStatus -> a.a.rs:
    long serialVersionUID -> serialVersionUID
    java.lang.String systemTime -> st
    int avaibleCPUs -> ac
    java.lang.String processorIdentifier -> pi
    java.lang.String os -> os
    java.lang.String osBuild -> osb
    java.lang.String osArch -> osa
    java.lang.String javaRuntimeName -> jrn
    java.lang.String javaVersion -> a_
    java.lang.String javaClassVersion -> jcv
    long currentFreeHeapSize -> cfhs
    long currentHeapSize -> chs
    long maximumHeapSize -> mhs
    java.lang.String jvmName -> jn
    java.lang.String jvmInstallationDirectory -> jid
    java.lang.String jvmVersion -> jv
    java.lang.String jvmVendor -> jv2
    java.lang.String jvmExtraInfo -> jei
    void <init>() -> <init>
    java.lang.String getSystemTime() -> gst
    int getAvaibleCPUs() -> gac
    java.lang.String getProcessorIdentifier() -> gpi
    java.lang.String getOs() -> gos
    java.lang.String getOsArch() -> gosa
    java.lang.String getJavaRuntimeName() -> gjrb
    java.lang.String getJavaVersion() -> a_
    java.lang.String getJavaClassVersion() -> gjcv
    long getCurrentFreeHeapSize() -> gcfhs
    long getCurrentHeapSize() -> gchs
    long getMaximumHeapSize() -> gmhs
    java.lang.String getJvmName() -> gjn
    java.lang.String getJvmInstallationDirectory() -> gjid
    java.lang.String getJvmVersion() -> gjv
    java.lang.String getJvmVendor() -> gjv2
    java.lang.String getJvmExtraInfo() -> gjvei
    java.lang.String getOsBuild() -> gob
    void refreshStatus() -> rs
com.l2jfrozen.netcore.util.deamon.data.ServerConfigStatus -> a.a.i:
    long serialVersionUID -> serialVersionUID
    java.lang.String ServerName -> sn
    java.lang.String networkIps -> z
    java.lang.String GameServerIp -> gsi
    int GameServerPort -> gsp
    java.lang.String LoginServerIp -> lsi
    int LoginServerPort -> lsp
    float GameServerRate -> gsr
    float GameServerAdenaRate -> gsar
    java.lang.String GameServerLink -> gsl
    java.lang.String GameServerHopzoneLink -> gshl
    java.lang.String GameServerTopzoneLink -> gstl
    java.lang.String GameServerL2NetworkLink -> gslnl
    java.util.Properties settings -> s
    java.lang.String localhost -> v
    java.lang.String localhostIp -> w
    java.lang.String allbindingIp -> aJ
    void <init>() -> <init>
    java.lang.String getServerName() -> ggsn
    java.lang.String getGameServerIp() -> ggsi
    int getGameServerPort() -> ggsp
    float getGameServerRate() -> ggsr
    float getGameServerAdenaRate() -> ggsar
    java.lang.String getGameServerLink() -> ggsl
    java.lang.String getGameServerHopzoneLink() -> ggshl
    java.lang.String getGameServerTopzoneLink() -> ggsrl
    java.lang.String getGameServerL2NetworkLink() -> ggslnl
    java.lang.String getLoginServerIp() -> glsi
    int getLoginServerPort() -> glsp
    java.lang.String getNetworkIps() -> h
    long getSerialversionuid() -> getSerialversionuid
    void reloadSettings() -> b_
    java.lang.String[] getServerNetworkIPs() -> i
    void refreshStatus() -> rs
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.deamon.data.ServerStatus -> a.a.j:
    long serialVersionUID -> serialVersionUID
    int ActiveClients -> a
    void <init>() -> <init>
    int getActiveClients() -> ga
    void refreshStatus() -> rs
com.l2jfrozen.netcore.util.deamon.support.DeamonSystem -> a.a.k:
    java.lang.String systemClassName -> A
    java.lang.String printStreamClassName -> B
    java.lang.String exit -> X
    java.lang.String out -> Y
    java.lang.String printlnS -> Z
    java.lang.String err -> aK
    java.lang.String setPropertyS -> aL
    java.lang.String getPropertyS -> aM
    void <init>() -> <init>
    void killProcess() -> k
    void info(java.lang.String) -> i
    void error(java.lang.String) -> e
    void setSysProperty(java.lang.String,java.lang.String) -> ssp
    java.lang.String getSysProperty(java.lang.String,java.lang.String) -> gsp
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.deamon.support.FilesUpdater -> a.a.d:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    void copy(java.nio.file.Path,java.nio.file.Path) -> a
com.l2jfrozen.netcore.util.logs.Log -> a.a.h:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void add(java.lang.String,java.lang.String,java.lang.String) -> ad
    void append(java.lang.String,java.lang.String,java.lang.String) -> c
    void add(java.lang.String,java.lang.String) -> add
    void Assert(boolean,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.network.BaseRecievePacket -> a.a.w:
    byte[] _decrypt -> _d
    int _off -> _o
    void <init>(byte[]) -> <init>
    int readD() -> D
    int readC() -> C
    int readH() -> H
    double readF() -> F
    java.lang.String readS() -> S
    byte[] readB(int) -> B
com.l2jfrozen.netcore.util.network.BaseSendablePacket -> a.a.x:
    java.io.ByteArrayOutputStream _bao -> _b
    void <init>() -> <init>
    void writeD(int) -> D
    void writeH(int) -> H
    void writeC(int) -> C
    void writeF(double) -> F
    void writeS(java.lang.String) -> S
    void writeB(byte[]) -> B
    int getLength() -> gL
    byte[] getBytes() -> getBytes
    byte[] getContent() -> gC
com.l2jfrozen.netcore.util.random.NonAtomicRandom -> a.a.J:
    long serialVersionUID -> serialVersionUID
    long _seed -> aN
    void <init>() -> <init>
    void <init>(long) -> <init>
    int next(int) -> next
    void setSeed(long) -> setSeed
com.l2jfrozen.netcore.util.random.RandomContainer -> a.a.K:
    java.util.Random _random -> aO
    void <init>(java.util.Random) -> <init>
    java.util.Random directRandom() -> r
    double get() -> get
    int get(int) -> get
    int get(int,int) -> a
    long get(long,long) -> a
    boolean nextBoolean() -> nextBoolean
    void nextBytes(byte[]) -> nextBytes
    double nextDouble() -> nextDouble
    float nextFloat() -> nextFloat
    double nextGaussian() -> nextGaussian
    int nextInt() -> nextInt
    long nextLong() -> nextLong
com.l2jfrozen.netcore.util.random.RandomType -> a.a.L:
    com.l2jfrozen.netcore.util.random.RandomType SECURE -> aP
    com.l2jfrozen.netcore.util.random.RandomType UNSECURE_ATOMIC -> aQ
    com.l2jfrozen.netcore.util.random.RandomType UNSECURE_THREAD_LOCAL -> aR
    com.l2jfrozen.netcore.util.random.RandomType UNSECURE_VOLATILE -> aS
    com.l2jfrozen.netcore.util.random.RandomType[] $VALUES -> aT
    com.l2jfrozen.netcore.util.random.RandomType[] values() -> s
    com.l2jfrozen.netcore.util.random.RandomType valueOf(java.lang.String) -> g
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.random.Rnd -> a.a.M:
    long ADDEND -> aU
    long MASK -> aV
    long MULTIPLIER -> aW
    long SEED_UNIQUIFIER -> aX
    com.l2jfrozen.netcore.util.random.RandomContainer rnd -> aY
    void <init>() -> <init>
    com.l2jfrozen.netcore.util.random.RandomContainer newInstance(com.l2jfrozen.netcore.util.random.RandomType) -> a
    java.util.Random directRandom() -> r
    double get() -> get
    int get(int) -> get
    int get(int,int) -> a
    long get(long,long) -> a
    boolean nextBoolean() -> nextBoolean
    void nextBytes(byte[]) -> nextBytes
    double nextDouble() -> nextDouble
    float nextFloat() -> nextFloat
    double nextGaussian() -> nextGaussian
    int nextInt() -> nextInt
    int nextInt(int) -> nextInt
    long nextLong() -> nextLong
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.random.Rnd$1 -> a.a.N:
    int[] $SwitchMap$com$l2jfrozen$netcore$util$random$RandomType -> aZ
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.random.ThreadLocalRandom -> a.a.O:
    long serialVersionUID -> serialVersionUID
    java.lang.ThreadLocal _seedLocal -> ba
    void <init>() -> <init>
    void <init>(long) -> <init>
    int next(int) -> next
    void setSeed(long) -> setSeed
com.l2jfrozen.netcore.util.random.ThreadLocalRandom$1 -> a.a.P:
    com.l2jfrozen.netcore.util.random.ThreadLocalRandom this$0 -> bb
    void <init>(com.l2jfrozen.netcore.util.random.ThreadLocalRandom) -> <init>
    com.l2jfrozen.netcore.util.random.ThreadLocalRandom$Seed initialValue() -> t
    java.lang.Object initialValue() -> initialValue
com.l2jfrozen.netcore.util.random.ThreadLocalRandom$2 -> a.a.Q:
    long val$seed -> bc
    com.l2jfrozen.netcore.util.random.ThreadLocalRandom this$0 -> bb
    void <init>(com.l2jfrozen.netcore.util.random.ThreadLocalRandom,long) -> <init>
    com.l2jfrozen.netcore.util.random.ThreadLocalRandom$Seed initialValue() -> t
    java.lang.Object initialValue() -> initialValue
com.l2jfrozen.netcore.util.random.ThreadLocalRandom$Seed -> a.a.R:
    long _seed -> aN
    com.l2jfrozen.netcore.util.random.ThreadLocalRandom this$0 -> bb
    void <init>(com.l2jfrozen.netcore.util.random.ThreadLocalRandom,long) -> <init>
    int next(int) -> next
    void setSeed(long) -> setSeed
