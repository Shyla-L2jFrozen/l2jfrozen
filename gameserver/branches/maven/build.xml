<?xml version="1.0" encoding="UTF-8"?>
<project name="L2jFrozen_GameServer" default="dist-local" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<description>
        This script will build the L2J-Frozen server. Thanks for Using our Pack.
        
        This program is opensource   
        
    </description>

	<path id="maven-ant-tasks.classpath" path="maven/maven-ant-tasks-2.1.3.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
	           uri="antlib:org.apache.maven.artifact.ant"
	           classpathref="maven-ant-tasks.classpath" />

	<property file="build.properties" />
	<property name="build" location="${basedir}/target" />

	<property name="maven.home" location="${basedir}/maven/apache-maven-3.2.5" />
	<property name="server" location="${basedir}/l2jfrozen-server" />
	<property name="netcore" location="${basedir}/l2jfrozen-netcore" />
	<property name="common" location="${basedir}/l2jfrozen-common" />

	<property name="login-target" location="${server}/target/login" />
	<property name="login-lib" location="${server}/target/login/dependencies" />
	<property name="game-target" location="${server}/target/game" />
	<property name="game-lib" location="${server}/target/game/dependencies" />

	<artifact:pom id="l2jfrozen.main.pom" file="${basedir}/pom.xml" />
	<artifact:pom id="l2jfrozen.common.pom" file="${common}/pom.xml" />
	<artifact:pom id="l2jfrozen.netcore.pom" file="${netcore}/pom.xml" />
	<artifact:pom id="l2jfrozen.server.pom" file="${server}/pom.xml" />

	<target name="mvn-login-jar">

		<artifact:mvn pom="${basedir}/pom.xml" mavenhome="${maven.home}" fork="true">
			<arg value="clean" />
			<arg value="install" />
			<arg value="-P login" />
		</artifact:mvn>

	</target>
	
	<target name="mvn-login-obf-jar">

			<artifact:mvn pom="${basedir}/pom.xml" mavenhome="${maven.home}" fork="true">
				<arg value="clean" />
				<arg value="install" />
				<arg value="-P login-obf" />
			</artifact:mvn>

		</target>

	<target name="mvn-game-jar">

		<artifact:mvn pom="${basedir}/pom.xml" mavenhome="${maven.home}" fork="true">
			<arg value="clean" />
			<arg value="install" />
			<arg value="-P game" />
		</artifact:mvn>

	</target>
	
	<target name="mvn-game-obf-jar">

			<artifact:mvn pom="${basedir}/pom.xml" mavenhome="${maven.home}" fork="true">
				<arg value="clean" />
				<arg value="install" />
				<arg value="-P game-obf" />
			</artifact:mvn>

		</target>

	<target name="mvn-clean">

		<artifact:mvn pom="${basedir}/pom.xml" mavenhome="${maven.home}" fork="true">
			<arg value="clean" />
		</artifact:mvn>

	</target>

	<target name="prepare-build" description="Prepare the final folders properties">

		<property name="build.login" location="${build}/loginserver" />
		<property name="build.login.lib" location="${build.login}/lib" />
		<property name="build.game" location="${build}/gameserver" />
		<property name="build.game.lib" location="${build.game}/lib" />

	</target>

	<target name="init" depends="prepare-build" description="Create the output directories.">

		<mkdir dir="${build}" />
		<mkdir dir="${build.login}" />
		<mkdir dir="${build.login.lib}" />
		<mkdir dir="${build.game}" />
		<mkdir dir="${build.game.lib}" />

	</target>

	<target name="export-login" depends="init,mvn-login-jar">

		<copy todir="${build.login.lib}">
			<fileset dir="${login-target}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${login-lib}">
				<include name="*.jar" />
			</fileset>
		</copy>

		<copy todir="${build.login}">
			<fileset dir="dist">
				<include name="LoginServer_loop.sh" />
				<include name="startLoginServer.*" />
				<include name="RegisterGameServer.*" />
			</fileset>
		</copy>

		<fixcrlf srcdir="${build.login}" eol="lf" eof="remove" includes="**/*.sh">
		</fixcrlf>

		<fixcrlf srcdir="${build.login}" eol="crlf" eof="remove" includes="**/*.bat">
		</fixcrlf>

		<mkdir dir="${build.login}/log" />

		<mkdir dir="${build.login}/config" />
		<mkdir dir="${build.login}/config/network" />
		<mkdir dir="${build.login}/config/protected" />
		<mkdir dir="${build.login}/config/others" />

		<!-- login server -->
		<copy todir="${build.login}/config/protected">
			<fileset dir="config/protected">
				<include name="mmocore.properties" />
			</fileset>
		</copy>

		<copy todir="${build.login}/config">
			<fileset dir="config">
				<include name="common.properties" />
				<include name="configFilesPaths.properties" />
			</fileset>
		</copy>

		<copy todir="${build.login}/config/network">
			<fileset dir="config/network">
				<include name="ipconfig.*" />
				<include name="loginserver.properties" />
			</fileset>
		</copy>

		<copy todir="${build.login}/config/others">
			<fileset dir="config/others">
				<include name="banned_ip.cfg" />
				<include name="logger.properties" />
				<include name="servername.xml" />
				<include name="log.cfg" />
			</fileset>
		</copy>

	</target>

	<target name="export-game" depends="init,mvn-game-jar">

		<copy todir="${build.game.lib}">
			<fileset dir="${game-target}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${game-lib}">
				<include name="*.jar" />
			</fileset>
		</copy>



		<copy todir="${build.game}">
			<fileset dir="dist">
				<include name="GameServer_loop.sh" />
				<include name="startGameServer.*" />
				<include name="startBackup.*" />
				<include name="restartGameServer.*" />
			</fileset>
		</copy>


		<fixcrlf srcdir="${build.game}" eol="lf" eof="remove" includes="**/*.sh">
		</fixcrlf>

		<fixcrlf srcdir="${build.game}" eol="crlf" eof="remove" includes="**/*.bat">
		</fixcrlf>

		<mkdir dir="${build.game}/log" />

		<mkdir dir="${build.game}/config/protected" />
		<mkdir dir="${build.game}/config/head" />
		<mkdir dir="${build.game}/config/functions" />
		<mkdir dir="${build.game}/config/powerpak" />
		<mkdir dir="${build.game}/config/powerpak/webservices" />
		<mkdir dir="${build.game}/config/network" />
		<mkdir dir="${build.game}/config/mods" />
		<mkdir dir="${build.game}/config/others" />
		<mkdir dir="${build.game}/config/events" />

		<copy todir="${build.game}/config">
			<fileset dir="config">
				<include name="*.properties" />
				<include name="*.info" />
				<include name="chatfilter.txt" />
				<include name="questionwords.txt" />
				<include name="key.cfg" />
			</fileset>
		</copy>

		<copy todir="${build.game}/config/protected">
			<fileset dir="config/protected">
				<include name="*.properties" />
			</fileset>
		</copy>

		<copy todir="${build.game}/config/functions">
			<fileset dir="config/functions">
				<include name="*.properties" />
			</fileset>
		</copy>

		<copy todir="${build.game}/config/head">
			<fileset dir="config/head">
				<include name="*.properties" />
			</fileset>
		</copy>

		<copy todir="${build.game}/config/powerpak">
			<fileset dir="config/powerpak">
				<include name="*.*" />
			</fileset>
		</copy>

		<copy todir="${build.game}/config/events">
			<fileset dir="config/events">
				<include name="*.properties" />
			</fileset>
		</copy>

		<copy todir="${build.game}/config/mods">
			<fileset dir="config/mods">
				<include name="*.properties" />
			</fileset>
		</copy>

		<copy todir="${build.game}/config/network">
			<fileset dir="config/network">
				<include name="ipconfig.*" />
				<include name="gameserver.properties" />
			</fileset>
		</copy>

		<copy todir="${build.game}/config/others">
			<fileset dir="config/others">
				<include name="*.*" />
			</fileset>
		</copy>


	</target>

	<target name="export" depends="export-login,export-game">

	</target>

	<target name="dist-local-login" depends="export-login" description="Create distribution files and Zip one into 'build' folder">
		<zip destfile="${build}/L2JFrozen_LoginServer.zip" basedir="${build.login}" update="true" />
	</target>

	<target name="dist-local-game" depends="export-game" description="Create distribution files and Zip one into 'build' folder">
		<zip destfile="${build}/L2JFrozen_GameServer.zip" basedir="${build.game}" update="true" />
	</target>

	<target name="dist-local" depends="clean,export" description="Create distribution files and Zip one into 'build' folder">
		<zip destfile="${build}/L2JFrozen_All.zip" basedir="${build.dist}" update="true" />
	</target>

	<target name="clean" depends="mvn-clean" description="Delete the build folders">
		<delete dir="${build}" />
	</target>


</project>