com.l2jfrozen.common.CommonConfig -> com.l2jfrozen.common.CommonConfig:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean ENABLE_ALL_EXCEPTIONS -> ENABLE_ALL_EXCEPTIONS
    boolean ASSERT -> ASSERT
    boolean DEBUG -> DEBUG
    boolean BROADCAST_DEBUG -> BROADCAST_DEBUG
    int THREAD_P_EFFECTS -> THREAD_P_EFFECTS
    int THREAD_P_GENERAL -> THREAD_P_GENERAL
    int IO_PACKET_THREAD_CORE_SIZE -> IO_PACKET_THREAD_CORE_SIZE
    int GENERAL_PACKET_THREAD_CORE_SIZE -> GENERAL_PACKET_THREAD_CORE_SIZE
    int GENERAL_THREAD_CORE_SIZE -> GENERAL_THREAD_CORE_SIZE
    int AI_MAX_THREAD -> AI_MAX_THREAD
    java.lang.Object DATABASE_POOL_TYPE -> DATABASE_POOL_TYPE
    java.lang.String DATABASE_DRIVER -> DATABASE_DRIVER
    java.lang.String DATABASE_URL -> DATABASE_URL
    int DATABASE_MAX_CONNECTIONS -> DATABASE_MAX_CONNECTIONS
    java.lang.String DATABASE_LOGIN -> DATABASE_LOGIN
    java.lang.String DATABASE_PASSWORD -> DATABASE_PASSWORD
    long DATABASE_CONNECTION_TIMEOUT -> DATABASE_CONNECTION_TIMEOUT
    long DATABASE_TIMEOUT -> DATABASE_TIMEOUT
    int DATABASE_MAX_IDLE_TIME -> DATABASE_MAX_IDLE_TIME
    void <init>() -> <init>
    void load() -> load
    void load(java.lang.String) -> load
    void <clinit>() -> <clinit>
com.l2jfrozen.common.CommonConfigFiles -> com.l2jfrozen.common.CommonConfigFiles:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String MAIN_CONFIGURATION_FILE -> MAIN_CONFIGURATION_FILE
    java.lang.String COMMON_CONFIGURATION_FILE -> COMMON_CONFIGURATION_FILE
    java.lang.String LOG4J_CONF_FILE -> LOG4J_CONF_FILE
    java.lang.String LOG_CONF_FILE -> LOG_CONF_FILE
    java.util.Properties configFiles -> configFiles
    void <init>() -> <init>
    void loadConfigurationFilesPaths() -> loadConfigurationFilesPaths
    void loadConfigurationFilesPaths(java.lang.String) -> loadConfigurationFilesPaths
    void <clinit>() -> <clinit>
com.l2jfrozen.common.L2Frozen -> com.l2jfrozen.common.L2Frozen:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void info() -> info
    void <clinit>() -> <clinit>
com.l2jfrozen.common.L2Properties -> com.l2jfrozen.common.L2Properties:
    long serialVersionUID -> serialVersionUID
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean _warn -> _warn
    void <init>() -> <init>
    com.l2jfrozen.common.L2Properties setLog(boolean) -> setLog
    void <init>(java.lang.String) -> <init>
    void <init>(java.io.File) -> <init>
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.Reader) -> <init>
    void load(java.lang.String) -> load
    void load(java.io.File) -> load
    void load(java.io.InputStream) -> load
    void load(java.io.Reader) -> load
    java.lang.String getProperty(java.lang.String) -> getProperty
    java.lang.String getProperty(java.lang.String,java.lang.String) -> getProperty
    void <clinit>() -> <clinit>
com.l2jfrozen.common.ServerType -> com.l2jfrozen.common.ServerType:
    int MODE_NONE -> MODE_NONE
    int MODE_GAMESERVER -> MODE_GAMESERVER
    int MODE_LOGINSERVER -> MODE_LOGINSERVER
    int serverMode -> serverMode
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.common.crypt.Base64 -> com.l2jfrozen.common.crypt.Base64:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int NO_OPTIONS -> NO_OPTIONS
    int ENCODE -> ENCODE
    int DECODE -> DECODE
    int GZIP -> GZIP
    int DONT_BREAK_LINES -> DONT_BREAK_LINES
    int MAX_LINE_LENGTH -> MAX_LINE_LENGTH
    byte EQUALS_SIGN -> EQUALS_SIGN
    byte NEW_LINE -> NEW_LINE
    java.lang.String PREFERRED_ENCODING -> PREFERRED_ENCODING
    byte[] ALPHABET -> ALPHABET
    byte[] _NATIVE_ALPHABET -> _NATIVE_ALPHABET
    byte[] DECODABET -> DECODABET
    byte WHITE_SPACE_ENC -> WHITE_SPACE_ENC
    byte EQUALS_SIGN_ENC -> EQUALS_SIGN_ENC
    void <init>() -> <init>
    byte[] encode3to4(byte[],byte[],int) -> encode3to4
    byte[] encode3to4(byte[],int,int,byte[],int) -> encode3to4
    java.lang.String encodeObject(java.io.Serializable) -> encodeObject
    java.lang.String encodeObject(java.io.Serializable,int) -> encodeObject
    java.lang.String encodeBytes(byte[]) -> encodeBytes
    java.lang.String encodeBytes(byte[],int) -> encodeBytes
    java.lang.String encodeBytes(byte[],int,int) -> encodeBytes
    java.lang.String encodeBytes(byte[],int,int,int) -> encodeBytes
    int decode4to3(byte[],int,byte[],int) -> decode4to3
    byte[] decode(byte[],int,int) -> decode
    byte[] decode(java.lang.String) -> decode
    java.lang.Object decodeToObject(java.lang.String) -> decodeToObject
    void <clinit>() -> <clinit>
com.l2jfrozen.common.crypt.Base64$InputStream -> com.l2jfrozen.common.crypt.Base64$InputStream:
    boolean encode -> encode
    int position -> position
    byte[] buffer -> buffer
    int bufferLength -> bufferLength
    int numSigBytes -> numSigBytes
    int lineLength -> lineLength
    boolean breakLines -> breakLines
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,int) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
com.l2jfrozen.common.crypt.Base64$OutputStream -> com.l2jfrozen.common.crypt.Base64$OutputStream:
    boolean encode -> encode
    int position -> position
    byte[] buffer -> buffer
    int bufferLength -> bufferLength
    int lineLength -> lineLength
    boolean breakLines -> breakLines
    byte[] b4 -> b4
    boolean suspendEncoding -> suspendEncoding
    void <init>(java.io.OutputStream) -> <init>
    void <init>(java.io.OutputStream,int) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flushBase64() -> flushBase64
    void close() -> close
    void suspendEncoding() -> suspendEncoding
    void resumeEncoding() -> resumeEncoding
com.l2jfrozen.common.logs.ConsoleLogFormatter -> com.l2jfrozen.common.logs.ConsoleLogFormatter:
    java.lang.String CRLF -> CRLF
    void <init>() -> <init>
    java.lang.String format(java.util.logging.LogRecord) -> format
com.l2jfrozen.common.logs.ConsoleLogFormatter$ExtendedLog -> com.l2jfrozen.common.logs.ConsoleLogFormatter$ExtendedLog:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
com.l2jfrozen.common.logs.ErrorFilter -> com.l2jfrozen.common.logs.ErrorFilter:
    void <init>() -> <init>
    boolean isLoggable(java.util.logging.LogRecord) -> isLoggable
com.l2jfrozen.common.logs.ErrorLogHandler -> com.l2jfrozen.common.logs.ErrorLogHandler:
    void <init>() -> <init>
com.l2jfrozen.common.logs.FileLogFormatter -> com.l2jfrozen.common.logs.FileLogFormatter:
    java.lang.String CRLF -> CRLF
    java.lang.String tab -> tab
    java.text.SimpleDateFormat dateFmt -> dateFmt
    void <init>() -> <init>
    java.lang.String format(java.util.logging.LogRecord) -> format
com.l2jfrozen.common.logs.Log -> com.l2jfrozen.common.logs.Log:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void add(java.lang.String,java.lang.String,java.lang.String) -> ad
    void append(java.lang.String,java.lang.String,java.lang.String) -> append
    void add(java.lang.String,java.lang.String) -> add
    void Assert(boolean,java.lang.String) -> Assert
    void <clinit>() -> <clinit>
com.l2jfrozen.common.thread.DeadlockDetector -> com.l2jfrozen.common.thread.DeadlockDetector:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Set _logged -> _logged
    com.l2jfrozen.common.thread.DeadlockDetector _instance -> _instance
    com.l2jfrozen.common.thread.DeadlockDetector getInstance() -> getInstance
    void <init>() -> <init>
    void run() -> run
    long[] findDeadlockedThreadIDs() -> findDeadlockedThreadIDs
    java.lang.Thread findThreadById(long) -> findThreadById
    void <clinit>() -> <clinit>
com.l2jfrozen.common.thread.L2Thread -> com.l2jfrozen.common.thread.L2Thread:
    boolean _isAlive -> _isAlive
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void shutdown() -> shutdown
    void run() -> run
    void runTurn() -> runTurn
    void sleepTurn() -> sleepTurn
    java.util.List getStats(java.lang.Thread) -> getStats
com.l2jfrozen.common.thread.RunnableStatsManager -> com.l2jfrozen.common.thread.RunnableStatsManager:
    java.util.Map _classStats -> _classStats
    void <init>() -> <init>
    com.l2jfrozen.common.thread.RunnableStatsManager$ClassStat getClassStat(java.lang.Class,boolean) -> getClassStat
    void handleStats(java.lang.Class,long) -> handleStats
    void handleStats(java.lang.Class,java.lang.String,long) -> handleStats
    void <clinit>() -> <clinit>
com.l2jfrozen.common.thread.RunnableStatsManager$ClassStat -> com.l2jfrozen.common.thread.RunnableStatsManager$ClassStat:
    java.lang.String[] _methodNames -> _methodNames
    com.l2jfrozen.common.thread.RunnableStatsManager$MethodStat[] _methodStats -> _methodStats
    void <init>(java.lang.Class) -> <init>
    com.l2jfrozen.common.thread.RunnableStatsManager$MethodStat getMethodStat(java.lang.String,boolean) -> getMethodStat
com.l2jfrozen.common.thread.RunnableStatsManager$MethodStat -> com.l2jfrozen.common.thread.RunnableStatsManager$MethodStat:
    java.util.concurrent.locks.ReentrantLock _lock -> _lock
    long _min -> _min
    long _max -> _max
    void <init>() -> <init>
    void handleStats(long) -> handleStats
com.l2jfrozen.common.thread.TaskPriority -> com.l2jfrozen.common.thread.TaskPriority:
    com.l2jfrozen.common.thread.TaskPriority PR_NORMAL -> PR_NORMAL
    com.l2jfrozen.common.thread.TaskPriority PR_HIGH -> PR_HIGH
    com.l2jfrozen.common.thread.TaskPriority PR_URGENT -> PR_URGENT
    com.l2jfrozen.common.thread.TaskPriority[] $VALUES -> $VALUES
    com.l2jfrozen.common.thread.TaskPriority[] values() -> values
    com.l2jfrozen.common.thread.TaskPriority valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.common.thread.ThreadPoolManager -> com.l2jfrozen.common.thread.ThreadPoolManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.concurrent.ScheduledThreadPoolExecutor _effectsScheduledThreadPool -> _effectsScheduledThreadPool
    java.util.concurrent.ScheduledThreadPoolExecutor _generalScheduledThreadPool -> _generalScheduledThreadPool
    java.util.concurrent.ScheduledThreadPoolExecutor _aiScheduledThreadPool -> _aiScheduledThreadPool
    java.util.concurrent.ThreadPoolExecutor _generalPacketsThreadPool -> _generalPacketsThreadPool
    java.util.concurrent.ThreadPoolExecutor _ioPacketsThreadPool -> _ioPacketsThreadPool
    java.util.concurrent.ThreadPoolExecutor _generalThreadPool -> _generalThreadPool
    long MAX_DELAY -> MAX_DELAY
    boolean _shutdown -> _shutdown
    com.l2jfrozen.common.thread.ThreadPoolManager getInstance() -> getInstance
    void <init>() -> <init>
    long validateDelay(long) -> validateDelay
    java.util.concurrent.ScheduledFuture scheduleEffect(java.lang.Runnable,long) -> scheduleEffect
    java.util.concurrent.ScheduledFuture scheduleEffectAtFixedRate(java.lang.Runnable,long,long) -> scheduleEffectAtFixedRate
    boolean removeEffect(java.util.concurrent.RunnableScheduledFuture) -> removeEffect
    java.util.concurrent.ScheduledFuture scheduleGeneral(java.lang.Runnable,long) -> scheduleGeneral
    java.util.concurrent.ScheduledFuture scheduleGeneralAtFixedRate(java.lang.Runnable,long,long) -> scheduleGeneralAtFixedRate
    boolean removeGeneral(java.lang.Runnable) -> removeGeneral
    java.util.concurrent.ScheduledFuture scheduleAi(java.lang.Runnable,long) -> scheduleAi
    java.util.concurrent.ScheduledFuture scheduleAiAtFixedRate(java.lang.Runnable,long,long) -> scheduleAiAtFixedRate
    void executePacket(java.lang.Runnable) -> executePacket
    void executeCommunityPacket(java.lang.Runnable) -> executeCommunityPacket
    void executeIOPacket(java.lang.Runnable) -> executeIOPacket
    void executeTask(java.lang.Runnable) -> executeTask
    void executeAi(java.lang.Runnable) -> executeAi
    java.lang.String[] getStats() -> getStats
    void shutdown() -> shutdown
    boolean isShutdown() -> isShutdown
    void purge() -> purge
    java.lang.String getPacketStats() -> getPacketStats
    java.lang.String getIOPacketStats() -> getIOPacketStats
    java.lang.String getGeneralStats() -> getGeneralStats
    void <init>(com.l2jfrozen.common.thread.ThreadPoolManager$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.common.thread.ThreadPoolManager$1 -> com.l2jfrozen.common.thread.ThreadPoolManager$1:
com.l2jfrozen.common.thread.ThreadPoolManager$PriorityThreadFactory -> com.l2jfrozen.common.thread.ThreadPoolManager$PriorityThreadFactory:
    int _prio -> _prio
    java.lang.String _name -> _name
    java.util.concurrent.atomic.AtomicInteger _threadNumber -> _threadNumber
    java.lang.ThreadGroup _group -> _group
    void <init>(java.lang.String,int) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
    java.lang.ThreadGroup getGroup() -> getGroup
com.l2jfrozen.common.thread.ThreadPoolManager$PurgeTask -> com.l2jfrozen.common.thread.ThreadPoolManager$PurgeTask:
    com.l2jfrozen.common.thread.ThreadPoolManager this$0 -> this$0
    void <init>(com.l2jfrozen.common.thread.ThreadPoolManager) -> <init>
    void run() -> run
com.l2jfrozen.common.thread.ThreadPoolManager$RunnableWrapper -> com.l2jfrozen.common.thread.ThreadPoolManager$RunnableWrapper:
    java.lang.Runnable _r -> _r
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
com.l2jfrozen.common.thread.ThreadPoolManager$SingletonHolder -> com.l2jfrozen.common.thread.ThreadPoolManager$SingletonHolder:
    com.l2jfrozen.common.thread.ThreadPoolManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.CloseUtil -> com.l2jfrozen.common.util.CloseUtil:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void close(java.sql.Connection) -> close
    void close(java.io.Closeable) -> close
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.L2FastList -> com.l2jfrozen.common.util.L2FastList:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean forEach(com.l2jfrozen.common.util.L2FastList$I2ForEach,boolean) -> forEach
    boolean forEachP(com.l2jfrozen.common.util.L2FastList$I2ForEach) -> forEachP
com.l2jfrozen.common.util.L2FastList$I2ForEach -> com.l2jfrozen.common.util.L2FastList$I2ForEach:
    boolean ForEach(java.lang.Object) -> ForEach
    javolution.util.FastList$Node getNext(javolution.util.FastList$Node) -> getNext
com.l2jfrozen.common.util.L2FastMap -> com.l2jfrozen.common.util.L2FastMap:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean ForEach(com.l2jfrozen.common.util.L2FastMap$I2ForEach,boolean) -> ForEach
    boolean forEachP(com.l2jfrozen.common.util.L2FastMap$I2ForEach) -> forEachP
com.l2jfrozen.common.util.L2FastMap$I2ForEach -> com.l2jfrozen.common.util.L2FastMap$I2ForEach:
    boolean forEach(java.lang.Object,java.lang.Object) -> forEach
    javolution.util.FastMap$Entry getNext(javolution.util.FastMap$Entry) -> getNext
com.l2jfrozen.common.util.Memory -> com.l2jfrozen.common.util.Memory:
    void <init>() -> <init>
    long getUsedMemory() -> getUsedMemory
    long getFreeMemory() -> getFreeMemory
    long getTotalMemory() -> getTotalMemory
    java.lang.String getOSName() -> getOSName
    java.lang.String getOSVersion() -> getOSVersion
    java.lang.String getOSArch() -> getOSArch
    int getAvailableProcessors() -> getAvailableProcessors
com.l2jfrozen.common.util.OlympiadLogger -> com.l2jfrozen.common.util.OlympiadLogger:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void add(java.lang.String,java.lang.String) -> add
    void Assert(boolean,java.lang.String) -> Assert
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.Point3D -> com.l2jfrozen.common.util.Point3D:
    long serialVersionUID -> serialVersionUID
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(int,int,int) -> <init>
    void <init>(int,int) -> <init>
    void <init>(com.l2jfrozen.common.util.Point3D) -> <init>
    void setTo(com.l2jfrozen.common.util.Point3D) -> setTo
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean equals(int,int,int) -> equals
    long distanceSquaredTo(com.l2jfrozen.common.util.Point3D) -> distanceSquaredTo
    long distanceSquared(com.l2jfrozen.common.util.Point3D,com.l2jfrozen.common.util.Point3D) -> distanceSquared
    boolean distanceLessThan(com.l2jfrozen.common.util.Point3D,com.l2jfrozen.common.util.Point3D,double) -> distanceLessThan
    int getX() -> getX
    void setX(int) -> setX
    int getY() -> getY
    void setY(int) -> setY
    int getZ() -> getZ
    void setZ(int) -> setZ
    void setXYZ(int,int,int) -> setXYZ
com.l2jfrozen.common.util.PrimeFinder -> com.l2jfrozen.common.util.PrimeFinder:
    int LARGEST_PRIME -> LARGEST_PRIME
    int[] PRIME_CAPACITIES -> PRIME_CAPACITIES
    void <init>() -> <init>
    int nextPrime(int) -> nextPrime
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.StringUtil -> com.l2jfrozen.common.util.StringUtil:
    void <init>() -> <init>
    java.lang.String concat(java.lang.String[]) -> concat
    java.lang.StringBuilder startAppend(int,java.lang.String[]) -> startAppend
    void append(java.lang.StringBuilder,java.lang.String[]) -> append
    int getLength(java.lang.String[]) -> getLength
    java.lang.String getTraceString(java.lang.StackTraceElement[]) -> getTraceString
com.l2jfrozen.common.util.Util -> com.l2jfrozen.common.util.Util:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    boolean isInternalIP(java.lang.String) -> isInternalIP
    java.lang.String printData(byte[],int) -> printData
    java.lang.String fillHex(int,int) -> fillHex
    void printSection(java.lang.String) -> printSection
    java.lang.String printData(byte[]) -> printData
    int convertMinutesToMiliseconds(int) -> convertMinutesToMiliseconds
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.XmlEngine -> com.l2jfrozen.common.util.XmlEngine:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.io.File _file -> _file
    void <init>(java.io.File) -> <init>
    void parseFile() -> parseFile
    void parseDocument(org.w3c.dom.Document) -> parseDocument
    java.util.List parseHeadStandart(org.w3c.dom.Document) -> parseHeadStandart
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.database.ConnectionCloser -> com.l2jfrozen.common.util.database.ConnectionCloser:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.sql.Connection c -> c
    java.lang.RuntimeException exp -> exp
    void <init>(java.sql.Connection,java.lang.RuntimeException) -> <init>
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.database.DatabaseUtils -> com.l2jfrozen.common.util.database.DatabaseUtils:
    void <init>() -> <init>
    void close(java.sql.Connection) -> close
    void close(java.sql.PreparedStatement) -> close
    void close(java.sql.ResultSet) -> close
    void closeDatabaseCSR(java.sql.Connection,java.sql.PreparedStatement,java.sql.ResultSet) -> closeDatabaseCSR
    void closeDatabaseCS(java.sql.Connection,java.sql.PreparedStatement) -> closeDatabaseCS
    void closeDatabaseSR(java.sql.PreparedStatement,java.sql.ResultSet) -> closeDatabaseSR
com.l2jfrozen.common.util.database.L2DatabaseFactory -> com.l2jfrozen.common.util.database.L2DatabaseFactory:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.common.util.database.L2DatabaseFactory _instance -> _instance
    com.l2jfrozen.common.util.database.ProviderType _providerType -> _providerType
    com.l2jfrozen.common.util.database.L2DatabaseFactory getInstance() -> getInstance
    void <init>() -> <init>
    java.lang.String prepQuerySelect(java.lang.String[],java.lang.String,java.lang.String,boolean) -> prepQuerySelect
    java.lang.String safetyString(java.lang.String[]) -> safetyString
    java.sql.Connection getConnection() -> getConnection
    com.l2jfrozen.common.util.database.ProviderType getProviderType() -> getProviderType
    void close(java.sql.Connection) -> close
    void shutdown() -> shutdown
    java.sql.Connection getConnection(boolean) -> getConnection
    java.sql.Connection getConnection(long) -> getConnection
    int getBusyConnectionCount() -> getBusyConnectionCount
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.database.L2DatabaseFactory_c3p0 -> com.l2jfrozen.common.util.database.L2DatabaseFactory_c3p0:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.mchange.v2.c3p0.ComboPooledDataSource _source -> _source
    void <init>() -> <init>
    void shutdown() -> shutdown
    java.sql.Connection getConnection(boolean) -> getConnection
    java.sql.Connection getConnection(long) -> getConnection
    int getBusyConnectionCount() -> getBusyConnectionCount
    int getIdleConnectionCount() -> getIdleConnectionCount
    int getNumConnections() -> getNumConnections
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.database.ProviderType -> com.l2jfrozen.common.util.database.ProviderType:
    com.l2jfrozen.common.util.database.ProviderType MySql -> MySql
    com.l2jfrozen.common.util.database.ProviderType MsSql -> MsSql
    com.l2jfrozen.common.util.database.ProviderType[] $VALUES -> $VALUES
    com.l2jfrozen.common.util.database.ProviderType[] values() -> values
    com.l2jfrozen.common.util.database.ProviderType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.database.SqlUtils -> com.l2jfrozen.common.util.database.SqlUtils:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.common.util.database.SqlUtils _instance -> _instance
    void <init>() -> <init>
    com.l2jfrozen.common.util.database.SqlUtils getInstance() -> getInstance
    java.lang.Integer getIntValue(java.lang.String,java.lang.String,java.lang.String) -> getIntValue
    java.lang.Integer[] getIntArray(java.lang.String,java.lang.String,java.lang.String) -> getIntArray
    java.lang.Integer[][] get2DIntArray(java.lang.String[],java.lang.String,java.lang.String) -> get2DIntArray
    void OpzGame() -> OpzGame
    void OpzLogin() -> OpzLogin
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.monitoring.StatusManager -> com.l2jfrozen.common.util.monitoring.StatusManager:
    java.util.List monitoredStatus -> monitoredStatus
    void <init>() -> <init>
    boolean registerMonitoredStatus(com.l2jfrozen.common.util.monitoring.data.MonitoredStatus) -> registerMonitoredStatus
    boolean unregisterMonitoredStatus(com.l2jfrozen.common.util.monitoring.data.MonitoredStatus) -> unregisterMonitoredStatus
    void logStaticMonitoredStatuses() -> logStaticMonitoredStatuses
    void logCurrentMonitoredStatuses() -> logCurrentMonitoredStatuses
    java.util.List getCurrentMonitoredStatuses() -> getCurrentMonitoredStatuses
    com.l2jfrozen.common.util.monitoring.StatusManager getInstance() -> getInstance
    void <init>(com.l2jfrozen.common.util.monitoring.StatusManager$1) -> <init>
com.l2jfrozen.common.util.monitoring.StatusManager$1 -> com.l2jfrozen.common.util.monitoring.StatusManager$1:
com.l2jfrozen.common.util.monitoring.StatusManager$SingletonHolder -> com.l2jfrozen.common.util.monitoring.StatusManager$SingletonHolder:
    com.l2jfrozen.common.util.monitoring.StatusManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.monitoring.data.MonitoredStatus -> com.l2jfrozen.common.util.monitoring.data.MonitoredStatus:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void refreshStatus() -> refreshStatus
    java.lang.String getStaticStatus() -> getStaticStatus
    java.lang.String getDynamicStatus() -> getDynamicStatus
    void printDynamicStatus() -> printDynamicStatus
    void printStaticStatus() -> printStaticStatus
com.l2jfrozen.common.util.monitoring.data.RuntimeStatus -> com.l2jfrozen.common.util.monitoring.data.RuntimeStatus:
    long serialVersionUID -> serialVersionUID
    java.lang.String systemTime -> systemTime
    int avaibleCPUs -> avaibleCPUs
    java.lang.String processorIdentifier -> processorIdentifier
    java.lang.String os -> os
    java.lang.String osBuild -> osBuild
    java.lang.String osArch -> osArch
    java.lang.String javaRuntimeName -> javaRuntimeName
    java.lang.String javaVersion -> javaVersion
    java.lang.String javaClassVersion -> javaClassVersion
    long currentFreeHeapSize -> currentFreeHeapSize
    long currentHeapSize -> currentHeapSize
    long maximumHeapSize -> maximumHeapSize
    java.lang.String jvmName -> jvmName
    java.lang.String jvmInstallationDirectory -> jvmInstallationDirectory
    java.lang.String jvmVersion -> jvmVersion
    java.lang.String jvmVendor -> jvmVendor
    java.lang.String jvmExtraInfo -> jvmExtraInfo
    void <init>() -> <init>
    java.lang.String getSystemTime() -> getSystemTime
    int getAvaibleCPUs() -> getAvaibleCPUs
    java.lang.String getProcessorIdentifier() -> getProcessorIdentifier
    java.lang.String getOs() -> getOs
    java.lang.String getOsArch() -> getOsArch
    java.lang.String getJavaRuntimeName() -> getJavaRuntimeName
    java.lang.String getJavaVersion() -> getJavaVersion
    java.lang.String getJavaClassVersion() -> getJavaClassVersion
    long getCurrentFreeHeapSize() -> getCurrentFreeHeapSize
    long getCurrentHeapSize() -> getCurrentHeapSize
    long getMaximumHeapSize() -> getMaximumHeapSize
    java.lang.String getJvmName() -> getJvmName
    java.lang.String getJvmInstallationDirectory() -> getJvmInstallationDirectory
    java.lang.String getJvmVersion() -> getJvmVersion
    java.lang.String getJvmVendor() -> getJvmVendor
    java.lang.String getJvmExtraInfo() -> getJvmExtraInfo
    java.lang.String toString() -> toString
    java.lang.String getCpuInfo() -> getCpuInfo
    java.lang.String getOSInfo() -> getOSInfo
    java.lang.String getJreInfo() -> getJreInfo
    java.lang.String getRuntimeInfo() -> getRuntimeInfo
    java.lang.String getSystemTimeInfo() -> getSystemTimeInfo
    java.lang.String getJvmInfo() -> getJvmInfo
    java.lang.String getDynamicStatus() -> getDynamicStatus
    java.lang.String getStaticStatus() -> getStaticStatus
    void refreshStatus() -> refreshStatus
com.l2jfrozen.common.util.monitoring.task.TaskPrintServerStatus -> com.l2jfrozen.common.util.monitoring.task.TaskPrintServerStatus:
    java.lang.String NAME -> NAME
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void onTimeElapsed(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> onTimeElapsed
    void initializate() -> initializate
com.l2jfrozen.common.util.random.NonAtomicRandom -> com.l2jfrozen.common.util.random.NonAtomicRandom:
    long serialVersionUID -> serialVersionUID
    long _seed -> _seed
    void <init>() -> <init>
    void <init>(long) -> <init>
    int next(int) -> next
    void setSeed(long) -> setSeed
com.l2jfrozen.common.util.random.RandomContainer -> com.l2jfrozen.common.util.random.RandomContainer:
    java.util.Random _random -> _random
    void <init>(java.util.Random) -> <init>
    java.util.Random directRandom() -> directRandom
    double get() -> get
    int get(int) -> get
    int get(int,int) -> get
    long get(long,long) -> get
    boolean nextBoolean() -> nextBoolean
    void nextBytes(byte[]) -> nextBytes
    double nextDouble() -> nextDouble
    float nextFloat() -> nextFloat
    double nextGaussian() -> nextGaussian
    int nextInt() -> nextInt
    long nextLong() -> nextLong
com.l2jfrozen.common.util.random.RandomType -> com.l2jfrozen.common.util.random.RandomType:
    com.l2jfrozen.common.util.random.RandomType SECURE -> SECURE
    com.l2jfrozen.common.util.random.RandomType UNSECURE_ATOMIC -> UNSECURE_ATOMIC
    com.l2jfrozen.common.util.random.RandomType UNSECURE_THREAD_LOCAL -> UNSECURE_THREAD_LOCAL
    com.l2jfrozen.common.util.random.RandomType UNSECURE_VOLATILE -> UNSECURE_VOLATILE
    com.l2jfrozen.common.util.random.RandomType[] $VALUES -> $VALUES
    com.l2jfrozen.common.util.random.RandomType[] values() -> values
    com.l2jfrozen.common.util.random.RandomType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.random.Rnd -> com.l2jfrozen.common.util.random.Rnd:
    long ADDEND -> ADDEND
    long MASK -> MASK
    long MULTIPLIER -> MULTIPLIER
    long SEED_UNIQUIFIER -> SEED_UNIQUIFIER
    com.l2jfrozen.common.util.random.RandomContainer rnd -> rnd
    void <init>() -> <init>
    com.l2jfrozen.common.util.random.RandomContainer newInstance(com.l2jfrozen.common.util.random.RandomType) -> newInstance
    java.util.Random directRandom() -> directRandom
    double get() -> get
    int get(int) -> get
    int get(int,int) -> get
    long get(long,long) -> get
    boolean nextBoolean() -> nextBoolean
    void nextBytes(byte[]) -> nextBytes
    double nextDouble() -> nextDouble
    float nextFloat() -> nextFloat
    double nextGaussian() -> nextGaussian
    int nextInt() -> nextInt
    int nextInt(int) -> nextInt
    long nextLong() -> nextLong
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.random.Rnd$1 -> com.l2jfrozen.common.util.random.Rnd$1:
    int[] $SwitchMap$com$l2jfrozen$common$util$random$RandomType -> $SwitchMap$com$l2jfrozen$common$util$random$RandomType
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.random.ThreadLocalRandom -> com.l2jfrozen.common.util.random.ThreadLocalRandom:
    long serialVersionUID -> serialVersionUID
    java.lang.ThreadLocal _seedLocal -> _seedLocal
    void <init>() -> <init>
    void <init>(long) -> <init>
    int next(int) -> next
    void setSeed(long) -> setSeed
com.l2jfrozen.common.util.random.ThreadLocalRandom$1 -> com.l2jfrozen.common.util.random.ThreadLocalRandom$1:
    com.l2jfrozen.common.util.random.ThreadLocalRandom this$0 -> this$0
    void <init>(com.l2jfrozen.common.util.random.ThreadLocalRandom) -> <init>
    com.l2jfrozen.common.util.random.ThreadLocalRandom$Seed initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.l2jfrozen.common.util.random.ThreadLocalRandom$2 -> com.l2jfrozen.common.util.random.ThreadLocalRandom$2:
    long val$seed -> val$seed
    com.l2jfrozen.common.util.random.ThreadLocalRandom this$0 -> this$0
    void <init>(com.l2jfrozen.common.util.random.ThreadLocalRandom,long) -> <init>
    com.l2jfrozen.common.util.random.ThreadLocalRandom$Seed initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.l2jfrozen.common.util.random.ThreadLocalRandom$Seed -> com.l2jfrozen.common.util.random.ThreadLocalRandom$Seed:
    long _seed -> _seed
    com.l2jfrozen.common.util.random.ThreadLocalRandom this$0 -> this$0
    void <init>(com.l2jfrozen.common.util.random.ThreadLocalRandom,long) -> <init>
    int next(int) -> next
    void setSeed(long) -> setSeed
com.l2jfrozen.common.util.taskmanager.ExclusiveTask -> com.l2jfrozen.common.util.taskmanager.ExclusiveTask:
    boolean _returnIfAlreadyRunning -> _returnIfAlreadyRunning
    java.util.concurrent.Future _future -> _future
    boolean _isRunning -> _isRunning
    java.lang.Thread _currentThread -> _currentThread
    java.lang.Runnable _runnable -> _runnable
    void <init>(boolean) -> <init>
    void <init>() -> <init>
    boolean isScheduled() -> isScheduled
    void cancel() -> cancel
    void schedule(long) -> schedule
    void execute() -> execute
    void scheduleAtFixedRate(long,long) -> scheduleAtFixedRate
    void onElapsed() -> onElapsed
    boolean tryLock() -> tryLock
    void unlock() -> unlock
com.l2jfrozen.common.util.taskmanager.ExclusiveTask$1 -> com.l2jfrozen.common.util.taskmanager.ExclusiveTask$1:
    com.l2jfrozen.common.util.taskmanager.ExclusiveTask this$0 -> this$0
    void <init>(com.l2jfrozen.common.util.taskmanager.ExclusiveTask) -> <init>
    void run() -> run
com.l2jfrozen.common.util.taskmanager.ExecutedTask -> com.l2jfrozen.common.util.taskmanager.ExecutedTask:
    int id -> id
    long lastActivation -> lastActivation
    com.l2jfrozen.common.util.taskmanager.Task task -> task
    com.l2jfrozen.common.util.taskmanager.TaskTypes type -> type
    java.lang.String[] params -> params
    java.util.concurrent.ScheduledFuture scheduled -> scheduled
    void <init>(com.l2jfrozen.common.util.taskmanager.Task,com.l2jfrozen.common.util.taskmanager.TaskTypes,java.sql.ResultSet) -> <init>
    void run() -> run
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.l2jfrozen.common.util.taskmanager.Task getTask() -> getTask
    com.l2jfrozen.common.util.taskmanager.TaskTypes getType() -> getType
    int getId() -> getId
    java.lang.String[] getParams() -> getParams
    long getLastActivation() -> getLastActivation
    void stopTask() -> stopTask
    void setScheduled(java.util.concurrent.ScheduledFuture) -> setScheduled
com.l2jfrozen.common.util.taskmanager.Task -> com.l2jfrozen.common.util.taskmanager.Task:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void initializate() -> initializate
    java.util.concurrent.ScheduledFuture launchSpecial(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> launchSpecial
    java.lang.String getName() -> getName
    void onTimeElapsed(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> onTimeElapsed
    void onDestroy() -> onDestroy
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.taskmanager.TaskManager -> com.l2jfrozen.common.util.taskmanager.TaskManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.common.util.taskmanager.TaskManager _instance -> _instance
    java.lang.String[] SQL_STATEMENTS -> SQL_STATEMENTS
    javolution.util.FastMap _tasks -> _tasks
    javolution.util.FastList _currentTasks -> _currentTasks
    com.l2jfrozen.common.util.taskmanager.TaskManager getInstance() -> getInstance
    void <init>() -> <init>
    void registerTask(com.l2jfrozen.common.util.taskmanager.Task) -> registerTask
    void startRegisteredTasksPresentOnDB() -> startRegisteredTasksPresentOnDB
    boolean launchTask(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> launchTask
    boolean addUniqueTaskOnDB(java.lang.String,com.l2jfrozen.common.util.taskmanager.TaskTypes,java.lang.String,java.lang.String,java.lang.String) -> addUniqueTaskOnDB
    boolean updateExecutedTaskOnDB(long,int) -> updateExecutedTaskOnDB
    boolean addUniqueTaskOnDB(java.lang.String,com.l2jfrozen.common.util.taskmanager.TaskTypes,java.lang.String,java.lang.String,java.lang.String,long) -> addUniqueTaskOnDB
    boolean addTaskOnDB(java.lang.String,com.l2jfrozen.common.util.taskmanager.TaskTypes,java.lang.String,java.lang.String,java.lang.String) -> addTaskOnDB
    boolean addTaskOnDB(java.lang.String,com.l2jfrozen.common.util.taskmanager.TaskTypes,java.lang.String,java.lang.String,java.lang.String,long) -> addTaskOnDB
    void removeActiveTask(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> removeActiveTask
    void <clinit>() -> <clinit>
com.l2jfrozen.common.util.taskmanager.TaskTypes -> com.l2jfrozen.common.util.taskmanager.TaskTypes:
    com.l2jfrozen.common.util.taskmanager.TaskTypes TYPE_NONE -> TYPE_NONE
    com.l2jfrozen.common.util.taskmanager.TaskTypes TYPE_TIME -> TYPE_TIME
    com.l2jfrozen.common.util.taskmanager.TaskTypes TYPE_SHEDULED -> TYPE_SHEDULED
    com.l2jfrozen.common.util.taskmanager.TaskTypes TYPE_FIXED_SHEDULED -> TYPE_FIXED_SHEDULED
    com.l2jfrozen.common.util.taskmanager.TaskTypes TYPE_GLOBAL_TASK -> TYPE_GLOBAL_TASK
    com.l2jfrozen.common.util.taskmanager.TaskTypes TYPE_STARTUP -> TYPE_STARTUP
    com.l2jfrozen.common.util.taskmanager.TaskTypes TYPE_SPECIAL -> TYPE_SPECIAL
    com.l2jfrozen.common.util.taskmanager.TaskTypes[] $VALUES -> $VALUES
    com.l2jfrozen.common.util.taskmanager.TaskTypes[] values() -> values
    com.l2jfrozen.common.util.taskmanager.TaskTypes valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.deamon.ServerDeamon -> a.a.a:
    java.lang.String trustStoreFileName -> a
    java.lang.String trustStorePassword -> d
    java.lang.String deamonDebug -> e
    java.lang.String checkIpDisabled -> f
    java.lang.String connectionDisabled -> g
    java.lang.String connectionLocalDisabled -> h
    java.lang.String statusServiceDisabled -> i
    java.lang.String checkServiceDisabled -> j
    java.lang.String allowedIp -> k
    void <init>() -> <init>
    boolean checkServerPack() -> a
    java.lang.String getServerInfo() -> getServerInfo
    java.lang.String getServerStatus() -> b
    java.lang.String getRuntimeStatus() -> c
    java.lang.String getBugsReport() -> d
    boolean establishConnection() -> e
    void requestStatusService(java.lang.String,java.lang.String,java.lang.String) -> a
    void requestStatusServiceHttps(java.lang.String,java.lang.String,java.lang.String) -> b
    boolean requestCheckService(java.lang.String) -> a
    boolean requestCheckServiceHttps(java.lang.String) -> b
    java.lang.String sendPost(java.net.HttpURLConnection,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.l2jfrozen.deamon.ServerDeamon$1 -> a.a.b:
    void <init>() -> <init>
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
com.l2jfrozen.deamon.ServerDeamon$2 -> a.a.c:
    void <init>() -> <init>
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
com.l2jfrozen.deamon.ServerDeamon$3 -> a.a.d:
    void <init>() -> <init>
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
com.l2jfrozen.deamon.ServerDeamon$DefaultTrustManager -> a.a.e:
    void <init>() -> <init>
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void <init>(com.l2jfrozen.deamon.ServerDeamon$1) -> <init>
com.l2jfrozen.deamon.ServerDeamonTask -> a.a.f:
    java.lang.String deamonDisabled -> l
    java.lang.String serverCheckDisabled -> m
    java.lang.String serverStatusDisabled -> n
    java.lang.String runtimeStatusDisabled -> o
    java.lang.String bugsReportDisabled -> p
    long activationTime -> q
    long reactivationTime -> r
    boolean active -> active
    java.lang.Thread instance -> s
    void start() -> start
    void <init>() -> <init>
    void run() -> run
    void deactivateTask() -> f
    void <clinit>() -> <clinit>
com.l2jfrozen.deamon.data.DataConverter -> a.a.g:
    com.l2jfrozen.deamon.data.DataConverter instance -> t
    javax.xml.bind.Marshaller marshaller -> u
    void <init>() -> <init>
    com.l2jfrozen.deamon.data.DataConverter getInstance() -> g
    java.lang.String getXML(java.io.Serializable) -> a
com.l2jfrozen.deamon.data.RuntimeStatus -> a.a.h:
    long serialVersionUID -> serialVersionUID
    java.lang.String systemTime -> systemTime
    int avaibleCPUs -> avaibleCPUs
    java.lang.String processorIdentifier -> processorIdentifier
    java.lang.String os -> os
    java.lang.String osBuild -> osBuild
    java.lang.String osArch -> osArch
    java.lang.String javaRuntimeName -> javaRuntimeName
    java.lang.String javaVersion -> javaVersion
    java.lang.String javaClassVersion -> javaClassVersion
    long currentFreeHeapSize -> currentFreeHeapSize
    long currentHeapSize -> currentHeapSize
    long maximumHeapSize -> maximumHeapSize
    java.lang.String jvmName -> jvmName
    java.lang.String jvmInstallationDirectory -> jvmInstallationDirectory
    java.lang.String jvmVersion -> jvmVersion
    java.lang.String jvmVendor -> jvmVendor
    java.lang.String jvmExtraInfo -> jvmExtraInfo
    void <init>() -> <init>
    java.lang.String getSystemTime() -> getSystemTime
    int getAvaibleCPUs() -> getAvaibleCPUs
    java.lang.String getProcessorIdentifier() -> getProcessorIdentifier
    java.lang.String getOs() -> getOs
    java.lang.String getOsArch() -> getOsArch
    java.lang.String getJavaRuntimeName() -> getJavaRuntimeName
    java.lang.String getJavaVersion() -> getJavaVersion
    java.lang.String getJavaClassVersion() -> getJavaClassVersion
    long getCurrentFreeHeapSize() -> getCurrentFreeHeapSize
    long getCurrentHeapSize() -> getCurrentHeapSize
    long getMaximumHeapSize() -> getMaximumHeapSize
    java.lang.String getJvmName() -> getJvmName
    java.lang.String getJvmInstallationDirectory() -> getJvmInstallationDirectory
    java.lang.String getJvmVersion() -> getJvmVersion
    java.lang.String getJvmVendor() -> getJvmVendor
    java.lang.String getJvmExtraInfo() -> getJvmExtraInfo
    java.lang.String getOsBuild() -> h
    void refreshStatus() -> refreshStatus
com.l2jfrozen.deamon.data.ServerConfigStatus -> a.a.i:
    long serialVersionUID -> serialVersionUID
    java.lang.String ServerName -> ServerName
    java.lang.String GameServerIp -> v
    int GameServerPort -> GameServerPort
    float GameServerRate -> GameServerRate
    float GameServerAdenaRate -> GameServerAdenaRate
    java.lang.String GameServerLink -> GameServerLink
    java.lang.String GameServerHopzoneLink -> GameServerHopzoneLink
    java.lang.String GameServerTopzoneLink -> GameServerTopzoneLink
    java.lang.String GameServerL2NetworkLink -> GameServerL2NetworkLink
    java.util.Properties settings -> w
    void <init>() -> <init>
    java.lang.String getServerName() -> getServerName
    java.lang.String getGameServerIp() -> i
    int getGameServerPort() -> getGameServerPort
    float getGameServerRate() -> getGameServerRate
    float getGameServerAdenaRate() -> getGameServerAdenaRate
    java.lang.String getGameServerLink() -> getGameServerLink
    java.lang.String getGameServerHopzoneLink() -> getGameServerHopzoneLink
    java.lang.String getGameServerTopzoneLink() -> getGameServerTopzoneLink
    java.lang.String getGameServerL2NetworkLink() -> getGameServerL2NetworkLink
    long getSerialversionuid() -> getSerialversionuid
    void reloadSettings() -> j
    void refreshStatus() -> refreshStatus
com.l2jfrozen.deamon.data.ServerStatus -> a.a.j:
    long serialVersionUID -> serialVersionUID
    int ActiveClients -> ActiveClients
    void <init>() -> <init>
    int getActiveClients() -> getActiveClients
    void refreshStatus() -> refreshStatus
com.l2jfrozen.deamon.support.DeamonSystem -> a.a.k:
    java.lang.String systemClassName -> A
    java.lang.String printStreamClassName -> B
    void <init>() -> <init>
    void killProcess() -> k
    void info(java.lang.String) -> info
    void error(java.lang.String) -> error
    void setProperty(java.lang.String,java.lang.String) -> setProperty
    java.lang.String getProperty(java.lang.String,java.lang.String) -> getProperty
    void main(java.lang.String[]) -> main
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.GameServer -> com.l2jfrozen.gameserver.GameServer:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.LoginServerThread _loginThread -> _loginThread
    com.l2jfrozen.gameserver.network.L2GamePacketHandler _gamePacketHandler -> _gamePacketHandler
    java.util.Calendar dateTimeServerStarted -> dateTimeServerStarted
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.LoginServerThread -> com.l2jfrozen.gameserver.LoginServerThread:
    org.apache.log4j.Logger LOGGER -> LOGGER
    org.apache.log4j.Logger LOGGER_ACCOUNTING -> LOGGER_ACCOUNTING
    int REVISION -> REVISION
    java.lang.String _hostname -> _hostname
    int _port -> _port
    int _gamePort -> _gamePort
    java.net.Socket _loginSocket -> _loginSocket
    java.io.OutputStream _out -> _out
    com.l2jfrozen.netcore.util.crypt.NewCrypt _blowfish -> _blowfish
    byte[] _hexID -> _hexID
    boolean _acceptAlternate -> _acceptAlternate
    int _requestID -> _requestID
    boolean _reserveHost -> _reserveHost
    int _maxPlayer -> _maxPlayer
    java.util.List _waitingClients -> _waitingClients
    java.util.Map _accountsInGameServer -> _accountsInGameServer
    int _status -> _status
    java.lang.String _serverName -> _serverName
    java.util.List _subnets -> _subnets
    java.util.List _hosts -> _hosts
    void <init>() -> <init>
    void run() -> run
    byte[] generateHex(int) -> generateHex
    void addWaitingClientAndSendRequest(java.lang.String,com.l2jfrozen.gameserver.network.L2GameClient,com.l2jfrozen.netcore.SessionKey) -> addWaitingClientAndSendRequest
    void removeWaitingClient(com.l2jfrozen.gameserver.network.L2GameClient) -> removeWaitingClient
    void sendLogout(java.lang.String) -> sendLogout
    boolean addGameServerLogin(java.lang.String,com.l2jfrozen.gameserver.network.L2GameClient) -> addGameServerLogin
    void sendAccessLevel(java.lang.String,int) -> sendAccessLevel
    void sendClientTracert(java.lang.String,java.lang.String[]) -> sendClientTracert
    java.lang.String hexToString(byte[]) -> hexToString
    void doKickPlayer(java.lang.String) -> doKickPlayer
    void sendPacket(com.l2jfrozen.netcore.util.network.BaseSendablePacket) -> sendPacket
    void setMaxPlayer(int) -> setMaxPlayer
    int getMaxPlayer() -> getMaxPlayer
    void sendServerStatus(int,int) -> sendServerStatus
    void sendServerType() -> sendServerType
    java.lang.String getStatusString() -> getStatusString
    java.lang.String getServerName() -> getServerName
    void setServerStatus(int) -> setServerStatus
    com.l2jfrozen.gameserver.network.L2GameClient getClient(java.lang.String) -> getClient
    com.l2jfrozen.gameserver.LoginServerThread getInstance() -> getInstance
    void saveHexid(int,java.lang.String,java.lang.String) -> saveHexid
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.LoginServerThread$SingletonHolder -> com.l2jfrozen.gameserver.LoginServerThread$SingletonHolder:
    com.l2jfrozen.gameserver.LoginServerThread _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.LoginServerThread$WaitingClient -> com.l2jfrozen.gameserver.LoginServerThread$WaitingClient:
    java.lang.String account -> account
    com.l2jfrozen.gameserver.network.L2GameClient gameClient -> gameClient
    com.l2jfrozen.netcore.SessionKey session -> session
    void <init>(java.lang.String,com.l2jfrozen.gameserver.network.L2GameClient,com.l2jfrozen.netcore.SessionKey) -> <init>
com.l2jfrozen.gameserver.Shutdown -> com.l2jfrozen.gameserver.Shutdown:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.Shutdown _instance -> _instance
    com.l2jfrozen.gameserver.Shutdown _counterInstance -> _counterInstance
    int _secondsShut -> _secondsShut
    int _shutdownMode -> _shutdownMode
    boolean _shutdownStarted -> _shutdownStarted
    int SIGTERM -> SIGTERM
    int GM_SHUTDOWN -> GM_SHUTDOWN
    int GM_RESTART -> GM_RESTART
    int ABORT -> ABORT
    int TASK_SHUTDOWN -> TASK_SHUTDOWN
    int TASK_RESTART -> TASK_RESTART
    int TELL_SHUTDOWN -> TELL_SHUTDOWN
    int TELL_RESTART -> TELL_RESTART
    java.lang.String[] MODE_TEXT -> MODE_TEXT
    void <init>() -> <init>
    void <init>(int,boolean,boolean) -> <init>
    com.l2jfrozen.gameserver.Shutdown getInstance() -> getInstance
    boolean isShutdownStarted() -> isShutdownStarted
    void run() -> run
    void startShutdown(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> startShutdown
    int getCountdown() -> getCountdown
    void abort(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> abort
    void _abort() -> _abort
    void countdown() -> countdown
    void closeServer() -> closeServer
    void saveData() -> saveData
    void saveAllPlayers() -> saveAllPlayers
    void disconnectAllCharacters() -> disconnectAllCharacters
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ShutdownModeType1 -> com.l2jfrozen.gameserver.ShutdownModeType1:
    com.l2jfrozen.gameserver.ShutdownModeType1 SIGTERM -> SIGTERM
    com.l2jfrozen.gameserver.ShutdownModeType1 SHUTDOWN -> SHUTDOWN
    com.l2jfrozen.gameserver.ShutdownModeType1 RESTART -> RESTART
    com.l2jfrozen.gameserver.ShutdownModeType1 ABORT -> ABORT
    com.l2jfrozen.gameserver.ShutdownModeType1 TASK_SHUT -> TASK_SHUT
    com.l2jfrozen.gameserver.ShutdownModeType1 TASK_RES -> TASK_RES
    com.l2jfrozen.gameserver.ShutdownModeType1 TELL_SHUT -> TELL_SHUT
    com.l2jfrozen.gameserver.ShutdownModeType1 TELL_RES -> TELL_RES
    java.lang.String _modeText -> _modeText
    com.l2jfrozen.gameserver.ShutdownModeType1[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.ShutdownModeType1[] values() -> values
    com.l2jfrozen.gameserver.ShutdownModeType1 valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String getText() -> getText
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.AbstractAI -> com.l2jfrozen.gameserver.ai.AbstractAI:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.L2Character _actor -> _actor
    com.l2jfrozen.gameserver.model.L2Character$AIAccessor _accessor -> _accessor
    com.l2jfrozen.gameserver.ai.CtrlIntention _intention -> _intention
    java.lang.Object _intentionArg0 -> _intentionArg0
    java.lang.Object _intentionArg1 -> _intentionArg1
    boolean _clientMoving -> _clientMoving
    boolean _clientAutoAttacking -> _clientAutoAttacking
    int _clientMovingToPawnOffset -> _clientMovingToPawnOffset
    com.l2jfrozen.gameserver.model.L2Object _target -> _target
    com.l2jfrozen.gameserver.model.L2Character _castTarget -> _castTarget
    com.l2jfrozen.gameserver.model.L2Character _attackTarget -> _attackTarget
    com.l2jfrozen.gameserver.model.L2Character _followTarget -> _followTarget
    int _moveToPawnTimeout -> _moveToPawnTimeout
    java.util.concurrent.Future _followTask -> _followTask
    int FOLLOW_INTERVAL -> FOLLOW_INTERVAL
    int ATTACK_FOLLOW_INTERVAL -> ATTACK_FOLLOW_INTERVAL
    void <init>(com.l2jfrozen.gameserver.model.L2Character$AIAccessor) -> <init>
    com.l2jfrozen.gameserver.model.L2Character getActor() -> getActor
    void changeIntention(com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object,java.lang.Object) -> changeIntention
    void setIntention(com.l2jfrozen.gameserver.ai.CtrlIntention) -> setIntention
    void setIntention(com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object) -> setIntention
    void setIntention(com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object,java.lang.Object) -> setIntention
    void notifyEvent(com.l2jfrozen.gameserver.ai.CtrlEvent) -> notifyEvent
    void notifyEvent(com.l2jfrozen.gameserver.ai.CtrlEvent,java.lang.Object) -> notifyEvent
    void notifyEvent(com.l2jfrozen.gameserver.ai.CtrlEvent,java.lang.Object,java.lang.Object) -> notifyEvent
    void onIntentionIdle() -> onIntentionIdle
    void onIntentionActive() -> onIntentionActive
    void onIntentionRest() -> onIntentionRest
    void onIntentionAttack(com.l2jfrozen.gameserver.model.L2Character) -> onIntentionAttack
    void onIntentionCast(com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object) -> onIntentionCast
    void onIntentionMoveTo(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> onIntentionMoveTo
    void onIntentionMoveToInABoat(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition,com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> onIntentionMoveToInABoat
    void onIntentionFollow(com.l2jfrozen.gameserver.model.L2Character) -> onIntentionFollow
    void onIntentionPickUp(com.l2jfrozen.gameserver.model.L2Object) -> onIntentionPickUp
    void onIntentionInteract(com.l2jfrozen.gameserver.model.L2Object) -> onIntentionInteract
    void onEvtThink() -> onEvtThink
    void onEvtAttacked(com.l2jfrozen.gameserver.model.L2Character) -> onEvtAttacked
    void onEvtAggression(com.l2jfrozen.gameserver.model.L2Character,int) -> onEvtAggression
    void onEvtStunned(com.l2jfrozen.gameserver.model.L2Character) -> onEvtStunned
    void onEvtSleeping(com.l2jfrozen.gameserver.model.L2Character) -> onEvtSleeping
    void onEvtRooted(com.l2jfrozen.gameserver.model.L2Character) -> onEvtRooted
    void onEvtConfused(com.l2jfrozen.gameserver.model.L2Character) -> onEvtConfused
    void onEvtMuted(com.l2jfrozen.gameserver.model.L2Character) -> onEvtMuted
    void onEvtReadyToAct() -> onEvtReadyToAct
    void onEvtUserCmd(java.lang.Object,java.lang.Object) -> onEvtUserCmd
    void onEvtArrived() -> onEvtArrived
    void onEvtArrivedRevalidate() -> onEvtArrivedRevalidate
    void onEvtArrivedBlocked(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> onEvtArrivedBlocked
    void onEvtForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> onEvtForgetObject
    void onEvtCancel() -> onEvtCancel
    void onEvtDead() -> onEvtDead
    void onEvtFakeDeath() -> onEvtFakeDeath
    void onEvtFinishCasting() -> onEvtFinishCasting
    void clientActionFailed() -> clientActionFailed
    void moveToPawn(com.l2jfrozen.gameserver.model.L2Object,int) -> moveToPawn
    void moveTo(int,int,int) -> moveTo
    void moveToInABoat(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition,com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> moveToInABoat
    void clientStopMoving(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> clientStopMoving
    void clientStoppedMoving() -> clientStoppedMoving
    void clientStartAutoAttack() -> clientStartAutoAttack
    void clientStopAutoAttack() -> clientStopAutoAttack
    void clientNotifyDead() -> clientNotifyDead
    void describeStateToPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> describeStateToPlayer
    void startFollow(com.l2jfrozen.gameserver.model.L2Character) -> startFollow
    void startFollow(com.l2jfrozen.gameserver.model.L2Character,int) -> startFollow
    void stopFollow() -> stopFollow
    com.l2jfrozen.gameserver.model.L2Character getFollowTarget() -> getFollowTarget
    com.l2jfrozen.gameserver.model.L2Object getTarget() -> getTarget
    void setTarget(com.l2jfrozen.gameserver.model.L2Object) -> setTarget
    void setCastTarget(com.l2jfrozen.gameserver.model.L2Character) -> setCastTarget
    com.l2jfrozen.gameserver.model.L2Character getCastTarget() -> getCastTarget
    void setAttackTarget(com.l2jfrozen.gameserver.model.L2Character) -> setAttackTarget
    com.l2jfrozen.gameserver.model.L2Character getAttackTarget() -> getAttackTarget
    boolean isAutoAttacking() -> isAutoAttacking
    void setAutoAttacking(boolean) -> setAutoAttacking
    java.lang.Object get_intentionArg0() -> get_intentionArg0
    void set_intentionArg0(java.lang.Object) -> set_intentionArg0
    java.lang.Object get_intentionArg1() -> get_intentionArg1
    void set_intentionArg1(java.lang.Object) -> set_intentionArg1
    com.l2jfrozen.gameserver.ai.CtrlIntention getIntention() -> getIntention
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.AbstractAI$1 -> com.l2jfrozen.gameserver.ai.AbstractAI$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$ai$CtrlIntention -> $SwitchMap$com$l2jfrozen$gameserver$ai$CtrlIntention
    int[] $SwitchMap$com$l2jfrozen$gameserver$ai$CtrlEvent -> $SwitchMap$com$l2jfrozen$gameserver$ai$CtrlEvent
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.AbstractAI$FollowTask -> com.l2jfrozen.gameserver.ai.AbstractAI$FollowTask:
    int _range -> _range
    boolean newtask -> newtask
    com.l2jfrozen.gameserver.ai.AbstractAI this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.AbstractAI) -> <init>
    void <init>(com.l2jfrozen.gameserver.ai.AbstractAI,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.Ctrl -> com.l2jfrozen.gameserver.ai.Ctrl:
    com.l2jfrozen.gameserver.model.L2Character getActor() -> getActor
    com.l2jfrozen.gameserver.ai.CtrlIntention getIntention() -> getIntention
    com.l2jfrozen.gameserver.model.L2Character getAttackTarget() -> getAttackTarget
    void setIntention(com.l2jfrozen.gameserver.ai.CtrlIntention) -> setIntention
    void setIntention(com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object) -> setIntention
    void setIntention(com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object,java.lang.Object) -> setIntention
    void notifyEvent(com.l2jfrozen.gameserver.ai.CtrlEvent) -> notifyEvent
    void notifyEvent(com.l2jfrozen.gameserver.ai.CtrlEvent,java.lang.Object) -> notifyEvent
    void notifyEvent(com.l2jfrozen.gameserver.ai.CtrlEvent,java.lang.Object,java.lang.Object) -> notifyEvent
com.l2jfrozen.gameserver.ai.CtrlEvent -> com.l2jfrozen.gameserver.ai.CtrlEvent:
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_THINK -> EVT_THINK
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_ATTACKED -> EVT_ATTACKED
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_AGGRESSION -> EVT_AGGRESSION
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_STUNNED -> EVT_STUNNED
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_SLEEPING -> EVT_SLEEPING
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_ROOTED -> EVT_ROOTED
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_READY_TO_ACT -> EVT_READY_TO_ACT
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_USER_CMD -> EVT_USER_CMD
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_ARRIVED -> EVT_ARRIVED
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_ARRIVED_REVALIDATE -> EVT_ARRIVED_REVALIDATE
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_ARRIVED_BLOCKED -> EVT_ARRIVED_BLOCKED
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_FORGET_OBJECT -> EVT_FORGET_OBJECT
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_CANCEL -> EVT_CANCEL
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_DEAD -> EVT_DEAD
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_FAKE_DEATH -> EVT_FAKE_DEATH
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_CONFUSED -> EVT_CONFUSED
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_MUTED -> EVT_MUTED
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_AFFRAID -> EVT_AFFRAID
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_FINISH_CASTING -> EVT_FINISH_CASTING
    com.l2jfrozen.gameserver.ai.CtrlEvent EVT_BETRAYED -> EVT_BETRAYED
    com.l2jfrozen.gameserver.ai.CtrlEvent[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.ai.CtrlEvent[] values() -> values
    com.l2jfrozen.gameserver.ai.CtrlEvent valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.CtrlIntention -> com.l2jfrozen.gameserver.ai.CtrlIntention:
    com.l2jfrozen.gameserver.ai.CtrlIntention AI_INTENTION_IDLE -> AI_INTENTION_IDLE
    com.l2jfrozen.gameserver.ai.CtrlIntention AI_INTENTION_ACTIVE -> AI_INTENTION_ACTIVE
    com.l2jfrozen.gameserver.ai.CtrlIntention AI_INTENTION_REST -> AI_INTENTION_REST
    com.l2jfrozen.gameserver.ai.CtrlIntention AI_INTENTION_ATTACK -> AI_INTENTION_ATTACK
    com.l2jfrozen.gameserver.ai.CtrlIntention AI_INTENTION_CAST -> AI_INTENTION_CAST
    com.l2jfrozen.gameserver.ai.CtrlIntention AI_INTENTION_MOVE_TO -> AI_INTENTION_MOVE_TO
    com.l2jfrozen.gameserver.ai.CtrlIntention AI_INTENTION_FOLLOW -> AI_INTENTION_FOLLOW
    com.l2jfrozen.gameserver.ai.CtrlIntention AI_INTENTION_PICK_UP -> AI_INTENTION_PICK_UP
    com.l2jfrozen.gameserver.ai.CtrlIntention AI_INTENTION_INTERACT -> AI_INTENTION_INTERACT
    com.l2jfrozen.gameserver.ai.CtrlIntention AI_INTENTION_MOVE_TO_IN_A_BOAT -> AI_INTENTION_MOVE_TO_IN_A_BOAT
    com.l2jfrozen.gameserver.ai.CtrlIntention[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.ai.CtrlIntention[] values() -> values
    com.l2jfrozen.gameserver.ai.CtrlIntention valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.L2AttackableAI -> com.l2jfrozen.gameserver.ai.L2AttackableAI:
    int RANDOM_WALK_RATE -> RANDOM_WALK_RATE
    int MAX_ATTACK_TIMEOUT -> MAX_ATTACK_TIMEOUT
    java.util.concurrent.Future _aiTask -> _aiTask
    int _attackTimeout -> _attackTimeout
    int _globalAggro -> _globalAggro
    boolean _thinking -> _thinking
    void <init>(com.l2jfrozen.gameserver.model.L2Character$AIAccessor) -> <init>
    void run() -> run
    boolean autoAttackCondition(com.l2jfrozen.gameserver.model.L2Character) -> autoAttackCondition
    void startAITask() -> startAITask
    void stopAITask() -> stopAITask
    void onEvtDead() -> onEvtDead
    void changeIntention(com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object,java.lang.Object) -> changeIntention
    void onIntentionAttack(com.l2jfrozen.gameserver.model.L2Character) -> onIntentionAttack
    void thinkActive() -> thinkActive
    void thinkAttack() -> thinkAttack
    void onEvtThink() -> onEvtThink
    void onEvtAttacked(com.l2jfrozen.gameserver.model.L2Character) -> onEvtAttacked
    void onEvtAggression(com.l2jfrozen.gameserver.model.L2Character,int) -> onEvtAggression
    void onIntentionActive() -> onIntentionActive
    void setGlobalAggro(int) -> setGlobalAggro
com.l2jfrozen.gameserver.ai.L2CharacterAI -> com.l2jfrozen.gameserver.ai.L2CharacterAI:
    int ZONE_PVP -> ZONE_PVP
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    void onEvtAttacked(com.l2jfrozen.gameserver.model.L2Character) -> onEvtAttacked
    void <init>(com.l2jfrozen.gameserver.model.L2Character$AIAccessor) -> <init>
    void onIntentionIdle() -> onIntentionIdle
    void onIntentionActive(com.l2jfrozen.gameserver.model.L2Character) -> onIntentionActive
    void onIntentionRest() -> onIntentionRest
    void onIntentionAttack(com.l2jfrozen.gameserver.model.L2Character) -> onIntentionAttack
    void onIntentionCast(com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object) -> onIntentionCast
    void onIntentionMoveTo(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> onIntentionMoveTo
    void onIntentionMoveToInABoat(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition,com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> onIntentionMoveToInABoat
    void onIntentionFollow(com.l2jfrozen.gameserver.model.L2Character) -> onIntentionFollow
    void onIntentionPickUp(com.l2jfrozen.gameserver.model.L2Object) -> onIntentionPickUp
    void onIntentionInteract(com.l2jfrozen.gameserver.model.L2Object) -> onIntentionInteract
    void onEvtThink() -> onEvtThink
    void onEvtAggression(com.l2jfrozen.gameserver.model.L2Character,int) -> onEvtAggression
    void onEvtStunned(com.l2jfrozen.gameserver.model.L2Character) -> onEvtStunned
    void onEvtSleeping(com.l2jfrozen.gameserver.model.L2Character) -> onEvtSleeping
    void onEvtRooted(com.l2jfrozen.gameserver.model.L2Character) -> onEvtRooted
    void onEvtConfused(com.l2jfrozen.gameserver.model.L2Character) -> onEvtConfused
    void onEvtMuted(com.l2jfrozen.gameserver.model.L2Character) -> onEvtMuted
    void onEvtReadyToAct() -> onEvtReadyToAct
    void onEvtUserCmd(java.lang.Object,java.lang.Object) -> onEvtUserCmd
    void onEvtArrived() -> onEvtArrived
    void onEvtArrivedRevalidate() -> onEvtArrivedRevalidate
    void onEvtArrivedBlocked(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> onEvtArrivedBlocked
    void onEvtForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> onEvtForgetObject
    void onEvtCancel() -> onEvtCancel
    void onEvtDead() -> onEvtDead
    void onEvtFakeDeath() -> onEvtFakeDeath
    void onEvtFinishCasting() -> onEvtFinishCasting
    boolean maybeMoveToPawn(com.l2jfrozen.gameserver.model.L2Object,int) -> maybeMoveToPawn
    boolean checkTargetLostOrDead(com.l2jfrozen.gameserver.model.L2Character) -> checkTargetLostOrDead
    boolean checkTargetLost(com.l2jfrozen.gameserver.model.L2Object) -> checkTargetLost
    void onIntentionActive() -> onIntentionActive
    com.l2jfrozen.gameserver.model.L2Skill get_skill() -> get_skill
    void set_skill(com.l2jfrozen.gameserver.model.L2Skill) -> set_skill
    com.l2jfrozen.gameserver.ai.L2PlayerAI$IntentionCommand getNextIntention() -> getNextIntention
    com.l2jfrozen.gameserver.ai.CtrlIntention getIntention() -> getIntention
    void set_intentionArg1(java.lang.Object) -> set_intentionArg1
    java.lang.Object get_intentionArg1() -> get_intentionArg1
    void set_intentionArg0(java.lang.Object) -> set_intentionArg0
    java.lang.Object get_intentionArg0() -> get_intentionArg0
    void setAutoAttacking(boolean) -> setAutoAttacking
    boolean isAutoAttacking() -> isAutoAttacking
    com.l2jfrozen.gameserver.model.L2Character getAttackTarget() -> getAttackTarget
    com.l2jfrozen.gameserver.model.L2Character getCastTarget() -> getCastTarget
    void stopFollow() -> stopFollow
    void startFollow(com.l2jfrozen.gameserver.model.L2Character,int) -> startFollow
    void startFollow(com.l2jfrozen.gameserver.model.L2Character) -> startFollow
    void describeStateToPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> describeStateToPlayer
    void clientStopAutoAttack() -> clientStopAutoAttack
    void clientStartAutoAttack() -> clientStartAutoAttack
    void moveTo(int,int,int) -> moveTo
    void moveToPawn(com.l2jfrozen.gameserver.model.L2Object,int) -> moveToPawn
    void changeIntention(com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object,java.lang.Object) -> changeIntention
    com.l2jfrozen.gameserver.model.L2Character getActor() -> getActor
com.l2jfrozen.gameserver.ai.L2ControllableMobAI -> com.l2jfrozen.gameserver.ai.L2ControllableMobAI:
    int AI_IDLE -> AI_IDLE
    int AI_NORMAL -> AI_NORMAL
    int AI_FORCEATTACK -> AI_FORCEATTACK
    int AI_FOLLOW -> AI_FOLLOW
    int AI_CAST -> AI_CAST
    int AI_ATTACK_GROUP -> AI_ATTACK_GROUP
    int _alternateAI -> _alternateAI
    boolean _isThinking -> _isThinking
    boolean _isNotMoving -> _isNotMoving
    com.l2jfrozen.gameserver.model.L2Character _forcedTarget -> _forcedTarget
    com.l2jfrozen.gameserver.model.MobGroup _targetGroup -> _targetGroup
    void thinkFollow() -> thinkFollow
    void onEvtThink() -> onEvtThink
    void thinkCast() -> thinkCast
    void thinkAttackGroup() -> thinkAttackGroup
    void thinkForceAttack() -> thinkForceAttack
    void thinkAttack() -> thinkAttack
    void thinkActive() -> thinkActive
    boolean autoAttackCondition(com.l2jfrozen.gameserver.model.L2Character) -> autoAttackCondition
    com.l2jfrozen.gameserver.model.L2Character findNextRndTarget() -> findNextRndTarget
    com.l2jfrozen.gameserver.model.actor.instance.L2ControllableMobInstance findNextGroupTarget() -> findNextGroupTarget
    void <init>(com.l2jfrozen.gameserver.model.L2Character$AIAccessor) -> <init>
    int getAlternateAI() -> getAlternateAI
    void setAlternateAI(int) -> setAlternateAI
    void forceAttack(com.l2jfrozen.gameserver.model.L2Character) -> forceAttack
    void forceAttackGroup(com.l2jfrozen.gameserver.model.MobGroup) -> forceAttackGroup
    void stop() -> stop
    void move(int,int,int) -> move
    void follow(com.l2jfrozen.gameserver.model.L2Character) -> follow
    boolean isThinking() -> isThinking
    boolean isNotMoving() -> isNotMoving
    void setNotMoving(boolean) -> setNotMoving
    void setThinking(boolean) -> setThinking
    com.l2jfrozen.gameserver.model.L2Character getForcedTarget() -> getForcedTarget
    com.l2jfrozen.gameserver.model.MobGroup getGroupTarget() -> getGroupTarget
    void setForcedTarget(com.l2jfrozen.gameserver.model.L2Character) -> setForcedTarget
    void setGroupTarget(com.l2jfrozen.gameserver.model.MobGroup) -> setGroupTarget
com.l2jfrozen.gameserver.ai.L2DoorAI -> com.l2jfrozen.gameserver.ai.L2DoorAI:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance$AIAccessor) -> <init>
    void onIntentionIdle() -> onIntentionIdle
    void onIntentionActive() -> onIntentionActive
    void onIntentionRest() -> onIntentionRest
    void onIntentionAttack(com.l2jfrozen.gameserver.model.L2Character) -> onIntentionAttack
    void onIntentionCast(com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object) -> onIntentionCast
    void onIntentionMoveTo(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> onIntentionMoveTo
    void onIntentionFollow(com.l2jfrozen.gameserver.model.L2Character) -> onIntentionFollow
    void onIntentionPickUp(com.l2jfrozen.gameserver.model.L2Object) -> onIntentionPickUp
    void onIntentionInteract(com.l2jfrozen.gameserver.model.L2Object) -> onIntentionInteract
    void onEvtThink() -> onEvtThink
    void onEvtAttacked(com.l2jfrozen.gameserver.model.L2Character) -> onEvtAttacked
    void onEvtAggression(com.l2jfrozen.gameserver.model.L2Character,int) -> onEvtAggression
    void onEvtStunned(com.l2jfrozen.gameserver.model.L2Character) -> onEvtStunned
    void onEvtSleeping(com.l2jfrozen.gameserver.model.L2Character) -> onEvtSleeping
    void onEvtRooted(com.l2jfrozen.gameserver.model.L2Character) -> onEvtRooted
    void onEvtReadyToAct() -> onEvtReadyToAct
    void onEvtUserCmd(java.lang.Object,java.lang.Object) -> onEvtUserCmd
    void onEvtArrived() -> onEvtArrived
    void onEvtArrivedRevalidate() -> onEvtArrivedRevalidate
    void onEvtArrivedBlocked(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> onEvtArrivedBlocked
    void onEvtForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> onEvtForgetObject
    void onEvtCancel() -> onEvtCancel
    void onEvtDead() -> onEvtDead
com.l2jfrozen.gameserver.ai.L2DoorAI$onEventAttackedDoorTask -> com.l2jfrozen.gameserver.ai.L2DoorAI$onEventAttackedDoorTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance _door -> _door
    com.l2jfrozen.gameserver.model.L2Character _attacker -> _attacker
    com.l2jfrozen.gameserver.ai.L2DoorAI this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.L2DoorAI,com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance,com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.L2FortSiegeGuardAI -> com.l2jfrozen.gameserver.ai.L2FortSiegeGuardAI:
    org.apache.log4j.Logger _log1 -> _log1
    java.util.List pdamSkills -> pdamSkills
    java.util.List mdamSkills -> mdamSkills
    java.util.List healSkills -> healSkills
    java.util.List rootSkills -> rootSkills
    boolean hasPDam -> hasPDam
    boolean hasMDam -> hasMDam
    boolean hasHeal -> hasHeal
    boolean hasRoot -> hasRoot
    int MAX_ATTACK_TIMEOUT -> MAX_ATTACK_TIMEOUT
    java.util.concurrent.Future _aiTask -> _aiTask
    int _attackTimeout -> _attackTimeout
    int _globalAggro -> _globalAggro
    boolean _thinking -> _thinking
    int _attackRange -> _attackRange
    void <init>(com.l2jfrozen.gameserver.model.L2Character$AIAccessor) -> <init>
    void run() -> run
    boolean autoAttackCondition(com.l2jfrozen.gameserver.model.L2Character) -> autoAttackCondition
    void changeIntention(com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object,java.lang.Object) -> changeIntention
    void onIntentionAttack(com.l2jfrozen.gameserver.model.L2Character) -> onIntentionAttack
    void thinkActive() -> thinkActive
    void thinkAttack() -> thinkAttack
    void factionNotifyAndSupport() -> factionNotifyAndSupport
    void attackPrepare() -> attackPrepare
    void onEvtThink() -> onEvtThink
    void onEvtAttacked(com.l2jfrozen.gameserver.model.L2Character) -> onEvtAttacked
    void onEvtAggression(com.l2jfrozen.gameserver.model.L2Character,int) -> onEvtAggression
    void onEvtDead() -> onEvtDead
    void stopAITask() -> stopAITask
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.L2FortSiegeGuardAI$1 -> com.l2jfrozen.gameserver.ai.L2FortSiegeGuardAI$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.L2NpcWalkerAI -> com.l2jfrozen.gameserver.ai.L2NpcWalkerAI:
    int DEFAULT_MOVE_DELAY -> DEFAULT_MOVE_DELAY
    long _nextMoveTime -> _nextMoveTime
    boolean _walkingToNextPoint -> _walkingToNextPoint
    int _homeX -> _homeX
    int _homeY -> _homeY
    int _homeZ -> _homeZ
    javolution.util.FastList _route -> _route
    int _currentPos -> _currentPos
    void <init>(com.l2jfrozen.gameserver.model.L2Character$AIAccessor) -> <init>
    void run() -> run
    void onEvtThink() -> onEvtThink
    void onEvtArrivedBlocked(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> onEvtArrivedBlocked
    void checkArrived() -> checkArrived
    void walkToLocation() -> walkToLocation
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcWalkerInstance getActor() -> getActor
    int getHomeX() -> getHomeX
    int getHomeY() -> getHomeY
    int getHomeZ() -> getHomeZ
    void setHomeX(int) -> setHomeX
    void setHomeY(int) -> setHomeY
    void setHomeZ(int) -> setHomeZ
    boolean isWalkingToNextPoint() -> isWalkingToNextPoint
    void setWalkingToNextPoint(boolean) -> setWalkingToNextPoint
    com.l2jfrozen.gameserver.model.L2Character getActor() -> getActor
com.l2jfrozen.gameserver.ai.L2PlayerAI -> com.l2jfrozen.gameserver.ai.L2PlayerAI:
    boolean _thinking -> _thinking
    java.util.Stack _interuptedIntentions -> _interuptedIntentions
    java.util.Stack getInterruptedIntentions() -> getInterruptedIntentions
    void <init>(com.l2jfrozen.gameserver.model.L2Character$AIAccessor) -> <init>
    void changeIntention(com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object,java.lang.Object) -> changeIntention
    void onEvtFinishCasting() -> onEvtFinishCasting
    void onIntentionRest() -> onIntentionRest
    void clientStopMoving(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> clientStopMoving
    void onIntentionActive() -> onIntentionActive
    void clientNotifyDead() -> clientNotifyDead
    void thinkAttack() -> thinkAttack
    void thinkCast() -> thinkCast
    void thinkPickUp() -> thinkPickUp
    void thinkInteract() -> thinkInteract
    void onEvtThink() -> onEvtThink
    void onEvtArrivedRevalidate() -> onEvtArrivedRevalidate
com.l2jfrozen.gameserver.ai.L2PlayerAI$IntentionCommand -> com.l2jfrozen.gameserver.ai.L2PlayerAI$IntentionCommand:
    com.l2jfrozen.gameserver.ai.CtrlIntention _crtlIntention -> _crtlIntention
    java.lang.Object _arg0 -> _arg0
    java.lang.Object _arg1 -> _arg1
    com.l2jfrozen.gameserver.ai.L2PlayerAI this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.L2PlayerAI,com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object,java.lang.Object) -> <init>
com.l2jfrozen.gameserver.ai.L2SiegeGuardAI -> com.l2jfrozen.gameserver.ai.L2SiegeGuardAI:
    int MAX_ATTACK_TIMEOUT -> MAX_ATTACK_TIMEOUT
    java.util.concurrent.Future _aiTask -> _aiTask
    int _attackTimeout -> _attackTimeout
    int _globalAggro -> _globalAggro
    boolean _thinking -> _thinking
    int _attackRange -> _attackRange
    void <init>(com.l2jfrozen.gameserver.model.L2Character$AIAccessor) -> <init>
    void run() -> run
    boolean autoAttackCondition(com.l2jfrozen.gameserver.model.L2Character) -> autoAttackCondition
    void changeIntention(com.l2jfrozen.gameserver.ai.CtrlIntention,java.lang.Object,java.lang.Object) -> changeIntention
    void onIntentionAttack(com.l2jfrozen.gameserver.model.L2Character) -> onIntentionAttack
    void thinkActive() -> thinkActive
    void attackPrepare() -> attackPrepare
    void thinkAttack() -> thinkAttack
    void factionNotify() -> factionNotify
    void onEvtThink() -> onEvtThink
    void onEvtAttacked(com.l2jfrozen.gameserver.model.L2Character) -> onEvtAttacked
    void onEvtAggression(com.l2jfrozen.gameserver.model.L2Character,int) -> onEvtAggression
    void onEvtDead() -> onEvtDead
    void stopAITask() -> stopAITask
com.l2jfrozen.gameserver.ai.L2SummonAI -> com.l2jfrozen.gameserver.ai.L2SummonAI:
    boolean _thinking -> _thinking
    com.l2jfrozen.gameserver.model.L2Summon summon -> summon
    void <init>(com.l2jfrozen.gameserver.model.L2Character$AIAccessor) -> <init>
    void onIntentionIdle() -> onIntentionIdle
    void onIntentionActive() -> onIntentionActive
    void thinkAttack() -> thinkAttack
    void thinkCast() -> thinkCast
    void thinkPickUp() -> thinkPickUp
    void thinkInteract() -> thinkInteract
    void onEvtThink() -> onEvtThink
    void onEvtFinishCasting() -> onEvtFinishCasting
com.l2jfrozen.gameserver.ai.special.Antharas -> com.l2jfrozen.gameserver.ai.special.Antharas:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int FWA_ACTIVITYTIMEOFANTHARAS -> FWA_ACTIVITYTIMEOFANTHARAS
    boolean FWA_OLDANTHARAS -> FWA_OLDANTHARAS
    boolean FWA_MOVEATRANDOM -> FWA_MOVEATRANDOM
    boolean FWA_DOSERVEREARTHQUAKE -> FWA_DOSERVEREARTHQUAKE
    int FWA_LIMITOFWEAK -> FWA_LIMITOFWEAK
    int FWA_LIMITOFNORMAL -> FWA_LIMITOFNORMAL
    int FWA_MAXMOBS -> FWA_MAXMOBS
    int FWA_INTERVALOFMOBSWEAK -> FWA_INTERVALOFMOBSWEAK
    int FWA_INTERVALOFMOBSNORMAL -> FWA_INTERVALOFMOBSNORMAL
    int FWA_INTERVALOFMOBSSTRONG -> FWA_INTERVALOFMOBSSTRONG
    int FWA_PERCENTOFBEHEMOTH -> FWA_PERCENTOFBEHEMOTH
    int FWA_SELFDESTRUCTTIME -> FWA_SELFDESTRUCTTIME
    int _teleportCubeId -> _teleportCubeId
    int[][] _teleportCubeLocation -> _teleportCubeLocation
    java.util.List _teleportCubeSpawn -> _teleportCubeSpawn
    java.util.List _teleportCube -> _teleportCube
    java.util.HashMap _monsterSpawn -> _monsterSpawn
    java.util.List _monsters -> _monsters
    com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance _antharas -> _antharas
    int ANTHARASOLDID -> ANTHARASOLDID
    int ANTHARASWEAKID -> ANTHARASWEAKID
    int ANTHARASNORMALID -> ANTHARASNORMALID
    int ANTHARASSTRONGID -> ANTHARASSTRONGID
    java.util.concurrent.ScheduledFuture _cubeSpawnTask -> _cubeSpawnTask
    java.util.concurrent.ScheduledFuture _monsterSpawnTask -> _monsterSpawnTask
    java.util.concurrent.ScheduledFuture _activityCheckTask -> _activityCheckTask
    java.util.concurrent.ScheduledFuture _socialTask -> _socialTask
    java.util.concurrent.ScheduledFuture _mobiliseTask -> _mobiliseTask
    java.util.concurrent.ScheduledFuture _mobsSpawnTask -> _mobsSpawnTask
    java.util.concurrent.ScheduledFuture _selfDestructionTask -> _selfDestructionTask
    java.util.concurrent.ScheduledFuture _moveAtRandomTask -> _moveAtRandomTask
    java.util.concurrent.ScheduledFuture _movieTask -> _movieTask
    int DORMANT -> DORMANT
    int WAITING -> WAITING
    int FIGHTING -> FIGHTING
    int DEAD -> DEAD
    long _LastAction -> _LastAction
    com.l2jfrozen.gameserver.model.zone.type.L2BossZone _Zone -> _Zone
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    void init() -> init
    void spawnCube() -> spawnCube
    void setAntharasSpawnTask() -> setAntharasSpawnTask
    void startMinionSpawns(int) -> startMinionSpawns
    void broadcastPacket(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastPacket
    java.lang.String onAggroRangeEnter(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onAggroRangeEnter
    java.lang.String onSpellFinished(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSpellFinished
    void setUnspawn() -> setUnspawn
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Antharas$AntharasSpawn -> com.l2jfrozen.gameserver.ai.special.Antharas$AntharasSpawn:
    int _taskId -> _taskId
    java.util.Collection _players -> _players
    com.l2jfrozen.gameserver.ai.special.Antharas this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Antharas,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Antharas$CheckActivity -> com.l2jfrozen.gameserver.ai.special.Antharas$CheckActivity:
    com.l2jfrozen.gameserver.ai.special.Antharas this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Antharas) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Antharas$CubeSpawn -> com.l2jfrozen.gameserver.ai.special.Antharas$CubeSpawn:
    int _type -> _type
    com.l2jfrozen.gameserver.ai.special.Antharas this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Antharas,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Antharas$MobsSpawn -> com.l2jfrozen.gameserver.ai.special.Antharas$MobsSpawn:
    com.l2jfrozen.gameserver.ai.special.Antharas this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Antharas) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Antharas$MoveAtRandom -> com.l2jfrozen.gameserver.ai.special.Antharas$MoveAtRandom:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _npc -> _npc
    com.l2jfrozen.gameserver.model.actor.position.L2CharPosition _pos -> _pos
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Antharas$SelfDestructionOfBomber -> com.l2jfrozen.gameserver.ai.special.Antharas$SelfDestructionOfBomber:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _bomber -> _bomber
    com.l2jfrozen.gameserver.ai.special.Antharas this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Antharas,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Antharas$SetMobilised -> com.l2jfrozen.gameserver.ai.special.Antharas$SetMobilised:
    com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance _boss -> _boss
    com.l2jfrozen.gameserver.ai.special.Antharas this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Antharas,com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Antharas$UnlockAntharas -> com.l2jfrozen.gameserver.ai.special.Antharas$UnlockAntharas:
    int _bossId -> _bossId
    void <init>(int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Baium -> com.l2jfrozen.gameserver.ai.special.Baium:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.L2Character _target -> _target
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    int STONE_BAIUM -> STONE_BAIUM
    int ANGELIC_VORTEX -> ANGELIC_VORTEX
    int LIVE_BAIUM -> LIVE_BAIUM
    int ARCHANGEL -> ARCHANGEL
    byte ASLEEP -> ASLEEP
    byte AWAKE -> AWAKE
    byte DEAD -> DEAD
    int[][] ANGEL_LOCATION -> ANGEL_LOCATION
    long _LastAttackVsBaiumTime -> _LastAttackVsBaiumTime
    java.util.List _Minions -> _Minions
    com.l2jfrozen.gameserver.model.zone.type.L2BossZone _Zone -> _Zone
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAdvEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAdvEvent
    java.lang.String onTalk(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onTalk
    java.lang.String onSpellFinished(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSpellFinished
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    com.l2jfrozen.gameserver.model.L2Character getRandomTarget(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> getRandomTarget
    void callSkillAI(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> callSkillAI
    int getRandomSkill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> getRandomSkill
    java.lang.String onSkillUse(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSkillUse
    int getDist(int) -> getDist
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Baium$1 -> com.l2jfrozen.gameserver.ai.special.Baium$1:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance val$_baium -> val$_baium
    int val$hp -> val$hp
    int val$mp -> val$mp
    com.l2jfrozen.gameserver.ai.special.Baium this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Baium,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,int,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Baium$2 -> com.l2jfrozen.gameserver.ai.special.Baium$2:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance val$baium -> val$baium
    com.l2jfrozen.gameserver.ai.special.Baium this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Baium,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Baium$3 -> com.l2jfrozen.gameserver.ai.special.Baium$3:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance val$_baium -> val$_baium
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance val$player -> val$player
    com.l2jfrozen.gameserver.ai.special.Baium this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Baium,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Barakiel -> com.l2jfrozen.gameserver.ai.special.Barakiel:
    int BARAKIEL -> BARAKIEL
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Core -> com.l2jfrozen.gameserver.ai.special.Core:
    int CORE -> CORE
    int DEATH_KNIGHT -> DEATH_KNIGHT
    int DOOM_WRAITH -> DOOM_WRAITH
    int SUSCEPTOR -> SUSCEPTOR
    byte ALIVE -> ALIVE
    byte DEAD -> DEAD
    boolean _FirstAttacked -> _FirstAttacked
    java.util.List Minions -> Minions
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    void saveGlobalData() -> saveGlobalData
    java.lang.String onAdvEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAdvEvent
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void spawnBoss(com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance) -> spawnBoss
    void run() -> run
com.l2jfrozen.gameserver.ai.special.FairyTrees -> com.l2jfrozen.gameserver.ai.special.FairyTrees:
    int[] trees -> trees
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Frintezza -> com.l2jfrozen.gameserver.ai.special.Frintezza:
    int[][] _invadeLoc -> _invadeLoc
    int[][] _skill -> _skill
    int[][] _mobLoc -> _mobLoc
    int SCARLET1 -> SCARLET1
    int SCARLET2 -> SCARLET2
    int FRINTEZZA -> FRINTEZZA
    int GUIDE -> GUIDE
    int CUBE -> CUBE
    byte DORMANT -> DORMANT
    byte WAITING -> WAITING
    byte FIGHTING -> FIGHTING
    byte DEAD -> DEAD
    long _LastAction -> _LastAction
    int _Angle -> _Angle
    int _Heading -> _Heading
    int _LocCycle -> _LocCycle
    int _Bomber -> _Bomber
    int _CheckDie -> _CheckDie
    int _OnCheck -> _OnCheck
    int _OnSong -> _OnSong
    int _Abnormal -> _Abnormal
    int _OnMorph -> _OnMorph
    int _Scarlet_x -> _Scarlet_x
    int _Scarlet_y -> _Scarlet_y
    int _Scarlet_z -> _Scarlet_z
    int _Scarlet_h -> _Scarlet_h
    int _SecondMorph -> _SecondMorph
    int _ThirdMorph -> _ThirdMorph
    int _KillHallAlarmDevice -> _KillHallAlarmDevice
    int _KillDarkChoirPlayer -> _KillDarkChoirPlayer
    int _KillDarkChoirCaptain -> _KillDarkChoirCaptain
    com.l2jfrozen.gameserver.model.zone.type.L2BossZone _Zone -> _Zone
    com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance frintezza -> frintezza
    com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance weakScarlet -> weakScarlet
    com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance strongScarlet -> strongScarlet
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance demon1 -> demon1
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance demon2 -> demon2
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance demon3 -> demon3
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance demon4 -> demon4
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance portrait1 -> portrait1
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance portrait2 -> portrait2
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance portrait3 -> portrait3
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance portrait4 -> portrait4
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _frintezzaDummy -> _frintezzaDummy
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _overheadDummy -> _overheadDummy
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _portraitDummy1 -> _portraitDummy1
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _portraitDummy3 -> _portraitDummy3
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _scarletDummy -> _scarletDummy
    java.util.List _PlayersInside -> _PlayersInside
    java.util.List _Room1Mobs -> _Room1Mobs
    java.util.List _Room2Mobs -> _Room2Mobs
    java.util.List Minions -> Minions
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAdvEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAdvEvent
    java.lang.String onTalk(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onTalk
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,int,int,int,int,boolean,int) -> addSpawn
    int getXFix(int) -> getXFix
    int getYFix(int) -> getYFix
    int getZFix(int) -> getZFix
    int reverseXFix(int) -> reverseXFix
    int reverseYFix(int) -> reverseYFix
    int reverseZFix(int) -> reverseZFix
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Golkonda -> com.l2jfrozen.gameserver.ai.special.Golkonda:
    int GOLKONDA -> GOLKONDA
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Gordon -> com.l2jfrozen.gameserver.ai.special.Gordon:
    int GORDON -> GORDON
    int _npcMoveX -> _npcMoveX
    int _npcMoveY -> _npcMoveY
    int _isWalkTo -> _isWalkTo
    int _npcBlock -> _npcBlock
    int X -> X
    int Y -> Y
    int Z -> Z
    int[][] WALKS -> WALKS
    boolean _isAttacked -> _isAttacked
    boolean _isSpawned -> _isSpawned
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAdvEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAdvEvent
    java.lang.String onSpawn(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> onSpawn
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance findTemplate(int) -> findTemplate
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Hallate -> com.l2jfrozen.gameserver.ai.special.Hallate:
    int HALLATE -> HALLATE
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.IceFairySirra -> com.l2jfrozen.gameserver.ai.special.IceFairySirra:
    int STEWARD -> STEWARD
    int SILVER_HEMOCYTE -> SILVER_HEMOCYTE
    com.l2jfrozen.gameserver.model.zone.type.L2BossZone _freyasZone -> _freyasZone
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    javolution.util.FastList _allMobs -> _allMobs
    java.util.concurrent.Future _onDeadEventTask -> _onDeadEventTask
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onFirstTalk(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onFirstTalk
    java.lang.String onAdvEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAdvEvent
    void init() -> init
    void cleanUp() -> cleanUp
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance findTemplate(int) -> findTemplate
    void openGates() -> openGates
    void closeGates() -> closeGates
    boolean checkItems(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkItems
    void destroyItems(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> destroyItems
    void teleportInside(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> teleportInside
    void screenMessage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int) -> screenMessage
    void doSpawns() -> doSpawns
    java.lang.String getHtmlPath(int) -> getHtmlPath
    void sendHtml(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> sendHtml
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Kernon -> com.l2jfrozen.gameserver.ai.special.Kernon:
    int KERNON -> KERNON
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Monastery -> com.l2jfrozen.gameserver.ai.special.Monastery:
    int[] mobs1 -> mobs1
    int[] mobs2 -> mobs2
    java.lang.String[] text -> text
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAggroRangeEnter(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onAggroRangeEnter
    java.lang.String onSpawn(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> onSpawn
    java.lang.String onSpellFinished(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSpellFinished
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Orfen -> com.l2jfrozen.gameserver.ai.special.Orfen:
    int ORFEN -> ORFEN
    int LIVE -> LIVE
    int DEAD -> DEAD
    boolean FirstAttacked -> FirstAttacked
    boolean Teleported -> Teleported
    com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance orfen -> orfen
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAdvEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAdvEvent
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Orfen$1 -> com.l2jfrozen.gameserver.ai.special.Orfen$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$ai$special$Orfen$Event -> $SwitchMap$com$l2jfrozen$gameserver$ai$special$Orfen$Event
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Orfen$Event -> com.l2jfrozen.gameserver.ai.special.Orfen$Event:
    com.l2jfrozen.gameserver.ai.special.Orfen$Event ORFEN_SPAWN -> ORFEN_SPAWN
    com.l2jfrozen.gameserver.ai.special.Orfen$Event ORFEN_REFRESH -> ORFEN_REFRESH
    com.l2jfrozen.gameserver.ai.special.Orfen$Event ORFEN_RETURN -> ORFEN_RETURN
    com.l2jfrozen.gameserver.ai.special.Orfen$Event[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.ai.special.Orfen$Event[] values() -> values
    com.l2jfrozen.gameserver.ai.special.Orfen$Event valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.QueenAnt -> com.l2jfrozen.gameserver.ai.special.QueenAnt:
    int QUEEN -> QUEEN
    int LARVA -> LARVA
    int NURSE -> NURSE
    int GUARD -> GUARD
    int ROYAL -> ROYAL
    int LIVE -> LIVE
    int DEAD -> DEAD
    com.l2jfrozen.gameserver.model.zone.type.L2BossZone _Zone -> _Zone
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance _larva -> _larva
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance _queen -> _queen
    java.util.List _Minions -> _Minions
    java.util.List _Nurses -> _Nurses
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    void spawnBoss(com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance) -> spawnBoss
    java.lang.String onAdvEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAdvEvent
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void getIntoPosition(com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance,com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance) -> getIntoPosition
    void run() -> run
com.l2jfrozen.gameserver.ai.special.QueenAnt$1 -> com.l2jfrozen.gameserver.ai.special.QueenAnt$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$ai$special$QueenAnt$Event -> $SwitchMap$com$l2jfrozen$gameserver$ai$special$QueenAnt$Event
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.QueenAnt$Event -> com.l2jfrozen.gameserver.ai.special.QueenAnt$Event:
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event QUEEN_SPAWN -> QUEEN_SPAWN
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event CHECK_MINIONS_ZONE -> CHECK_MINIONS_ZONE
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event CHECK_NURSE_ALIVE -> CHECK_NURSE_ALIVE
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event ACTION -> ACTION
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event DESPAWN_MINIONS -> DESPAWN_MINIONS
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event SPAWN_ROYAL -> SPAWN_ROYAL
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event NURSES_SPAWN -> NURSES_SPAWN
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event RESPAWN_ROYAL -> RESPAWN_ROYAL
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event RESPAWN_NURSE -> RESPAWN_NURSE
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event LARVA_DESPAWN -> LARVA_DESPAWN
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event HEAL -> HEAL
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event[] values() -> values
    com.l2jfrozen.gameserver.ai.special.QueenAnt$Event valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.SummonMinions -> com.l2jfrozen.gameserver.ai.special.SummonMinions:
    int HasSpawned -> HasSpawned
    javolution.util.FastSet myTrackingSet -> myTrackingSet
    javolution.util.FastMap _attackersList -> _attackersList
    javolution.util.FastMap MINIONS -> MINIONS
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Transform -> com.l2jfrozen.gameserver.ai.special.Transform:
    java.util.ArrayList _mobs -> _mobs
    java.lang.String[] Message -> Message
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Transform$NPCSpawnTask -> com.l2jfrozen.gameserver.ai.special.Transform$NPCSpawnTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance spawn -> spawn
    long spawnEffectTime -> spawnEffectTime
    int spawnAbnormalEffect -> spawnAbnormalEffect
    com.l2jfrozen.gameserver.ai.special.Transform this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Transform,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,long,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Transform$Transformer -> com.l2jfrozen.gameserver.ai.special.Transform$Transformer:
    int _id -> _id
    int _idPoly -> _idPoly
    int _chance -> _chance
    int _message -> _message
    void <init>(int,int,int,int) -> <init>
    int getId() -> getId
    int getIdPoly() -> getIdPoly
    int getChance() -> getChance
    int getMessage() -> getMessage
com.l2jfrozen.gameserver.ai.special.Valakas -> com.l2jfrozen.gameserver.ai.special.Valakas:
    int i_ai0 -> i_ai0
    int i_ai1 -> i_ai1
    int i_ai2 -> i_ai2
    int i_ai3 -> i_ai3
    int i_ai4 -> i_ai4
    int i_quest0 -> i_quest0
    long lastAttackTime -> lastAttackTime
    int i_quest2 -> i_quest2
    int i_quest3 -> i_quest3
    int i_quest4 -> i_quest4
    com.l2jfrozen.gameserver.model.L2Character c_quest2 -> c_quest2
    com.l2jfrozen.gameserver.model.L2Character c_quest3 -> c_quest3
    com.l2jfrozen.gameserver.model.L2Character c_quest4 -> c_quest4
    int VALAKAS -> VALAKAS
    byte DORMANT -> DORMANT
    byte WAITING -> WAITING
    byte FIGHTING -> FIGHTING
    byte DEAD -> DEAD
    com.l2jfrozen.gameserver.model.zone.type.L2BossZone _Zone -> _Zone
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAdvEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAdvEvent
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void getRandomSkill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> getRandomSkill
    void callSkillAI(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> callSkillAI
    void broadcastSpawn(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> broadcastSpawn
    com.l2jfrozen.gameserver.model.L2Character getRandomTarget(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> getRandomTarget
    java.lang.String onSpellFinished(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSpellFinished
    java.lang.String onAggroRangeEnter(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onAggroRangeEnter
    java.lang.String onSkillUse(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSkillUse
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Valakas$1 -> com.l2jfrozen.gameserver.ai.special.Valakas$1:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance val$_valakas -> val$_valakas
    int val$hp -> val$hp
    int val$mp -> val$mp
    com.l2jfrozen.gameserver.ai.special.Valakas this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Valakas,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,int,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Valakas$2 -> com.l2jfrozen.gameserver.ai.special.Valakas$2:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance val$_valakas -> val$_valakas
    com.l2jfrozen.gameserver.ai.special.Valakas this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Valakas,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.VanHalter -> com.l2jfrozen.gameserver.ai.special.VanHalter:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _bleedingPlayers -> _bleedingPlayers
    java.util.Map _monsterSpawn -> _monsterSpawn
    java.util.List _royalGuardSpawn -> _royalGuardSpawn
    java.util.List _royalGuardCaptainSpawn -> _royalGuardCaptainSpawn
    java.util.List _royalGuardHelperSpawn -> _royalGuardHelperSpawn
    java.util.List _triolRevelationSpawn -> _triolRevelationSpawn
    java.util.List _triolRevelationAlive -> _triolRevelationAlive
    java.util.List _guardOfAltarSpawn -> _guardOfAltarSpawn
    java.util.Map _cameraMarkerSpawn -> _cameraMarkerSpawn
    com.l2jfrozen.gameserver.model.spawn.L2Spawn _ritualOfferingSpawn -> _ritualOfferingSpawn
    com.l2jfrozen.gameserver.model.spawn.L2Spawn _ritualSacrificeSpawn -> _ritualSacrificeSpawn
    com.l2jfrozen.gameserver.model.spawn.L2Spawn _vanHalterSpawn -> _vanHalterSpawn
    java.util.List _monsters -> _monsters
    java.util.List _royalGuard -> _royalGuard
    java.util.List _royalGuardCaptain -> _royalGuardCaptain
    java.util.List _royalGuardHepler -> _royalGuardHepler
    java.util.List _triolRevelation -> _triolRevelation
    java.util.List _guardOfAltar -> _guardOfAltar
    java.util.Map _cameraMarker -> _cameraMarker
    java.util.List _doorOfAltar -> _doorOfAltar
    java.util.List _doorOfSacrifice -> _doorOfSacrifice
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _ritualOffering -> _ritualOffering
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _ritualSacrifice -> _ritualSacrifice
    com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance _vanHalter -> _vanHalter
    java.util.concurrent.ScheduledFuture _movieTask -> _movieTask
    java.util.concurrent.ScheduledFuture _closeDoorOfAltarTask -> _closeDoorOfAltarTask
    java.util.concurrent.ScheduledFuture _openDoorOfAltarTask -> _openDoorOfAltarTask
    java.util.concurrent.ScheduledFuture _lockUpDoorOfAltarTask -> _lockUpDoorOfAltarTask
    java.util.concurrent.ScheduledFuture _callRoyalGuardHelperTask -> _callRoyalGuardHelperTask
    java.util.concurrent.ScheduledFuture _timeUpTask -> _timeUpTask
    java.util.concurrent.ScheduledFuture _intervalTask -> _intervalTask
    java.util.concurrent.ScheduledFuture _halterEscapeTask -> _halterEscapeTask
    java.util.concurrent.ScheduledFuture _setBleedTask -> _setBleedTask
    boolean _isLocked -> _isLocked
    boolean _isHalterSpawned -> _isHalterSpawned
    boolean _isSacrificeSpawned -> _isSacrificeSpawned
    boolean _isCaptainSpawned -> _isCaptainSpawned
    boolean _isHelperCalled -> _isHelperCalled
    byte INTERVAL -> INTERVAL
    byte NOTSPAWN -> NOTSPAWN
    byte ALIVE -> ALIVE
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void loadRoyalGuard() -> loadRoyalGuard
    void spawnRoyalGuard() -> spawnRoyalGuard
    void deleteRoyalGuard() -> deleteRoyalGuard
    void loadTriolRevelation() -> loadTriolRevelation
    void spawnTriolRevelation() -> spawnTriolRevelation
    void deleteTriolRevelation() -> deleteTriolRevelation
    void loadRoyalGuardCaptain() -> loadRoyalGuardCaptain
    void spawnRoyalGuardCaptain() -> spawnRoyalGuardCaptain
    void deleteRoyalGuardCaptain() -> deleteRoyalGuardCaptain
    void loadRoyalGuardHelper() -> loadRoyalGuardHelper
    void spawnRoyalGuardHepler() -> spawnRoyalGuardHepler
    void deleteRoyalGuardHepler() -> deleteRoyalGuardHepler
    void loadGuardOfAltar() -> loadGuardOfAltar
    void spawnGuardOfAltar() -> spawnGuardOfAltar
    void deleteGuardOfAltar() -> deleteGuardOfAltar
    void loadVanHalter() -> loadVanHalter
    void spawnVanHalter() -> spawnVanHalter
    void deleteVanHalter() -> deleteVanHalter
    void loadRitualOffering() -> loadRitualOffering
    void spawnRitualOffering() -> spawnRitualOffering
    void deleteRitualOffering() -> deleteRitualOffering
    void loadRitualSacrifice() -> loadRitualSacrifice
    void spawnRitualSacrifice() -> spawnRitualSacrifice
    void deleteRitualSacrifice() -> deleteRitualSacrifice
    void spawnCameraMarker() -> spawnCameraMarker
    void deleteCameraMarker() -> deleteCameraMarker
    void intruderDetection(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> intruderDetection
    void openDoorOfAltar(boolean) -> openDoorOfAltar
    void closeDoorOfAltar(boolean) -> closeDoorOfAltar
    void openDoorOfSacrifice() -> openDoorOfSacrifice
    void closeDoorOfSacrifice() -> closeDoorOfSacrifice
    void checkTriolRevelationDestroy() -> checkTriolRevelationDestroy
    void checkRoyalGuardCaptainDestroy() -> checkRoyalGuardCaptainDestroy
    void combatBeginning() -> combatBeginning
    void callRoyalGuardHelper() -> callRoyalGuardHelper
    void addBleeding() -> addBleeding
    void removeBleeding(int) -> removeBleeding
    void enterInterval() -> enterInterval
    void setupAltar() -> setupAltar
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.VanHalter$Bleeding -> com.l2jfrozen.gameserver.ai.special.VanHalter$Bleeding:
    com.l2jfrozen.gameserver.ai.special.VanHalter this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.VanHalter) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.VanHalter$CallRoyalGuardHelper -> com.l2jfrozen.gameserver.ai.special.VanHalter$CallRoyalGuardHelper:
    com.l2jfrozen.gameserver.ai.special.VanHalter this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.VanHalter) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.VanHalter$CloseDoorOfAltar -> com.l2jfrozen.gameserver.ai.special.VanHalter$CloseDoorOfAltar:
    com.l2jfrozen.gameserver.ai.special.VanHalter this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.VanHalter) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.VanHalter$HalterEscape -> com.l2jfrozen.gameserver.ai.special.VanHalter$HalterEscape:
    com.l2jfrozen.gameserver.ai.special.VanHalter this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.VanHalter) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.VanHalter$Interval -> com.l2jfrozen.gameserver.ai.special.VanHalter$Interval:
    com.l2jfrozen.gameserver.ai.special.VanHalter this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.VanHalter) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.VanHalter$LockUpDoorOfAltar -> com.l2jfrozen.gameserver.ai.special.VanHalter$LockUpDoorOfAltar:
    com.l2jfrozen.gameserver.ai.special.VanHalter this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.VanHalter) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.VanHalter$Movie -> com.l2jfrozen.gameserver.ai.special.VanHalter$Movie:
    int _distance -> _distance
    int _taskId -> _taskId
    com.l2jfrozen.gameserver.ai.special.VanHalter this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.VanHalter,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.VanHalter$OpenDoorOfAltar -> com.l2jfrozen.gameserver.ai.special.VanHalter$OpenDoorOfAltar:
    com.l2jfrozen.gameserver.ai.special.VanHalter this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.VanHalter) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.VanHalter$TimeUp -> com.l2jfrozen.gameserver.ai.special.VanHalter$TimeUp:
    com.l2jfrozen.gameserver.ai.special.VanHalter this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.VanHalter) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.VarkaKetraAlly -> com.l2jfrozen.gameserver.ai.special.VarkaKetraAlly:
    int[] ketraAllyMark -> ketraAllyMark
    int[] varkaAllyMark -> varkaAllyMark
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void decreaseAlly(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> decreaseAlly
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Zaken -> com.l2jfrozen.gameserver.ai.special.Zaken:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _1001 -> _1001
    int _ai0 -> _ai0
    int _ai1 -> _ai1
    int _ai2 -> _ai2
    int _ai3 -> _ai3
    int _ai4 -> _ai4
    int _quest0 -> _quest0
    int _quest1 -> _quest1
    int _quest2 -> _quest2
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance c_quest0 -> c_quest0
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance c_quest1 -> c_quest1
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance c_quest2 -> c_quest2
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance c_quest3 -> c_quest3
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance c_quest4 -> c_quest4
    int ZAKEN -> ZAKEN
    int doll_blader_b -> doll_blader_b
    int vale_master_b -> vale_master_b
    int pirates_zombie_captain_b -> pirates_zombie_captain_b
    int pirates_zombie_b -> pirates_zombie_b
    int[] Xcoords -> Xcoords
    int[] Ycoords -> Ycoords
    int[] Zcoords -> Zcoords
    byte ALIVE -> ALIVE
    byte DEAD -> DEAD
    com.l2jfrozen.gameserver.model.zone.type.L2BossZone _Zone -> _Zone
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    void spawnBoss(com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance) -> spawnBoss
    java.lang.String onAdvEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAdvEvent
    java.lang.String onFactionCall(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onFactionCall
    java.lang.String onSpellFinished(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSpellFinished
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    java.lang.String onAggroRangeEnter(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onAggroRangeEnter
    int getTimeHour() -> getTimeHour
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.Zaken$1 -> com.l2jfrozen.gameserver.ai.special.Zaken$1:
    com.l2jfrozen.gameserver.ai.special.Zaken this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.ai.special.Zaken) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.Zaken$1$1 -> com.l2jfrozen.gameserver.ai.special.Zaken$1$1:
    com.l2jfrozen.gameserver.ai.special.Zaken$1 this$1 -> this$1
    void <init>(com.l2jfrozen.gameserver.ai.special.Zaken$1) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.ai.special.ZombieGatekeepers -> com.l2jfrozen.gameserver.ai.special.ZombieGatekeepers:
    javolution.util.FastMap _attackersList -> _attackersList
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onAggroRangeEnter(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onAggroRangeEnter
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    void run() -> run
com.l2jfrozen.gameserver.ai.special.manager.AIExtend -> com.l2jfrozen.gameserver.ai.special.manager.AIExtend:
    javolution.util.FastMap _AI -> _AI
    int _idCharacter -> _idCharacter
    void <init>() -> <init>
    void addAI(int) -> addAI
    void clearAllAI() -> clearAllAI
    int getID() -> getID
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addActionId(int,com.l2jfrozen.gameserver.ai.special.manager.Action) -> addActionId
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    java.lang.String onSkillUse(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSkillUse
    java.lang.String onSpellFinished(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSpellFinished
    java.lang.String onSpawn(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> onSpawn
    java.lang.String onAggroRangeEnter(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onAggroRangeEnter
    boolean notifyAggroRangeEnter(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> notifyAggroRangeEnter
    boolean notifySpawn(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> notifySpawn
    boolean notifySkillUse(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> notifySkillUse
    boolean notifySpellFinished(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> notifySpellFinished
    boolean notifyKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> notifyKill
    boolean notifyAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> notifyAttack
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.manager.AILoader -> com.l2jfrozen.gameserver.ai.special.manager.AILoader:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void init() -> init
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.manager.Action -> com.l2jfrozen.gameserver.ai.special.manager.Action:
    com.l2jfrozen.gameserver.ai.special.manager.Action ON_SPELL_FINISHED -> ON_SPELL_FINISHED
    com.l2jfrozen.gameserver.ai.special.manager.Action ON_AGGRO_RANGE_ENTER -> ON_AGGRO_RANGE_ENTER
    com.l2jfrozen.gameserver.ai.special.manager.Action ON_SPAWN -> ON_SPAWN
    com.l2jfrozen.gameserver.ai.special.manager.Action ON_SKILL_USE -> ON_SKILL_USE
    com.l2jfrozen.gameserver.ai.special.manager.Action ON_KILL -> ON_KILL
    com.l2jfrozen.gameserver.ai.special.manager.Action ON_ATTACK -> ON_ATTACK
    boolean _isRegistred -> _isRegistred
    com.l2jfrozen.gameserver.ai.special.manager.Action[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.ai.special.manager.Action[] values() -> values
    com.l2jfrozen.gameserver.ai.special.manager.Action valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,boolean) -> <init>
    boolean isRegistred() -> isRegistred
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.ai.special.manager.test -> com.l2jfrozen.gameserver.ai.special.manager.test:
    int[] ID_MOB -> ID_MOB
    void <init>() -> <init>
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.cache.CrestCache -> com.l2jfrozen.gameserver.cache.CrestCache:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.cache.CrestCache _instance -> _instance
    com.l2jfrozen.gameserver.cache.FastMRUCache _cachePledge -> _cachePledge
    com.l2jfrozen.gameserver.cache.FastMRUCache _cachePledgeLarge -> _cachePledgeLarge
    com.l2jfrozen.gameserver.cache.FastMRUCache _cacheAlly -> _cacheAlly
    int _loadedFiles -> _loadedFiles
    long _bytesBuffLen -> _bytesBuffLen
    com.l2jfrozen.gameserver.cache.CrestCache getInstance() -> getInstance
    void <init>() -> <init>
    void reload() -> reload
    void convertOldPedgeFiles() -> convertOldPedgeFiles
    float getMemoryUsage() -> getMemoryUsage
    int getLoadedFiles() -> getLoadedFiles
    byte[] getPledgeCrest(int) -> getPledgeCrest
    byte[] getPledgeCrestLarge(int) -> getPledgeCrestLarge
    byte[] getAllyCrest(int) -> getAllyCrest
    void removePledgeCrest(int) -> removePledgeCrest
    void removePledgeCrestLarge(int) -> removePledgeCrestLarge
    void removeOldPledgeCrest(int) -> removeOldPledgeCrest
    void removeAllyCrest(int) -> removeAllyCrest
    boolean savePledgeCrest(int,byte[]) -> savePledgeCrest
    boolean savePledgeCrestLarge(int,byte[]) -> savePledgeCrestLarge
    boolean saveAllyCrest(int,byte[]) -> saveAllyCrest
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.cache.CrestCache$BmpFilter -> com.l2jfrozen.gameserver.cache.CrestCache$BmpFilter:
    com.l2jfrozen.gameserver.cache.CrestCache this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.cache.CrestCache) -> <init>
    boolean accept(java.io.File) -> accept
com.l2jfrozen.gameserver.cache.CrestCache$OldPledgeFilter -> com.l2jfrozen.gameserver.cache.CrestCache$OldPledgeFilter:
    com.l2jfrozen.gameserver.cache.CrestCache this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.cache.CrestCache) -> <init>
    boolean accept(java.io.File) -> accept
com.l2jfrozen.gameserver.cache.FastMRUCache -> com.l2jfrozen.gameserver.cache.FastMRUCache:
    long serialVersionUID -> serialVersionUID
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    int DEFAULT_FORGET_TIME -> DEFAULT_FORGET_TIME
    javolution.util.FastMap _cache -> _cache
    javolution.util.FastMap _map -> _map
    javolution.util.FastList _mruList -> _mruList
    int _cacheSize -> _cacheSize
    int _forgetTime -> _forgetTime
    javolution.context.ObjectFactory FACTORY -> FACTORY
    com.l2jfrozen.gameserver.cache.FastMRUCache newInstance() -> newInstance
    void <init>() -> <init>
    void <init>(javolution.util.FastMap) -> <init>
    void <init>(javolution.util.FastMap,int) -> <init>
    void <init>(javolution.util.FastMap,int,int) -> <init>
    void reset() -> reset
    java.lang.Object get(java.lang.Object) -> get
    boolean remove(java.lang.Object) -> remove
    javolution.util.FastMap getContentMap() -> getContentMap
    int size() -> size
    int capacity() -> capacity
    int getForgetTime() -> getForgetTime
    void clear() -> clear
    javolution.util.FastCollection$Record head() -> head
    javolution.util.FastCollection$Record tail() -> tail
    java.lang.Object valueOf(javolution.util.FastCollection$Record) -> valueOf
    void delete(javolution.util.FastCollection$Record) -> delete
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.cache.FastMRUCache$1 -> com.l2jfrozen.gameserver.cache.FastMRUCache$1:
    void <init>() -> <init>
    java.lang.Object create() -> create
    void cleanup(java.lang.Object) -> cleanup
com.l2jfrozen.gameserver.cache.FastMRUCache$CacheNode -> com.l2jfrozen.gameserver.cache.FastMRUCache$CacheNode:
    long _lastModified -> _lastModified
    java.lang.Object _node -> _node
    com.l2jfrozen.gameserver.cache.FastMRUCache this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.cache.FastMRUCache,java.lang.Object) -> <init>
    boolean equals(java.lang.Object) -> equals
com.l2jfrozen.gameserver.cache.HtmCache -> com.l2jfrozen.gameserver.cache.HtmCache:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.cache.HtmCache _instance -> _instance
    javolution.util.FastMap _cache -> _cache
    int _loadedFiles -> _loadedFiles
    long _bytesBuffLen -> _bytesBuffLen
    com.l2jfrozen.gameserver.cache.HtmCache getInstance() -> getInstance
    void <init>() -> <init>
    void reload() -> reload
    void reload(java.io.File) -> reload
    void reloadPath(java.io.File) -> reloadPath
    double getMemoryUsage() -> getMemoryUsage
    int getLoadedFiles() -> getLoadedFiles
    void parseDir(java.io.File) -> parseDir
    java.lang.String loadFile(java.io.File) -> loadFile
    java.lang.String getHtmForce(java.lang.String) -> getHtmForce
    java.lang.String getHtm(java.lang.String) -> getHtm
    boolean contains(java.lang.String) -> contains
    boolean isLoadable(java.lang.String) -> isLoadable
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.cache.HtmCache$HtmFilter -> com.l2jfrozen.gameserver.cache.HtmCache$HtmFilter:
    com.l2jfrozen.gameserver.cache.HtmCache this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.cache.HtmCache) -> <init>
    boolean accept(java.io.File) -> accept
com.l2jfrozen.gameserver.cache.InfoCache -> com.l2jfrozen.gameserver.cache.InfoCache:
    javolution.util.FastMap _droplistCache -> _droplistCache
    void <init>() -> <init>
    void addToDroplistCache(int,java.util.List) -> addToDroplistCache
    java.util.List getFromDroplistCache(int) -> getFromDroplistCache
    void unload() -> unload
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.cache.WarehouseCacheManager -> com.l2jfrozen.gameserver.cache.WarehouseCacheManager:
    com.l2jfrozen.gameserver.cache.WarehouseCacheManager _instance -> _instance
    javolution.util.FastMap _cachedWh -> _cachedWh
    long _cacheTime -> _cacheTime
    com.l2jfrozen.gameserver.cache.WarehouseCacheManager getInstance() -> getInstance
    void <init>() -> <init>
    void addCacheTask(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addCacheTask
    void remCacheTask(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> remCacheTask
com.l2jfrozen.gameserver.cache.WarehouseCacheManager$CacheScheduler -> com.l2jfrozen.gameserver.cache.WarehouseCacheManager$CacheScheduler:
    com.l2jfrozen.gameserver.cache.WarehouseCacheManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.cache.WarehouseCacheManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.communitybbs.BB.ConstructorType -> com.l2jfrozen.gameserver.communitybbs.BB.ConstructorType:
    com.l2jfrozen.gameserver.communitybbs.BB.ConstructorType RESTORE -> RESTORE
    com.l2jfrozen.gameserver.communitybbs.BB.ConstructorType CREATE -> CREATE
    com.l2jfrozen.gameserver.communitybbs.BB.ConstructorType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.communitybbs.BB.ConstructorType[] values() -> values
    com.l2jfrozen.gameserver.communitybbs.BB.ConstructorType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.communitybbs.BB.Forum -> com.l2jfrozen.gameserver.communitybbs.BB.Forum:
    int ROOT -> ROOT
    int NORMAL -> NORMAL
    int CLAN -> CLAN
    int MEMO -> MEMO
    int MAIL -> MAIL
    int INVISIBLE -> INVISIBLE
    int ALL -> ALL
    int CLANMEMBERONLY -> CLANMEMBERONLY
    int OWNERONLY -> OWNERONLY
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _children -> _children
    java.util.Map _topic -> _topic
    int _forumId -> _forumId
    java.lang.String _forumName -> _forumName
    int _forumType -> _forumType
    int _forumPost -> _forumPost
    int _forumPerm -> _forumPerm
    com.l2jfrozen.gameserver.communitybbs.BB.Forum _fParent -> _fParent
    int _ownerID -> _ownerID
    boolean _loaded -> _loaded
    void <init>(int,com.l2jfrozen.gameserver.communitybbs.BB.Forum) -> <init>
    void <init>(java.lang.String,com.l2jfrozen.gameserver.communitybbs.BB.Forum,int,int,int) -> <init>
    void load() -> load
    void getChildren() -> getChildren
    int getTopicSize() -> getTopicSize
    com.l2jfrozen.gameserver.communitybbs.BB.Topic gettopic(int) -> gettopic
    void addtopic(com.l2jfrozen.gameserver.communitybbs.BB.Topic) -> addtopic
    int getID() -> getID
    java.lang.String getName() -> getName
    int getType() -> getType
    com.l2jfrozen.gameserver.communitybbs.BB.Forum getChildByName(java.lang.String) -> getChildByName
    void rmTopicByID(int) -> rmTopicByID
    void insertindb() -> insertindb
    void vload() -> vload
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.communitybbs.BB.Post -> com.l2jfrozen.gameserver.communitybbs.BB.Post:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _post -> _post
    void <init>(java.lang.String,int,long,int,int,java.lang.String) -> <init>
    void insertindb(com.l2jfrozen.gameserver.communitybbs.BB.Post$CPost) -> insertindb
    void <init>(com.l2jfrozen.gameserver.communitybbs.BB.Topic) -> <init>
    com.l2jfrozen.gameserver.communitybbs.BB.Post$CPost getCPost(int) -> getCPost
    void deleteme(com.l2jfrozen.gameserver.communitybbs.BB.Topic) -> deleteme
    void load(com.l2jfrozen.gameserver.communitybbs.BB.Topic) -> load
    void updatetxt(int) -> updatetxt
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.communitybbs.BB.Post$CPost -> com.l2jfrozen.gameserver.communitybbs.BB.Post$CPost:
    int postId -> postId
    java.lang.String postOwner -> postOwner
    int postOwnerId -> postOwnerId
    long postDate -> postDate
    int postTopicId -> postTopicId
    int postForumId -> postForumId
    java.lang.String postTxt -> postTxt
    com.l2jfrozen.gameserver.communitybbs.BB.Post this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.communitybbs.BB.Post) -> <init>
com.l2jfrozen.gameserver.communitybbs.BB.Topic -> com.l2jfrozen.gameserver.communitybbs.BB.Topic:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int MORMAL -> MORMAL
    int MEMO -> MEMO
    int _id -> _id
    int _forumId -> _forumId
    java.lang.String _topicName -> _topicName
    long _date -> _date
    java.lang.String _ownerName -> _ownerName
    int _ownerId -> _ownerId
    int _type -> _type
    int _cReply -> _cReply
    void <init>(com.l2jfrozen.gameserver.communitybbs.BB.ConstructorType,int,int,java.lang.String,long,java.lang.String,int,int,int) -> <init>
    void insertindb() -> insertindb
    int getID() -> getID
    int getForumID() -> getForumID
    java.lang.String getName() -> getName
    java.lang.String getOwnerName() -> getOwnerName
    void deleteme(com.l2jfrozen.gameserver.communitybbs.BB.Forum) -> deleteme
    long getDate() -> getDate
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.communitybbs.CommunityBoard -> com.l2jfrozen.gameserver.communitybbs.CommunityBoard:
    com.l2jfrozen.gameserver.communitybbs.CommunityBoard _instance -> _instance
    java.util.Map _handlers -> _handlers
    void <init>() -> <init>
    com.l2jfrozen.gameserver.communitybbs.CommunityBoard getInstance() -> getInstance
    void registerBBSHandler(com.l2jfrozen.gameserver.handler.IBBSHandler) -> registerBBSHandler
    void handleCommands(com.l2jfrozen.gameserver.network.L2GameClient,java.lang.String) -> handleCommands
    void handleWriteCommands(com.l2jfrozen.gameserver.network.L2GameClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> handleWriteCommands
com.l2jfrozen.gameserver.communitybbs.Manager.AdminBBSManager -> com.l2jfrozen.gameserver.communitybbs.Manager.AdminBBSManager:
    com.l2jfrozen.gameserver.communitybbs.Manager.AdminBBSManager _instance -> _instance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.communitybbs.Manager.AdminBBSManager getInstance() -> getInstance
    void parsecmd(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsecmd
    void parsewrite(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsewrite
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.communitybbs.Manager.BaseBBSManager -> com.l2jfrozen.gameserver.communitybbs.Manager.BaseBBSManager:
    void <init>() -> <init>
    void parsecmd(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsecmd
    void parsewrite(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsewrite
    void separateAndSend(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> separateAndSend
    void send1001(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> send1001
    void send1002(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> send1002
    void send1002(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String,java.lang.String) -> send1002
com.l2jfrozen.gameserver.communitybbs.Manager.ClanBBSManager -> com.l2jfrozen.gameserver.communitybbs.Manager.ClanBBSManager:
    com.l2jfrozen.gameserver.communitybbs.Manager.ClanBBSManager _instance -> _instance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.communitybbs.Manager.ClanBBSManager getInstance() -> getInstance
    void parsecmd(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsecmd
    void clanNotice(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> clanNotice
    void clanlist(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> clanlist
    void clanhome(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> clanhome
    void clanhome(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> clanhome
    void parsewrite(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsewrite
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.communitybbs.Manager.ForumsBBSManager -> com.l2jfrozen.gameserver.communitybbs.Manager.ForumsBBSManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _table -> _table
    com.l2jfrozen.gameserver.communitybbs.Manager.ForumsBBSManager _instance -> _instance
    int _lastid -> _lastid
    com.l2jfrozen.gameserver.communitybbs.Manager.ForumsBBSManager getInstance() -> getInstance
    void <init>() -> <init>
    void addForum(com.l2jfrozen.gameserver.communitybbs.BB.Forum) -> addForum
    void load() -> load
    void initRoot() -> initRoot
    void parsecmd(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsecmd
    com.l2jfrozen.gameserver.communitybbs.BB.Forum getForumByName(java.lang.String) -> getForumByName
    com.l2jfrozen.gameserver.communitybbs.BB.Forum createNewForum(java.lang.String,com.l2jfrozen.gameserver.communitybbs.BB.Forum,int,int,int) -> createNewForum
    int getANewID() -> getANewID
    com.l2jfrozen.gameserver.communitybbs.BB.Forum getForumByID(int) -> getForumByID
    void parsewrite(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsewrite
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.communitybbs.Manager.PostBBSManager -> com.l2jfrozen.gameserver.communitybbs.Manager.PostBBSManager:
    java.util.Map _postByTopic -> _postByTopic
    com.l2jfrozen.gameserver.communitybbs.Manager.PostBBSManager _instance -> _instance
    com.l2jfrozen.gameserver.communitybbs.Manager.PostBBSManager getInstance() -> getInstance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.communitybbs.BB.Post getGPosttByTopic(com.l2jfrozen.gameserver.communitybbs.BB.Topic) -> getGPosttByTopic
    void delPostByTopic(com.l2jfrozen.gameserver.communitybbs.BB.Topic) -> delPostByTopic
    void addPostByTopic(com.l2jfrozen.gameserver.communitybbs.BB.Post,com.l2jfrozen.gameserver.communitybbs.BB.Topic) -> addPostByTopic
    com.l2jfrozen.gameserver.communitybbs.BB.Post load(com.l2jfrozen.gameserver.communitybbs.BB.Topic) -> load
    void parsecmd(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsecmd
    void showEditPost(com.l2jfrozen.gameserver.communitybbs.BB.Topic,com.l2jfrozen.gameserver.communitybbs.BB.Forum,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showEditPost
    void showPost(com.l2jfrozen.gameserver.communitybbs.BB.Topic,com.l2jfrozen.gameserver.communitybbs.BB.Forum,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showPost
    void showHtmlEditPost(com.l2jfrozen.gameserver.communitybbs.BB.Topic,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.communitybbs.BB.Forum,com.l2jfrozen.gameserver.communitybbs.BB.Post) -> showHtmlEditPost
    void showMemoPost(com.l2jfrozen.gameserver.communitybbs.BB.Topic,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.communitybbs.BB.Forum) -> showMemoPost
    void parsewrite(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsewrite
com.l2jfrozen.gameserver.communitybbs.Manager.RegionBBSManager -> com.l2jfrozen.gameserver.communitybbs.Manager.RegionBBSManager:
    java.util.logging.Logger _logChat -> _logChat
    com.l2jfrozen.gameserver.communitybbs.Manager.RegionBBSManager _instance -> _instance
    int _onlineCount -> _onlineCount
    int _onlineCountGm -> _onlineCountGm
    javolution.util.FastMap _onlinePlayers -> _onlinePlayers
    javolution.util.FastMap _communityPages -> _communityPages
    void <init>() -> <init>
    void parsecmd(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsecmd
    java.lang.String version() -> version
    void showOldCommunityPI(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showOldCommunityPI
    void showOldCommunity(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showOldCommunity
    void parsewrite(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsewrite
    com.l2jfrozen.gameserver.communitybbs.Manager.RegionBBSManager getInstance() -> getInstance
    void changeCommunityBoard() -> changeCommunityBoard
    void addOnlinePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addOnlinePlayer
    void writeCommunityPages() -> writeCommunityPages
    int getOnlineCount(java.lang.String) -> getOnlineCount
    javolution.util.FastList getOnlinePlayers(int) -> getOnlinePlayers
    java.lang.String getCommunityPage(int,java.lang.String) -> getCommunityPage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.communitybbs.Manager.RegionBBSManager$1 -> com.l2jfrozen.gameserver.communitybbs.Manager.RegionBBSManager$1:
    com.l2jfrozen.gameserver.communitybbs.Manager.RegionBBSManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.communitybbs.Manager.RegionBBSManager) -> <init>
    int compare(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.l2jfrozen.gameserver.communitybbs.Manager.TopBBSManager -> com.l2jfrozen.gameserver.communitybbs.Manager.TopBBSManager:
    com.l2jfrozen.gameserver.communitybbs.Manager.TopBBSManager _instance -> _instance
    void <init>() -> <init>
    void parsecmd(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsecmd
    void parsewrite(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsewrite
    com.l2jfrozen.gameserver.communitybbs.Manager.TopBBSManager getInstance() -> getInstance
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.communitybbs.Manager.TopicBBSManager -> com.l2jfrozen.gameserver.communitybbs.Manager.TopicBBSManager:
    java.util.List _table -> _table
    java.util.Map _maxId -> _maxId
    com.l2jfrozen.gameserver.communitybbs.Manager.TopicBBSManager _instance -> _instance
    com.l2jfrozen.gameserver.communitybbs.Manager.TopicBBSManager getInstance() -> getInstance
    void <init>() -> <init>
    void addTopic(com.l2jfrozen.gameserver.communitybbs.BB.Topic) -> addTopic
    void delTopic(com.l2jfrozen.gameserver.communitybbs.BB.Topic) -> delTopic
    void setMaxID(int,com.l2jfrozen.gameserver.communitybbs.BB.Forum) -> setMaxID
    int getMaxID(com.l2jfrozen.gameserver.communitybbs.BB.Forum) -> getMaxID
    com.l2jfrozen.gameserver.communitybbs.BB.Topic getTopicByID(int) -> getTopicByID
    void parsewrite(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsewrite
    void parsecmd(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> parsecmd
    void showNewTopic(com.l2jfrozen.gameserver.communitybbs.BB.Forum,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showNewTopic
    void showMemoNewTopics(com.l2jfrozen.gameserver.communitybbs.BB.Forum,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMemoNewTopics
    void showTopics(com.l2jfrozen.gameserver.communitybbs.BB.Forum,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> showTopics
    void showMemoTopics(com.l2jfrozen.gameserver.communitybbs.BB.Forum,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showMemoTopics
com.l2jfrozen.gameserver.config.ClassMasterSettings -> com.l2jfrozen.gameserver.config.ClassMasterSettings:
    javolution.util.FastMap _claimItems -> _claimItems
    javolution.util.FastMap _rewardItems -> _rewardItems
    javolution.util.FastMap _allowedClassChange -> _allowedClassChange
    void <init>(java.lang.String) -> <init>
    void parseConfigLine(java.lang.String) -> parseConfigLine
    boolean isAllowed(int) -> isAllowed
    javolution.util.FastMap getRewardItems(int) -> getRewardItems
    javolution.util.FastMap getRequireItems(int) -> getRequireItems
com.l2jfrozen.gameserver.config.Config -> com.l2jfrozen.gameserver.config.Config:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean EVERYBODY_HAS_ADMIN_RIGHTS -> EVERYBODY_HAS_ADMIN_RIGHTS
    boolean SHOW_GM_LOGIN -> SHOW_GM_LOGIN
    boolean GM_STARTUP_INVISIBLE -> GM_STARTUP_INVISIBLE
    boolean GM_SPECIAL_EFFECT -> GM_SPECIAL_EFFECT
    boolean GM_STARTUP_SILENCE -> GM_STARTUP_SILENCE
    boolean GM_STARTUP_AUTO_LIST -> GM_STARTUP_AUTO_LIST
    java.lang.String GM_ADMIN_MENU_STYLE -> GM_ADMIN_MENU_STYLE
    boolean GM_HERO_AURA -> GM_HERO_AURA
    boolean GM_STARTUP_INVULNERABLE -> GM_STARTUP_INVULNERABLE
    boolean GM_ANNOUNCER_NAME -> GM_ANNOUNCER_NAME
    int MASTERACCESS_LEVEL -> MASTERACCESS_LEVEL
    int USERACCESS_LEVEL -> USERACCESS_LEVEL
    boolean MASTERACCESS_NAME_COLOR_ENABLED -> MASTERACCESS_NAME_COLOR_ENABLED
    boolean MASTERACCESS_TITLE_COLOR_ENABLED -> MASTERACCESS_TITLE_COLOR_ENABLED
    int MASTERACCESS_NAME_COLOR -> MASTERACCESS_NAME_COLOR
    int MASTERACCESS_TITLE_COLOR -> MASTERACCESS_TITLE_COLOR
    boolean CHECK_KNOWN -> CHECK_KNOWN
    java.lang.String DEFAULT_GLOBAL_CHAT -> DEFAULT_GLOBAL_CHAT
    java.lang.String DEFAULT_TRADE_CHAT -> DEFAULT_TRADE_CHAT
    boolean TRADE_CHAT_WITH_PVP -> TRADE_CHAT_WITH_PVP
    int TRADE_PVP_AMOUNT -> TRADE_PVP_AMOUNT
    boolean GLOBAL_CHAT_WITH_PVP -> GLOBAL_CHAT_WITH_PVP
    int GLOBAL_PVP_AMOUNT -> GLOBAL_PVP_AMOUNT
    int BRUT_AVG_TIME -> BRUT_AVG_TIME
    int BRUT_LOGON_ATTEMPTS -> BRUT_LOGON_ATTEMPTS
    int BRUT_BAN_IP_TIME -> BRUT_BAN_IP_TIME
    int MAX_CHAT_LENGTH -> MAX_CHAT_LENGTH
    boolean TRADE_CHAT_IS_NOOBLE -> TRADE_CHAT_IS_NOOBLE
    boolean PRECISE_DROP_CALCULATION -> PRECISE_DROP_CALCULATION
    boolean MULTIPLE_ITEM_DROP -> MULTIPLE_ITEM_DROP
    int DELETE_DAYS -> DELETE_DAYS
    int MAX_DRIFT_RANGE -> MAX_DRIFT_RANGE
    boolean ALLOWFISHING -> ALLOWFISHING
    boolean ALLOW_MANOR -> ALLOW_MANOR
    int AUTODESTROY_ITEM_AFTER -> AUTODESTROY_ITEM_AFTER
    int HERB_AUTO_DESTROY_TIME -> HERB_AUTO_DESTROY_TIME
    boolean ENABLE_AUTOOPENDOOR -> ENABLE_AUTOOPENDOOR
    java.lang.String PROTECTED_ITEMS -> PROTECTED_ITEMS
    javolution.util.FastList LIST_PROTECTED_ITEMS -> LIST_PROTECTED_ITEMS
    boolean DESTROY_DROPPED_PLAYER_ITEM -> DESTROY_DROPPED_PLAYER_ITEM
    boolean DESTROY_EQUIPABLE_PLAYER_ITEM -> DESTROY_EQUIPABLE_PLAYER_ITEM
    boolean SAVE_DROPPED_ITEM -> SAVE_DROPPED_ITEM
    boolean EMPTY_DROPPED_ITEM_TABLE_AFTER_LOAD -> EMPTY_DROPPED_ITEM_TABLE_AFTER_LOAD
    int SAVE_DROPPED_ITEM_INTERVAL -> SAVE_DROPPED_ITEM_INTERVAL
    boolean CLEAR_DROPPED_ITEM_TABLE -> CLEAR_DROPPED_ITEM_TABLE
    boolean ALLOW_DISCARDITEM -> ALLOW_DISCARDITEM
    boolean ALLOW_FREIGHT -> ALLOW_FREIGHT
    boolean ALLOW_WAREHOUSE -> ALLOW_WAREHOUSE
    boolean WAREHOUSE_CACHE -> WAREHOUSE_CACHE
    int WAREHOUSE_CACHE_TIME -> WAREHOUSE_CACHE_TIME
    boolean ALLOW_WEAR -> ALLOW_WEAR
    int WEAR_DELAY -> WEAR_DELAY
    int WEAR_PRICE -> WEAR_PRICE
    boolean ALLOW_LOTTERY -> ALLOW_LOTTERY
    boolean ALLOW_RACE -> ALLOW_RACE
    boolean ALLOW_RENTPET -> ALLOW_RENTPET
    boolean ALLOW_BOAT -> ALLOW_BOAT
    boolean ALLOW_CURSED_WEAPONS -> ALLOW_CURSED_WEAPONS
    boolean ALLOW_NPC_WALKERS -> ALLOW_NPC_WALKERS
    int MIN_NPC_ANIMATION -> MIN_NPC_ANIMATION
    int MAX_NPC_ANIMATION -> MAX_NPC_ANIMATION
    int MIN_MONSTER_ANIMATION -> MIN_MONSTER_ANIMATION
    int MAX_MONSTER_ANIMATION -> MAX_MONSTER_ANIMATION
    boolean ALLOW_USE_CURSOR_FOR_WALK -> ALLOW_USE_CURSOR_FOR_WALK
    boolean USE_3D_MAP -> USE_3D_MAP
    java.lang.String COMMUNITY_TYPE -> COMMUNITY_TYPE
    java.lang.String BBS_DEFAULT -> BBS_DEFAULT
    boolean SHOW_LEVEL_COMMUNITYBOARD -> SHOW_LEVEL_COMMUNITYBOARD
    boolean SHOW_STATUS_COMMUNITYBOARD -> SHOW_STATUS_COMMUNITYBOARD
    int NAME_PAGE_SIZE_COMMUNITYBOARD -> NAME_PAGE_SIZE_COMMUNITYBOARD
    int NAME_PER_ROW_COMMUNITYBOARD -> NAME_PER_ROW_COMMUNITYBOARD
    int PATH_NODE_RADIUS -> PATH_NODE_RADIUS
    int NEW_NODE_ID -> NEW_NODE_ID
    int SELECTED_NODE_ID -> SELECTED_NODE_ID
    int LINKED_NODE_ID -> LINKED_NODE_ID
    java.lang.String NEW_NODE_TYPE -> NEW_NODE_TYPE
    boolean SHOW_NPC_LVL -> SHOW_NPC_LVL
    int ZONE_TOWN -> ZONE_TOWN
    boolean COUNT_PACKETS -> COUNT_PACKETS
    boolean DUMP_PACKET_COUNTS -> DUMP_PACKET_COUNTS
    int DUMP_INTERVAL_SECONDS -> DUMP_INTERVAL_SECONDS
    int DEFAULT_PUNISH -> DEFAULT_PUNISH
    int DEFAULT_PUNISH_PARAM -> DEFAULT_PUNISH_PARAM
    boolean AUTODELETE_INVALID_QUEST_DATA -> AUTODELETE_INVALID_QUEST_DATA
    boolean GRIDS_ALWAYS_ON -> GRIDS_ALWAYS_ON
    int GRID_NEIGHBOR_TURNON_TIME -> GRID_NEIGHBOR_TURNON_TIME
    int GRID_NEIGHBOR_TURNOFF_TIME -> GRID_NEIGHBOR_TURNOFF_TIME
    int MINIMUM_UPDATE_DISTANCE -> MINIMUM_UPDATE_DISTANCE
    int KNOWNLIST_FORGET_DELAY -> KNOWNLIST_FORGET_DELAY
    int MINIMUN_UPDATE_TIME -> MINIMUN_UPDATE_TIME
    boolean BYPASS_VALIDATION -> BYPASS_VALIDATION
    boolean HIGH_RATE_SERVER_DROPS -> HIGH_RATE_SERVER_DROPS
    boolean FORCE_COMPLETE_STATUS_UPDATE -> FORCE_COMPLETE_STATUS_UPDATE
    int PORT_GAME -> PORT_GAME
    java.lang.String GAMESERVER_HOSTNAME -> GAMESERVER_HOSTNAME
    boolean RESERVE_HOST_ON_LOGIN -> RESERVE_HOST_ON_LOGIN
    boolean RWHO_LOG -> RWHO_LOG
    int RWHO_FORCE_INC -> RWHO_FORCE_INC
    int RWHO_KEEP_STAT -> RWHO_KEEP_STAT
    int RWHO_MAX_ONLINE -> RWHO_MAX_ONLINE
    boolean RWHO_SEND_TRASH -> RWHO_SEND_TRASH
    int RWHO_ONLINE_INCREMENT -> RWHO_ONLINE_INCREMENT
    float RWHO_PRIV_STORE_FACTOR -> RWHO_PRIV_STORE_FACTOR
    int[] RWHO_ARRAY -> RWHO_ARRAY
    java.io.File DATAPACK_ROOT -> DATAPACK_ROOT
    int GAME_SERVER_LOGIN_PORT -> GAME_SERVER_LOGIN_PORT
    java.lang.String GAME_SERVER_LOGIN_HOST -> GAME_SERVER_LOGIN_HOST
    int SERVER_LIST_TYPE -> SERVER_LIST_TYPE
    int SERVER_LIST_AGE -> SERVER_LIST_AGE
    java.util.List GAME_SERVER_SUBNETS -> GAME_SERVER_SUBNETS
    java.util.List GAME_SERVER_HOSTS -> GAME_SERVER_HOSTS
    java.lang.String SERVER_REVISION -> SERVER_REVISION
    java.lang.String SERVER_BUILD_DATE -> SERVER_BUILD_DATE
    java.lang.String SERVER_VERSION -> SERVER_VERSION
    java.lang.String DATAPACK_VERSION -> DATAPACK_VERSION
    java.lang.String DATAPACK_BUILD_DATE -> DATAPACK_BUILD_DATE
    com.l2jfrozen.gameserver.config.IdFactoryType IDFACTORY_TYPE -> IDFACTORY_TYPE
    boolean BAD_ID_CHECKING -> BAD_ID_CHECKING
    com.l2jfrozen.gameserver.config.ObjectMapType MAP_TYPE -> MAP_TYPE
    com.l2jfrozen.gameserver.config.ObjectSetType SET_TYPE -> SET_TYPE
    int MAX_ITEM_IN_PACKET -> MAX_ITEM_IN_PACKET
    boolean JAIL_IS_PVP -> JAIL_IS_PVP
    boolean JAIL_DISABLE_CHAT -> JAIL_DISABLE_CHAT
    int WYVERN_SPEED -> WYVERN_SPEED
    int STRIDER_SPEED -> STRIDER_SPEED
    boolean ALLOW_WYVERN_UPGRADER -> ALLOW_WYVERN_UPGRADER
    int INVENTORY_MAXIMUM_NO_DWARF -> INVENTORY_MAXIMUM_NO_DWARF
    int INVENTORY_MAXIMUM_DWARF -> INVENTORY_MAXIMUM_DWARF
    int INVENTORY_MAXIMUM_GM -> INVENTORY_MAXIMUM_GM
    int WAREHOUSE_SLOTS_NO_DWARF -> WAREHOUSE_SLOTS_NO_DWARF
    int WAREHOUSE_SLOTS_DWARF -> WAREHOUSE_SLOTS_DWARF
    int WAREHOUSE_SLOTS_CLAN -> WAREHOUSE_SLOTS_CLAN
    int FREIGHT_SLOTS -> FREIGHT_SLOTS
    java.lang.String NONDROPPABLE_ITEMS -> NONDROPPABLE_ITEMS
    javolution.util.FastList LIST_NONDROPPABLE_ITEMS -> LIST_NONDROPPABLE_ITEMS
    java.lang.String PET_RENT_NPC -> PET_RENT_NPC
    javolution.util.FastList LIST_PET_RENT_NPC -> LIST_PET_RENT_NPC
    boolean EFFECT_CANCELING -> EFFECT_CANCELING
    double HP_REGEN_MULTIPLIER -> HP_REGEN_MULTIPLIER
    double MP_REGEN_MULTIPLIER -> MP_REGEN_MULTIPLIER
    double CP_REGEN_MULTIPLIER -> CP_REGEN_MULTIPLIER
    double RAID_HP_REGEN_MULTIPLIER -> RAID_HP_REGEN_MULTIPLIER
    double RAID_MP_REGEN_MULTIPLIER -> RAID_MP_REGEN_MULTIPLIER
    double RAID_P_DEFENCE_MULTIPLIER -> RAID_P_DEFENCE_MULTIPLIER
    double RAID_M_DEFENCE_MULTIPLIER -> RAID_M_DEFENCE_MULTIPLIER
    double RAID_MINION_RESPAWN_TIMER -> RAID_MINION_RESPAWN_TIMER
    float RAID_MIN_RESPAWN_MULTIPLIER -> RAID_MIN_RESPAWN_MULTIPLIER
    float RAID_MAX_RESPAWN_MULTIPLIER -> RAID_MAX_RESPAWN_MULTIPLIER
    int STARTING_ADENA -> STARTING_ADENA
    int STARTING_AA -> STARTING_AA
    boolean ENABLE_AIO_SYSTEM -> ENABLE_AIO_SYSTEM
    java.util.Map AIO_SKILLS -> AIO_SKILLS
    boolean ALLOW_AIO_NCOLOR -> ALLOW_AIO_NCOLOR
    int AIO_NCOLOR -> AIO_NCOLOR
    boolean ALLOW_AIO_TCOLOR -> ALLOW_AIO_TCOLOR
    int AIO_TCOLOR -> AIO_TCOLOR
    boolean ALLOW_AIO_USE_GK -> ALLOW_AIO_USE_GK
    boolean ALLOW_AIO_USE_CM -> ALLOW_AIO_USE_CM
    boolean ALLOW_AIO_IN_EVENTS -> ALLOW_AIO_IN_EVENTS
    boolean ANNOUNCE_CASTLE_LORDS -> ANNOUNCE_CASTLE_LORDS
    boolean CUSTOM_STARTER_ITEMS_ENABLED -> CUSTOM_STARTER_ITEMS_ENABLED
    java.util.List STARTING_CUSTOM_ITEMS_F -> STARTING_CUSTOM_ITEMS_F
    java.util.List STARTING_CUSTOM_ITEMS_M -> STARTING_CUSTOM_ITEMS_M
    boolean DEEPBLUE_DROP_RULES -> DEEPBLUE_DROP_RULES
    int UNSTUCK_INTERVAL -> UNSTUCK_INTERVAL
    int DEATH_PENALTY_CHANCE -> DEATH_PENALTY_CHANCE
    int PLAYER_SPAWN_PROTECTION -> PLAYER_SPAWN_PROTECTION
    int PLAYER_TELEPORT_PROTECTION -> PLAYER_TELEPORT_PROTECTION
    boolean EFFECT_TELEPORT_PROTECTION -> EFFECT_TELEPORT_PROTECTION
    int PLAYER_FAKEDEATH_UP_PROTECTION -> PLAYER_FAKEDEATH_UP_PROTECTION
    java.lang.String PARTY_XP_CUTOFF_METHOD -> PARTY_XP_CUTOFF_METHOD
    int PARTY_XP_CUTOFF_LEVEL -> PARTY_XP_CUTOFF_LEVEL
    double PARTY_XP_CUTOFF_PERCENT -> PARTY_XP_CUTOFF_PERCENT
    double RESPAWN_RESTORE_CP -> RESPAWN_RESTORE_CP
    double RESPAWN_RESTORE_HP -> RESPAWN_RESTORE_HP
    double RESPAWN_RESTORE_MP -> RESPAWN_RESTORE_MP
    boolean RESPAWN_RANDOM_ENABLED -> RESPAWN_RANDOM_ENABLED
    int RESPAWN_RANDOM_MAX_OFFSET -> RESPAWN_RANDOM_MAX_OFFSET
    int MAX_PVTSTORE_SLOTS_DWARF -> MAX_PVTSTORE_SLOTS_DWARF
    int MAX_PVTSTORE_SLOTS_OTHER -> MAX_PVTSTORE_SLOTS_OTHER
    boolean PETITIONING_ALLOWED -> PETITIONING_ALLOWED
    int MAX_PETITIONS_PER_PLAYER -> MAX_PETITIONS_PER_PLAYER
    int MAX_PETITIONS_PENDING -> MAX_PETITIONS_PENDING
    boolean ANNOUNCE_MAMMON_SPAWN -> ANNOUNCE_MAMMON_SPAWN
    boolean ENABLE_MODIFY_SKILL_DURATION -> ENABLE_MODIFY_SKILL_DURATION
    javolution.util.FastMap SKILL_DURATION_LIST -> SKILL_DURATION_LIST
    int CHAT_FILTER_PUNISHMENT_PARAM1 -> CHAT_FILTER_PUNISHMENT_PARAM1
    int CHAT_FILTER_PUNISHMENT_PARAM2 -> CHAT_FILTER_PUNISHMENT_PARAM2
    int CHAT_FILTER_PUNISHMENT_PARAM3 -> CHAT_FILTER_PUNISHMENT_PARAM3
    boolean USE_SAY_FILTER -> USE_SAY_FILTER
    java.lang.String CHAT_FILTER_CHARS -> CHAT_FILTER_CHARS
    java.lang.String CHAT_FILTER_PUNISHMENT -> CHAT_FILTER_PUNISHMENT
    java.util.ArrayList FILTER_LIST -> FILTER_LIST
    int FS_TIME_ATTACK -> FS_TIME_ATTACK
    int FS_TIME_COOLDOWN -> FS_TIME_COOLDOWN
    int FS_TIME_ENTRY -> FS_TIME_ENTRY
    int FS_TIME_WARMUP -> FS_TIME_WARMUP
    int FS_PARTY_MEMBER_COUNT -> FS_PARTY_MEMBER_COUNT
    boolean ALLOW_QUAKE_SYSTEM -> ALLOW_QUAKE_SYSTEM
    boolean ENABLE_ANTI_PVP_FARM_MSG -> ENABLE_ANTI_PVP_FARM_MSG
    long CLICK_TASK -> CLICK_TASK
    boolean STORE_SKILL_COOLTIME -> STORE_SKILL_COOLTIME
    float RATE_XP -> RATE_XP
    float RATE_SP -> RATE_SP
    float RATE_PARTY_XP -> RATE_PARTY_XP
    float RATE_PARTY_SP -> RATE_PARTY_SP
    float RATE_QUESTS_REWARD -> RATE_QUESTS_REWARD
    float RATE_DROP_ADENA -> RATE_DROP_ADENA
    float RATE_CONSUMABLE_COST -> RATE_CONSUMABLE_COST
    float RATE_DROP_ITEMS -> RATE_DROP_ITEMS
    float RATE_DROP_SEAL_STONES -> RATE_DROP_SEAL_STONES
    float RATE_DROP_SPOIL -> RATE_DROP_SPOIL
    int RATE_DROP_MANOR -> RATE_DROP_MANOR
    float RATE_DROP_QUEST -> RATE_DROP_QUEST
    float RATE_KARMA_EXP_LOST -> RATE_KARMA_EXP_LOST
    float RATE_SIEGE_GUARDS_PRICE -> RATE_SIEGE_GUARDS_PRICE
    float RATE_DROP_COMMON_HERBS -> RATE_DROP_COMMON_HERBS
    float RATE_DROP_MP_HP_HERBS -> RATE_DROP_MP_HP_HERBS
    float RATE_DROP_GREATER_HERBS -> RATE_DROP_GREATER_HERBS
    float RATE_DROP_SUPERIOR_HERBS -> RATE_DROP_SUPERIOR_HERBS
    float RATE_DROP_SPECIAL_HERBS -> RATE_DROP_SPECIAL_HERBS
    int PLAYER_DROP_LIMIT -> PLAYER_DROP_LIMIT
    int PLAYER_RATE_DROP -> PLAYER_RATE_DROP
    int PLAYER_RATE_DROP_ITEM -> PLAYER_RATE_DROP_ITEM
    int PLAYER_RATE_DROP_EQUIP -> PLAYER_RATE_DROP_EQUIP
    int PLAYER_RATE_DROP_EQUIP_WEAPON -> PLAYER_RATE_DROP_EQUIP_WEAPON
    float PET_XP_RATE -> PET_XP_RATE
    int PET_FOOD_RATE -> PET_FOOD_RATE
    float SINEATER_XP_RATE -> SINEATER_XP_RATE
    int KARMA_DROP_LIMIT -> KARMA_DROP_LIMIT
    int KARMA_RATE_DROP -> KARMA_RATE_DROP
    int KARMA_RATE_DROP_ITEM -> KARMA_RATE_DROP_ITEM
    int KARMA_RATE_DROP_EQUIP -> KARMA_RATE_DROP_EQUIP
    int KARMA_RATE_DROP_EQUIP_WEAPON -> KARMA_RATE_DROP_EQUIP_WEAPON
    float ADENA_BOSS -> ADENA_BOSS
    float ADENA_RAID -> ADENA_RAID
    float ADENA_MINON -> ADENA_MINON
    float ITEMS_BOSS -> ITEMS_BOSS
    float ITEMS_RAID -> ITEMS_RAID
    float ITEMS_MINON -> ITEMS_MINON
    float SPOIL_BOSS -> SPOIL_BOSS
    float SPOIL_RAID -> SPOIL_RAID
    float SPOIL_MINON -> SPOIL_MINON
    boolean AUTO_LOOT -> AUTO_LOOT
    boolean AUTO_LOOT_BOSS -> AUTO_LOOT_BOSS
    boolean AUTO_LOOT_HERBS -> AUTO_LOOT_HERBS
    boolean REMOVE_CASTLE_CIRCLETS -> REMOVE_CASTLE_CIRCLETS
    double ALT_WEIGHT_LIMIT -> ALT_WEIGHT_LIMIT
    boolean ALT_GAME_SKILL_LEARN -> ALT_GAME_SKILL_LEARN
    boolean AUTO_LEARN_SKILLS -> AUTO_LEARN_SKILLS
    boolean ALT_GAME_CANCEL_BOW -> ALT_GAME_CANCEL_BOW
    boolean ALT_GAME_CANCEL_CAST -> ALT_GAME_CANCEL_CAST
    boolean ALT_GAME_TIREDNESS -> ALT_GAME_TIREDNESS
    int ALT_PARTY_RANGE -> ALT_PARTY_RANGE
    int ALT_PARTY_RANGE2 -> ALT_PARTY_RANGE2
    boolean ALT_GAME_SHIELD_BLOCKS -> ALT_GAME_SHIELD_BLOCKS
    int ALT_PERFECT_SHLD_BLOCK -> ALT_PERFECT_SHLD_BLOCK
    boolean ALT_GAME_MOB_ATTACK_AI -> ALT_GAME_MOB_ATTACK_AI
    boolean ALT_MOB_AGRO_IN_PEACEZONE -> ALT_MOB_AGRO_IN_PEACEZONE
    boolean ALT_GAME_FREIGHTS -> ALT_GAME_FREIGHTS
    int ALT_GAME_FREIGHT_PRICE -> ALT_GAME_FREIGHT_PRICE
    float ALT_GAME_SKILL_HIT_RATE -> ALT_GAME_SKILL_HIT_RATE
    boolean ALT_GAME_DELEVEL -> ALT_GAME_DELEVEL
    boolean ALT_GAME_MAGICFAILURES -> ALT_GAME_MAGICFAILURES
    boolean ALT_GAME_FREE_TELEPORT -> ALT_GAME_FREE_TELEPORT
    boolean ALT_RECOMMEND -> ALT_RECOMMEND
    boolean ALT_GAME_SUBCLASS_WITHOUT_QUESTS -> ALT_GAME_SUBCLASS_WITHOUT_QUESTS
    boolean ALT_RESTORE_EFFECTS_ON_SUBCLASS_CHANGE -> ALT_RESTORE_EFFECTS_ON_SUBCLASS_CHANGE
    boolean ALT_GAME_VIEWNPC -> ALT_GAME_VIEWNPC
    int ALT_CLAN_MEMBERS_FOR_WAR -> ALT_CLAN_MEMBERS_FOR_WAR
    int ALT_CLAN_JOIN_DAYS -> ALT_CLAN_JOIN_DAYS
    int ALT_CLAN_CREATE_DAYS -> ALT_CLAN_CREATE_DAYS
    int ALT_CLAN_DISSOLVE_DAYS -> ALT_CLAN_DISSOLVE_DAYS
    int ALT_ALLY_JOIN_DAYS_WHEN_LEAVED -> ALT_ALLY_JOIN_DAYS_WHEN_LEAVED
    int ALT_ALLY_JOIN_DAYS_WHEN_DISMISSED -> ALT_ALLY_JOIN_DAYS_WHEN_DISMISSED
    int ALT_ACCEPT_CLAN_DAYS_WHEN_DISMISSED -> ALT_ACCEPT_CLAN_DAYS_WHEN_DISMISSED
    int ALT_CREATE_ALLY_DAYS_WHEN_DISSOLVED -> ALT_CREATE_ALLY_DAYS_WHEN_DISSOLVED
    boolean ALT_GAME_NEW_CHAR_ALWAYS_IS_NEWBIE -> ALT_GAME_NEW_CHAR_ALWAYS_IS_NEWBIE
    boolean ALT_MEMBERS_CAN_WITHDRAW_FROM_CLANWH -> ALT_MEMBERS_CAN_WITHDRAW_FROM_CLANWH
    int ALT_MAX_NUM_OF_CLANS_IN_ALLY -> ALT_MAX_NUM_OF_CLANS_IN_ALLY
    boolean LIFE_CRYSTAL_NEEDED -> LIFE_CRYSTAL_NEEDED
    boolean SP_BOOK_NEEDED -> SP_BOOK_NEEDED
    boolean ES_SP_BOOK_NEEDED -> ES_SP_BOOK_NEEDED
    boolean ALT_PRIVILEGES_SECURE_CHECK -> ALT_PRIVILEGES_SECURE_CHECK
    int ALT_PRIVILEGES_DEFAULT_LEVEL -> ALT_PRIVILEGES_DEFAULT_LEVEL
    int ALT_MANOR_REFRESH_TIME -> ALT_MANOR_REFRESH_TIME
    int ALT_MANOR_REFRESH_MIN -> ALT_MANOR_REFRESH_MIN
    int ALT_MANOR_APPROVE_TIME -> ALT_MANOR_APPROVE_TIME
    int ALT_MANOR_APPROVE_MIN -> ALT_MANOR_APPROVE_MIN
    int ALT_MANOR_MAINTENANCE_PERIOD -> ALT_MANOR_MAINTENANCE_PERIOD
    boolean ALT_MANOR_SAVE_ALL_ACTIONS -> ALT_MANOR_SAVE_ALL_ACTIONS
    int ALT_MANOR_SAVE_PERIOD_RATE -> ALT_MANOR_SAVE_PERIOD_RATE
    int ALT_LOTTERY_PRIZE -> ALT_LOTTERY_PRIZE
    int ALT_LOTTERY_TICKET_PRICE -> ALT_LOTTERY_TICKET_PRICE
    float ALT_LOTTERY_5_NUMBER_RATE -> ALT_LOTTERY_5_NUMBER_RATE
    float ALT_LOTTERY_4_NUMBER_RATE -> ALT_LOTTERY_4_NUMBER_RATE
    float ALT_LOTTERY_3_NUMBER_RATE -> ALT_LOTTERY_3_NUMBER_RATE
    int ALT_LOTTERY_2_AND_1_NUMBER_PRIZE -> ALT_LOTTERY_2_AND_1_NUMBER_PRIZE
    int RIFT_MIN_PARTY_SIZE -> RIFT_MIN_PARTY_SIZE
    int RIFT_SPAWN_DELAY -> RIFT_SPAWN_DELAY
    int RIFT_MAX_JUMPS -> RIFT_MAX_JUMPS
    int RIFT_AUTO_JUMPS_TIME_MIN -> RIFT_AUTO_JUMPS_TIME_MIN
    int RIFT_AUTO_JUMPS_TIME_MAX -> RIFT_AUTO_JUMPS_TIME_MAX
    int RIFT_ENTER_COST_RECRUIT -> RIFT_ENTER_COST_RECRUIT
    int RIFT_ENTER_COST_SOLDIER -> RIFT_ENTER_COST_SOLDIER
    int RIFT_ENTER_COST_OFFICER -> RIFT_ENTER_COST_OFFICER
    int RIFT_ENTER_COST_CAPTAIN -> RIFT_ENTER_COST_CAPTAIN
    int RIFT_ENTER_COST_COMMANDER -> RIFT_ENTER_COST_COMMANDER
    int RIFT_ENTER_COST_HERO -> RIFT_ENTER_COST_HERO
    float RIFT_BOSS_ROOM_TIME_MUTIPLY -> RIFT_BOSS_ROOM_TIME_MUTIPLY
    float ALT_GAME_EXPONENT_XP -> ALT_GAME_EXPONENT_XP
    float ALT_GAME_EXPONENT_SP -> ALT_GAME_EXPONENT_SP
    boolean FORCE_INVENTORY_UPDATE -> FORCE_INVENTORY_UPDATE
    boolean ALLOW_GUARDS -> ALLOW_GUARDS
    boolean ALLOW_CLASS_MASTERS -> ALLOW_CLASS_MASTERS
    boolean ALLOW_CLASS_MASTERS_FIRST_CLASS -> ALLOW_CLASS_MASTERS_FIRST_CLASS
    boolean ALLOW_CLASS_MASTERS_SECOND_CLASS -> ALLOW_CLASS_MASTERS_SECOND_CLASS
    boolean ALLOW_CLASS_MASTERS_THIRD_CLASS -> ALLOW_CLASS_MASTERS_THIRD_CLASS
    boolean CLASS_MASTER_STRIDER_UPDATE -> CLASS_MASTER_STRIDER_UPDATE
    com.l2jfrozen.gameserver.config.ClassMasterSettings CLASS_MASTER_SETTINGS -> CLASS_MASTER_SETTINGS
    boolean ALT_GAME_KARMA_PLAYER_CAN_BE_KILLED_IN_PEACEZONE -> ALT_GAME_KARMA_PLAYER_CAN_BE_KILLED_IN_PEACEZONE
    boolean ALT_GAME_KARMA_PLAYER_CAN_SHOP -> ALT_GAME_KARMA_PLAYER_CAN_SHOP
    boolean ALT_GAME_KARMA_PLAYER_CAN_USE_GK -> ALT_GAME_KARMA_PLAYER_CAN_USE_GK
    boolean ALT_GAME_KARMA_PLAYER_CAN_TELEPORT -> ALT_GAME_KARMA_PLAYER_CAN_TELEPORT
    boolean ALT_GAME_KARMA_PLAYER_CAN_TRADE -> ALT_GAME_KARMA_PLAYER_CAN_TRADE
    boolean ALT_GAME_KARMA_PLAYER_CAN_USE_WAREHOUSE -> ALT_GAME_KARMA_PLAYER_CAN_USE_WAREHOUSE
    boolean ALT_KARMA_TELEPORT_TO_FLORAN -> ALT_KARMA_TELEPORT_TO_FLORAN
    byte BUFFS_MAX_AMOUNT -> BUFFS_MAX_AMOUNT
    byte DEBUFFS_MAX_AMOUNT -> DEBUFFS_MAX_AMOUNT
    boolean AUTO_LEARN_DIVINE_INSPIRATION -> AUTO_LEARN_DIVINE_INSPIRATION
    boolean DIVINE_SP_BOOK_NEEDED -> DIVINE_SP_BOOK_NEEDED
    boolean ALLOW_REMOTE_CLASS_MASTERS -> ALLOW_REMOTE_CLASS_MASTERS
    boolean DONT_DESTROY_SS -> DONT_DESTROY_SS
    int MAX_LEVEL_NEWBIE -> MAX_LEVEL_NEWBIE
    int MAX_LEVEL_NEWBIE_STATUS -> MAX_LEVEL_NEWBIE_STATUS
    int STANDARD_RESPAWN_DELAY -> STANDARD_RESPAWN_DELAY
    int ALT_RECOMMENDATIONS_NUMBER -> ALT_RECOMMENDATIONS_NUMBER
    int RAID_RANKING_1ST -> RAID_RANKING_1ST
    int RAID_RANKING_2ND -> RAID_RANKING_2ND
    int RAID_RANKING_3RD -> RAID_RANKING_3RD
    int RAID_RANKING_4TH -> RAID_RANKING_4TH
    int RAID_RANKING_5TH -> RAID_RANKING_5TH
    int RAID_RANKING_6TH -> RAID_RANKING_6TH
    int RAID_RANKING_7TH -> RAID_RANKING_7TH
    int RAID_RANKING_8TH -> RAID_RANKING_8TH
    int RAID_RANKING_9TH -> RAID_RANKING_9TH
    int RAID_RANKING_10TH -> RAID_RANKING_10TH
    int RAID_RANKING_UP_TO_50TH -> RAID_RANKING_UP_TO_50TH
    int RAID_RANKING_UP_TO_100TH -> RAID_RANKING_UP_TO_100TH
    boolean EXPERTISE_PENALTY -> EXPERTISE_PENALTY
    boolean MASTERY_PENALTY -> MASTERY_PENALTY
    int LEVEL_TO_GET_PENALITY -> LEVEL_TO_GET_PENALITY
    boolean MASTERY_WEAPON_PENALTY -> MASTERY_WEAPON_PENALTY
    int LEVEL_TO_GET_WEAPON_PENALITY -> LEVEL_TO_GET_WEAPON_PENALITY
    int ACTIVE_AUGMENTS_START_REUSE_TIME -> ACTIVE_AUGMENTS_START_REUSE_TIME
    boolean NPC_ATTACKABLE -> NPC_ATTACKABLE
    java.util.List INVUL_NPC_LIST -> INVUL_NPC_LIST
    boolean DISABLE_ATTACK_NPC_TYPE -> DISABLE_ATTACK_NPC_TYPE
    java.lang.String ALLOWED_NPC_TYPES -> ALLOWED_NPC_TYPES
    javolution.util.FastList LIST_ALLOWED_NPC_TYPES -> LIST_ALLOWED_NPC_TYPES
    boolean SELL_BY_ITEM -> SELL_BY_ITEM
    int SELL_ITEM -> SELL_ITEM
    int ALLOWED_SUBCLASS -> ALLOWED_SUBCLASS
    byte BASE_SUBCLASS_LEVEL -> BASE_SUBCLASS_LEVEL
    byte MAX_SUBCLASS_LEVEL -> MAX_SUBCLASS_LEVEL
    java.lang.String DISABLE_BOW_CLASSES_STRING -> DISABLE_BOW_CLASSES_STRING
    javolution.util.FastList DISABLE_BOW_CLASSES -> DISABLE_BOW_CLASSES
    boolean ALT_MOBS_STATS_BONUS -> ALT_MOBS_STATS_BONUS
    boolean ALT_PETS_STATS_BONUS -> ALT_PETS_STATS_BONUS
    boolean ENABLE_FESTIVAL -> ENABLE_FESTIVAL
    boolean ALT_GAME_REQUIRE_CASTLE_DAWN -> ALT_GAME_REQUIRE_CASTLE_DAWN
    boolean ALT_GAME_REQUIRE_CLAN_CASTLE -> ALT_GAME_REQUIRE_CLAN_CASTLE
    boolean ALT_REQUIRE_WIN_7S -> ALT_REQUIRE_WIN_7S
    int ALT_FESTIVAL_MIN_PLAYER -> ALT_FESTIVAL_MIN_PLAYER
    int ALT_MAXIMUM_PLAYER_CONTRIB -> ALT_MAXIMUM_PLAYER_CONTRIB
    long ALT_FESTIVAL_MANAGER_START -> ALT_FESTIVAL_MANAGER_START
    long ALT_FESTIVAL_LENGTH -> ALT_FESTIVAL_LENGTH
    long ALT_FESTIVAL_CYCLE_LENGTH -> ALT_FESTIVAL_CYCLE_LENGTH
    long ALT_FESTIVAL_FIRST_SPAWN -> ALT_FESTIVAL_FIRST_SPAWN
    long ALT_FESTIVAL_FIRST_SWARM -> ALT_FESTIVAL_FIRST_SWARM
    long ALT_FESTIVAL_SECOND_SPAWN -> ALT_FESTIVAL_SECOND_SPAWN
    long ALT_FESTIVAL_SECOND_SWARM -> ALT_FESTIVAL_SECOND_SWARM
    long ALT_FESTIVAL_CHEST_SPAWN -> ALT_FESTIVAL_CHEST_SPAWN
    long CH_TELE_FEE_RATIO -> CH_TELE_FEE_RATIO
    int CH_TELE1_FEE -> CH_TELE1_FEE
    int CH_TELE2_FEE -> CH_TELE2_FEE
    long CH_ITEM_FEE_RATIO -> CH_ITEM_FEE_RATIO
    int CH_ITEM1_FEE -> CH_ITEM1_FEE
    int CH_ITEM2_FEE -> CH_ITEM2_FEE
    int CH_ITEM3_FEE -> CH_ITEM3_FEE
    long CH_MPREG_FEE_RATIO -> CH_MPREG_FEE_RATIO
    int CH_MPREG1_FEE -> CH_MPREG1_FEE
    int CH_MPREG2_FEE -> CH_MPREG2_FEE
    int CH_MPREG3_FEE -> CH_MPREG3_FEE
    int CH_MPREG4_FEE -> CH_MPREG4_FEE
    int CH_MPREG5_FEE -> CH_MPREG5_FEE
    long CH_HPREG_FEE_RATIO -> CH_HPREG_FEE_RATIO
    int CH_HPREG1_FEE -> CH_HPREG1_FEE
    int CH_HPREG2_FEE -> CH_HPREG2_FEE
    int CH_HPREG3_FEE -> CH_HPREG3_FEE
    int CH_HPREG4_FEE -> CH_HPREG4_FEE
    int CH_HPREG5_FEE -> CH_HPREG5_FEE
    int CH_HPREG6_FEE -> CH_HPREG6_FEE
    int CH_HPREG7_FEE -> CH_HPREG7_FEE
    int CH_HPREG8_FEE -> CH_HPREG8_FEE
    int CH_HPREG9_FEE -> CH_HPREG9_FEE
    int CH_HPREG10_FEE -> CH_HPREG10_FEE
    int CH_HPREG11_FEE -> CH_HPREG11_FEE
    int CH_HPREG12_FEE -> CH_HPREG12_FEE
    int CH_HPREG13_FEE -> CH_HPREG13_FEE
    long CH_EXPREG_FEE_RATIO -> CH_EXPREG_FEE_RATIO
    int CH_EXPREG1_FEE -> CH_EXPREG1_FEE
    int CH_EXPREG2_FEE -> CH_EXPREG2_FEE
    int CH_EXPREG3_FEE -> CH_EXPREG3_FEE
    int CH_EXPREG4_FEE -> CH_EXPREG4_FEE
    int CH_EXPREG5_FEE -> CH_EXPREG5_FEE
    int CH_EXPREG6_FEE -> CH_EXPREG6_FEE
    int CH_EXPREG7_FEE -> CH_EXPREG7_FEE
    long CH_SUPPORT_FEE_RATIO -> CH_SUPPORT_FEE_RATIO
    int CH_SUPPORT1_FEE -> CH_SUPPORT1_FEE
    int CH_SUPPORT2_FEE -> CH_SUPPORT2_FEE
    int CH_SUPPORT3_FEE -> CH_SUPPORT3_FEE
    int CH_SUPPORT4_FEE -> CH_SUPPORT4_FEE
    int CH_SUPPORT5_FEE -> CH_SUPPORT5_FEE
    int CH_SUPPORT6_FEE -> CH_SUPPORT6_FEE
    int CH_SUPPORT7_FEE -> CH_SUPPORT7_FEE
    int CH_SUPPORT8_FEE -> CH_SUPPORT8_FEE
    long CH_CURTAIN_FEE_RATIO -> CH_CURTAIN_FEE_RATIO
    int CH_CURTAIN1_FEE -> CH_CURTAIN1_FEE
    int CH_CURTAIN2_FEE -> CH_CURTAIN2_FEE
    long CH_FRONT_FEE_RATIO -> CH_FRONT_FEE_RATIO
    int CH_FRONT1_FEE -> CH_FRONT1_FEE
    int CH_FRONT2_FEE -> CH_FRONT2_FEE
    int DEVASTATED_DAY -> DEVASTATED_DAY
    int DEVASTATED_HOUR -> DEVASTATED_HOUR
    int DEVASTATED_MINUTES -> DEVASTATED_MINUTES
    int PARTISAN_DAY -> PARTISAN_DAY
    int PARTISAN_HOUR -> PARTISAN_HOUR
    int PARTISAN_MINUTES -> PARTISAN_MINUTES
    boolean L2JMOD_CHAMPION_ENABLE -> L2JMOD_CHAMPION_ENABLE
    int L2JMOD_CHAMPION_FREQUENCY -> L2JMOD_CHAMPION_FREQUENCY
    int L2JMOD_CHAMP_MIN_LVL -> L2JMOD_CHAMP_MIN_LVL
    int L2JMOD_CHAMP_MAX_LVL -> L2JMOD_CHAMP_MAX_LVL
    int L2JMOD_CHAMPION_HP -> L2JMOD_CHAMPION_HP
    int L2JMOD_CHAMPION_REWARDS -> L2JMOD_CHAMPION_REWARDS
    int L2JMOD_CHAMPION_ADENAS_REWARDS -> L2JMOD_CHAMPION_ADENAS_REWARDS
    float L2JMOD_CHAMPION_HP_REGEN -> L2JMOD_CHAMPION_HP_REGEN
    float L2JMOD_CHAMPION_ATK -> L2JMOD_CHAMPION_ATK
    float L2JMOD_CHAMPION_SPD_ATK -> L2JMOD_CHAMPION_SPD_ATK
    int L2JMOD_CHAMPION_REWARD -> L2JMOD_CHAMPION_REWARD
    int L2JMOD_CHAMPION_REWARD_ID -> L2JMOD_CHAMPION_REWARD_ID
    int L2JMOD_CHAMPION_REWARD_QTY -> L2JMOD_CHAMPION_REWARD_QTY
    java.lang.String L2JMOD_CHAMP_TITLE -> L2JMOD_CHAMP_TITLE
    boolean L2JMOD_ALLOW_WEDDING -> L2JMOD_ALLOW_WEDDING
    int L2JMOD_WEDDING_PRICE -> L2JMOD_WEDDING_PRICE
    boolean L2JMOD_WEDDING_PUNISH_INFIDELITY -> L2JMOD_WEDDING_PUNISH_INFIDELITY
    boolean L2JMOD_WEDDING_TELEPORT -> L2JMOD_WEDDING_TELEPORT
    int L2JMOD_WEDDING_TELEPORT_PRICE -> L2JMOD_WEDDING_TELEPORT_PRICE
    int L2JMOD_WEDDING_TELEPORT_DURATION -> L2JMOD_WEDDING_TELEPORT_DURATION
    int L2JMOD_WEDDING_NAME_COLOR_NORMAL -> L2JMOD_WEDDING_NAME_COLOR_NORMAL
    int L2JMOD_WEDDING_NAME_COLOR_GEY -> L2JMOD_WEDDING_NAME_COLOR_GEY
    int L2JMOD_WEDDING_NAME_COLOR_LESBO -> L2JMOD_WEDDING_NAME_COLOR_LESBO
    boolean L2JMOD_WEDDING_SAMESEX -> L2JMOD_WEDDING_SAMESEX
    boolean L2JMOD_WEDDING_FORMALWEAR -> L2JMOD_WEDDING_FORMALWEAR
    int L2JMOD_WEDDING_DIVORCE_COSTS -> L2JMOD_WEDDING_DIVORCE_COSTS
    boolean WEDDING_GIVE_CUPID_BOW -> WEDDING_GIVE_CUPID_BOW
    boolean ANNOUNCE_WEDDING -> ANNOUNCE_WEDDING
    java.lang.String TVT_EVEN_TEAMS -> TVT_EVEN_TEAMS
    boolean TVT_ALLOW_INTERFERENCE -> TVT_ALLOW_INTERFERENCE
    boolean TVT_ALLOW_POTIONS -> TVT_ALLOW_POTIONS
    boolean TVT_ALLOW_SUMMON -> TVT_ALLOW_SUMMON
    boolean TVT_ON_START_REMOVE_ALL_EFFECTS -> TVT_ON_START_REMOVE_ALL_EFFECTS
    boolean TVT_ON_START_UNSUMMON_PET -> TVT_ON_START_UNSUMMON_PET
    boolean TVT_REVIVE_RECOVERY -> TVT_REVIVE_RECOVERY
    boolean TVT_ANNOUNCE_TEAM_STATS -> TVT_ANNOUNCE_TEAM_STATS
    boolean TVT_ANNOUNCE_REWARD -> TVT_ANNOUNCE_REWARD
    boolean TVT_PRICE_NO_KILLS -> TVT_PRICE_NO_KILLS
    boolean TVT_JOIN_CURSED -> TVT_JOIN_CURSED
    boolean TVT_COMMAND -> TVT_COMMAND
    long TVT_REVIVE_DELAY -> TVT_REVIVE_DELAY
    boolean TVT_OPEN_FORT_DOORS -> TVT_OPEN_FORT_DOORS
    boolean TVT_CLOSE_FORT_DOORS -> TVT_CLOSE_FORT_DOORS
    boolean TVT_OPEN_ADEN_COLOSSEUM_DOORS -> TVT_OPEN_ADEN_COLOSSEUM_DOORS
    boolean TVT_CLOSE_ADEN_COLOSSEUM_DOORS -> TVT_CLOSE_ADEN_COLOSSEUM_DOORS
    int TVT_TOP_KILLER_REWARD -> TVT_TOP_KILLER_REWARD
    int TVT_TOP_KILLER_QTY -> TVT_TOP_KILLER_QTY
    boolean TVT_AURA -> TVT_AURA
    boolean TVT_STATS_LOGGER -> TVT_STATS_LOGGER
    boolean TVT_REMOVE_BUFFS_ON_DIE -> TVT_REMOVE_BUFFS_ON_DIE
    int TW_TOWN_ID -> TW_TOWN_ID
    boolean TW_ALL_TOWNS -> TW_ALL_TOWNS
    int TW_ITEM_ID -> TW_ITEM_ID
    int TW_ITEM_AMOUNT -> TW_ITEM_AMOUNT
    boolean TW_ALLOW_KARMA -> TW_ALLOW_KARMA
    boolean TW_DISABLE_GK -> TW_DISABLE_GK
    boolean TW_RESS_ON_DIE -> TW_RESS_ON_DIE
    boolean REBIRTH_ENABLE -> REBIRTH_ENABLE
    java.lang.String[] REBIRTH_ITEM_PRICE -> REBIRTH_ITEM_PRICE
    java.lang.String[] REBIRTH_MAGE_SKILL -> REBIRTH_MAGE_SKILL
    java.lang.String[] REBIRTH_FIGHTER_SKILL -> REBIRTH_FIGHTER_SKILL
    int REBIRTH_MIN_LEVEL -> REBIRTH_MIN_LEVEL
    int REBIRTH_MAX -> REBIRTH_MAX
    int REBIRTH_RETURN_TO_LEVEL -> REBIRTH_RETURN_TO_LEVEL
    boolean PCB_ENABLE -> PCB_ENABLE
    int PCB_MIN_LEVEL -> PCB_MIN_LEVEL
    int PCB_POINT_MIN -> PCB_POINT_MIN
    int PCB_POINT_MAX -> PCB_POINT_MAX
    int PCB_CHANCE_DUAL_POINT -> PCB_CHANCE_DUAL_POINT
    int PCB_INTERVAL -> PCB_INTERVAL
    boolean ALT_DEV_NO_QUESTS -> ALT_DEV_NO_QUESTS
    boolean ALT_DEV_NO_SPAWNS -> ALT_DEV_NO_SPAWNS
    boolean ALT_DEV_NO_SCRIPT -> ALT_DEV_NO_SCRIPT
    boolean ALT_DEV_NO_RB -> ALT_DEV_NO_RB
    boolean ALT_DEV_NO_AI -> ALT_DEV_NO_AI
    boolean SKILLSDEBUG -> SKILLSDEBUG
    boolean ENABLE_OLYMPIAD_DEBUG -> ENABLE_OLYMPIAD_DEBUG
    boolean DEVELOPER -> DEVELOPER
    boolean ZONE_DEBUG -> ZONE_DEBUG
    boolean SERVER_LIST_TESTSERVER -> SERVER_LIST_TESTSERVER
    boolean BETASERVER -> BETASERVER
    boolean SERVER_LIST_BRACKET -> SERVER_LIST_BRACKET
    boolean SERVER_LIST_CLOCK -> SERVER_LIST_CLOCK
    boolean SERVER_GMONLY -> SERVER_GMONLY
    int REQUEST_ID -> REQUEST_ID
    boolean ACCEPT_ALTERNATE_ID -> ACCEPT_ALTERNATE_ID
    int MAXIMUM_ONLINE_USERS -> MAXIMUM_ONLINE_USERS
    java.lang.String CNAME_TEMPLATE -> CNAME_TEMPLATE
    java.lang.String PET_NAME_TEMPLATE -> PET_NAME_TEMPLATE
    java.lang.String CLAN_NAME_TEMPLATE -> CLAN_NAME_TEMPLATE
    java.lang.String ALLY_NAME_TEMPLATE -> ALLY_NAME_TEMPLATE
    int MAX_CHARACTERS_NUMBER_PER_IP -> MAX_CHARACTERS_NUMBER_PER_IP
    int MAX_CHARACTERS_NUMBER_PER_ACCOUNT -> MAX_CHARACTERS_NUMBER_PER_ACCOUNT
    int MIN_PROTOCOL_REVISION -> MIN_PROTOCOL_REVISION
    int MAX_PROTOCOL_REVISION -> MAX_PROTOCOL_REVISION
    boolean GMAUDIT -> GMAUDIT
    boolean LOG_CHAT -> LOG_CHAT
    boolean LOG_ITEMS -> LOG_ITEMS
    boolean LOG_HIGH_DAMAGES -> LOG_HIGH_DAMAGES
    boolean GAMEGUARD_L2NET_CHECK -> GAMEGUARD_L2NET_CHECK
    boolean LAZY_CACHE -> LAZY_CACHE
    boolean ENABLE_CACHE_INFO -> ENABLE_CACHE_INFO
    boolean IS_CRAFTING_ENABLED -> IS_CRAFTING_ENABLED
    int DWARF_RECIPE_LIMIT -> DWARF_RECIPE_LIMIT
    int COMMON_RECIPE_LIMIT -> COMMON_RECIPE_LIMIT
    boolean ALT_GAME_CREATION -> ALT_GAME_CREATION
    double ALT_GAME_CREATION_SPEED -> ALT_GAME_CREATION_SPEED
    double ALT_GAME_CREATION_XP_RATE -> ALT_GAME_CREATION_XP_RATE
    double ALT_GAME_CREATION_SP_RATE -> ALT_GAME_CREATION_SP_RATE
    boolean ALT_BLACKSMITH_USE_RECIPES -> ALT_BLACKSMITH_USE_RECIPES
    boolean ALLOW_AWAY_STATUS -> ALLOW_AWAY_STATUS
    int AWAY_TIMER -> AWAY_TIMER
    int BACK_TIMER -> BACK_TIMER
    int AWAY_TITLE_COLOR -> AWAY_TITLE_COLOR
    boolean AWAY_PLAYER_TAKE_AGGRO -> AWAY_PLAYER_TAKE_AGGRO
    boolean AWAY_PEACE_ZONE -> AWAY_PEACE_ZONE
    boolean ALLOW_FAKE_PLAYERS -> ALLOW_FAKE_PLAYERS
    boolean FAKEPLAYER_SET_NAME_COLOR -> FAKEPLAYER_SET_NAME_COLOR
    java.lang.Integer FAKEPLAYER_NAME_COLOR -> FAKEPLAYER_NAME_COLOR
    boolean BANKING_SYSTEM_ENABLED -> BANKING_SYSTEM_ENABLED
    int BANKING_SYSTEM_GOLDBARS -> BANKING_SYSTEM_GOLDBARS
    int BANKING_SYSTEM_ADENA -> BANKING_SYSTEM_ADENA
    boolean OFFLINE_TRADE_ENABLE -> OFFLINE_TRADE_ENABLE
    boolean OFFLINE_CRAFT_ENABLE -> OFFLINE_CRAFT_ENABLE
    boolean OFFLINE_SET_NAME_COLOR -> OFFLINE_SET_NAME_COLOR
    int OFFLINE_NAME_COLOR -> OFFLINE_NAME_COLOR
    boolean OFFLINE_COMMAND1 -> OFFLINE_COMMAND1
    boolean OFFLINE_COMMAND2 -> OFFLINE_COMMAND2
    boolean OFFLINE_LOGOUT -> OFFLINE_LOGOUT
    boolean OFFLINE_SLEEP_EFFECT -> OFFLINE_SLEEP_EFFECT
    boolean RESTORE_OFFLINERS -> RESTORE_OFFLINERS
    int OFFLINE_MAX_DAYS -> OFFLINE_MAX_DAYS
    boolean OFFLINE_DISCONNECT_FINISHED -> OFFLINE_DISCONNECT_FINISHED
    boolean DM_ALLOW_INTERFERENCE -> DM_ALLOW_INTERFERENCE
    boolean DM_ALLOW_POTIONS -> DM_ALLOW_POTIONS
    boolean DM_ALLOW_SUMMON -> DM_ALLOW_SUMMON
    boolean DM_JOIN_CURSED -> DM_JOIN_CURSED
    boolean DM_ON_START_REMOVE_ALL_EFFECTS -> DM_ON_START_REMOVE_ALL_EFFECTS
    boolean DM_ON_START_UNSUMMON_PET -> DM_ON_START_UNSUMMON_PET
    long DM_REVIVE_DELAY -> DM_REVIVE_DELAY
    boolean DM_COMMAND -> DM_COMMAND
    boolean DM_ENABLE_KILL_REWARD -> DM_ENABLE_KILL_REWARD
    int DM_KILL_REWARD_ID -> DM_KILL_REWARD_ID
    int DM_KILL_REWARD_AMOUNT -> DM_KILL_REWARD_AMOUNT
    boolean DM_ANNOUNCE_REWARD -> DM_ANNOUNCE_REWARD
    boolean DM_REVIVE_RECOVERY -> DM_REVIVE_RECOVERY
    int DM_SPAWN_OFFSET -> DM_SPAWN_OFFSET
    boolean DM_STATS_LOGGER -> DM_STATS_LOGGER
    boolean DM_ALLOW_HEALER_CLASSES -> DM_ALLOW_HEALER_CLASSES
    boolean DM_REMOVE_BUFFS_ON_DIE -> DM_REMOVE_BUFFS_ON_DIE
    java.lang.String CTF_EVEN_TEAMS -> CTF_EVEN_TEAMS
    boolean CTF_ALLOW_INTERFERENCE -> CTF_ALLOW_INTERFERENCE
    boolean CTF_ALLOW_POTIONS -> CTF_ALLOW_POTIONS
    boolean CTF_ALLOW_SUMMON -> CTF_ALLOW_SUMMON
    boolean CTF_ON_START_REMOVE_ALL_EFFECTS -> CTF_ON_START_REMOVE_ALL_EFFECTS
    boolean CTF_ON_START_UNSUMMON_PET -> CTF_ON_START_UNSUMMON_PET
    boolean CTF_ANNOUNCE_TEAM_STATS -> CTF_ANNOUNCE_TEAM_STATS
    boolean CTF_ANNOUNCE_REWARD -> CTF_ANNOUNCE_REWARD
    boolean CTF_JOIN_CURSED -> CTF_JOIN_CURSED
    boolean CTF_REVIVE_RECOVERY -> CTF_REVIVE_RECOVERY
    boolean CTF_COMMAND -> CTF_COMMAND
    boolean CTF_AURA -> CTF_AURA
    boolean CTF_STATS_LOGGER -> CTF_STATS_LOGGER
    int CTF_SPAWN_OFFSET -> CTF_SPAWN_OFFSET
    boolean CTF_REMOVE_BUFFS_ON_DIE -> CTF_REMOVE_BUFFS_ON_DIE
    boolean GM_TRADE_RESTRICTED_ITEMS -> GM_TRADE_RESTRICTED_ITEMS
    boolean GM_CRITANNOUNCER_NAME -> GM_CRITANNOUNCER_NAME
    boolean GM_RESTART_FIGHTING -> GM_RESTART_FIGHTING
    boolean PM_MESSAGE_ON_START -> PM_MESSAGE_ON_START
    boolean SERVER_TIME_ON_START -> SERVER_TIME_ON_START
    java.lang.String PM_SERVER_NAME -> PM_SERVER_NAME
    java.lang.String PM_TEXT1 -> PM_TEXT1
    java.lang.String PM_TEXT2 -> PM_TEXT2
    boolean NEW_PLAYER_EFFECT -> NEW_PLAYER_EFFECT
    boolean ONLINE_PLAYERS_ON_LOGIN -> ONLINE_PLAYERS_ON_LOGIN
    boolean SHOW_SERVER_VERSION -> SHOW_SERVER_VERSION
    boolean SUBSTUCK_SKILLS -> SUBSTUCK_SKILLS
    boolean ALT_SERVER_NAME_ENABLED -> ALT_SERVER_NAME_ENABLED
    boolean ANNOUNCE_TO_ALL_SPAWN_RB -> ANNOUNCE_TO_ALL_SPAWN_RB
    boolean ANNOUNCE_TRY_BANNED_ACCOUNT -> ANNOUNCE_TRY_BANNED_ACCOUNT
    java.lang.String ALT_Server_Name -> ALT_Server_Name
    boolean DONATOR_NAME_COLOR_ENABLED -> DONATOR_NAME_COLOR_ENABLED
    int DONATOR_NAME_COLOR -> DONATOR_NAME_COLOR
    int DONATOR_TITLE_COLOR -> DONATOR_TITLE_COLOR
    float DONATOR_XPSP_RATE -> DONATOR_XPSP_RATE
    float DONATOR_ADENA_RATE -> DONATOR_ADENA_RATE
    float DONATOR_DROP_RATE -> DONATOR_DROP_RATE
    float DONATOR_SPOIL_RATE -> DONATOR_SPOIL_RATE
    boolean CUSTOM_SPAWNLIST_TABLE -> CUSTOM_SPAWNLIST_TABLE
    boolean SAVE_GMSPAWN_ON_CUSTOM -> SAVE_GMSPAWN_ON_CUSTOM
    boolean DELETE_GMSPAWN_ON_CUSTOM -> DELETE_GMSPAWN_ON_CUSTOM
    boolean CUSTOM_NPC_TABLE -> CUSTOM_NPC_TABLE
    boolean CUSTOM_ITEM_TABLES -> CUSTOM_ITEM_TABLES
    boolean CUSTOM_ARMORSETS_TABLE -> CUSTOM_ARMORSETS_TABLE
    boolean CUSTOM_TELEPORT_TABLE -> CUSTOM_TELEPORT_TABLE
    boolean CUSTOM_DROPLIST_TABLE -> CUSTOM_DROPLIST_TABLE
    boolean CUSTOM_MERCHANT_TABLES -> CUSTOM_MERCHANT_TABLES
    boolean ALLOW_SIMPLE_STATS_VIEW -> ALLOW_SIMPLE_STATS_VIEW
    boolean ALLOW_DETAILED_STATS_VIEW -> ALLOW_DETAILED_STATS_VIEW
    boolean ALLOW_ONLINE_VIEW -> ALLOW_ONLINE_VIEW
    boolean WELCOME_HTM -> WELCOME_HTM
    java.lang.String ALLOWED_SKILLS -> ALLOWED_SKILLS
    javolution.util.FastList ALLOWED_SKILLS_LIST -> ALLOWED_SKILLS_LIST
    boolean PROTECTOR_PLAYER_PK -> PROTECTOR_PLAYER_PK
    boolean PROTECTOR_PLAYER_PVP -> PROTECTOR_PLAYER_PVP
    int PROTECTOR_RADIUS_ACTION -> PROTECTOR_RADIUS_ACTION
    int PROTECTOR_SKILLID -> PROTECTOR_SKILLID
    int PROTECTOR_SKILLLEVEL -> PROTECTOR_SKILLLEVEL
    int PROTECTOR_SKILLTIME -> PROTECTOR_SKILLTIME
    java.lang.String PROTECTOR_MESSAGE -> PROTECTOR_MESSAGE
    boolean CASTLE_SHIELD -> CASTLE_SHIELD
    boolean CLANHALL_SHIELD -> CLANHALL_SHIELD
    boolean APELLA_ARMORS -> APELLA_ARMORS
    boolean OATH_ARMORS -> OATH_ARMORS
    boolean CASTLE_CROWN -> CASTLE_CROWN
    boolean CASTLE_CIRCLETS -> CASTLE_CIRCLETS
    boolean KEEP_SUBCLASS_SKILLS -> KEEP_SUBCLASS_SKILLS
    boolean CHAR_TITLE -> CHAR_TITLE
    java.lang.String ADD_CHAR_TITLE -> ADD_CHAR_TITLE
    boolean NOBLE_CUSTOM_ITEMS -> NOBLE_CUSTOM_ITEMS
    boolean HERO_CUSTOM_ITEMS -> HERO_CUSTOM_ITEMS
    boolean ALLOW_CREATE_LVL -> ALLOW_CREATE_LVL
    int CHAR_CREATE_LVL -> CHAR_CREATE_LVL
    boolean SPAWN_CHAR -> SPAWN_CHAR
    int SPAWN_X -> SPAWN_X
    int SPAWN_Y -> SPAWN_Y
    int SPAWN_Z -> SPAWN_Z
    boolean ALLOW_HERO_SUBSKILL -> ALLOW_HERO_SUBSKILL
    int HERO_COUNT -> HERO_COUNT
    int CRUMA_TOWER_LEVEL_RESTRICT -> CRUMA_TOWER_LEVEL_RESTRICT
    boolean ALLOW_RAID_BOSS_PETRIFIED -> ALLOW_RAID_BOSS_PETRIFIED
    int ALT_PLAYER_PROTECTION_LEVEL -> ALT_PLAYER_PROTECTION_LEVEL
    boolean ALLOW_LOW_LEVEL_TRADE -> ALLOW_LOW_LEVEL_TRADE
    boolean USE_CHAT_FILTER -> USE_CHAT_FILTER
    int MONSTER_RETURN_DELAY -> MONSTER_RETURN_DELAY
    boolean SCROLL_STACKABLE -> SCROLL_STACKABLE
    boolean ALLOW_VERSION_COMMAND -> ALLOW_VERSION_COMMAND
    boolean ALLOW_CHAR_KILL_PROTECT -> ALLOW_CHAR_KILL_PROTECT
    int CLAN_LEADER_COLOR -> CLAN_LEADER_COLOR
    int CLAN_LEADER_COLOR_CLAN_LEVEL -> CLAN_LEADER_COLOR_CLAN_LEVEL
    boolean CLAN_LEADER_COLOR_ENABLED -> CLAN_LEADER_COLOR_ENABLED
    int CLAN_LEADER_COLORED -> CLAN_LEADER_COLORED
    boolean SAVE_RAIDBOSS_STATUS_INTO_DB -> SAVE_RAIDBOSS_STATUS_INTO_DB
    boolean DISABLE_WEIGHT_PENALTY -> DISABLE_WEIGHT_PENALTY
    int DIFFERENT_Z_CHANGE_OBJECT -> DIFFERENT_Z_CHANGE_OBJECT
    int DIFFERENT_Z_NEW_MOVIE -> DIFFERENT_Z_NEW_MOVIE
    int HERO_CUSTOM_ITEM_ID -> HERO_CUSTOM_ITEM_ID
    int NOOBLE_CUSTOM_ITEM_ID -> NOOBLE_CUSTOM_ITEM_ID
    int HERO_CUSTOM_DAY -> HERO_CUSTOM_DAY
    boolean ALLOW_FARM1_COMMAND -> ALLOW_FARM1_COMMAND
    boolean ALLOW_FARM2_COMMAND -> ALLOW_FARM2_COMMAND
    boolean ALLOW_PVP1_COMMAND -> ALLOW_PVP1_COMMAND
    boolean ALLOW_PVP2_COMMAND -> ALLOW_PVP2_COMMAND
    int FARM1_X -> FARM1_X
    int FARM1_Y -> FARM1_Y
    int FARM1_Z -> FARM1_Z
    int PVP1_X -> PVP1_X
    int PVP1_Y -> PVP1_Y
    int PVP1_Z -> PVP1_Z
    int FARM2_X -> FARM2_X
    int FARM2_Y -> FARM2_Y
    int FARM2_Z -> FARM2_Z
    int PVP2_X -> PVP2_X
    int PVP2_Y -> PVP2_Y
    int PVP2_Z -> PVP2_Z
    java.lang.String FARM1_CUSTOM_MESSAGE -> FARM1_CUSTOM_MESSAGE
    java.lang.String FARM2_CUSTOM_MESSAGE -> FARM2_CUSTOM_MESSAGE
    java.lang.String PVP1_CUSTOM_MESSAGE -> PVP1_CUSTOM_MESSAGE
    java.lang.String PVP2_CUSTOM_MESSAGE -> PVP2_CUSTOM_MESSAGE
    int KARMA_MIN_KARMA -> KARMA_MIN_KARMA
    int KARMA_MAX_KARMA -> KARMA_MAX_KARMA
    int KARMA_XP_DIVIDER -> KARMA_XP_DIVIDER
    int KARMA_LOST_BASE -> KARMA_LOST_BASE
    boolean KARMA_DROP_GM -> KARMA_DROP_GM
    boolean KARMA_AWARD_PK_KILL -> KARMA_AWARD_PK_KILL
    int KARMA_PK_LIMIT -> KARMA_PK_LIMIT
    java.lang.String KARMA_NONDROPPABLE_PET_ITEMS -> KARMA_NONDROPPABLE_PET_ITEMS
    java.lang.String KARMA_NONDROPPABLE_ITEMS -> KARMA_NONDROPPABLE_ITEMS
    javolution.util.FastList KARMA_LIST_NONDROPPABLE_PET_ITEMS -> KARMA_LIST_NONDROPPABLE_PET_ITEMS
    javolution.util.FastList KARMA_LIST_NONDROPPABLE_ITEMS -> KARMA_LIST_NONDROPPABLE_ITEMS
    int PVP_NORMAL_TIME -> PVP_NORMAL_TIME
    int PVP_PVP_TIME -> PVP_PVP_TIME
    boolean PVP_COLOR_SYSTEM_ENABLED -> PVP_COLOR_SYSTEM_ENABLED
    int PVP_AMOUNT1 -> PVP_AMOUNT1
    int PVP_AMOUNT2 -> PVP_AMOUNT2
    int PVP_AMOUNT3 -> PVP_AMOUNT3
    int PVP_AMOUNT4 -> PVP_AMOUNT4
    int PVP_AMOUNT5 -> PVP_AMOUNT5
    int NAME_COLOR_FOR_PVP_AMOUNT1 -> NAME_COLOR_FOR_PVP_AMOUNT1
    int NAME_COLOR_FOR_PVP_AMOUNT2 -> NAME_COLOR_FOR_PVP_AMOUNT2
    int NAME_COLOR_FOR_PVP_AMOUNT3 -> NAME_COLOR_FOR_PVP_AMOUNT3
    int NAME_COLOR_FOR_PVP_AMOUNT4 -> NAME_COLOR_FOR_PVP_AMOUNT4
    int NAME_COLOR_FOR_PVP_AMOUNT5 -> NAME_COLOR_FOR_PVP_AMOUNT5
    boolean PK_COLOR_SYSTEM_ENABLED -> PK_COLOR_SYSTEM_ENABLED
    int PK_AMOUNT1 -> PK_AMOUNT1
    int PK_AMOUNT2 -> PK_AMOUNT2
    int PK_AMOUNT3 -> PK_AMOUNT3
    int PK_AMOUNT4 -> PK_AMOUNT4
    int PK_AMOUNT5 -> PK_AMOUNT5
    int TITLE_COLOR_FOR_PK_AMOUNT1 -> TITLE_COLOR_FOR_PK_AMOUNT1
    int TITLE_COLOR_FOR_PK_AMOUNT2 -> TITLE_COLOR_FOR_PK_AMOUNT2
    int TITLE_COLOR_FOR_PK_AMOUNT3 -> TITLE_COLOR_FOR_PK_AMOUNT3
    int TITLE_COLOR_FOR_PK_AMOUNT4 -> TITLE_COLOR_FOR_PK_AMOUNT4
    int TITLE_COLOR_FOR_PK_AMOUNT5 -> TITLE_COLOR_FOR_PK_AMOUNT5
    boolean PVP_REWARD_ENABLED -> PVP_REWARD_ENABLED
    int PVP_REWARD_ID -> PVP_REWARD_ID
    int PVP_REWARD_AMOUNT -> PVP_REWARD_AMOUNT
    boolean PK_REWARD_ENABLED -> PK_REWARD_ENABLED
    int PK_REWARD_ID -> PK_REWARD_ID
    int PK_REWARD_AMOUNT -> PK_REWARD_AMOUNT
    int REWARD_PROTECT -> REWARD_PROTECT
    boolean ENABLE_PK_INFO -> ENABLE_PK_INFO
    boolean FLAGED_PLAYER_CAN_USE_GK -> FLAGED_PLAYER_CAN_USE_GK
    boolean PVPEXPSP_SYSTEM -> PVPEXPSP_SYSTEM
    int ADD_EXP -> ADD_EXP
    int ADD_SP -> ADD_SP
    boolean ALLOW_POTS_IN_PVP -> ALLOW_POTS_IN_PVP
    boolean ALLOW_SOE_IN_PVP -> ALLOW_SOE_IN_PVP
    boolean ANNOUNCE_PVP_KILL -> ANNOUNCE_PVP_KILL
    boolean ANNOUNCE_PK_KILL -> ANNOUNCE_PK_KILL
    boolean ANNOUNCE_ALL_KILL -> ANNOUNCE_ALL_KILL
    int DUEL_SPAWN_X -> DUEL_SPAWN_X
    int DUEL_SPAWN_Y -> DUEL_SPAWN_Y
    int DUEL_SPAWN_Z -> DUEL_SPAWN_Z
    boolean PVP_PK_TITLE -> PVP_PK_TITLE
    java.lang.String PVP_TITLE_PREFIX -> PVP_TITLE_PREFIX
    java.lang.String PK_TITLE_PREFIX -> PK_TITLE_PREFIX
    boolean WAR_LEGEND_AURA -> WAR_LEGEND_AURA
    int KILLS_TO_GET_WAR_LEGEND_AURA -> KILLS_TO_GET_WAR_LEGEND_AURA
    boolean ANTI_FARM_ENABLED -> ANTI_FARM_ENABLED
    boolean ANTI_FARM_CLAN_ALLY_ENABLED -> ANTI_FARM_CLAN_ALLY_ENABLED
    boolean ANTI_FARM_LVL_DIFF_ENABLED -> ANTI_FARM_LVL_DIFF_ENABLED
    int ANTI_FARM_MAX_LVL_DIFF -> ANTI_FARM_MAX_LVL_DIFF
    boolean ANTI_FARM_PDEF_DIFF_ENABLED -> ANTI_FARM_PDEF_DIFF_ENABLED
    int ANTI_FARM_MAX_PDEF_DIFF -> ANTI_FARM_MAX_PDEF_DIFF
    boolean ANTI_FARM_PATK_DIFF_ENABLED -> ANTI_FARM_PATK_DIFF_ENABLED
    int ANTI_FARM_MAX_PATK_DIFF -> ANTI_FARM_MAX_PATK_DIFF
    boolean ANTI_FARM_PARTY_ENABLED -> ANTI_FARM_PARTY_ENABLED
    boolean ANTI_FARM_IP_ENABLED -> ANTI_FARM_IP_ENABLED
    boolean ANTI_FARM_SUMMON -> ANTI_FARM_SUMMON
    int ALT_OLY_NUMBER_HEROS_EACH_CLASS -> ALT_OLY_NUMBER_HEROS_EACH_CLASS
    boolean ALT_OLY_LOG_FIGHTS -> ALT_OLY_LOG_FIGHTS
    boolean ALT_OLY_SHOW_MONTHLY_WINNERS -> ALT_OLY_SHOW_MONTHLY_WINNERS
    boolean ALT_OLY_ANNOUNCE_GAMES -> ALT_OLY_ANNOUNCE_GAMES
    java.util.List LIST_OLY_RESTRICTED_SKILLS -> LIST_OLY_RESTRICTED_SKILLS
    boolean ALT_OLY_AUGMENT_ALLOW -> ALT_OLY_AUGMENT_ALLOW
    int ALT_OLY_TELEPORT_COUNTDOWN -> ALT_OLY_TELEPORT_COUNTDOWN
    int ALT_OLY_START_TIME -> ALT_OLY_START_TIME
    int ALT_OLY_MIN -> ALT_OLY_MIN
    long ALT_OLY_CPERIOD -> ALT_OLY_CPERIOD
    long ALT_OLY_BATTLE -> ALT_OLY_BATTLE
    long ALT_OLY_WPERIOD -> ALT_OLY_WPERIOD
    long ALT_OLY_VPERIOD -> ALT_OLY_VPERIOD
    int ALT_OLY_CLASSED -> ALT_OLY_CLASSED
    int ALT_OLY_NONCLASSED -> ALT_OLY_NONCLASSED
    int ALT_OLY_BATTLE_REWARD_ITEM -> ALT_OLY_BATTLE_REWARD_ITEM
    int ALT_OLY_CLASSED_RITEM_C -> ALT_OLY_CLASSED_RITEM_C
    int ALT_OLY_NONCLASSED_RITEM_C -> ALT_OLY_NONCLASSED_RITEM_C
    int ALT_OLY_GP_PER_POINT -> ALT_OLY_GP_PER_POINT
    int ALT_OLY_MIN_POINT_FOR_EXCH -> ALT_OLY_MIN_POINT_FOR_EXCH
    int ALT_OLY_HERO_POINTS -> ALT_OLY_HERO_POINTS
    java.lang.String ALT_OLY_RESTRICTED_ITEMS -> ALT_OLY_RESTRICTED_ITEMS
    java.util.List LIST_OLY_RESTRICTED_ITEMS -> LIST_OLY_RESTRICTED_ITEMS
    boolean ALLOW_EVENTS_DURING_OLY -> ALLOW_EVENTS_DURING_OLY
    boolean ALT_OLY_RECHARGE_SKILLS -> ALT_OLY_RECHARGE_SKILLS
    int ALT_OLY_COMP_RITEM -> ALT_OLY_COMP_RITEM
    boolean REMOVE_CUBIC_OLYMPIAD -> REMOVE_CUBIC_OLYMPIAD
    boolean ALT_OLY_USE_CUSTOM_PERIOD_SETTINGS -> ALT_OLY_USE_CUSTOM_PERIOD_SETTINGS
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadPeriod ALT_OLY_PERIOD -> ALT_OLY_PERIOD
    int ALT_OLY_PERIOD_MULTIPLIER -> ALT_OLY_PERIOD_MULTIPLIER
    javolution.util.FastMap NORMAL_WEAPON_ENCHANT_LEVEL -> NORMAL_WEAPON_ENCHANT_LEVEL
    javolution.util.FastMap BLESS_WEAPON_ENCHANT_LEVEL -> BLESS_WEAPON_ENCHANT_LEVEL
    javolution.util.FastMap CRYSTAL_WEAPON_ENCHANT_LEVEL -> CRYSTAL_WEAPON_ENCHANT_LEVEL
    javolution.util.FastMap NORMAL_ARMOR_ENCHANT_LEVEL -> NORMAL_ARMOR_ENCHANT_LEVEL
    javolution.util.FastMap BLESS_ARMOR_ENCHANT_LEVEL -> BLESS_ARMOR_ENCHANT_LEVEL
    javolution.util.FastMap CRYSTAL_ARMOR_ENCHANT_LEVEL -> CRYSTAL_ARMOR_ENCHANT_LEVEL
    javolution.util.FastMap NORMAL_JEWELRY_ENCHANT_LEVEL -> NORMAL_JEWELRY_ENCHANT_LEVEL
    javolution.util.FastMap BLESS_JEWELRY_ENCHANT_LEVEL -> BLESS_JEWELRY_ENCHANT_LEVEL
    javolution.util.FastMap CRYSTAL_JEWELRY_ENCHANT_LEVEL -> CRYSTAL_JEWELRY_ENCHANT_LEVEL
    int ENCHANT_SAFE_MAX -> ENCHANT_SAFE_MAX
    int ENCHANT_SAFE_MAX_FULL -> ENCHANT_SAFE_MAX_FULL
    int ENCHANT_WEAPON_MAX -> ENCHANT_WEAPON_MAX
    int ENCHANT_ARMOR_MAX -> ENCHANT_ARMOR_MAX
    int ENCHANT_JEWELRY_MAX -> ENCHANT_JEWELRY_MAX
    int CRYSTAL_ENCHANT_MAX -> CRYSTAL_ENCHANT_MAX
    int CRYSTAL_ENCHANT_MIN -> CRYSTAL_ENCHANT_MIN
    boolean ENABLE_DWARF_ENCHANT_BONUS -> ENABLE_DWARF_ENCHANT_BONUS
    int DWARF_ENCHANT_MIN_LEVEL -> DWARF_ENCHANT_MIN_LEVEL
    int DWARF_ENCHANT_BONUS -> DWARF_ENCHANT_BONUS
    int AUGMENTATION_NG_SKILL_CHANCE -> AUGMENTATION_NG_SKILL_CHANCE
    int AUGMENTATION_MID_SKILL_CHANCE -> AUGMENTATION_MID_SKILL_CHANCE
    int AUGMENTATION_HIGH_SKILL_CHANCE -> AUGMENTATION_HIGH_SKILL_CHANCE
    int AUGMENTATION_TOP_SKILL_CHANCE -> AUGMENTATION_TOP_SKILL_CHANCE
    int AUGMENTATION_BASESTAT_CHANCE -> AUGMENTATION_BASESTAT_CHANCE
    int AUGMENTATION_NG_GLOW_CHANCE -> AUGMENTATION_NG_GLOW_CHANCE
    int AUGMENTATION_MID_GLOW_CHANCE -> AUGMENTATION_MID_GLOW_CHANCE
    int AUGMENTATION_HIGH_GLOW_CHANCE -> AUGMENTATION_HIGH_GLOW_CHANCE
    int AUGMENTATION_TOP_GLOW_CHANCE -> AUGMENTATION_TOP_GLOW_CHANCE
    boolean DELETE_AUGM_PASSIVE_ON_CHANGE -> DELETE_AUGM_PASSIVE_ON_CHANGE
    boolean DELETE_AUGM_ACTIVE_ON_CHANGE -> DELETE_AUGM_ACTIVE_ON_CHANGE
    boolean ENCHANT_HERO_WEAPON -> ENCHANT_HERO_WEAPON
    int SOUL_CRYSTAL_BREAK_CHANCE -> SOUL_CRYSTAL_BREAK_CHANCE
    int SOUL_CRYSTAL_LEVEL_CHANCE -> SOUL_CRYSTAL_LEVEL_CHANCE
    int SOUL_CRYSTAL_MAX_LEVEL -> SOUL_CRYSTAL_MAX_LEVEL
    int CUSTOM_ENCHANT_VALUE -> CUSTOM_ENCHANT_VALUE
    int ALT_OLY_ENCHANT_LIMIT -> ALT_OLY_ENCHANT_LIMIT
    int BREAK_ENCHANT -> BREAK_ENCHANT
    int GM_OVER_ENCHANT -> GM_OVER_ENCHANT
    int MAX_ITEM_ENCHANT_KICK -> MAX_ITEM_ENCHANT_KICK
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_USE_ITEM -> FLOOD_PROTECTOR_USE_ITEM
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_ROLL_DICE -> FLOOD_PROTECTOR_ROLL_DICE
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_FIREWORK -> FLOOD_PROTECTOR_FIREWORK
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_ITEM_PET_SUMMON -> FLOOD_PROTECTOR_ITEM_PET_SUMMON
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_HERO_VOICE -> FLOOD_PROTECTOR_HERO_VOICE
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_GLOBAL_CHAT -> FLOOD_PROTECTOR_GLOBAL_CHAT
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_SUBCLASS -> FLOOD_PROTECTOR_SUBCLASS
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_DROP_ITEM -> FLOOD_PROTECTOR_DROP_ITEM
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_AUGMENT_SCRIPT -> FLOOD_PROTECTOR_AUGMENT_SCRIPT
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_ENCHANT_ITEM -> FLOOD_PROTECTOR_ENCHANT_ITEM
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_SERVER_BYPASS -> FLOOD_PROTECTOR_SERVER_BYPASS
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_MULTISELL -> FLOOD_PROTECTOR_MULTISELL
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_TRANSACTION -> FLOOD_PROTECTOR_TRANSACTION
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_MANUFACTURE -> FLOOD_PROTECTOR_MANUFACTURE
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_MANOR -> FLOOD_PROTECTOR_MANOR
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_CHARACTER_SELECT -> FLOOD_PROTECTOR_CHARACTER_SELECT
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_UNKNOWN_PACKETS -> FLOOD_PROTECTOR_UNKNOWN_PACKETS
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_PARTY_INVITATION -> FLOOD_PROTECTOR_PARTY_INVITATION
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_SAY_ACTION -> FLOOD_PROTECTOR_SAY_ACTION
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_MOVE_ACTION -> FLOOD_PROTECTOR_MOVE_ACTION
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_GENERIC_ACTION -> FLOOD_PROTECTOR_GENERIC_ACTION
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_MACRO -> FLOOD_PROTECTOR_MACRO
    com.l2jfrozen.gameserver.config.FloodProtectorConfig FLOOD_PROTECTOR_POTION -> FLOOD_PROTECTOR_POTION
    boolean ENABLE_UNK_PACKET_PROTECTION -> ENABLE_UNK_PACKET_PROTECTION
    int MAX_UNKNOWN_PACKETS -> MAX_UNKNOWN_PACKETS
    int UNKNOWN_PACKETS_PUNiSHMENT -> UNKNOWN_PACKETS_PUNiSHMENT
    boolean DEBUG_UNKNOWN_PACKETS -> DEBUG_UNKNOWN_PACKETS
    boolean DEBUG_PACKETS -> DEBUG_PACKETS
    boolean CHECK_SKILLS_ON_ENTER -> CHECK_SKILLS_ON_ENTER
    boolean CHECK_NAME_ON_LOGIN -> CHECK_NAME_ON_LOGIN
    boolean L2WALKER_PROTEC -> L2WALKER_PROTEC
    boolean PROTECTED_ENCHANT -> PROTECTED_ENCHANT
    boolean ONLY_GM_ITEMS_FREE -> ONLY_GM_ITEMS_FREE
    boolean ONLY_GM_TELEPORT_FREE -> ONLY_GM_TELEPORT_FREE
    boolean BOT_PROTECTOR -> BOT_PROTECTOR
    int BOT_PROTECTOR_FIRST_CHECK -> BOT_PROTECTOR_FIRST_CHECK
    int BOT_PROTECTOR_NEXT_CHECK -> BOT_PROTECTOR_NEXT_CHECK
    int BOT_PROTECTOR_WAIT_ANSVER -> BOT_PROTECTOR_WAIT_ANSVER
    boolean ALLOW_DUALBOX -> ALLOW_DUALBOX
    int ALLOWED_BOXES -> ALLOWED_BOXES
    boolean ALLOW_DUALBOX_OLY -> ALLOW_DUALBOX_OLY
    boolean ALLOW_DUALBOX_EVENT -> ALLOW_DUALBOX_EVENT
    java.lang.String USER -> USER
    int KEY -> KEY
    int BLOW_ATTACK_FRONT -> BLOW_ATTACK_FRONT
    int BLOW_ATTACK_SIDE -> BLOW_ATTACK_SIDE
    int BLOW_ATTACK_BEHIND -> BLOW_ATTACK_BEHIND
    int BACKSTAB_ATTACK_FRONT -> BACKSTAB_ATTACK_FRONT
    int BACKSTAB_ATTACK_SIDE -> BACKSTAB_ATTACK_SIDE
    int BACKSTAB_ATTACK_BEHIND -> BACKSTAB_ATTACK_BEHIND
    int MAX_PATK_SPEED -> MAX_PATK_SPEED
    int MAX_MATK_SPEED -> MAX_MATK_SPEED
    int MAX_PCRIT_RATE -> MAX_PCRIT_RATE
    int MAX_MCRIT_RATE -> MAX_MCRIT_RATE
    float MCRIT_RATE_MUL -> MCRIT_RATE_MUL
    int RUN_SPD_BOOST -> RUN_SPD_BOOST
    int MAX_RUN_SPEED -> MAX_RUN_SPEED
    float ALT_MAGES_PHYSICAL_DAMAGE_MULTI -> ALT_MAGES_PHYSICAL_DAMAGE_MULTI
    float ALT_MAGES_MAGICAL_DAMAGE_MULTI -> ALT_MAGES_MAGICAL_DAMAGE_MULTI
    float ALT_FIGHTERS_PHYSICAL_DAMAGE_MULTI -> ALT_FIGHTERS_PHYSICAL_DAMAGE_MULTI
    float ALT_FIGHTERS_MAGICAL_DAMAGE_MULTI -> ALT_FIGHTERS_MAGICAL_DAMAGE_MULTI
    float ALT_PETS_PHYSICAL_DAMAGE_MULTI -> ALT_PETS_PHYSICAL_DAMAGE_MULTI
    float ALT_PETS_MAGICAL_DAMAGE_MULTI -> ALT_PETS_MAGICAL_DAMAGE_MULTI
    float ALT_NPC_PHYSICAL_DAMAGE_MULTI -> ALT_NPC_PHYSICAL_DAMAGE_MULTI
    float ALT_NPC_MAGICAL_DAMAGE_MULTI -> ALT_NPC_MAGICAL_DAMAGE_MULTI
    float ALT_DAGGER_DMG_VS_HEAVY -> ALT_DAGGER_DMG_VS_HEAVY
    float ALT_DAGGER_DMG_VS_ROBE -> ALT_DAGGER_DMG_VS_ROBE
    float ALT_DAGGER_DMG_VS_LIGHT -> ALT_DAGGER_DMG_VS_LIGHT
    boolean ALLOW_RAID_LETHAL -> ALLOW_RAID_LETHAL
    boolean ALLOW_LETHAL_PROTECTION_MOBS -> ALLOW_LETHAL_PROTECTION_MOBS
    java.lang.String LETHAL_PROTECTED_MOBS -> LETHAL_PROTECTED_MOBS
    javolution.util.FastList LIST_LETHAL_PROTECTED_MOBS -> LIST_LETHAL_PROTECTED_MOBS
    float MAGIC_CRITICAL_POWER -> MAGIC_CRITICAL_POWER
    float STUN_CHANCE_MODIFIER -> STUN_CHANCE_MODIFIER
    float BLEED_CHANCE_MODIFIER -> BLEED_CHANCE_MODIFIER
    float POISON_CHANCE_MODIFIER -> POISON_CHANCE_MODIFIER
    float PARALYZE_CHANCE_MODIFIER -> PARALYZE_CHANCE_MODIFIER
    float ROOT_CHANCE_MODIFIER -> ROOT_CHANCE_MODIFIER
    float SLEEP_CHANCE_MODIFIER -> SLEEP_CHANCE_MODIFIER
    float FEAR_CHANCE_MODIFIER -> FEAR_CHANCE_MODIFIER
    float CONFUSION_CHANCE_MODIFIER -> CONFUSION_CHANCE_MODIFIER
    float DEBUFF_CHANCE_MODIFIER -> DEBUFF_CHANCE_MODIFIER
    float BUFF_CHANCE_MODIFIER -> BUFF_CHANCE_MODIFIER
    boolean SEND_SKILLS_CHANCE_TO_PLAYERS -> SEND_SKILLS_CHANCE_TO_PLAYERS
    boolean REMOVE_WEAPON_SUBCLASS -> REMOVE_WEAPON_SUBCLASS
    boolean REMOVE_CHEST_SUBCLASS -> REMOVE_CHEST_SUBCLASS
    boolean REMOVE_LEG_SUBCLASS -> REMOVE_LEG_SUBCLASS
    boolean ENABLE_CLASS_DAMAGES -> ENABLE_CLASS_DAMAGES
    boolean ENABLE_CLASS_DAMAGES_IN_OLY -> ENABLE_CLASS_DAMAGES_IN_OLY
    boolean ENABLE_CLASS_DAMAGES_LOGGER -> ENABLE_CLASS_DAMAGES_LOGGER
    boolean LEAVE_BUFFS_ON_DIE -> LEAVE_BUFFS_ON_DIE
    boolean ALT_RAIDS_STATS_BONUS -> ALT_RAIDS_STATS_BONUS
    int GEODATA -> GEODATA
    boolean GEODATA_CELLFINDING -> GEODATA_CELLFINDING
    boolean ALLOW_PLAYERS_PATHNODE -> ALLOW_PLAYERS_PATHNODE
    boolean FORCE_GEODATA -> FORCE_GEODATA
    com.l2jfrozen.gameserver.config.CorrectSpawnsZ GEO_CORRECT_Z -> GEO_CORRECT_Z
    boolean ACCEPT_GEOEDITOR_CONN -> ACCEPT_GEOEDITOR_CONN
    int GEOEDITOR_PORT -> GEOEDITOR_PORT
    int WORLD_SIZE_MIN_X -> WORLD_SIZE_MIN_X
    int WORLD_SIZE_MAX_X -> WORLD_SIZE_MAX_X
    int WORLD_SIZE_MIN_Y -> WORLD_SIZE_MIN_Y
    int WORLD_SIZE_MAX_Y -> WORLD_SIZE_MAX_Y
    int WORLD_SIZE_MIN_Z -> WORLD_SIZE_MIN_Z
    int WORLD_SIZE_MAX_Z -> WORLD_SIZE_MAX_Z
    int COORD_SYNCHRONIZE -> COORD_SYNCHRONIZE
    boolean FALL_DAMAGE -> FALL_DAMAGE
    boolean ALLOW_WATER -> ALLOW_WATER
    int RBLOCKRAGE -> RBLOCKRAGE
    boolean PLAYERS_CAN_HEAL_RB -> PLAYERS_CAN_HEAL_RB
    java.util.HashMap RBS_SPECIFIC_LOCK_RAGE -> RBS_SPECIFIC_LOCK_RAGE
    boolean ALLOW_DIRECT_TP_TO_BOSS_ROOM -> ALLOW_DIRECT_TP_TO_BOSS_ROOM
    boolean ANTHARAS_OLD -> ANTHARAS_OLD
    int ANTHARAS_CLOSE -> ANTHARAS_CLOSE
    int ANTHARAS_DESPAWN_TIME -> ANTHARAS_DESPAWN_TIME
    int ANTHARAS_RESP_FIRST -> ANTHARAS_RESP_FIRST
    int ANTHARAS_RESP_SECOND -> ANTHARAS_RESP_SECOND
    int ANTHARAS_WAIT_TIME -> ANTHARAS_WAIT_TIME
    float ANTHARAS_POWER_MULTIPLIER -> ANTHARAS_POWER_MULTIPLIER
    int BAIUM_SLEEP -> BAIUM_SLEEP
    int BAIUM_RESP_FIRST -> BAIUM_RESP_FIRST
    int BAIUM_RESP_SECOND -> BAIUM_RESP_SECOND
    float BAIUM_POWER_MULTIPLIER -> BAIUM_POWER_MULTIPLIER
    int CORE_RESP_MINION -> CORE_RESP_MINION
    int CORE_RESP_FIRST -> CORE_RESP_FIRST
    int CORE_RESP_SECOND -> CORE_RESP_SECOND
    int CORE_LEVEL -> CORE_LEVEL
    int CORE_RING_CHANCE -> CORE_RING_CHANCE
    float CORE_POWER_MULTIPLIER -> CORE_POWER_MULTIPLIER
    int QA_RESP_NURSE -> QA_RESP_NURSE
    int QA_RESP_ROYAL -> QA_RESP_ROYAL
    int QA_RESP_FIRST -> QA_RESP_FIRST
    int QA_RESP_SECOND -> QA_RESP_SECOND
    int QA_LEVEL -> QA_LEVEL
    int QA_RING_CHANCE -> QA_RING_CHANCE
    float QA_POWER_MULTIPLIER -> QA_POWER_MULTIPLIER
    float LEVEL_DIFF_MULTIPLIER_MINION -> LEVEL_DIFF_MULTIPLIER_MINION
    int HPH_FIXINTERVALOFHALTER -> HPH_FIXINTERVALOFHALTER
    int HPH_RANDOMINTERVALOFHALTER -> HPH_RANDOMINTERVALOFHALTER
    int HPH_APPTIMEOFHALTER -> HPH_APPTIMEOFHALTER
    int HPH_ACTIVITYTIMEOFHALTER -> HPH_ACTIVITYTIMEOFHALTER
    int HPH_FIGHTTIMEOFHALTER -> HPH_FIGHTTIMEOFHALTER
    int HPH_CALLROYALGUARDHELPERCOUNT -> HPH_CALLROYALGUARDHELPERCOUNT
    int HPH_CALLROYALGUARDHELPERINTERVAL -> HPH_CALLROYALGUARDHELPERINTERVAL
    int HPH_INTERVALOFDOOROFALTER -> HPH_INTERVALOFDOOROFALTER
    int HPH_TIMEOFLOCKUPDOOROFALTAR -> HPH_TIMEOFLOCKUPDOOROFALTAR
    int ZAKEN_RESP_FIRST -> ZAKEN_RESP_FIRST
    int ZAKEN_RESP_SECOND -> ZAKEN_RESP_SECOND
    int ZAKEN_LEVEL -> ZAKEN_LEVEL
    int ZAKEN_EARRING_CHANCE -> ZAKEN_EARRING_CHANCE
    float ZAKEN_POWER_MULTIPLIER -> ZAKEN_POWER_MULTIPLIER
    int ORFEN_RESP_FIRST -> ORFEN_RESP_FIRST
    int ORFEN_RESP_SECOND -> ORFEN_RESP_SECOND
    int ORFEN_LEVEL -> ORFEN_LEVEL
    int ORFEN_EARRING_CHANCE -> ORFEN_EARRING_CHANCE
    float ORFEN_POWER_MULTIPLIER -> ORFEN_POWER_MULTIPLIER
    int VALAKAS_RESP_FIRST -> VALAKAS_RESP_FIRST
    int VALAKAS_RESP_SECOND -> VALAKAS_RESP_SECOND
    int VALAKAS_WAIT_TIME -> VALAKAS_WAIT_TIME
    int VALAKAS_DESPAWN_TIME -> VALAKAS_DESPAWN_TIME
    float VALAKAS_POWER_MULTIPLIER -> VALAKAS_POWER_MULTIPLIER
    int FRINTEZZA_RESP_FIRST -> FRINTEZZA_RESP_FIRST
    int FRINTEZZA_RESP_SECOND -> FRINTEZZA_RESP_SECOND
    float FRINTEZZA_POWER_MULTIPLIER -> FRINTEZZA_POWER_MULTIPLIER
    boolean BYPASS_FRINTEZZA_PARTIES_CHECK -> BYPASS_FRINTEZZA_PARTIES_CHECK
    int FRINTEZZA_MIN_PARTIES -> FRINTEZZA_MIN_PARTIES
    int FRINTEZZA_MAX_PARTIES -> FRINTEZZA_MAX_PARTIES
    java.lang.String RAID_INFO_IDS -> RAID_INFO_IDS
    javolution.util.FastList RAID_INFO_IDS_LIST -> RAID_INFO_IDS_LIST
    boolean SCRIPT_DEBUG -> SCRIPT_DEBUG
    boolean SCRIPT_ALLOW_COMPILATION -> SCRIPT_ALLOW_COMPILATION
    boolean SCRIPT_CACHE -> SCRIPT_CACHE
    boolean SCRIPT_ERROR_LOG -> SCRIPT_ERROR_LOG
    boolean POWERPAK_ENABLED -> POWERPAK_ENABLED
    java.util.Map EXTENDERS -> EXTENDERS
    long AUTOSAVE_INITIAL_TIME -> AUTOSAVE_INITIAL_TIME
    long AUTOSAVE_DELAY_TIME -> AUTOSAVE_DELAY_TIME
    long CHECK_CONNECTION_INACTIVITY_TIME -> CHECK_CONNECTION_INACTIVITY_TIME
    long CHECK_CONNECTION_INITIAL_TIME -> CHECK_CONNECTION_INITIAL_TIME
    long CHECK_CONNECTION_DELAY_TIME -> CHECK_CONNECTION_DELAY_TIME
    long CLEANDB_INITIAL_TIME -> CLEANDB_INITIAL_TIME
    long CLEANDB_DELAY_TIME -> CLEANDB_DELAY_TIME
    long CHECK_TELEPORT_ZOMBIE_DELAY_TIME -> CHECK_TELEPORT_ZOMBIE_DELAY_TIME
    long DEADLOCKCHECK_INTIAL_TIME -> DEADLOCKCHECK_INTIAL_TIME
    long DEADLOCKCHECK_DELAY_TIME -> DEADLOCKCHECK_DELAY_TIME
    boolean AUTOSAVEMANAGER_LOG -> AUTOSAVEMANAGER_LOG
    java.util.ArrayList QUESTION_LIST -> QUESTION_LIST
    java.lang.String HEXID_FILE -> HEXID_FILE
    boolean ENABLE_OLYMPIAD_DISCONNECTION_DEBUG -> ENABLE_OLYMPIAD_DISCONNECTION_DEBUG
    int SERVER_ID -> SERVER_ID
    byte[] HEX_ID -> HEX_ID
    void <init>() -> <init>
    void loadAccessConfig() -> loadAccessConfig
    void loadOptionsConfig() -> loadOptionsConfig
    void loadServerConfig() -> loadServerConfig
    int getServerTypeId(java.lang.String[]) -> getServerTypeId
    void loadServerVersionConfig() -> loadServerVersionConfig
    void loadDPVersionConfig() -> loadDPVersionConfig
    void loadIdFactoryConfig() -> loadIdFactoryConfig
    void loadOtherConfig() -> loadOtherConfig
    void loadRatesConfig() -> loadRatesConfig
    void loadAltConfig() -> loadAltConfig
    void load7sConfig() -> load7sConfig
    void loadCHConfig() -> loadCHConfig
    void loadElitCHConfig() -> loadElitCHConfig
    void loadChampionConfig() -> loadChampionConfig
    void loadWeddingConfig() -> loadWeddingConfig
    void loadTVTConfig() -> loadTVTConfig
    void loadTWConfig() -> loadTWConfig
    void loadREBIRTHConfig() -> loadREBIRTHConfig
    void loadPCBPointConfig() -> loadPCBPointConfig
    void loadDevConfig() -> loadDevConfig
    void loadCraftConfig() -> loadCraftConfig
    void loadAWAYConfig() -> loadAWAYConfig
    void loadFakePlayerConfig() -> loadFakePlayerConfig
    void loadBankingConfig() -> loadBankingConfig
    void loadOfflineConfig() -> loadOfflineConfig
    void loadDMConfig() -> loadDMConfig
    void loadCTFConfig() -> loadCTFConfig
    void loadL2JFrozenConfig() -> loadL2JFrozenConfig
    void loadPvpConfig() -> loadPvpConfig
    void loadOlympConfig() -> loadOlympConfig
    void loadEnchantConfig() -> loadEnchantConfig
    void loadFloodConfig() -> loadFloodConfig
    void loadFloodProtectorConfigs(com.l2jfrozen.common.L2Properties) -> loadFloodProtectorConfigs
    void loadFloodProtectorConfig(com.l2jfrozen.common.L2Properties,com.l2jfrozen.gameserver.config.FloodProtectorConfig,java.lang.String,java.lang.String) -> loadFloodProtectorConfig
    void loadPacketConfig() -> loadPacketConfig
    void loadPOtherConfig() -> loadPOtherConfig
    void loadKeyOptions() -> loadKeyOptions
    void loadPHYSICSConfig() -> loadPHYSICSConfig
    void loadgeodataConfig() -> loadgeodataConfig
    void loadBossConfig() -> loadBossConfig
    void loadScriptConfig() -> loadScriptConfig
    void loadPowerPak() -> loadPowerPak
    void loadDaemonsConf() -> loadDaemonsConf
    void loadFilter() -> loadFilter
    void loadQuestion() -> loadQuestion
    void loadHexed() -> loadHexed
    void load() -> load
    boolean setParameterValue(java.lang.String,java.lang.String) -> setParameterValue
    void unallocateFilterBuffer() -> unallocateFilterBuffer
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.config.CorrectSpawnsZ -> com.l2jfrozen.gameserver.config.CorrectSpawnsZ:
    com.l2jfrozen.gameserver.config.CorrectSpawnsZ TOWN -> TOWN
    com.l2jfrozen.gameserver.config.CorrectSpawnsZ MONSTER -> MONSTER
    com.l2jfrozen.gameserver.config.CorrectSpawnsZ ALL -> ALL
    com.l2jfrozen.gameserver.config.CorrectSpawnsZ NONE -> NONE
    com.l2jfrozen.gameserver.config.CorrectSpawnsZ[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.config.CorrectSpawnsZ[] values() -> values
    com.l2jfrozen.gameserver.config.CorrectSpawnsZ valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.config.FService -> com.l2jfrozen.gameserver.config.FService:
    java.lang.String ID_CONFIG_FILE -> ID_CONFIG_FILE
    java.lang.String EXTENDER_FILE -> EXTENDER_FILE
    java.lang.String SCRIPT_FILE -> SCRIPT_FILE
    java.lang.String DAEMONS_FILE -> DAEMONS_FILE
    java.lang.String PROTECT_KEY_FILE -> PROTECT_KEY_FILE
    java.lang.String FILTER_FILE -> FILTER_FILE
    java.lang.String QUESTION_FILE -> QUESTION_FILE
    java.lang.String HEXID_FILE -> HEXID_FILE
    java.lang.String ALT_SETTINGS_FILE -> ALT_SETTINGS_FILE
    java.lang.String CLANHALL_CONFIG_FILE -> CLANHALL_CONFIG_FILE
    java.lang.String ENCHANT_CONFIG_FILE -> ENCHANT_CONFIG_FILE
    java.lang.String FORTSIEGE_CONFIGURATION_FILE -> FORTSIEGE_CONFIGURATION_FILE
    java.lang.String GEODATA_CONFIG_FILE -> GEODATA_CONFIG_FILE
    java.lang.String OLYMP_CONFIG_FILE -> OLYMP_CONFIG_FILE
    java.lang.String OPTIONS_FILE -> OPTIONS_FILE
    java.lang.String OTHER_CONFIG_FILE -> OTHER_CONFIG_FILE
    java.lang.String RATES_CONFIG_FILE -> RATES_CONFIG_FILE
    java.lang.String SEVENSIGNS_FILE -> SEVENSIGNS_FILE
    java.lang.String SIEGE_CONFIGURATION_FILE -> SIEGE_CONFIGURATION_FILE
    java.lang.String ELIT_CLANHALL_CONFIG_FILE -> ELIT_CLANHALL_CONFIG_FILE
    java.lang.String BOSS_CONFIG_FILE -> BOSS_CONFIG_FILE
    java.lang.String ACCESS_CONFIGURATION_FILE -> ACCESS_CONFIGURATION_FILE
    java.lang.String CRAFTING -> CRAFTING
    java.lang.String DEVELOPER -> DEVELOPER
    java.lang.String L2JFROZEN_CONFIG_FILE -> L2JFROZEN_CONFIG_FILE
    java.lang.String PHYSICS_CONFIGURATION_FILE -> PHYSICS_CONFIGURATION_FILE
    java.lang.String PVP_CONFIG_FILE -> PVP_CONFIG_FILE
    java.lang.String POWERPAK_FILE -> POWERPAK_FILE
    java.lang.String CLASS_DAMAGES_FILE -> CLASS_DAMAGES_FILE
    java.lang.String PROTECT_FLOOD_CONFIG_FILE -> PROTECT_FLOOD_CONFIG_FILE
    java.lang.String PROTECT_OTHER_CONFIG_FILE -> PROTECT_OTHER_CONFIG_FILE
    java.lang.String PROTECT_PACKET_CONFIG_FILE -> PROTECT_PACKET_CONFIG_FILE
    java.lang.String EVENT_CTF_FILE -> EVENT_CTF_FILE
    java.lang.String EVENT_DM_FILE -> EVENT_DM_FILE
    java.lang.String EVENT_TVT_FILE -> EVENT_TVT_FILE
    java.lang.String EVENT_TW_FILE -> EVENT_TW_FILE
    java.lang.String EVENT_MANAGER_CONFIGURATION_FILE -> EVENT_MANAGER_CONFIGURATION_FILE
    java.lang.String AWAY_FILE -> AWAY_FILE
    java.lang.String BANK_FILE -> BANK_FILE
    java.lang.String EVENT_CHAMPION_FILE -> EVENT_CHAMPION_FILE
    java.lang.String EVENT_REBIRTH_FILE -> EVENT_REBIRTH_FILE
    java.lang.String EVENT_WEDDING_FILE -> EVENT_WEDDING_FILE
    java.lang.String EVENT_PC_BANG_POINT_FILE -> EVENT_PC_BANG_POINT_FILE
    java.lang.String OFFLINE_FILE -> OFFLINE_FILE
    java.lang.String FAKE_PLAYERS_FILE -> FAKE_PLAYERS_FILE
    java.lang.String CONFIGURATION_FILE -> CONFIGURATION_FILE
    java.lang.String IP_CONFIG -> IP_CONFIG
    java.lang.String SERVER_VERSION_FILE -> SERVER_VERSION_FILE
    java.lang.String DATAPACK_VERSION_FILE -> DATAPACK_VERSION_FILE
    java.lang.String OLYMPIAD_DATA_FILE -> OLYMPIAD_DATA_FILE
    java.lang.String POWERPACK_CONFIG_FILE -> POWERPACK_CONFIG_FILE
    void <init>() -> <init>
com.l2jfrozen.gameserver.config.FloodProtectorConfig -> com.l2jfrozen.gameserver.config.FloodProtectorConfig:
    java.lang.String FLOOD_PROTECTOR_TYPE -> FLOOD_PROTECTOR_TYPE
    float FLOOD_PROTECTION_INTERVAL -> FLOOD_PROTECTION_INTERVAL
    boolean LOG_FLOODING -> LOG_FLOODING
    int PUNISHMENT_LIMIT -> PUNISHMENT_LIMIT
    java.lang.String PUNISHMENT_TYPE -> PUNISHMENT_TYPE
    int PUNISHMENT_TIME -> PUNISHMENT_TIME
    boolean ALTERNATIVE_METHOD -> ALTERNATIVE_METHOD
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,boolean) -> <init>
com.l2jfrozen.gameserver.config.IPConfigData -> com.l2jfrozen.gameserver.config.IPConfigData:
    java.util.List _subnets -> _subnets
    java.util.List _hosts -> _hosts
    java.lang.String configFile -> configFile
    void <init>(java.lang.String) -> <init>
    void load() -> load
    void parseDocument(org.w3c.dom.Document) -> parseDocument
    void autoIpConfig() -> autoIpConfig
    java.util.List getSubnets() -> getSubnets
    java.util.List getHosts() -> getHosts
    int lambda$autoIpConfig$1(int,int) -> lambda$autoIpConfig$1
    int lambda$autoIpConfig$0(int,int) -> lambda$autoIpConfig$0
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.config.IdFactoryType -> com.l2jfrozen.gameserver.config.IdFactoryType:
    com.l2jfrozen.gameserver.config.IdFactoryType Compaction -> Compaction
    com.l2jfrozen.gameserver.config.IdFactoryType BitSet -> BitSet
    com.l2jfrozen.gameserver.config.IdFactoryType Stack -> Stack
    com.l2jfrozen.gameserver.config.IdFactoryType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.config.IdFactoryType[] values() -> values
    com.l2jfrozen.gameserver.config.IdFactoryType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.config.ObjectMapType -> com.l2jfrozen.gameserver.config.ObjectMapType:
    com.l2jfrozen.gameserver.config.ObjectMapType WorldObjectTree -> WorldObjectTree
    com.l2jfrozen.gameserver.config.ObjectMapType WorldObjectMap -> WorldObjectMap
    com.l2jfrozen.gameserver.config.ObjectMapType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.config.ObjectMapType[] values() -> values
    com.l2jfrozen.gameserver.config.ObjectMapType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.config.ObjectSetType -> com.l2jfrozen.gameserver.config.ObjectSetType:
    com.l2jfrozen.gameserver.config.ObjectSetType L2ObjectHashSet -> L2ObjectHashSet
    com.l2jfrozen.gameserver.config.ObjectSetType WorldObjectSet -> WorldObjectSet
    com.l2jfrozen.gameserver.config.ObjectSetType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.config.ObjectSetType[] values() -> values
    com.l2jfrozen.gameserver.config.ObjectSetType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.controllers.GameTimeController -> com.l2jfrozen.gameserver.controllers.GameTimeController:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int TICKS_PER_SECOND -> TICKS_PER_SECOND
    int MILLIS_IN_TICK -> MILLIS_IN_TICK
    com.l2jfrozen.gameserver.controllers.GameTimeController _instance -> _instance
    int _gameTicks -> _gameTicks
    long _gameStartTime -> _gameStartTime
    boolean _isNight -> _isNight
    java.util.List _movingObjects -> _movingObjects
    com.l2jfrozen.gameserver.controllers.GameTimeController$TimerThread _timer -> _timer
    java.util.concurrent.ScheduledFuture _timerWatcher -> _timerWatcher
    com.l2jfrozen.gameserver.controllers.GameTimeController getInstance() -> getInstance
    void <init>() -> <init>
    boolean isNowNight() -> isNowNight
    int getGameTime() -> getGameTime
    int getGameTicks() -> getGameTicks
    void registerMovingObject(com.l2jfrozen.gameserver.model.L2Character) -> registerMovingObject
    void moveObjects() -> moveObjects
    void stopTimer() -> stopTimer
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.controllers.GameTimeController$BroadcastSunState -> com.l2jfrozen.gameserver.controllers.GameTimeController$BroadcastSunState:
    com.l2jfrozen.gameserver.controllers.GameTimeController this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.controllers.GameTimeController) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.controllers.GameTimeController$MovingObjectArrived -> com.l2jfrozen.gameserver.controllers.GameTimeController$MovingObjectArrived:
    java.util.List _ended -> _ended
    com.l2jfrozen.gameserver.controllers.GameTimeController this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.controllers.GameTimeController,java.util.List) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.controllers.GameTimeController$TimerThread -> com.l2jfrozen.gameserver.controllers.GameTimeController$TimerThread:
    java.lang.Exception _error -> _error
    com.l2jfrozen.gameserver.controllers.GameTimeController this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.controllers.GameTimeController) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.controllers.GameTimeController$TimerWatcher -> com.l2jfrozen.gameserver.controllers.GameTimeController$TimerWatcher:
    com.l2jfrozen.gameserver.controllers.GameTimeController this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.controllers.GameTimeController) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.controllers.RecipeController -> com.l2jfrozen.gameserver.controllers.RecipeController:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.controllers.RecipeController _instance -> _instance
    java.util.Map _activeMakers -> _activeMakers
    void <init>() -> <init>
    com.l2jfrozen.gameserver.controllers.RecipeController getInstance() -> getInstance
    void requestBookOpen(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> requestBookOpen
    void requestMakeItemAbort(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> requestMakeItemAbort
    void requestManufactureItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> requestManufactureItem
    void requestMakeItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> requestMakeItem
    com.l2jfrozen.gameserver.model.L2RecipeList getValidRecipeList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> getValidRecipeList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.controllers.RecipeController$RecipeItemMaker -> com.l2jfrozen.gameserver.controllers.RecipeController$RecipeItemMaker:
    boolean _isValid -> _isValid
    java.util.List _items -> _items
    com.l2jfrozen.gameserver.model.L2RecipeList _recipeList -> _recipeList
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _target -> _target
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    int _skillId -> _skillId
    int _skillLevel -> _skillLevel
    double _creationPasses -> _creationPasses
    double _manaRequired -> _manaRequired
    int _price -> _price
    int _totalItems -> _totalItems
    int _delay -> _delay
    com.l2jfrozen.gameserver.controllers.RecipeController this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.controllers.RecipeController,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2RecipeList,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
    void finishCrafting() -> finishCrafting
    void updateMakeInfo(boolean) -> updateMakeInfo
    void updateCurLoad() -> updateCurLoad
    void updateCurMp() -> updateCurMp
    void grabSomeItems() -> grabSomeItems
    boolean validateMp() -> validateMp
    java.util.List listItems(boolean) -> listItems
    void abort() -> abort
    void rewardPlayer() -> rewardPlayer
com.l2jfrozen.gameserver.controllers.RecipeController$RecipeItemMaker$TempItem -> com.l2jfrozen.gameserver.controllers.RecipeController$RecipeItemMaker$TempItem:
    int _itemId -> _itemId
    int _quantity -> _quantity
    java.lang.String _itemName -> _itemName
    com.l2jfrozen.gameserver.controllers.RecipeController$RecipeItemMaker this$1 -> this$1
    void <init>(com.l2jfrozen.gameserver.controllers.RecipeController$RecipeItemMaker,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,int) -> <init>
    int getQuantity() -> getQuantity
    void setQuantity(int) -> setQuantity
    int getItemId() -> getItemId
    java.lang.String getItemName() -> getItemName
com.l2jfrozen.gameserver.controllers.TradeController -> com.l2jfrozen.gameserver.controllers.TradeController:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.controllers.TradeController _instance -> _instance
    int _nextListId -> _nextListId
    java.util.Map _lists -> _lists
    java.util.Map _listsTaskItem -> _listsTaskItem
    com.l2jfrozen.gameserver.controllers.TradeController getInstance() -> getInstance
    void <init>() -> <init>
    int parseList(java.lang.String) -> parseList
    com.l2jfrozen.gameserver.model.L2TradeList getBuyList(int) -> getBuyList
    java.util.List getBuyListByNpcId(int) -> getBuyListByNpcId
    void restoreCount(int) -> restoreCount
    void dataTimerSave(int) -> dataTimerSave
    void dataCountStore() -> dataCountStore
    int getNextId() -> getNextId
    void reload() -> reload
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.controllers.TradeController$RestoreCount -> com.l2jfrozen.gameserver.controllers.TradeController$RestoreCount:
    int _timer -> _timer
    com.l2jfrozen.gameserver.controllers.TradeController this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.controllers.TradeController,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.datatables.AccessLevel -> com.l2jfrozen.gameserver.datatables.AccessLevel:
    int _accessLevel -> _accessLevel
    java.lang.String _name -> _name
    int _nameColor -> _nameColor
    int _titleColor -> _titleColor
    boolean _isGm -> _isGm
    boolean _allowPeaceAttack -> _allowPeaceAttack
    boolean _allowFixedRes -> _allowFixedRes
    boolean _allowTransaction -> _allowTransaction
    boolean _allowAltG -> _allowAltG
    boolean _giveDamage -> _giveDamage
    boolean _takeAggro -> _takeAggro
    boolean _gainExp -> _gainExp
    boolean _useNameColor -> _useNameColor
    boolean _useTitleColor -> _useTitleColor
    boolean _canDisableGmStatus -> _canDisableGmStatus
    void <init>(int,java.lang.String,int,int,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean) -> <init>
    int getLevel() -> getLevel
    java.lang.String getName() -> getName
    int getNameColor() -> getNameColor
    int getTitleColor() -> getTitleColor
    boolean isGm() -> isGm
    boolean allowPeaceAttack() -> allowPeaceAttack
    boolean allowFixedRes() -> allowFixedRes
    boolean allowTransaction() -> allowTransaction
    boolean allowAltG() -> allowAltG
    boolean canGiveDamage() -> canGiveDamage
    boolean canTakeAggro() -> canTakeAggro
    boolean canGainExp() -> canGainExp
    boolean useNameColor() -> useNameColor
    boolean useTitleColor() -> useTitleColor
    boolean canDisableGmStatus() -> canDisableGmStatus
com.l2jfrozen.gameserver.datatables.BufferSkillsTable -> com.l2jfrozen.gameserver.datatables.BufferSkillsTable:
    com.l2jfrozen.gameserver.datatables.BufferSkillsTable _instance -> _instance
    javolution.util.FastMap _bufferSkillsMap -> _bufferSkillsMap
    javolution.util.FastList _buffTypes -> _buffTypes
    javolution.util.FastMap _buffPrizes -> _buffPrizes
    javolution.util.FastMap _allSkills -> _allSkills
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String SQL_LOAD_SKILLS -> SQL_LOAD_SKILLS
    void <init>() -> <init>
    void load() -> load
    javolution.util.FastList getSkillsByType(java.lang.String) -> getSkillsByType
    javolution.util.FastList getSkillsTypeList() -> getSkillsTypeList
    int getSkillLevelById(int) -> getSkillLevelById
    int getSkillFee(int) -> getSkillFee
    void reload() -> reload
    com.l2jfrozen.gameserver.datatables.BufferSkillsTable getInstance() -> getInstance
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.BufferSkillsTable$SkillInfo -> com.l2jfrozen.gameserver.datatables.BufferSkillsTable$SkillInfo:
    int _skillLevel -> _skillLevel
    java.lang.String _skillType -> _skillType
    com.l2jfrozen.gameserver.datatables.BufferSkillsTable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.datatables.BufferSkillsTable,int,java.lang.String) -> <init>
com.l2jfrozen.gameserver.datatables.CharSchemesTable -> com.l2jfrozen.gameserver.datatables.CharSchemesTable:
    javolution.util.FastMap _schemesTable -> _schemesTable
    com.l2jfrozen.gameserver.datatables.CharSchemesTable _instance -> _instance
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String SQL_LOAD_SCHEME -> SQL_LOAD_SCHEME
    java.lang.String SQL_DELETE_SCHEME -> SQL_DELETE_SCHEME
    java.lang.String SQL_INSERT_SCHEME -> SQL_INSERT_SCHEME
    void <init>() -> <init>
    void loadScheme(int) -> loadScheme
    void onPlayerLogin(int) -> onPlayerLogin
    void onServerShutdown() -> onServerShutdown
    void clearDB() -> clearDB
    void saveDataToDB() -> saveDataToDB
    javolution.util.FastList getScheme(int,java.lang.String) -> getScheme
    boolean getSchemeContainsSkill(int,java.lang.String,int) -> getSchemeContainsSkill
    void setScheme(int,java.lang.String,javolution.util.FastList) -> setScheme
    javolution.util.FastMap getAllSchemes(int) -> getAllSchemes
    javolution.util.FastMap getSchemesTable() -> getSchemesTable
    com.l2jfrozen.gameserver.datatables.CharSchemesTable getInstance() -> getInstance
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.CrownTable -> com.l2jfrozen.gameserver.datatables.CrownTable:
    java.util.List _crownList -> _crownList
    void <init>() -> <init>
    java.util.List getCrownList() -> getCrownList
    int getCrownId(int) -> getCrownId
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.DesireTable -> com.l2jfrozen.gameserver.datatables.DesireTable:
    com.l2jfrozen.gameserver.datatables.DesireType[] DEFAULT_DESIRES -> DEFAULT_DESIRES
    java.util.Map _objectDesireTable -> _objectDesireTable
    com.l2jfrozen.gameserver.datatables.DesireTable$Desires _generalDesires -> _generalDesires
    com.l2jfrozen.gameserver.datatables.DesireType[] _desireTypes -> _desireTypes
    void <init>(com.l2jfrozen.gameserver.datatables.DesireType[]) -> <init>
    float getDesireValue(com.l2jfrozen.gameserver.datatables.DesireType) -> getDesireValue
    float getDesireValue(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.datatables.DesireType) -> getDesireValue
    void addDesireValue(com.l2jfrozen.gameserver.datatables.DesireType,float) -> addDesireValue
    void addDesireValue(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.datatables.DesireType,float) -> addDesireValue
    void createDesire(com.l2jfrozen.gameserver.datatables.DesireType) -> createDesire
    void deleteDesire(com.l2jfrozen.gameserver.datatables.DesireType) -> deleteDesire
    void createDesire(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.datatables.DesireType) -> createDesire
    void deleteDesire(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.datatables.DesireType) -> deleteDesire
    void addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    void addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.datatables.DesireType[]) -> addKnownObject
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.DesireTable$DesireValue -> com.l2jfrozen.gameserver.datatables.DesireTable$DesireValue:
    float _value -> _value
    com.l2jfrozen.gameserver.datatables.DesireTable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.datatables.DesireTable) -> <init>
    void <init>(com.l2jfrozen.gameserver.datatables.DesireTable,java.lang.Float) -> <init>
    void addValue(float) -> addValue
    float getValue() -> getValue
com.l2jfrozen.gameserver.datatables.DesireTable$Desires -> com.l2jfrozen.gameserver.datatables.DesireTable$Desires:
    java.util.Map _desireTable -> _desireTable
    com.l2jfrozen.gameserver.datatables.DesireTable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.datatables.DesireTable,com.l2jfrozen.gameserver.datatables.DesireType[]) -> <init>
    com.l2jfrozen.gameserver.datatables.DesireTable$DesireValue getDesireValue(com.l2jfrozen.gameserver.datatables.DesireType) -> getDesireValue
    void addValue(com.l2jfrozen.gameserver.datatables.DesireType,float) -> addValue
    void createDesire(com.l2jfrozen.gameserver.datatables.DesireType) -> createDesire
    void deleteDesire(com.l2jfrozen.gameserver.datatables.DesireType) -> deleteDesire
com.l2jfrozen.gameserver.datatables.DesireType -> com.l2jfrozen.gameserver.datatables.DesireType:
    com.l2jfrozen.gameserver.datatables.DesireType FEAR -> FEAR
    com.l2jfrozen.gameserver.datatables.DesireType DISLIKE -> DISLIKE
    com.l2jfrozen.gameserver.datatables.DesireType HATE -> HATE
    com.l2jfrozen.gameserver.datatables.DesireType DAMAGE -> DAMAGE
    com.l2jfrozen.gameserver.datatables.DesireType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.datatables.DesireType[] values() -> values
    com.l2jfrozen.gameserver.datatables.DesireType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.GmListTable -> com.l2jfrozen.gameserver.datatables.GmListTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.GmListTable _instance -> _instance
    javolution.util.FastMap _gmList -> _gmList
    com.l2jfrozen.gameserver.datatables.GmListTable getInstance() -> getInstance
    void reload() -> reload
    javolution.util.FastList getAllGms(boolean) -> getAllGms
    javolution.util.FastList getAllGmNames(boolean) -> getAllGmNames
    void <init>() -> <init>
    void addGm(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> addGm
    void deleteGm(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> deleteGm
    void showGm(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showGm
    void hideGm(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> hideGm
    boolean isGmOnline(boolean) -> isGmOnline
    void sendListToPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendListToPlayer
    void broadcastToGMs(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastToGMs
    void broadcastMessageToGMs(java.lang.String) -> broadcastMessageToGMs
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.HeroSkillTable -> com.l2jfrozen.gameserver.datatables.HeroSkillTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.HeroSkillTable _instance -> _instance
    com.l2jfrozen.gameserver.model.L2Skill[] _heroSkills -> _heroSkills
    void <init>() -> <init>
    com.l2jfrozen.gameserver.datatables.HeroSkillTable getInstance() -> getInstance
    com.l2jfrozen.gameserver.model.L2Skill[] getHeroSkills() -> getHeroSkills
    boolean isHeroSkill(int) -> isHeroSkill
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.MobGroupTable -> com.l2jfrozen.gameserver.datatables.MobGroupTable:
    com.l2jfrozen.gameserver.datatables.MobGroupTable _instance -> _instance
    java.util.Map _groupMap -> _groupMap
    int FOLLOW_RANGE -> FOLLOW_RANGE
    int RANDOM_RANGE -> RANDOM_RANGE
    void <init>() -> <init>
    com.l2jfrozen.gameserver.datatables.MobGroupTable getInstance() -> getInstance
    void addGroup(int,com.l2jfrozen.gameserver.model.MobGroup) -> addGroup
    com.l2jfrozen.gameserver.model.MobGroup getGroup(int) -> getGroup
    int getGroupCount() -> getGroupCount
    com.l2jfrozen.gameserver.model.MobGroup getGroupForMob(com.l2jfrozen.gameserver.model.actor.instance.L2ControllableMobInstance) -> getGroupForMob
    com.l2jfrozen.gameserver.model.MobGroup[] getGroups() -> getGroups
    boolean removeGroup(int) -> removeGroup
com.l2jfrozen.gameserver.datatables.NobleSkillTable -> com.l2jfrozen.gameserver.datatables.NobleSkillTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.NobleSkillTable _instance -> _instance
    com.l2jfrozen.gameserver.model.L2Skill[] _nobleSkills -> _nobleSkills
    void <init>() -> <init>
    com.l2jfrozen.gameserver.datatables.NobleSkillTable getInstance() -> getInstance
    com.l2jfrozen.gameserver.model.L2Skill[] GetNobleSkills() -> GetNobleSkills
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.OfflineTradeTable -> com.l2jfrozen.gameserver.datatables.OfflineTradeTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String SAVE_OFFLINE_STATUS -> SAVE_OFFLINE_STATUS
    java.lang.String SAVE_ITEMS -> SAVE_ITEMS
    java.lang.String DELETE_OFFLINE_TABLE_ALL_ITEMS -> DELETE_OFFLINE_TABLE_ALL_ITEMS
    java.lang.String DELETE_OFFLINE_TRADER -> DELETE_OFFLINE_TRADER
    java.lang.String CLEAR_OFFLINE_TABLE -> CLEAR_OFFLINE_TABLE
    java.lang.String CLEAR_OFFLINE_TABLE_ITEMS -> CLEAR_OFFLINE_TABLE_ITEMS
    java.lang.String LOAD_OFFLINE_STATUS -> LOAD_OFFLINE_STATUS
    java.lang.String LOAD_OFFLINE_ITEMS -> LOAD_OFFLINE_ITEMS
    void <init>() -> <init>
    void storeOffliners() -> storeOffliners
    void restoreOfflineTraders() -> restoreOfflineTraders
    void storeOffliner(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> storeOffliner
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.OfflineTradeTable$OfflineTraderInfo -> com.l2jfrozen.gameserver.datatables.OfflineTradeTable$OfflineTraderInfo:
    java.lang.Integer charId -> charId
    long time -> time
    int type -> type
    java.lang.String title -> title
    java.util.List items -> items
    void <init>(java.lang.Integer,long,int,java.lang.String) -> <init>
    java.lang.Integer getCharId() -> getCharId
    long getTime() -> getTime
    int getType() -> getType
    java.lang.String getTitle() -> getTitle
    java.util.List getItems() -> getItems
com.l2jfrozen.gameserver.datatables.OfflineTradeTable$OfflineTraderItem -> com.l2jfrozen.gameserver.datatables.OfflineTradeTable$OfflineTraderItem:
    java.lang.Integer charId -> charId
    java.lang.Integer item -> item
    java.lang.Integer count -> count
    java.lang.Integer price -> price
    java.lang.Integer enchant -> enchant
    void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    java.lang.Integer getCharId() -> getCharId
    java.lang.Integer getItem() -> getItem
    java.lang.Integer getCount() -> getCount
    java.lang.Integer getPrice() -> getPrice
    java.lang.Integer getEnchant() -> getEnchant
com.l2jfrozen.gameserver.datatables.SkillTable -> com.l2jfrozen.gameserver.datatables.SkillTable:
    com.l2jfrozen.gameserver.datatables.SkillTable _instance -> _instance
    java.util.HashMap _skills -> _skills
    boolean _initialized -> _initialized
    com.l2jfrozen.gameserver.templates.L2WeaponType[] weaponDbMasks -> weaponDbMasks
    com.l2jfrozen.gameserver.datatables.SkillTable getInstance() -> getInstance
    void <init>() -> <init>
    void reload() -> reload
    boolean isInitialized() -> isInitialized
    int getSkillHashCode(com.l2jfrozen.gameserver.model.L2Skill) -> getSkillHashCode
    int getSkillHashCode(int,int) -> getSkillHashCode
    com.l2jfrozen.gameserver.model.L2Skill getInfo(int,int) -> getInfo
    int getMaxLevel(int,int) -> getMaxLevel
    int calcWeaponsAllowed(int) -> calcWeaponsAllowed
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.csv.DoorTable -> com.l2jfrozen.gameserver.datatables.csv.DoorTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _staticItems -> _staticItems
    com.l2jfrozen.gameserver.datatables.csv.DoorTable _instance -> _instance
    boolean _initialized -> _initialized
    com.l2jfrozen.gameserver.datatables.csv.DoorTable getInstance() -> getInstance
    void <init>() -> <init>
    void reloadAll() -> reloadAll
    void respawn() -> respawn
    void parseData() -> parseData
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance parseList(java.lang.String) -> parseList
    boolean isInitialized() -> isInitialized
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance getDoor(java.lang.Integer) -> getDoor
    void putDoor(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance) -> putDoor
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance[] getDoors() -> getDoors
    void checkAutoOpen() -> checkAutoOpen
    boolean checkIfDoorsBetween(com.l2jfrozen.gameserver.geo.pathfinding.Node,com.l2jfrozen.gameserver.geo.pathfinding.Node) -> checkIfDoorsBetween
    boolean checkIfDoorsBetween(int,int,int,int,int,int) -> checkIfDoorsBetween
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.csv.ExtractableItemsData -> com.l2jfrozen.gameserver.datatables.csv.ExtractableItemsData:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _items -> _items
    com.l2jfrozen.gameserver.datatables.csv.ExtractableItemsData _instance -> _instance
    com.l2jfrozen.gameserver.datatables.csv.ExtractableItemsData getInstance() -> getInstance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.L2ExtractableItem getExtractableItem(int) -> getExtractableItem
    int[] itemIDs() -> itemIDs
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.csv.FishTable -> com.l2jfrozen.gameserver.datatables.csv.FishTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.csv.FishTable _instance -> _instance
    java.util.List _fishsNormal -> _fishsNormal
    java.util.List _fishsEasy -> _fishsEasy
    java.util.List _fishsHard -> _fishsHard
    com.l2jfrozen.gameserver.model.FishData fish -> fish
    com.l2jfrozen.gameserver.datatables.csv.FishTable getInstance() -> getInstance
    void <init>() -> <init>
    java.util.List getfish(int,int,int) -> getfish
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.csv.HennaTable -> com.l2jfrozen.gameserver.datatables.csv.HennaTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.csv.HennaTable _instance -> _instance
    java.util.Map _henna -> _henna
    boolean _initialized -> _initialized
    com.l2jfrozen.gameserver.datatables.csv.HennaTable getInstance() -> getInstance
    void <init>() -> <init>
    void restoreHennaData() -> restoreHennaData
    boolean isInitialized() -> isInitialized
    com.l2jfrozen.gameserver.templates.L2Henna getTemplate(int) -> getTemplate
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.csv.MapRegionTable -> com.l2jfrozen.gameserver.datatables.csv.MapRegionTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.csv.MapRegionTable _instance -> _instance
    int[][] _regions -> _regions
    int[][] _pointsWithKarmas -> _pointsWithKarmas
    com.l2jfrozen.gameserver.datatables.csv.MapRegionTable getInstance() -> getInstance
    void <init>() -> <init>
    int getMapRegion(int,int) -> getMapRegion
    int getMapRegionX(int) -> getMapRegionX
    int getMapRegionY(int) -> getMapRegionY
    int getAreaCastle(com.l2jfrozen.gameserver.model.L2Character) -> getAreaCastle
    int getClosestTownNumber(com.l2jfrozen.gameserver.model.L2Character) -> getClosestTownNumber
    java.lang.String getClosestTownName(com.l2jfrozen.gameserver.model.L2Character) -> getClosestTownName
    com.l2jfrozen.gameserver.model.Location getTeleToLocation(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType) -> getTeleToLocation
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.csv.NpcWalkerRoutesTable -> com.l2jfrozen.gameserver.datatables.csv.NpcWalkerRoutesTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.csv.NpcWalkerRoutesTable _instance -> _instance
    javolution.util.FastList _routes -> _routes
    com.l2jfrozen.gameserver.datatables.csv.NpcWalkerRoutesTable getInstance() -> getInstance
    void <init>() -> <init>
    void load() -> load
    javolution.util.FastList getRouteForNpc(int) -> getRouteForNpc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.csv.RecipeTable -> com.l2jfrozen.gameserver.datatables.csv.RecipeTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _lists -> _lists
    com.l2jfrozen.gameserver.datatables.csv.RecipeTable instance -> instance
    com.l2jfrozen.gameserver.datatables.csv.RecipeTable getInstance() -> getInstance
    void <init>() -> <init>
    void parseList(java.lang.String) -> parseList
    int getRecipesCount() -> getRecipesCount
    com.l2jfrozen.gameserver.model.L2RecipeList getRecipeList(int) -> getRecipeList
    com.l2jfrozen.gameserver.model.L2RecipeList getRecipeByItemId(int) -> getRecipeByItemId
    com.l2jfrozen.gameserver.model.L2RecipeList getRecipeById(int) -> getRecipeById
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.csv.StaticObjects -> com.l2jfrozen.gameserver.datatables.csv.StaticObjects:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.csv.StaticObjects _instance -> _instance
    java.util.Map _staticObjects -> _staticObjects
    com.l2jfrozen.gameserver.datatables.csv.StaticObjects getInstance() -> getInstance
    void <init>() -> <init>
    void parseData() -> parseData
    com.l2jfrozen.gameserver.model.actor.instance.L2StaticObjectInstance parse(java.lang.String) -> parse
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.csv.SummonItemsData -> com.l2jfrozen.gameserver.datatables.csv.SummonItemsData:
    org.apache.log4j.Logger LOGGER -> LOGGER
    javolution.util.FastMap _summonitems -> _summonitems
    com.l2jfrozen.gameserver.datatables.csv.SummonItemsData _instance -> _instance
    com.l2jfrozen.gameserver.datatables.csv.SummonItemsData getInstance() -> getInstance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.L2SummonItem getSummonItem(int) -> getSummonItem
    int[] itemIDs() -> itemIDs
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType -> com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType:
    com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType Castle -> Castle
    com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType ClanHall -> ClanHall
    com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType SiegeFlag -> SiegeFlag
    com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType Town -> Town
    com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType Fortress -> Fortress
    com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType[] values() -> values
    com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.AccessLevels -> com.l2jfrozen.gameserver.datatables.sql.AccessLevels:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.AccessLevels _instance -> _instance
    com.l2jfrozen.gameserver.datatables.AccessLevel _masterAccessLevel -> _masterAccessLevel
    com.l2jfrozen.gameserver.datatables.AccessLevel _userAccessLevel -> _userAccessLevel
    javolution.util.FastMap _accessLevels -> _accessLevels
    void <init>() -> <init>
    com.l2jfrozen.gameserver.datatables.sql.AccessLevels getInstance() -> getInstance
    com.l2jfrozen.gameserver.datatables.AccessLevel getAccessLevel(int) -> getAccessLevel
    void addBanAccessLevel(int) -> addBanAccessLevel
    void reload() -> reload
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.AdminCommandAccessRights -> com.l2jfrozen.gameserver.datatables.sql.AdminCommandAccessRights:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.AdminCommandAccessRights _instance -> _instance
    java.util.Map adminCommandAccessRights -> adminCommandAccessRights
    void <init>() -> <init>
    com.l2jfrozen.gameserver.datatables.sql.AdminCommandAccessRights getInstance() -> getInstance
    void reload() -> reload
    int accessRightForCommand(java.lang.String) -> accessRightForCommand
    boolean hasAccess(java.lang.String,com.l2jfrozen.gameserver.datatables.AccessLevel) -> hasAccess
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.ArmorSetsTable -> com.l2jfrozen.gameserver.datatables.sql.ArmorSetsTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.ArmorSetsTable _instance -> _instance
    javolution.util.FastMap armorSets -> armorSets
    javolution.util.FastMap cusArmorSets -> cusArmorSets
    com.l2jfrozen.gameserver.datatables.sql.ArmorSetsTable getInstance() -> getInstance
    void <init>() -> <init>
    void loadData() -> loadData
    boolean setExists(int) -> setExists
    com.l2jfrozen.gameserver.model.L2ArmorSet getSet(int) -> getSet
    void addObj(int,com.l2jfrozen.gameserver.model.L2ArmorSet) -> addObj
    com.l2jfrozen.gameserver.datatables.sql.ArmorSetsTable$ArmorDummy getCusArmorSets(int) -> getCusArmorSets
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.ArmorSetsTable$ArmorDummy -> com.l2jfrozen.gameserver.datatables.sql.ArmorSetsTable$ArmorDummy:
    int _chest -> _chest
    int _legs -> _legs
    int _head -> _head
    int _gloves -> _gloves
    int _feet -> _feet
    int _skill_id -> _skill_id
    int _shield -> _shield
    com.l2jfrozen.gameserver.datatables.sql.ArmorSetsTable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.datatables.sql.ArmorSetsTable,int,int,int,int,int,int,int) -> <init>
    int getChest() -> getChest
    int getLegs() -> getLegs
    int getHead() -> getHead
    int getGloves() -> getGloves
    int getFeet() -> getFeet
    int getSkill_id() -> getSkill_id
    int getShield() -> getShield
com.l2jfrozen.gameserver.datatables.sql.CharNameTable -> com.l2jfrozen.gameserver.datatables.sql.CharNameTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.CharNameTable _instance -> _instance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.datatables.sql.CharNameTable getInstance() -> getInstance
    boolean doesCharNameExist(java.lang.String) -> doesCharNameExist
    int accountCharNumber(java.lang.String) -> accountCharNumber
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.CharTemplateTable -> com.l2jfrozen.gameserver.datatables.sql.CharTemplateTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.CharTemplateTable _instance -> _instance
    java.lang.String[] CHAR_CLASSES -> CHAR_CLASSES
    java.util.Map _templates -> _templates
    com.l2jfrozen.gameserver.datatables.sql.CharTemplateTable getInstance() -> getInstance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.templates.L2PcTemplate getTemplate(com.l2jfrozen.gameserver.model.base.ClassId) -> getTemplate
    com.l2jfrozen.gameserver.templates.L2PcTemplate getTemplate(int) -> getTemplate
    java.lang.String getClassNameById(int) -> getClassNameById
    int getClassIdByName(java.lang.String) -> getClassIdByName
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.ClanTable -> com.l2jfrozen.gameserver.datatables.sql.ClanTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.ClanTable _instance -> _instance
    java.util.Map _clans -> _clans
    com.l2jfrozen.gameserver.datatables.sql.ClanTable getInstance() -> getInstance
    void reload() -> reload
    com.l2jfrozen.gameserver.model.L2Clan[] getClans() -> getClans
    int getTopRate(int) -> getTopRate
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.L2Clan getClan(int) -> getClan
    com.l2jfrozen.gameserver.model.L2Clan getClanByName(java.lang.String) -> getClanByName
    com.l2jfrozen.gameserver.model.L2Clan createClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> createClan
    boolean isValidCalnName(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> isValidCalnName
    void destroyClan(int) -> destroyClan
    void scheduleRemoveClan(int) -> scheduleRemoveClan
    boolean isAllyExists(java.lang.String) -> isAllyExists
    void storeclanswars(int,int) -> storeclanswars
    void deleteclanswars(int,int) -> deleteclanswars
    void checkSurrender(com.l2jfrozen.gameserver.model.L2Clan,com.l2jfrozen.gameserver.model.L2Clan) -> checkSurrender
    void restorewars() -> restorewars
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.ClanTable$1 -> com.l2jfrozen.gameserver.datatables.sql.ClanTable$1:
    int val$clanId -> val$clanId
    com.l2jfrozen.gameserver.datatables.sql.ClanTable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.datatables.sql.ClanTable,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.datatables.sql.CustomArmorSetsTable -> com.l2jfrozen.gameserver.datatables.sql.CustomArmorSetsTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.CustomArmorSetsTable _instance -> _instance
    com.l2jfrozen.gameserver.datatables.sql.CustomArmorSetsTable getInstance() -> getInstance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.HelperBuffTable -> com.l2jfrozen.gameserver.datatables.sql.HelperBuffTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.HelperBuffTable _instance -> _instance
    java.util.List helperBuff -> helperBuff
    boolean _initialized -> _initialized
    int _magicClassLowestLevel -> _magicClassLowestLevel
    int _physicClassLowestLevel -> _physicClassLowestLevel
    int _magicClassHighestLevel -> _magicClassHighestLevel
    int _physicClassHighestLevel -> _physicClassHighestLevel
    com.l2jfrozen.gameserver.datatables.sql.HelperBuffTable getInstance() -> getInstance
    void reload() -> reload
    void <init>() -> <init>
    void restoreHelperBuffData() -> restoreHelperBuffData
    void fillHelperBuffTable(java.sql.ResultSet) -> fillHelperBuffTable
    boolean isInitialized() -> isInitialized
    com.l2jfrozen.gameserver.templates.L2HelperBuff getHelperBuffTableItem(int) -> getHelperBuffTableItem
    java.util.List getHelperBuffTable() -> getHelperBuffTable
    int getMagicClassHighestLevel() -> getMagicClassHighestLevel
    void setMagicClassHighestLevel(int) -> setMagicClassHighestLevel
    int getMagicClassLowestLevel() -> getMagicClassLowestLevel
    void setMagicClassLowestLevel(int) -> setMagicClassLowestLevel
    int getPhysicClassHighestLevel() -> getPhysicClassHighestLevel
    void setPhysicClassHighestLevel(int) -> setPhysicClassHighestLevel
    int getPhysicClassLowestLevel() -> getPhysicClassLowestLevel
    void setPhysicClassLowestLevel(int) -> setPhysicClassLowestLevel
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.HennaTreeTable -> com.l2jfrozen.gameserver.datatables.sql.HennaTreeTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.HennaTreeTable _instance -> _instance
    java.util.Map _hennaTrees -> _hennaTrees
    boolean _initialized -> _initialized
    com.l2jfrozen.gameserver.datatables.sql.HennaTreeTable getInstance() -> getInstance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance[] getAvailableHenna(com.l2jfrozen.gameserver.model.base.ClassId) -> getAvailableHenna
    boolean isInitialized() -> isInitialized
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.ItemTable -> com.l2jfrozen.gameserver.datatables.sql.ItemTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.logging.Logger _logItems -> _logItems
    java.util.Map _crystalTypes -> _crystalTypes
    java.util.Map _weaponTypes -> _weaponTypes
    java.util.Map _armorTypes -> _armorTypes
    java.util.Map _slots -> _slots
    com.l2jfrozen.gameserver.templates.L2Item[] _allTemplates -> _allTemplates
    boolean _initialized -> _initialized
    com.l2jfrozen.gameserver.datatables.sql.ItemTable _instance -> _instance
    java.lang.String[] SQL_ITEM_SELECTS -> SQL_ITEM_SELECTS
    java.lang.String[] SQL_CUSTOM_ITEM_SELECTS -> SQL_CUSTOM_ITEM_SELECTS
    java.util.Map itemData -> itemData
    java.util.Map weaponData -> weaponData
    java.util.Map armorData -> armorData
    com.l2jfrozen.gameserver.datatables.sql.ItemTable getInstance() -> getInstance
    com.l2jfrozen.gameserver.model.Item newItem() -> newItem
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.Item readWeapon(java.sql.ResultSet) -> readWeapon
    com.l2jfrozen.gameserver.model.Item readArmor(java.sql.ResultSet) -> readArmor
    com.l2jfrozen.gameserver.model.Item readItem(java.sql.ResultSet) -> readItem
    boolean isInitialized() -> isInitialized
    void buildFastLookupTable(java.util.Map,java.util.Map,java.util.Map) -> buildFastLookupTable
    com.l2jfrozen.gameserver.templates.L2Item getTemplate(int) -> getTemplate
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance createItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> createItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance createItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> createItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance createDummyItem(int) -> createDummyItem
    void destroyItem(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> destroyItem
    void reload() -> reload
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.ItemTable$resetOwner -> com.l2jfrozen.gameserver.datatables.sql.ItemTable$resetOwner:
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _item -> _item
    com.l2jfrozen.gameserver.datatables.sql.ItemTable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.datatables.sql.ItemTable,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.datatables.sql.L2PetDataTable -> com.l2jfrozen.gameserver.datatables.sql.L2PetDataTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.L2PetDataTable _instance -> _instance
    java.util.Map _petTable -> _petTable
    com.l2jfrozen.gameserver.datatables.sql.L2PetDataTable getInstance() -> getInstance
    void <init>() -> <init>
    void loadPetsData() -> loadPetsData
    void addPetData(com.l2jfrozen.gameserver.model.L2PetData) -> addPetData
    void addPetData(com.l2jfrozen.gameserver.model.L2PetData[]) -> addPetData
    com.l2jfrozen.gameserver.model.L2PetData getPetData(int,int) -> getPetData
    boolean isWolf(int) -> isWolf
    boolean isSinEater(int) -> isSinEater
    boolean isHatchling(int) -> isHatchling
    boolean isStrider(int) -> isStrider
    boolean isWyvern(int) -> isWyvern
    boolean isBaby(int) -> isBaby
    boolean isPetFood(int) -> isPetFood
    boolean isWolfFood(int) -> isWolfFood
    boolean isSinEaterFood(int) -> isSinEaterFood
    boolean isHatchlingFood(int) -> isHatchlingFood
    boolean isStriderFood(int) -> isStriderFood
    boolean isWyvernFood(int) -> isWyvernFood
    boolean isBabyFood(int) -> isBabyFood
    int getFoodItemId(int) -> getFoodItemId
    int getPetIdByItemId(int) -> getPetIdByItemId
    int getHatchlingWindId() -> getHatchlingWindId
    int getHatchlingStarId() -> getHatchlingStarId
    int getHatchlingTwilightId() -> getHatchlingTwilightId
    int getStriderWindId() -> getStriderWindId
    int getStriderStarId() -> getStriderStarId
    int getStriderTwilightId() -> getStriderTwilightId
    int getWyvernItemId() -> getWyvernItemId
    int getStriderWindItemId() -> getStriderWindItemId
    int getStriderStarItemId() -> getStriderStarItemId
    int getStriderTwilightItemId() -> getStriderTwilightItemId
    int getSinEaterItemId() -> getSinEaterItemId
    boolean isPetItem(int) -> isPetItem
    int[] getPetItemsAsNpc(int) -> getPetItemsAsNpc
    boolean isMountable(int) -> isMountable
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.LevelUpData -> com.l2jfrozen.gameserver.datatables.sql.LevelUpData:
    java.lang.String SELECT_ALL -> SELECT_ALL
    java.lang.String CLASS_LVL -> CLASS_LVL
    java.lang.String MP_MOD -> MP_MOD
    java.lang.String MP_ADD -> MP_ADD
    java.lang.String MP_BASE -> MP_BASE
    java.lang.String HP_MOD -> HP_MOD
    java.lang.String HP_ADD -> HP_ADD
    java.lang.String HP_BASE -> HP_BASE
    java.lang.String CP_MOD -> CP_MOD
    java.lang.String CP_ADD -> CP_ADD
    java.lang.String CP_BASE -> CP_BASE
    java.lang.String CLASS_ID -> CLASS_ID
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.LevelUpData _instance -> _instance
    java.util.Map lvlTable -> lvlTable
    com.l2jfrozen.gameserver.datatables.sql.LevelUpData getInstance() -> getInstance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.L2LvlupData getTemplate(int) -> getTemplate
    com.l2jfrozen.gameserver.model.L2LvlupData getTemplate(com.l2jfrozen.gameserver.model.base.ClassId) -> getTemplate
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.NpcTable -> com.l2jfrozen.gameserver.datatables.sql.NpcTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.NpcTable _instance -> _instance
    java.util.Map npcs -> npcs
    boolean _initialized -> _initialized
    com.l2jfrozen.gameserver.datatables.sql.NpcTable getInstance() -> getInstance
    void <init>() -> <init>
    void restoreNpcData() -> restoreNpcData
    void fillNpcTable(java.sql.ResultSet,boolean) -> fillNpcTable
    void reloadNpc(int) -> reloadNpc
    void reloadAllNpc() -> reloadAllNpc
    void saveNpc(com.l2jfrozen.gameserver.templates.StatsSet) -> saveNpc
    boolean isInitialized() -> isInitialized
    void replaceTemplate(com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> replaceTemplate
    com.l2jfrozen.gameserver.templates.L2NpcTemplate getTemplate(int) -> getTemplate
    com.l2jfrozen.gameserver.templates.L2NpcTemplate getTemplateByName(java.lang.String) -> getTemplateByName
    com.l2jfrozen.gameserver.templates.L2NpcTemplate[] getAllOfLevel(int) -> getAllOfLevel
    com.l2jfrozen.gameserver.templates.L2NpcTemplate[] getAllMonstersOfLevel(int) -> getAllMonstersOfLevel
    com.l2jfrozen.gameserver.templates.L2NpcTemplate[] getAllNpcStartingWith(java.lang.String) -> getAllNpcStartingWith
    java.util.Set getAllNpcOfClassType(java.lang.String) -> getAllNpcOfClassType
    java.util.Set getAllNpcOfL2jClass(java.lang.Class) -> getAllNpcOfL2jClass
    java.util.Set getAllNpcOfAiType(java.lang.String) -> getAllNpcOfAiType
    java.util.Map getAllTemplates() -> getAllTemplates
    void FillDropList() -> FillDropList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.PetNameTable -> com.l2jfrozen.gameserver.datatables.sql.PetNameTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.PetNameTable _instance -> _instance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.datatables.sql.PetNameTable getInstance() -> getInstance
    boolean doesPetNameExist(java.lang.String,int) -> doesPetNameExist
    boolean isValidPetName(java.lang.String) -> isValidPetName
    boolean isAlphaNumeric(java.lang.String) -> isAlphaNumeric
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.SkillSpellbookTable -> com.l2jfrozen.gameserver.datatables.sql.SkillSpellbookTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.SkillSpellbookTable _instance -> _instance
    java.util.Map skillSpellbooks -> skillSpellbooks
    com.l2jfrozen.gameserver.datatables.sql.SkillSpellbookTable getInstance() -> getInstance
    void <init>() -> <init>
    int getBookForSkill(int,int) -> getBookForSkill
    int getBookForSkill(com.l2jfrozen.gameserver.model.L2Skill) -> getBookForSkill
    int getBookForSkill(com.l2jfrozen.gameserver.model.L2Skill,int) -> getBookForSkill
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.SkillTreeTable -> com.l2jfrozen.gameserver.datatables.sql.SkillTreeTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.SkillTreeTable _instance -> _instance
    java.util.Map _skillTrees -> _skillTrees
    java.util.List _fishingSkillTrees -> _fishingSkillTrees
    java.util.List _expandDwarfCraftSkillTrees -> _expandDwarfCraftSkillTrees
    java.util.List _pledgeSkillTrees -> _pledgeSkillTrees
    java.util.List _enchantSkillTrees -> _enchantSkillTrees
    void <init>() -> <init>
    com.l2jfrozen.gameserver.datatables.sql.SkillTreeTable getInstance() -> getInstance
    int getExpertiseLevel(int) -> getExpertiseLevel
    int getMinSkillLevel(int,com.l2jfrozen.gameserver.model.base.ClassId,int) -> getMinSkillLevel
    int getMinSkillLevel(int,int) -> getMinSkillLevel
    java.util.Map getSkillTrees() -> getSkillTrees
    com.l2jfrozen.gameserver.model.L2SkillLearn[] getAvailableSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.base.ClassId) -> getAvailableSkills
    java.util.List getAvailableSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.base.ClassId,com.l2jfrozen.gameserver.skills.holders.ISkillsHolder) -> getAvailableSkills
    com.l2jfrozen.gameserver.model.L2SkillLearn[] getAvailableSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getAvailableSkills
    com.l2jfrozen.gameserver.model.L2EnchantSkillLearn[] getAvailableEnchantSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getAvailableEnchantSkills
    com.l2jfrozen.gameserver.model.L2PledgeSkillLearn[] getAvailablePledgeSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getAvailablePledgeSkills
    java.util.Collection getAllowedSkills(com.l2jfrozen.gameserver.model.base.ClassId) -> getAllowedSkills
    int getMinLevelForNewSkill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.base.ClassId) -> getMinLevelForNewSkill
    int getMinLevelForNewSkill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getMinLevelForNewSkill
    int getSkillCost(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> getSkillCost
    int getSkillSpCost(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> getSkillSpCost
    int getSkillExpCost(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> getSkillExpCost
    byte getSkillRate(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> getSkillRate
    java.util.Collection getAllAvailableSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.base.ClassId) -> getAllAvailableSkills
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.SpawnTable -> com.l2jfrozen.gameserver.datatables.sql.SpawnTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.SpawnTable _instance -> _instance
    java.util.Map spawntable -> spawntable
    int npcSpawnCount -> npcSpawnCount
    int customSpawnCount -> customSpawnCount
    int _highestId -> _highestId
    com.l2jfrozen.gameserver.datatables.sql.SpawnTable getInstance() -> getInstance
    void <init>() -> <init>
    java.util.Map getSpawnTable() -> getSpawnTable
    void fillSpawnTable() -> fillSpawnTable
    com.l2jfrozen.gameserver.model.spawn.L2Spawn getTemplate(int) -> getTemplate
    void addNewSpawn(com.l2jfrozen.gameserver.model.spawn.L2Spawn,boolean) -> addNewSpawn
    void deleteSpawn(com.l2jfrozen.gameserver.model.spawn.L2Spawn,boolean) -> deleteSpawn
    void reloadAll() -> reloadAll
    void findNPCInstances(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> findNPCInstances
    java.util.Map getAllTemplates() -> getAllTemplates
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.TeleportLocationTable -> com.l2jfrozen.gameserver.datatables.sql.TeleportLocationTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.TeleportLocationTable _instance -> _instance
    java.util.Map teleports -> teleports
    com.l2jfrozen.gameserver.datatables.sql.TeleportLocationTable getInstance() -> getInstance
    void <init>() -> <init>
    void reloadAll() -> reloadAll
    com.l2jfrozen.gameserver.model.L2TeleportLocation getTemplate(int) -> getTemplate
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.TerritoryTable -> com.l2jfrozen.gameserver.datatables.sql.TerritoryTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _territory -> _territory
    com.l2jfrozen.gameserver.datatables.sql.TerritoryTable getInstance() -> getInstance
    void <init>() -> <init>
    int[] getRandomPoint(java.lang.Integer) -> getRandomPoint
    int getProcMax(java.lang.Integer) -> getProcMax
    void reload_data() -> reload_data
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.TerritoryTable$SingletonHolder -> com.l2jfrozen.gameserver.datatables.sql.TerritoryTable$SingletonHolder:
    com.l2jfrozen.gameserver.datatables.sql.TerritoryTable _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.TradeListTable -> com.l2jfrozen.gameserver.datatables.sql.TradeListTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.sql.TradeListTable _instance -> _instance
    int _nextListId -> _nextListId
    javolution.util.FastMap _lists -> _lists
    com.l2jfrozen.gameserver.datatables.sql.TradeListTable getInstance() -> getInstance
    void <init>() -> <init>
    void load(boolean) -> load
    void load() -> load
    void reloadAll() -> reloadAll
    com.l2jfrozen.gameserver.model.L2TradeList getBuyList(int) -> getBuyList
    javolution.util.FastList getBuyListByNpcId(int) -> getBuyListByNpcId
    void restoreCount(int) -> restoreCount
    void dataTimerSave(int) -> dataTimerSave
    void dataCountStore() -> dataCountStore
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.sql.TradeListTable$RestoreCount -> com.l2jfrozen.gameserver.datatables.sql.TradeListTable$RestoreCount:
    int timer -> timer
    com.l2jfrozen.gameserver.datatables.sql.TradeListTable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.datatables.sql.TradeListTable,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.datatables.xml.AugmentationData -> com.l2jfrozen.gameserver.datatables.xml.AugmentationData:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.xml.AugmentationData _instance -> _instance
    int STAT_START -> STAT_START
    int STAT_END -> STAT_END
    int STAT_BLOCKSIZE -> STAT_BLOCKSIZE
    int STAT_SUBBLOCKSIZE -> STAT_SUBBLOCKSIZE
    int BLUE_START -> BLUE_START
    int SKILLS_BLOCKSIZE -> SKILLS_BLOCKSIZE
    int BASESTAT_STR -> BASESTAT_STR
    int BASESTAT_CON -> BASESTAT_CON
    int BASESTAT_INT -> BASESTAT_INT
    int BASESTAT_MEN -> BASESTAT_MEN
    javolution.util.FastList[] _augmentationStats -> _augmentationStats
    java.util.Map _blueSkills -> _blueSkills
    java.util.Map _purpleSkills -> _purpleSkills
    java.util.Map _redSkills -> _redSkills
    com.l2jfrozen.gameserver.datatables.xml.AugmentationData getInstance() -> getInstance
    void <init>() -> <init>
    void reload() -> reload
    void load() -> load
    com.l2jfrozen.gameserver.model.L2Augmentation generateRandomAugmentation(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,int,int) -> generateRandomAugmentation
    javolution.util.FastList getAugStatsById(int) -> getAugStatsById
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.xml.AugmentationData$AugStat -> com.l2jfrozen.gameserver.datatables.xml.AugmentationData$AugStat:
    com.l2jfrozen.gameserver.skills.Stats _stat -> _stat
    float _value -> _value
    com.l2jfrozen.gameserver.datatables.xml.AugmentationData this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.datatables.xml.AugmentationData,com.l2jfrozen.gameserver.skills.Stats,float) -> <init>
    com.l2jfrozen.gameserver.skills.Stats getStat() -> getStat
    float getValue() -> getValue
com.l2jfrozen.gameserver.datatables.xml.AugmentationData$augmentationSkill -> com.l2jfrozen.gameserver.datatables.xml.AugmentationData$augmentationSkill:
    int _skillId -> _skillId
    int _maxSkillLevel -> _maxSkillLevel
    int _augmentationSkillId -> _augmentationSkillId
    com.l2jfrozen.gameserver.datatables.xml.AugmentationData this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.datatables.xml.AugmentationData,int,int,int) -> <init>
    com.l2jfrozen.gameserver.model.L2Skill getSkill(int) -> getSkill
    int getAugmentationSkillId() -> getAugmentationSkillId
com.l2jfrozen.gameserver.datatables.xml.AugmentationData$augmentationStat -> com.l2jfrozen.gameserver.datatables.xml.AugmentationData$augmentationStat:
    com.l2jfrozen.gameserver.skills.Stats _stat -> _stat
    int _singleSize -> _singleSize
    int _combinedSize -> _combinedSize
    float[] _singleValues -> _singleValues
    float[] _combinedValues -> _combinedValues
    com.l2jfrozen.gameserver.datatables.xml.AugmentationData this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.datatables.xml.AugmentationData,com.l2jfrozen.gameserver.skills.Stats,float[],float[]) -> <init>
    int getSingleStatSize() -> getSingleStatSize
    int getCombinedStatSize() -> getCombinedStatSize
    float getSingleStatValue(int) -> getSingleStatValue
    float getCombinedStatValue(int) -> getCombinedStatValue
    com.l2jfrozen.gameserver.skills.Stats getStat() -> getStat
com.l2jfrozen.gameserver.datatables.xml.ExperienceData -> com.l2jfrozen.gameserver.datatables.xml.ExperienceData:
    org.apache.log4j.Logger LOGGER -> LOGGER
    byte MAX_LEVEL -> MAX_LEVEL
    byte MAX_PET_LEVEL -> MAX_PET_LEVEL
    java.util.Map _expTable -> _expTable
    void <init>() -> <init>
    void loadData() -> loadData
    long getExpForLevel(int) -> getExpForLevel
    byte getMaxLevel() -> getMaxLevel
    byte getMaxPetLevel() -> getMaxPetLevel
    com.l2jfrozen.gameserver.datatables.xml.ExperienceData getInstance() -> getInstance
    void <init>(com.l2jfrozen.gameserver.datatables.xml.ExperienceData$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.xml.ExperienceData$1 -> com.l2jfrozen.gameserver.datatables.xml.ExperienceData$1:
com.l2jfrozen.gameserver.datatables.xml.ExperienceData$SingletonHolder -> com.l2jfrozen.gameserver.datatables.xml.ExperienceData$SingletonHolder:
    com.l2jfrozen.gameserver.datatables.xml.ExperienceData _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.datatables.xml.ZoneData -> com.l2jfrozen.gameserver.datatables.xml.ZoneData:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.datatables.xml.ZoneData _instance -> _instance
    com.l2jfrozen.gameserver.datatables.xml.ZoneData getInstance() -> getInstance
    void <init>() -> <init>
    void reload() -> reload
    void load() -> load
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.GeoData -> com.l2jfrozen.gameserver.geo.GeoData:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    com.l2jfrozen.gameserver.geo.GeoData getInstance() -> getInstance
    short getType(int,int) -> getType
    short getHeight(int,int,int) -> getHeight
    short getSpawnHeight(int,int,int,int,int) -> getSpawnHeight
    java.lang.String geoPosition(int,int) -> geoPosition
    boolean canSeeTarget(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Object) -> canSeeTarget
    boolean canSeeTarget(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.common.util.Point3D) -> canSeeTarget
    boolean canSeeTarget(int,int,int,int,int,int) -> canSeeTarget
    boolean canSeeTargetDebug(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> canSeeTargetDebug
    short getNSWE(int,int,int) -> getNSWE
    com.l2jfrozen.gameserver.model.Location moveCheck(int,int,int,int,int,int) -> moveCheck
    boolean canMoveFromToTarget(int,int,int,int,int,int) -> canMoveFromToTarget
    void addGeoDataBug(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> addGeoDataBug
    void unloadGeodata(byte,byte) -> unloadGeodata
    boolean loadGeodataFile(byte,byte) -> loadGeodataFile
    boolean hasGeo(int,int) -> hasGeo
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] getNeighbors(com.l2jfrozen.gameserver.geo.pathfinding.Node) -> getNeighbors
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.GeoData$SingletonHolder -> com.l2jfrozen.gameserver.geo.GeoData$SingletonHolder:
    com.l2jfrozen.gameserver.geo.GeoData INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.GeoEngine -> com.l2jfrozen.gameserver.geo.GeoEngine:
    byte _e -> _e
    byte _w -> _w
    byte _s -> _s
    byte _n -> _n
    com.l2jfrozen.gameserver.geo.util.LookupTable _geodata -> _geodata
    com.l2jfrozen.gameserver.geo.util.LookupTable _geodataIndex -> _geodataIndex
    java.io.BufferedOutputStream _geoBugsOut -> _geoBugsOut
    com.l2jfrozen.gameserver.geo.GeoEngine getInstance() -> getInstance
    void <init>() -> <init>
    short getType(int,int) -> getType
    short getHeight(int,int,int) -> getHeight
    short getSpawnHeight(int,int,int,int,int) -> getSpawnHeight
    java.lang.String geoPosition(int,int) -> geoPosition
    boolean canSeeTarget(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.common.util.Point3D) -> canSeeTarget
    boolean canSeeTarget(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Object) -> canSeeTarget
    boolean canSeeTargetDebug(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> canSeeTargetDebug
    short getNSWE(int,int,int) -> getNSWE
    boolean canMoveFromToTarget(int,int,int,int,int,int) -> canMoveFromToTarget
    com.l2jfrozen.gameserver.model.Location moveCheck(int,int,int,int,int,int) -> moveCheck
    void addGeoDataBug(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> addGeoDataBug
    boolean canSeeTarget(int,int,int,int,int,int) -> canSeeTarget
    boolean hasGeo(int,int) -> hasGeo
    boolean canSee(int,int,double,int,int,int) -> canSee
    boolean canSeeDebug(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,double,int,int,int) -> canSeeDebug
    com.l2jfrozen.gameserver.model.Location moveCheck(com.l2jfrozen.gameserver.model.Location,com.l2jfrozen.gameserver.model.Location,int,int,double,int,int,int) -> moveCheck
    byte sign(int) -> sign
    void nInitGeodata() -> nInitGeodata
    void unloadGeodata(byte,byte) -> unloadGeodata
    boolean loadGeodataFile(byte,byte) -> loadGeodataFile
    short getRegionOffset(int,int) -> getRegionOffset
    int getBlock(int) -> getBlock
    int getCell(int) -> getCell
    short nGetType(int,int) -> nGetType
    short nGetHeight(int,int,int) -> nGetHeight
    short nGetUpperHeight(int,int,int) -> nGetUpperHeight
    short nGetSpawnHeight(int,int,int,int,int) -> nGetSpawnHeight
    double nCanMoveNext(int,int,int,int,int,int) -> nCanMoveNext
    boolean nLOS(int,int,int,int,int,double,int,boolean) -> nLOS
    short nGetNSWE(int,int,int) -> nGetNSWE
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] getNeighbors(com.l2jfrozen.gameserver.geo.pathfinding.Node) -> getNeighbors
    boolean checkNSWE(short,int,int,int,int) -> checkNSWE
com.l2jfrozen.gameserver.geo.GeoEngine$SingletonHolder -> com.l2jfrozen.gameserver.geo.GeoEngine$SingletonHolder:
    com.l2jfrozen.gameserver.geo.GeoEngine INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.geoeditorcon.GeoEditorListener -> com.l2jfrozen.gameserver.geo.geoeditorcon.GeoEditorListener:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int PORT -> PORT
    java.net.ServerSocket _serverSocket -> _serverSocket
    com.l2jfrozen.gameserver.geo.geoeditorcon.GeoEditorThread _geoEditor -> _geoEditor
    com.l2jfrozen.gameserver.geo.geoeditorcon.GeoEditorListener getInstance() -> getInstance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.geo.geoeditorcon.GeoEditorThread getThread() -> getThread
    java.lang.String getStatus() -> getStatus
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.geoeditorcon.GeoEditorListener$SingletonHolder -> com.l2jfrozen.gameserver.geo.geoeditorcon.GeoEditorListener$SingletonHolder:
    com.l2jfrozen.gameserver.geo.geoeditorcon.GeoEditorListener INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.geoeditorcon.GeoEditorThread -> com.l2jfrozen.gameserver.geo.geoeditorcon.GeoEditorThread:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean _working -> _working
    int _mode -> _mode
    int _sendDelay -> _sendDelay
    java.net.Socket _geSocket -> _geSocket
    java.io.OutputStream _out -> _out
    javolution.util.FastList _gms -> _gms
    void <init>(java.net.Socket) -> <init>
    void interrupt() -> interrupt
    void run() -> run
    void sendGmPosition(int,int,short) -> sendGmPosition
    void sendGmPosition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendGmPosition
    void sendPing() -> sendPing
    void writeD(int) -> D
    void writeH(int) -> H
    void writeC(int) -> C
    void setMode(int) -> setMode
    void setTimer(int) -> setTimer
    void addGM(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addGM
    void removeGM(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeGM
    boolean isSend(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isSend
    boolean isConnected() -> isConnected
    boolean isWorking() -> isWorking
    int getMode() -> getMode
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.pathfinding.Node -> com.l2jfrozen.gameserver.geo.pathfinding.Node:
    int _neighborsIdx -> _neighborsIdx
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] _neighbors -> _neighbors
    com.l2jfrozen.gameserver.geo.pathfinding.Node _parent -> _parent
    short _cost -> _cost
    void <init>(int) -> <init>
    void setParent(com.l2jfrozen.gameserver.geo.pathfinding.Node) -> setParent
    void setCost(int) -> setCost
    void attachNeighbors() -> attachNeighbors
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] getNeighbors() -> getNeighbors
    com.l2jfrozen.gameserver.geo.pathfinding.Node getParent() -> getParent
    short getCost() -> getCost
    int getX() -> getX
    int getY() -> getY
    short getZ() -> getZ
    void setZ(short) -> setZ
    int getNodeX() -> getNodeX
    int getNodeY() -> getNodeY
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int hash(int) -> hash
com.l2jfrozen.gameserver.geo.pathfinding.PathFinding -> com.l2jfrozen.gameserver.geo.pathfinding.PathFinding:
    void <init>() -> <init>
    com.l2jfrozen.gameserver.geo.pathfinding.PathFinding getInstance() -> getInstance
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] findPath(int,int,int,int,int,int) -> findPath
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] readNeighbors(com.l2jfrozen.gameserver.geo.pathfinding.Node,int) -> readNeighbors
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] search(com.l2jfrozen.gameserver.geo.pathfinding.Node,com.l2jfrozen.gameserver.geo.pathfinding.Node) -> search
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] searchByClosest(com.l2jfrozen.gameserver.geo.pathfinding.Node,com.l2jfrozen.gameserver.geo.pathfinding.Node) -> searchByClosest
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] searchByClosest2(com.l2jfrozen.gameserver.geo.pathfinding.Node,com.l2jfrozen.gameserver.geo.pathfinding.Node) -> searchByClosest2
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] searchAStar(com.l2jfrozen.gameserver.geo.pathfinding.Node,com.l2jfrozen.gameserver.geo.pathfinding.Node) -> searchAStar
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] constructPath(com.l2jfrozen.gameserver.geo.pathfinding.Node) -> constructPath
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] constructPath2(com.l2jfrozen.gameserver.geo.pathfinding.Node) -> constructPath2
    short getNodePos(int) -> getNodePos
    short getNodeBlock(int) -> getNodeBlock
    byte getRegionX(int) -> getRegionX
    byte getRegionY(int) -> getRegionY
    short getRegionOffset(byte,byte) -> getRegionOffset
    int calculateWorldX(short) -> calculateWorldX
    int calculateWorldY(short) -> calculateWorldY
com.l2jfrozen.gameserver.geo.pathfinding.cellnodes.CellNode -> com.l2jfrozen.gameserver.geo.pathfinding.cellnodes.CellNode:
    int _x -> _x
    int _y -> _y
    short _z -> _z
    void <init>(int,int,short,int) -> <init>
    int getX() -> getX
    int getY() -> getY
    short getZ() -> getZ
    void setZ(short) -> setZ
    int getNodeX() -> getNodeX
    int getNodeY() -> getNodeY
com.l2jfrozen.gameserver.geo.pathfinding.cellnodes.CellPathFinding -> com.l2jfrozen.gameserver.geo.pathfinding.cellnodes.CellPathFinding:
    com.l2jfrozen.gameserver.geo.pathfinding.cellnodes.CellPathFinding getInstance() -> getInstance
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] findPath(int,int,int,int,int,int) -> findPath
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] readNeighbors(com.l2jfrozen.gameserver.geo.pathfinding.Node,int) -> readNeighbors
    com.l2jfrozen.gameserver.geo.pathfinding.Node readNode(int,int,short) -> readNode
    void <init>() -> <init>
com.l2jfrozen.gameserver.geo.pathfinding.cellnodes.CellPathFinding$SingletonHolder -> com.l2jfrozen.gameserver.geo.pathfinding.cellnodes.CellPathFinding$SingletonHolder:
    com.l2jfrozen.gameserver.geo.pathfinding.cellnodes.CellPathFinding INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.pathfinding.geonodes.GeoNode -> com.l2jfrozen.gameserver.geo.pathfinding.geonodes.GeoNode:
    short _x -> _x
    short _y -> _y
    short _z -> _z
    void <init>(short,short,short,int) -> <init>
    int getX() -> getX
    int getY() -> getY
    short getZ() -> getZ
    void setZ(short) -> setZ
    int getNodeX() -> getNodeX
    int getNodeY() -> getNodeY
com.l2jfrozen.gameserver.geo.pathfinding.geonodes.GeoPathFinding -> com.l2jfrozen.gameserver.geo.pathfinding.geonodes.GeoPathFinding:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.geo.util.LookupTable _pathNodes -> _pathNodes
    com.l2jfrozen.gameserver.geo.util.LookupTable _pathNodesIndex -> _pathNodesIndex
    com.l2jfrozen.gameserver.geo.pathfinding.geonodes.GeoPathFinding getInstance() -> getInstance
    boolean pathNodesExist(short) -> pathNodesExist
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] findPath(int,int,int,int,int,int) -> findPath
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] readNeighbors(com.l2jfrozen.gameserver.geo.pathfinding.Node,int) -> readNeighbors
    com.l2jfrozen.gameserver.geo.pathfinding.Node readNode(short,short,byte) -> readNode
    com.l2jfrozen.gameserver.geo.pathfinding.Node readNode(int,int,short) -> readNode
    void <init>() -> <init>
    void LoadPathNodeFile(byte,byte) -> LoadPathNodeFile
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.pathfinding.geonodes.GeoPathFinding$SingletonHolder -> com.l2jfrozen.gameserver.geo.pathfinding.geonodes.GeoPathFinding$SingletonHolder:
    com.l2jfrozen.gameserver.geo.pathfinding.geonodes.GeoPathFinding INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.pathfinding.utils.BinaryNodeHeap -> com.l2jfrozen.gameserver.geo.pathfinding.utils.BinaryNodeHeap:
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] _list -> _list
    com.l2jfrozen.gameserver.geo.util.L2FastSet _set -> _set
    int _size -> _size
    com.l2jfrozen.gameserver.geo.util.ObjectPool POOL -> POOL
    void <init>() -> <init>
    void add(com.l2jfrozen.gameserver.geo.pathfinding.Node) -> add
    com.l2jfrozen.gameserver.geo.pathfinding.Node removeFirst() -> removeFirst
    boolean contains(com.l2jfrozen.gameserver.geo.pathfinding.Node) -> contains
    boolean isEmpty() -> isEmpty
    com.l2jfrozen.gameserver.geo.pathfinding.utils.BinaryNodeHeap newInstance() -> newInstance
    void recycle(com.l2jfrozen.gameserver.geo.pathfinding.utils.BinaryNodeHeap) -> recycle
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.pathfinding.utils.BinaryNodeHeap$1 -> com.l2jfrozen.gameserver.geo.pathfinding.utils.BinaryNodeHeap$1:
    void <init>() -> <init>
    void reset(com.l2jfrozen.gameserver.geo.pathfinding.utils.BinaryNodeHeap) -> reset
    com.l2jfrozen.gameserver.geo.pathfinding.utils.BinaryNodeHeap create() -> create
    java.lang.Object create() -> create
    void reset(java.lang.Object) -> reset
com.l2jfrozen.gameserver.geo.pathfinding.utils.CellNodeMap -> com.l2jfrozen.gameserver.geo.pathfinding.utils.CellNodeMap:
    com.l2jfrozen.gameserver.geo.util.L2FastSet _cellIndex -> _cellIndex
    com.l2jfrozen.gameserver.geo.util.ObjectPool POOL -> POOL
    void <init>() -> <init>
    void add(com.l2jfrozen.gameserver.geo.pathfinding.Node) -> add
    boolean contains(com.l2jfrozen.gameserver.geo.pathfinding.Node) -> contains
    com.l2jfrozen.gameserver.geo.pathfinding.utils.CellNodeMap newInstance() -> newInstance
    void recycle(com.l2jfrozen.gameserver.geo.pathfinding.utils.CellNodeMap) -> recycle
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.pathfinding.utils.CellNodeMap$1 -> com.l2jfrozen.gameserver.geo.pathfinding.utils.CellNodeMap$1:
    void <init>() -> <init>
    void reset(com.l2jfrozen.gameserver.geo.pathfinding.utils.CellNodeMap) -> reset
    com.l2jfrozen.gameserver.geo.pathfinding.utils.CellNodeMap create() -> create
    java.lang.Object create() -> create
    void reset(java.lang.Object) -> reset
com.l2jfrozen.gameserver.geo.util.Bunch -> com.l2jfrozen.gameserver.geo.util.Bunch:
    int size() -> size
    com.l2jfrozen.gameserver.geo.util.Bunch add(java.lang.Object) -> add
    com.l2jfrozen.gameserver.geo.util.Bunch remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    java.lang.Object get(int) -> get
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
    boolean contains(java.lang.Object) -> contains
    com.l2jfrozen.gameserver.geo.util.Bunch addAll(java.lang.Iterable) -> addAll
    com.l2jfrozen.gameserver.geo.util.Bunch addAll(java.lang.Object[]) -> addAll
    java.lang.Object[] moveToArray() -> moveToArray
    java.lang.Object[] moveToArray(java.lang.Object[]) -> moveToArray
    java.lang.Object[] moveToArray(java.lang.Class) -> moveToArray
    java.util.List moveToList(java.util.List) -> moveToList
    com.l2jfrozen.gameserver.geo.util.Bunch cleanByFilter(com.l2jfrozen.gameserver.geo.util.L2Collections$Filter) -> cleanByFilter
com.l2jfrozen.gameserver.geo.util.L2Arrays -> com.l2jfrozen.gameserver.geo.util.L2Arrays:
    void <init>() -> <init>
    int countNull(java.lang.Object[]) -> countNull
    int countNotNull(java.lang.Object[]) -> countNotNull
    java.lang.Object[] compact(java.lang.Object[]) -> compact
    java.util.List asForeachSafeList(java.lang.Object[]) -> asForeachSafeList
    java.util.List asForeachSafeList(boolean,java.lang.Object[]) -> asForeachSafeList
    java.lang.Iterable iterable(java.lang.Object[]) -> iterable
    java.lang.Iterable iterable(java.lang.Object[],boolean) -> iterable
    java.util.Iterator iterator(java.lang.Object[]) -> iterator
    java.util.Iterator iterator(java.lang.Object[],boolean) -> iterator
com.l2jfrozen.gameserver.geo.util.L2Arrays$ArrayIterable -> com.l2jfrozen.gameserver.geo.util.L2Arrays$ArrayIterable:
    java.lang.Object[] _array -> _array
    void <init>(java.lang.Object[]) -> <init>
    java.util.Iterator iterator() -> iterator
com.l2jfrozen.gameserver.geo.util.L2Arrays$ArrayIterator -> com.l2jfrozen.gameserver.geo.util.L2Arrays$ArrayIterator:
    java.lang.Object[] _array -> _array
    int _index -> _index
    void <init>(java.lang.Object[]) -> <init>
    boolean allowElement(java.lang.Object) -> allowElement
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.l2jfrozen.gameserver.geo.util.L2Arrays$NullFreeArrayIterable -> com.l2jfrozen.gameserver.geo.util.L2Arrays$NullFreeArrayIterable:
    void <init>(java.lang.Object[]) -> <init>
    java.util.Iterator iterator() -> iterator
com.l2jfrozen.gameserver.geo.util.L2Arrays$NullFreeArrayIterator -> com.l2jfrozen.gameserver.geo.util.L2Arrays$NullFreeArrayIterator:
    void <init>(java.lang.Object[]) -> <init>
    boolean allowElement(java.lang.Object) -> allowElement
com.l2jfrozen.gameserver.geo.util.L2Collections -> com.l2jfrozen.gameserver.geo.util.L2Collections:
    java.lang.Object[] EMPTY_ARRAY -> EMPTY_ARRAY
    com.l2jfrozen.gameserver.geo.util.ObjectPool ARRAY_LISTS -> ARRAY_LISTS
    com.l2jfrozen.gameserver.geo.util.ObjectPool L2_FAST_SETS -> L2_FAST_SETS
    void <init>() -> <init>
    java.util.ListIterator emptyListIterator() -> emptyListIterator
    java.util.Collection emptyCollection() -> emptyCollection
    java.util.Set emptySet() -> emptySet
    java.util.List emptyList() -> emptyList
    java.util.Map emptyMap() -> emptyMap
    com.l2jfrozen.gameserver.geo.util.Bunch emptyBunch() -> emptyBunch
    java.lang.Iterable filteredIterable(java.lang.Class,java.lang.Iterable) -> filteredIterable
    java.lang.Iterable filteredIterable(java.lang.Class,java.lang.Iterable,com.l2jfrozen.gameserver.geo.util.L2Collections$Filter) -> filteredIterable
    java.util.Iterator filteredIterator(java.lang.Class,java.lang.Iterable) -> filteredIterator
    java.util.Iterator filteredIterator(java.lang.Class,java.lang.Iterable,com.l2jfrozen.gameserver.geo.util.L2Collections$Filter) -> filteredIterator
    java.lang.Iterable convertingIterable(java.lang.Iterable,com.l2jfrozen.gameserver.geo.util.L2Collections$Converter) -> convertingIterable
    java.util.Iterator convertingIterator(java.lang.Iterable,com.l2jfrozen.gameserver.geo.util.L2Collections$Converter) -> convertingIterator
    java.lang.Iterable concatenatedIterable(java.lang.Iterable,java.lang.Iterable) -> concatenatedIterable
    java.lang.Iterable concatenatedIterable(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concatenatedIterable
    java.lang.Iterable concatenatedIterable(java.lang.Iterable[]) -> concatenatedIterable
    java.util.Iterator concatenatedIterator(java.lang.Iterable,java.lang.Iterable) -> concatenatedIterator
    java.util.Iterator concatenatedIterator(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concatenatedIterator
    java.util.Iterator concatenatedIterator(java.lang.Iterable[]) -> concatenatedIterator
    java.util.ArrayList newArrayList() -> newArrayList
    void recycle(java.util.ArrayList) -> recycle
    com.l2jfrozen.gameserver.geo.util.L2FastSet newL2FastSet() -> newL2FastSet
    void recycle(com.l2jfrozen.gameserver.geo.util.L2FastSet) -> recycle
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.util.L2Collections$1 -> com.l2jfrozen.gameserver.geo.util.L2Collections$1:
    void <init>() -> <init>
    void reset(java.util.ArrayList) -> reset
    java.util.ArrayList create() -> create
    java.lang.Object create() -> create
    void reset(java.lang.Object) -> reset
com.l2jfrozen.gameserver.geo.util.L2Collections$2 -> com.l2jfrozen.gameserver.geo.util.L2Collections$2:
    void <init>() -> <init>
    void reset(com.l2jfrozen.gameserver.geo.util.L2FastSet) -> reset
    com.l2jfrozen.gameserver.geo.util.L2FastSet create() -> create
    java.lang.Object create() -> create
    void reset(java.lang.Object) -> reset
com.l2jfrozen.gameserver.geo.util.L2Collections$ConcatenatedIterable -> com.l2jfrozen.gameserver.geo.util.L2Collections$ConcatenatedIterable:
    java.lang.Iterable[] _iterables -> _iterables
    void <init>(java.lang.Iterable[]) -> <init>
    java.util.Iterator iterator() -> iterator
com.l2jfrozen.gameserver.geo.util.L2Collections$ConcatenatedIterator -> com.l2jfrozen.gameserver.geo.util.L2Collections$ConcatenatedIterator:
    java.lang.Iterable[] _iterables -> _iterables
    java.util.Iterator _iterator -> _iterator
    int _index -> _index
    void <init>(java.lang.Iterable[]) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void validateIterator() -> validateIterator
    void remove() -> remove
com.l2jfrozen.gameserver.geo.util.L2Collections$Converter -> com.l2jfrozen.gameserver.geo.util.L2Collections$Converter:
    java.lang.Object convert(java.lang.Object) -> convert
com.l2jfrozen.gameserver.geo.util.L2Collections$ConvertingIterable -> com.l2jfrozen.gameserver.geo.util.L2Collections$ConvertingIterable:
    java.lang.Iterable _iterable -> _iterable
    com.l2jfrozen.gameserver.geo.util.L2Collections$Converter _converter -> _converter
    void <init>(java.lang.Iterable,com.l2jfrozen.gameserver.geo.util.L2Collections$Converter) -> <init>
    java.util.Iterator iterator() -> iterator
com.l2jfrozen.gameserver.geo.util.L2Collections$ConvertingIterator -> com.l2jfrozen.gameserver.geo.util.L2Collections$ConvertingIterator:
    java.util.Iterator _iterator -> _iterator
    com.l2jfrozen.gameserver.geo.util.L2Collections$Converter _converter -> _converter
    java.lang.Object _next -> _next
    void <init>(java.lang.Iterable,com.l2jfrozen.gameserver.geo.util.L2Collections$Converter) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void step() -> step
    void remove() -> remove
com.l2jfrozen.gameserver.geo.util.L2Collections$EmptyBunch -> com.l2jfrozen.gameserver.geo.util.L2Collections$EmptyBunch:
    com.l2jfrozen.gameserver.geo.util.Bunch INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.l2jfrozen.gameserver.geo.util.Bunch add(java.lang.Object) -> add
    com.l2jfrozen.gameserver.geo.util.Bunch addAll(java.lang.Iterable) -> addAll
    com.l2jfrozen.gameserver.geo.util.Bunch addAll(java.lang.Object[]) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    java.lang.Object get(int) -> get
    boolean isEmpty() -> isEmpty
    java.lang.Object[] moveToArray() -> moveToArray
    java.lang.Object[] moveToArray(java.lang.Object[]) -> moveToArray
    java.lang.Object[] moveToArray(java.lang.Class) -> moveToArray
    java.util.List moveToList(java.util.List) -> moveToList
    com.l2jfrozen.gameserver.geo.util.Bunch remove(java.lang.Object) -> remove
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    int size() -> size
    com.l2jfrozen.gameserver.geo.util.Bunch cleanByFilter(com.l2jfrozen.gameserver.geo.util.L2Collections$Filter) -> cleanByFilter
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.util.L2Collections$EmptyCollection -> com.l2jfrozen.gameserver.geo.util.L2Collections$EmptyCollection:
    java.util.Collection INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.util.L2Collections$EmptyList -> com.l2jfrozen.gameserver.geo.util.L2Collections$EmptyList:
    java.util.List INSTANCE -> INSTANCE
    void <init>() -> <init>
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    java.util.List subList(int,int) -> subList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.util.L2Collections$EmptyListIterator -> com.l2jfrozen.gameserver.geo.util.L2Collections$EmptyListIterator:
    java.util.ListIterator INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    void remove() -> remove
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.util.L2Collections$EmptyMap -> com.l2jfrozen.gameserver.geo.util.L2Collections$EmptyMap:
    java.util.Map INSTANCE -> INSTANCE
    void <init>() -> <init>
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set entrySet() -> entrySet
    java.lang.Object get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.util.Set keySet() -> keySet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    int size() -> size
    java.util.Collection values() -> values
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.util.L2Collections$EmptySet -> com.l2jfrozen.gameserver.geo.util.L2Collections$EmptySet:
    java.util.Set INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.util.L2Collections$Filter -> com.l2jfrozen.gameserver.geo.util.L2Collections$Filter:
    boolean accept(java.lang.Object) -> accept
com.l2jfrozen.gameserver.geo.util.L2Collections$FilteredIterable -> com.l2jfrozen.gameserver.geo.util.L2Collections$FilteredIterable:
    java.lang.Iterable _iterable -> _iterable
    com.l2jfrozen.gameserver.geo.util.L2Collections$Filter _filter -> _filter
    java.lang.Class _clazz -> _clazz
    void <init>(java.lang.Class,java.lang.Iterable,com.l2jfrozen.gameserver.geo.util.L2Collections$Filter) -> <init>
    java.util.Iterator iterator() -> iterator
com.l2jfrozen.gameserver.geo.util.L2Collections$FilteredIterator -> com.l2jfrozen.gameserver.geo.util.L2Collections$FilteredIterator:
    java.util.Iterator _iterator -> _iterator
    com.l2jfrozen.gameserver.geo.util.L2Collections$Filter _filter -> _filter
    java.lang.Class _clazz -> _clazz
    java.lang.Object _next -> _next
    void <init>(java.lang.Class,java.lang.Iterable,com.l2jfrozen.gameserver.geo.util.L2Collections$Filter) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void step() -> step
    void remove() -> remove
com.l2jfrozen.gameserver.geo.util.L2FastCollection -> com.l2jfrozen.gameserver.geo.util.L2FastCollection:
    void <init>() -> <init>
    javolution.util.FastCollection$Record head() -> head
    javolution.util.FastCollection$Record tail() -> tail
    java.lang.Object valueOf(javolution.util.FastCollection$Record) -> valueOf
    void delete(javolution.util.FastCollection$Record) -> delete
    void delete(javolution.util.FastCollection$Record,java.lang.Object) -> delete
    java.lang.Object getFirst() -> getFirst
    java.lang.Object getLast() -> getLast
    java.lang.Object removeFirst() -> removeFirst
    java.lang.Object removeLast() -> removeLast
    boolean addAll(java.lang.Object[]) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(java.lang.Iterable) -> addAll
    boolean addAll(com.l2jfrozen.gameserver.geo.util.L2FastCollection) -> addAll
    boolean addAll(javolution.util.FastCollection) -> addAll
    boolean addAll(java.util.List) -> addAll
    boolean containsAll(java.lang.Object[]) -> containsAll
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(java.lang.Iterable) -> containsAll
    boolean containsAll(com.l2jfrozen.gameserver.geo.util.L2FastCollection) -> containsAll
    boolean containsAll(javolution.util.FastCollection) -> containsAll
    boolean containsAll(java.util.List) -> containsAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.l2jfrozen.gameserver.geo.util.L2FastSet -> com.l2jfrozen.gameserver.geo.util.L2FastSet:
    java.lang.Object NULL -> NULL
    javolution.util.FastMap _map -> _map
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(java.util.Set) -> <init>
    com.l2jfrozen.gameserver.geo.util.L2FastSet setShared(boolean) -> setShared
    boolean isShared() -> isShared
    javolution.util.FastCollection$Record head() -> head
    javolution.util.FastCollection$Record tail() -> tail
    java.lang.Object valueOf(javolution.util.FastCollection$Record) -> valueOf
    void delete(javolution.util.FastCollection$Record) -> delete
    void delete(javolution.util.FastCollection$Record,java.lang.Object) -> delete
    boolean add(java.lang.Object) -> add
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.util.LookupTable -> com.l2jfrozen.gameserver.geo.util.LookupTable:
    java.lang.Object[] EMPTY_ARRAY -> EMPTY_ARRAY
    java.lang.Object[] _array -> _array
    int _offset -> _offset
    int _size -> _size
    void <init>() -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear(boolean) -> clear
    java.lang.Object get(int) -> get
    void set(int,java.lang.Object) -> set
    void replacedValue(int,java.lang.Object,java.lang.Object) -> replacedValue
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.util.ObjectPool -> com.l2jfrozen.gameserver.geo.util.ObjectPool:
    java.util.WeakHashMap POOLS -> POOLS
    java.util.concurrent.locks.ReentrantLock _lock -> _lock
    java.lang.Object[] _elements -> _elements
    long[] _access -> _access
    int _size -> _size
    void <init>() -> <init>
    int getCurrentSize() -> getCurrentSize
    int getMaximumSize() -> getMaximumSize
    long getMaxLifeTime() -> getMaxLifeTime
    void clear() -> clear
    void store(java.lang.Object) -> store
    void reset(java.lang.Object) -> reset
    java.lang.Object get() -> get
    java.lang.Object create() -> create
    void purge() -> purge
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.geo.util.ObjectPool$1 -> com.l2jfrozen.gameserver.geo.util.ObjectPool$1:
    void <init>(java.lang.String) -> <init>
    void runTurn() -> runTurn
    void sleepTurn() -> sleepTurn
com.l2jfrozen.gameserver.handler.AdminCommandHandler -> com.l2jfrozen.gameserver.handler.AdminCommandHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.handler.AdminCommandHandler _instance -> _instance
    javolution.util.FastMap _datatable -> _datatable
    com.l2jfrozen.gameserver.handler.AdminCommandHandler getInstance() -> getInstance
    void <init>() -> <init>
    void registerAdminCommandHandler(com.l2jfrozen.gameserver.handler.IAdminCommandHandler) -> registerAdminCommandHandler
    com.l2jfrozen.gameserver.handler.IAdminCommandHandler getAdminCommandHandler(java.lang.String) -> getAdminCommandHandler
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler -> com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler _instance -> _instance
    long DEFAULT_ANNOUNCEMENT_DELAY -> DEFAULT_ANNOUNCEMENT_DELAY
    java.util.Map _registeredAnnouncements -> _registeredAnnouncements
    void <init>() -> <init>
    void restoreAnnouncementData() -> restoreAnnouncementData
    void listAutoAnnouncements(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> listAutoAnnouncements
    com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler getInstance() -> getInstance
    int size() -> size
    com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance registerGlobalAnnouncement(int,java.lang.String,long) -> registerGlobalAnnouncement
    com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance registerAnnouncment(int,java.lang.String,long) -> registerAnnouncment
    com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance registerAnnouncment(java.lang.String,long) -> registerAnnouncment
    int nextAutoAnnouncmentId() -> nextAutoAnnouncmentId
    com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance registerAnnouncement(int,java.lang.String,long) -> registerAnnouncement
    java.util.Collection values() -> values
    boolean removeAnnouncement(int) -> removeAnnouncement
    boolean removeAnnouncement(com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance) -> removeAnnouncement
    com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance getAutoAnnouncementInstance(int) -> getAutoAnnouncementInstance
    void setAutoAnnouncementActive(boolean) -> setAutoAnnouncementActive
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance -> com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance:
    long _defaultDelay -> _defaultDelay
    java.lang.String _defaultTexts -> _defaultTexts
    boolean _defaultRandom -> _defaultRandom
    java.lang.Integer _defaultId -> _defaultId
    boolean _isActive -> _isActive
    java.util.concurrent.ScheduledFuture _chatTask -> _chatTask
    com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler,int,java.lang.String,long) -> <init>
    boolean isActive() -> isActive
    boolean isDefaultRandom() -> isDefaultRandom
    long getDefaultDelay() -> getDefaultDelay
    java.lang.String getDefaultTexts() -> getDefaultTexts
    java.lang.Integer getDefaultId() -> getDefaultId
    void setDefaultChatDelay(long) -> setDefaultChatDelay
    void setDefaultChatTexts(java.lang.String) -> setDefaultChatTexts
    void setDefaultRandom(boolean) -> setDefaultRandom
    void setActive(boolean) -> setActive
com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance$AutoAnnouncementRunner -> com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance$AutoAnnouncementRunner:
    int id -> id
    com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance this$1 -> this$1
    void <init>(com.l2jfrozen.gameserver.handler.AutoAnnouncementHandler$AutoAnnouncementInstance,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.AutoChatHandler -> com.l2jfrozen.gameserver.handler.AutoChatHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.handler.AutoChatHandler _instance -> _instance
    long DEFAULT_CHAT_DELAY -> DEFAULT_CHAT_DELAY
    java.util.Map _registeredChats -> _registeredChats
    void <init>() -> <init>
    void restoreChatData() -> restoreChatData
    com.l2jfrozen.gameserver.handler.AutoChatHandler getInstance() -> getInstance
    int size() -> size
    com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance registerGlobalChat(int,java.lang.String[],long) -> registerGlobalChat
    com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance registerChat(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,java.lang.String[],long) -> registerChat
    com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance registerChat(int,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,java.lang.String[],long) -> registerChat
    boolean removeChat(int) -> removeChat
    boolean removeChat(com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance) -> removeChat
    com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance getAutoChatInstance(int,boolean) -> getAutoChatInstance
    void setAutoChatActive(boolean) -> setAutoChatActive
    void npcSpawned(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> npcSpawned
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance -> com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance:
    int _npcId -> _npcId
    long _defaultDelay -> _defaultDelay
    java.lang.String[] _defaultTexts -> _defaultTexts
    boolean _defaultRandom -> _defaultRandom
    boolean _globalChat -> _globalChat
    boolean _isActive -> _isActive
    java.util.Map _chatDefinitions -> _chatDefinitions
    java.util.concurrent.ScheduledFuture _chatTask -> _chatTask
    com.l2jfrozen.gameserver.handler.AutoChatHandler this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.AutoChatHandler,int,java.lang.String[],long,boolean) -> <init>
    com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance$AutoChatDefinition getChatDefinition(int) -> getChatDefinition
    com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance$AutoChatDefinition[] getChatDefinitions() -> getChatDefinitions
    int addChatDefinition(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> addChatDefinition
    int addChatDefinition(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,java.lang.String[],long) -> addChatDefinition
    boolean removeChatDefinition(int) -> removeChatDefinition
    boolean isActive() -> isActive
    boolean isGlobal() -> isGlobal
    boolean isDefaultRandom() -> isDefaultRandom
    boolean isRandomChat(int) -> isRandomChat
    int getNPCId() -> getNPCId
    int getDefinitionCount() -> getDefinitionCount
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance[] getNPCInstanceList() -> getNPCInstanceList
    long getDefaultDelay() -> getDefaultDelay
    java.lang.String[] getDefaultTexts() -> getDefaultTexts
    void setDefaultChatDelay(long) -> setDefaultChatDelay
    void setDefaultChatTexts(java.lang.String[]) -> setDefaultChatTexts
    void setDefaultRandom(boolean) -> setDefaultRandom
    void setChatDelay(int,long) -> setChatDelay
    void setChatTexts(int,java.lang.String[]) -> setChatTexts
    void setRandomChat(int,boolean) -> setRandomChat
    void setActive(boolean) -> setActive
com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance$AutoChatDefinition -> com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance$AutoChatDefinition:
    int _chatIndex -> _chatIndex
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _npcInstance -> _npcInstance
    com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance _chatInstance -> _chatInstance
    long _chatDelay -> _chatDelay
    java.lang.String[] _chatTexts -> _chatTexts
    boolean _isActiveDefinition -> _isActiveDefinition
    boolean _randomChat -> _randomChat
    com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance this$1 -> this$1
    void <init>(com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance,com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,java.lang.String[],long) -> <init>
    java.lang.String[] getChatTexts() -> getChatTexts
    long getChatDelay() -> getChatDelay
    boolean isActive() -> isActive
    boolean isRandomChat() -> isRandomChat
    void setRandomChat(boolean) -> setRandomChat
    void setChatDelay(long) -> setChatDelay
    void setChatTexts(java.lang.String[]) -> setChatTexts
    void setActive(boolean) -> setActive
com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance$AutoChatRunner -> com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance$AutoChatRunner:
    int _runnerNpcId -> _runnerNpcId
    int _objectId -> _objectId
    com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance this$1 -> this$1
    void <init>(com.l2jfrozen.gameserver.handler.AutoChatHandler$AutoChatInstance,int,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler -> com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _l2networkVotesCount -> _l2networkVotesCount
    int _hopzoneVotesCount -> _hopzoneVotesCount
    int _topzoneVotesCount -> _topzoneVotesCount
    java.util.List _already_rewarded -> _already_rewarded
    boolean _l2network -> _l2network
    boolean _topzone -> _topzone
    boolean _hopzone -> _hopzone
    void <init>() -> <init>
    boolean checkSingleBox(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkSingleBox
    int getHopZoneVotes() -> getHopZoneVotes
    int getTopZoneVotes() -> getTopZoneVotes
    int getL2NetworkVotes() -> getL2NetworkVotes
    void setHopZoneVoteCount(int) -> setHopZoneVoteCount
    int getHopZoneVoteCount() -> getHopZoneVoteCount
    void setTopZoneVoteCount(int) -> setTopZoneVoteCount
    int getTopZoneVoteCount() -> getTopZoneVoteCount
    void setL2NetworkVoteCount(int) -> setL2NetworkVoteCount
    int getL2NetworkVoteCount() -> getL2NetworkVoteCount
    com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler getInstance() -> getInstance
    void <init>(com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler$1 -> com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler$1:
com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler$AutoReward -> com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler$AutoReward:
    com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler$SingletonHolder -> com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler$SingletonHolder:
    com.l2jfrozen.gameserver.handler.AutoVoteRewardHandler _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.IAdminCommandHandler -> com.l2jfrozen.gameserver.handler.IAdminCommandHandler:
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
com.l2jfrozen.gameserver.handler.IBBSHandler -> com.l2jfrozen.gameserver.handler.IBBSHandler:
    java.lang.String[] getBBSCommands() -> getBBSCommands
    void handleCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleCommand
com.l2jfrozen.gameserver.handler.ICustomByPassHandler -> com.l2jfrozen.gameserver.handler.ICustomByPassHandler:
    java.lang.String[] getByPassCommands() -> getByPassCommands
    void handleCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleCommand
com.l2jfrozen.gameserver.handler.IItemHandler -> com.l2jfrozen.gameserver.handler.IItemHandler:
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
com.l2jfrozen.gameserver.handler.ISkillHandler -> com.l2jfrozen.gameserver.handler.ISkillHandler:
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
com.l2jfrozen.gameserver.handler.IUserCommandHandler -> com.l2jfrozen.gameserver.handler.IUserCommandHandler:
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
com.l2jfrozen.gameserver.handler.IVoicedCommandHandler -> com.l2jfrozen.gameserver.handler.IVoicedCommandHandler:
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
com.l2jfrozen.gameserver.handler.ItemHandler -> com.l2jfrozen.gameserver.handler.ItemHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.handler.ItemHandler _instance -> _instance
    java.util.Map _datatable -> _datatable
    com.l2jfrozen.gameserver.handler.ItemHandler getInstance() -> getInstance
    int size() -> size
    void <init>() -> <init>
    void registerItemHandler(com.l2jfrozen.gameserver.handler.IItemHandler) -> registerItemHandler
    com.l2jfrozen.gameserver.handler.IItemHandler getItemHandler(int) -> getItemHandler
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.SkillHandler -> com.l2jfrozen.gameserver.handler.SkillHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.handler.SkillHandler _instance -> _instance
    java.util.Map _datatable -> _datatable
    com.l2jfrozen.gameserver.handler.SkillHandler getInstance() -> getInstance
    void <init>() -> <init>
    void registerSkillHandler(com.l2jfrozen.gameserver.handler.ISkillHandler) -> registerSkillHandler
    com.l2jfrozen.gameserver.handler.ISkillHandler getSkillHandler(com.l2jfrozen.gameserver.model.SkillType) -> getSkillHandler
    int size() -> size
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.UserCommandHandler -> com.l2jfrozen.gameserver.handler.UserCommandHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.handler.UserCommandHandler _instance -> _instance
    java.util.Map _datatable -> _datatable
    com.l2jfrozen.gameserver.handler.UserCommandHandler getInstance() -> getInstance
    void <init>() -> <init>
    void registerUserCommandHandler(com.l2jfrozen.gameserver.handler.IUserCommandHandler) -> registerUserCommandHandler
    com.l2jfrozen.gameserver.handler.IUserCommandHandler getUserCommandHandler(int) -> getUserCommandHandler
    int size() -> size
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.VoicedCommandHandler -> com.l2jfrozen.gameserver.handler.VoicedCommandHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.handler.VoicedCommandHandler _instance -> _instance
    java.util.Map _datatable -> _datatable
    com.l2jfrozen.gameserver.handler.VoicedCommandHandler getInstance() -> getInstance
    void <init>() -> <init>
    void registerVoicedCommandHandler(com.l2jfrozen.gameserver.handler.IVoicedCommandHandler) -> registerVoicedCommandHandler
    com.l2jfrozen.gameserver.handler.IVoicedCommandHandler getVoicedCommandHandler(java.lang.String) -> getVoicedCommandHandler
    int size() -> size
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.ActionEnum -> com.l2jfrozen.gameserver.handler.admincommandhandlers.ActionEnum:
    com.l2jfrozen.gameserver.handler.admincommandhandlers.ActionEnum create -> create
    com.l2jfrozen.gameserver.handler.admincommandhandlers.ActionEnum dismiss -> dismiss
    com.l2jfrozen.gameserver.handler.admincommandhandlers.ActionEnum info -> info
    com.l2jfrozen.gameserver.handler.admincommandhandlers.ActionEnum setlevel -> setlevel
    com.l2jfrozen.gameserver.handler.admincommandhandlers.ActionEnum rep -> rep
    com.l2jfrozen.gameserver.handler.admincommandhandlers.ActionEnum[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.handler.admincommandhandlers.ActionEnum[] values() -> values
    com.l2jfrozen.gameserver.handler.admincommandhandlers.ActionEnum valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAdmin -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAdmin:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showMainPage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAdmin$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAdmin$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAio -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAio:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] _adminCommands -> _adminCommands
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void doAio(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> doAio
    void removeAio(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> removeAio
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAio$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAio$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAnnouncements -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAnnouncements:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAnnouncements$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminAnnouncements$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminBBS -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminBBS:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminBan -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminBan:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void auditAction(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> auditAction
    void banChatOfflinePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int,boolean) -> banChatOfflinePlayer
    void jailOfflinePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int) -> jailOfflinePlayer
    void unjailOfflinePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> unjailOfflinePlayer
    boolean changeCharAccessLevel(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> changeCharAccessLevel
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminBoat -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminBoat:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void showUsage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showUsage
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminBuffs -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminBuffs:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void showBuffs(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showBuffs
    void removeBuff(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int) -> removeBuff
    void removeAllBuffs(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> removeAllBuffs
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminBuffs$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminBuffs$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCTFEngine -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCTFEngine:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void showEditPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showEditPage
    void showControlPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showControlPage
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCTFEngine$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCTFEngine$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCache -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCache:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCache$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCache$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminChangeAccessLevel -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminChangeAccessLevel:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void handleChangeLevel(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleChangeLevel
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCharSupervision -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCharSupervision:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCharSupervision$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCharSupervision$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminChristmas -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminChristmas:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void startChristmas(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> startChristmas
    void endChristmas(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> endChristmas
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCreateItem -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCreateItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void createItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> createItem
    void massCreateItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> massCreateItem
    void removeAllItems(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeAllItems
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCreateItem$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCreateItem$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCursedWeapons -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminCursedWeapons:
    com.l2jfrozen.gameserver.managers.CursedWeaponsManager cursedWeaponsManager -> cursedWeaponsManager
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminDMEngine -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminDMEngine:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminDelete -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminDelete:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleDelete(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleDelete
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminDisconnect -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminDisconnect:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void disconnectCharacter(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> disconnectCharacter
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminDonator -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminDonator:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String INSERT_DATA -> INSERT_DATA
    java.lang.String DEL_DATA -> DEL_DATA
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void sendMessages(boolean,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean,boolean) -> sendMessages
    void updateDatabase(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> updateDatabase
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminDoorControl -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminDoorControl:
    com.l2jfrozen.gameserver.datatables.csv.DoorTable _doorTable -> _doorTable
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEditChar -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEditChar:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void listCharacters(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> listCharacters
    void gatherCharacterInfo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> gatherCharacterInfo
    void setTargetKarma(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> setTargetKarma
    void adminModifyCharacter(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> adminModifyCharacter
    void editCharacter(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> editCharacter
    void findCharacter(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> findCharacter
    void findMultibox(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> findMultibox
    void findCharactersPerIp(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> findCharactersPerIp
    void findCharactersPerAccount(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> findCharactersPerAccount
    void showCharacterInfo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showCharacterInfo
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEditChar$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEditChar$1:
    java.util.Map val$dualboxIPs -> val$dualboxIPs
    com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEditChar this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEditChar,java.util.Map) -> <init>
    int compare(java.lang.String,java.lang.String) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEditChar$2 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEditChar$2:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEditNpc -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEditNpc:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int PAGE_LIMIT -> PAGE_LIMIT
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void editShopItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String[]) -> editShopItem
    void delShopItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String[]) -> delShopItem
    void addShopItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String[]) -> addShopItem
    void showShopList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> showShopList
    javolution.text.TextBuilder itemListHtml(com.l2jfrozen.gameserver.model.L2TradeList,int) -> itemListHtml
    void showShop(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showShop
    void storeTradeList(int,int,int,int) -> storeTradeList
    void updateTradeList(int,int,int,int) -> updateTradeList
    void deleteTradeList(int,int) -> deleteTradeList
    int findOrderTradeList(int,int,int) -> findOrderTradeList
    java.util.List getTradeLists(int) -> getTradeLists
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void Show_Npc_Property(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> Show_Npc_Property
    void save_npc_property(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String[]) -> save_npc_property
    void showNpcDropList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showNpcDropList
    void showEditDropData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int) -> showEditDropData
    void showAddDropData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> showAddDropData
    void updateDropData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,int,int,int) -> updateDropData
    void addDropData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,int,int,int) -> addDropData
    void deleteDropData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int) -> deleteDropData
    void reLoadNpcDropList(int) -> reLoadNpcDropList
    void showNpcSkillList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> showNpcSkillList
    void showNpcSkillEdit(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> showNpcSkillEdit
    void updateNpcSkillData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int) -> updateNpcSkillData
    void showNpcSkillAdd(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> showNpcSkillAdd
    void addNpcSkillData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int) -> addNpcSkillData
    void deleteNpcSkillData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> deleteNpcSkillData
    void reLoadNpcSkillList(int) -> reLoadNpcSkillList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEffects -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEffects:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    boolean performAbnormal(int,com.l2jfrozen.gameserver.model.L2Object) -> performAbnormal
    boolean performSocial(int,com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> performSocial
    void adminAtmosphere(java.lang.String,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> adminAtmosphere
    void playAdminSound(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> playAdminSound
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showMainPage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEnchant -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEnchant:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void setEnchant(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> setEnchant
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEventEngine -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminEventEngine:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    java.lang.String tempBuffer -> tempBuffer
    java.lang.String tempName -> tempName
    java.lang.String tempName2 -> tempName2
    boolean npcsDeleted -> npcsDeleted
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    java.lang.String showStoredEvents() -> showStoredEvents
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void showNewEventPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showNewEventPage
    void showEventParameters(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showEventParameters
    void muestraNpcConInfoAPlayers(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> muestraNpcConInfoAPlayers
    void showEventControl(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showEventControl
    java.lang.String getMaxLeveledPlayer() -> getMaxLeveledPlayer
    void destroyEventNpcs() -> destroyEventNpcs
    void teleportTeam(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> teleportTeam
    void sitTeam(int) -> sitTeam
    void killTeam(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> killTeam
    void resTeam(int) -> resTeam
    void polyTeam(int,java.lang.String) -> polyTeam
    void unpolyTeam(int) -> unpolyTeam
    void createItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> createItem
    void regardTeam(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,java.lang.String) -> regardTeam
    void telePlayersBack(int) -> telePlayersBack
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminExpSp -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminExpSp:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void addExpSp(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addExpSp
    boolean adminAddExpSp(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> adminAddExpSp
    boolean adminRemoveExpSP(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> adminRemoveExpSP
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminFakePlayerOnline -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminFakePlayerOnline:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminFightCalculator -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminFightCalculator:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleStart(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleStart
    void handleShow(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleShow
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminFortSiege -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminFortSiege:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void showFortSelectPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showFortSelectPage
    void showFortSiegePage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showFortSiegePage
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminGeodata -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminGeodata:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminGeodata$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminGeodata$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminGm -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminGm:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleGm(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleGm
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminGmChat -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminGmChat:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void snoop(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> snoop
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleGmChat(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleGmChat
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminHeal -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminHeal:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleRes(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleRes
    void handleRes(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleRes
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminHelpPage -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminHelpPage:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void showHelpPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showHelpPage
    void showSubMenuPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showSubMenuPage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminInvul -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminInvul:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleInvul(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleInvul
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminKick -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminKick:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminKill -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminKill:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void kill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Character) -> kill
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminLevel -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminLevel:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminLogin -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminLogin:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void allowToAll() -> allowToAll
    void gmOnly() -> gmOnly
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMammon -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMammon:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    boolean _isSealValidation -> _isSealValidation
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminManor -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminManor:
    java.lang.String[] _adminCommands -> _adminCommands
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMassControl -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMassControl:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMassRecall -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMassRecall:
    java.lang.String[] _adminCommands -> _adminCommands
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void Teleport(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,java.lang.String) -> Teleport
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMenu -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMenu:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleKill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleKill
    void handleKill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleKill
    void teleportCharacter(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> teleportCharacter
    void teleportToCharacter(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> teleportToCharacter
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void setAccountAccessLevel(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> setAccountAccessLevel
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMobGroup -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMobGroup:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showMainPage
    void returnToChar(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> returnToChar
    void idle(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> idle
    void setNormal(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setNormal
    void attack(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Character) -> attack
    void follow(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Character) -> follow
    void createGroup(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> createGroup
    void removeGroup(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeGroup
    void spawnGroup(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> spawnGroup
    void unspawnGroup(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> unspawnGroup
    void killGroup(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> killGroup
    void setCasting(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setCasting
    void noMove(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> noMove
    void doAnimation(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> doAnimation
    void attackGrp(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> attackGrp
    void invul(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> invul
    void teleportGroup(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> teleportGroup
    void showGroupList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showGroupList
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMonsterRace -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMonsterRace:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    int state -> state
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleSendPacket(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleSendPacket
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMonsterRace$RunEnd -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMonsterRace$RunEnd:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance activeChar -> activeChar
    com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMonsterRace this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMonsterRace,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMonsterRace$RunRace -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMonsterRace$RunRace:
    int[][] codes -> codes
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance activeChar -> activeChar
    com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMonsterRace this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminMonsterRace,int[][],com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminNoble -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminNoble:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String INSERT_DATA -> INSERT_DATA
    java.lang.String DEL_DATA -> DEL_DATA
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void sendMessages(boolean,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean,boolean) -> sendMessages
    void updateDatabase(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> updateDatabase
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPForge -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPForge:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void showPage2(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showPage2
    void showPage3(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> showPage3
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPetition -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPetition:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPetition$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPetition$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPledge -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPledge:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPledge$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPledge$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$ActionEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$ActionEnum
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPolymorph -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminPolymorph:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void doPolymorph(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object,java.lang.String,java.lang.String) -> doPolymorph
    void doUnpoly(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> doUnpoly
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminQuest -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminQuest:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminReload -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminReload:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void sendReloadPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendReloadPage
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminRepairChar -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminRepairChar:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleRepair(java.lang.String) -> handleRepair
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminRes -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminRes:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleRes(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleRes
    void handleRes(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleRes
    void handleNonPlayerRes(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleNonPlayerRes
    void handleNonPlayerRes(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleNonPlayerRes
    void doResurrect(com.l2jfrozen.gameserver.model.L2Character) -> doResurrect
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminRideWyvern -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminRideWyvern:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    int _petRideId -> _petRideId
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminScript -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminScript:
    java.io.File SCRIPT_FOLDER -> SCRIPT_FOLDER
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminShop -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminShop:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleBuyRequest(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleBuyRequest
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminShutdown -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminShutdown:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void sendHtmlForm(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendHtmlForm
    void serverShutdown(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> serverShutdown
    void serverAbort(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> serverAbort
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminShutdown$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminShutdown$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminSiege -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminSiege:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void showCastleSelectPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showCastleSelectPage
    void showSiegePage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showSiegePage
    void showClanHallPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.entity.ClanHall) -> showClanHallPage
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminSkill -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminSkill:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    com.l2jfrozen.gameserver.model.L2Skill[] adminSkills -> adminSkills
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void adminGiveAllSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> adminGiveAllSkills
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void removeSkillsPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> removeSkillsPage
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void adminGetSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> adminGetSkills
    void adminResetSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> adminResetSkills
    void adminAddSkill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> adminAddSkill
    void adminRemoveSkill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> adminRemoveSkill
    void adminAddClanSkill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> adminAddClanSkill
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminSpawn -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminSpawn:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void spawnMonster(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int,int,boolean) -> spawnMonster
    void showMonsters(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> showMonsters
    void showNpcs(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int) -> showNpcs
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTarget -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTarget:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void handleTarget(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleTarget
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTeleport -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTeleport:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void teleportTo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int) -> teleportTo
    void showTeleportWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showTeleportWindow
    void showTeleportCharWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showTeleportCharWindow
    void teleportToCharacter(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> teleportToCharacter
    void recallNPC(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> recallNPC
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTeleport$1 -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTeleport$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$admincommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTest -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTest:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void adminTestSkill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> adminTestSkill
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTownWar -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTownWar:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    com.l2jfrozen.gameserver.model.L2Object _activeObject -> _activeObject
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.L2Object getActiveObject() -> getActiveObject
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    void startTW(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> startTW
    void endTW(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> endTW
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTvTEngine -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminTvTEngine:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void showMainPage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMainPage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminUnblockIp -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminUnblockIp:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    boolean unblockIp(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> unblockIp
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminWalker -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminWalker:
    int _npcid -> _npcid
    int _point -> _point
    java.lang.String _text -> _text
    int _mode -> _mode
    int _routeid -> _routeid
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void setPoint(int,int,int) -> setPoint
    void mainMenu(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> mainMenu
    void addMenu(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addMenu
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminWho -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminWho:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminZone -> com.l2jfrozen.gameserver.handler.admincommandhandlers.AdminZone:
    java.lang.String[] ADMIN_COMMANDS -> ADMIN_COMMANDS
    void <init>() -> <init>
    boolean useAdminCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useAdminCommand
    java.lang.String[] getAdminCommandList() -> getAdminCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum -> com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum:
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_admin -> admin_admin
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_admin1 -> admin_admin1
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_admin2 -> admin_admin2
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_admin3 -> admin_admin3
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_admin4 -> admin_admin4
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_admin5 -> admin_admin5
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_gmliston -> admin_gmliston
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_gmlistoff -> admin_gmlistoff
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_silence -> admin_silence
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_diet -> admin_diet
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_set -> admin_set
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_set_menu -> admin_set_menu
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_set_mod -> admin_set_mod
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_saveolymp -> admin_saveolymp
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_manualhero -> admin_manualhero
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_list_announcements -> admin_list_announcements
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_reload_announcements -> admin_reload_announcements
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_announce_announcements -> admin_announce_announcements
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_add_announcement -> admin_add_announcement
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_del_announcement -> admin_del_announcement
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_announce -> admin_announce
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_critannounce -> admin_critannounce
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_announce_menu -> admin_announce_menu
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_list_autoannouncements -> admin_list_autoannouncements
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_add_autoannouncement -> admin_add_autoannouncement
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_del_autoannouncement -> admin_del_autoannouncement
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_autoannounce -> admin_autoannounce
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setaio -> admin_setaio
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_removeaio -> admin_removeaio
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_getbuffs -> admin_getbuffs
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_stopbuff -> admin_stopbuff
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_stopallbuffs -> admin_stopallbuffs
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_areacancel -> admin_areacancel
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_cache_htm_rebuild -> admin_cache_htm_rebuild
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_cache_htm_reload -> admin_cache_htm_reload
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_cache_reload_path -> admin_cache_reload_path
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_cache_reload_file -> admin_cache_reload_file
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_cache_crest_rebuild -> admin_cache_crest_rebuild
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_cache_crest_reload -> admin_cache_crest_reload
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_cache_crest_fix -> admin_cache_crest_fix
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_start_monitor_char -> admin_start_monitor_char
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_stop_monitor_char -> admin_stop_monitor_char
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_block_char_packet -> admin_block_char_packet
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_restore_char_packet -> admin_restore_char_packet
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_l2jfrozen -> admin_l2jfrozen
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_itemcreate -> admin_itemcreate
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_create_item -> admin_create_item
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_mass_create -> admin_mass_create
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_clear_inventory -> admin_clear_inventory
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf -> admin_ctf
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_name -> admin_ctf_name
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_desc -> admin_ctf_desc
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_join_loc -> admin_ctf_join_loc
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_edit -> admin_ctf_edit
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_control -> admin_ctf_control
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_minlvl -> admin_ctf_minlvl
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_maxlvl -> admin_ctf_maxlvl
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_tele_npc -> admin_ctf_tele_npc
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_tele_team -> admin_ctf_tele_team
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_tele_flag -> admin_ctf_tele_flag
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_npc -> admin_ctf_npc
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_npc_pos -> admin_ctf_npc_pos
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_reward -> admin_ctf_reward
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_reward_amount -> admin_ctf_reward_amount
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_team_add -> admin_ctf_team_add
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_team_remove -> admin_ctf_team_remove
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_team_pos -> admin_ctf_team_pos
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_team_color -> admin_ctf_team_color
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_team_flag -> admin_ctf_team_flag
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_join -> admin_ctf_join
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_teleport -> admin_ctf_teleport
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_start -> admin_ctf_start
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_startevent -> admin_ctf_startevent
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_abort -> admin_ctf_abort
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_finish -> admin_ctf_finish
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_sit -> admin_ctf_sit
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_dump -> admin_ctf_dump
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_save -> admin_ctf_save
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_load -> admin_ctf_load
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_jointime -> admin_ctf_jointime
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_eventtime -> admin_ctf_eventtime
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_autoevent -> admin_ctf_autoevent
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_minplayers -> admin_ctf_minplayers
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_maxplayers -> admin_ctf_maxplayers
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_ctf_interval -> admin_ctf_interval
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_changename -> admin_changename
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setname -> admin_setname
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_edit_character -> admin_edit_character
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_current_player -> admin_current_player
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_nokarma -> admin_nokarma
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setkarma -> admin_setkarma
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_character_list -> admin_character_list
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_character_info -> admin_character_info
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_show_characters -> admin_show_characters
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_find_character -> admin_find_character
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_find_dualbox -> admin_find_dualbox
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_find_ip -> admin_find_ip
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_find_account -> admin_find_account
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_save_modifications -> admin_save_modifications
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_rec -> admin_rec
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setclass -> admin_setclass
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_settitle -> admin_settitle
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setsex -> admin_setsex
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setcolor -> admin_setcolor
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_fullfood -> admin_fullfood
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_remclanwait -> admin_remclanwait
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setcp -> admin_setcp
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_sethp -> admin_sethp
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setmp -> admin_setmp
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setchar_cp -> admin_setchar_cp
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setchar_hp -> admin_setchar_hp
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_setchar_mp -> admin_setchar_mp
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_sethero -> admin_sethero
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_geo_z -> admin_geo_z
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_geo_type -> admin_geo_type
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_geo_nswe -> admin_geo_nswe
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_geo_los -> admin_geo_los
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_geo_position -> admin_geo_position
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_geo_bug -> admin_geo_bug
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_geo_load -> admin_geo_load
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_geo_unload -> admin_geo_unload
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_view_petitions -> admin_view_petitions
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_view_petition -> admin_view_petition
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_accept_petition -> admin_accept_petition
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_reject_petition -> admin_reject_petition
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_reset_petitions -> admin_reset_petitions
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_pledge -> admin_pledge
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_server_shutdown -> admin_server_shutdown
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_server_restart -> admin_server_restart
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_server_abort -> admin_server_abort
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_show_moves -> admin_show_moves
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_show_moves_other -> admin_show_moves_other
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_show_teleport -> admin_show_teleport
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_teleport_to_character -> admin_teleport_to_character
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_teleportto -> admin_teleportto
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_move_to -> admin_move_to
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_teleport_character -> admin_teleport_character
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_recall -> admin_recall
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_walk -> admin_walk
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_recall_npc -> admin_recall_npc
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_gonorth -> admin_gonorth
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_gosouth -> admin_gosouth
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_goeast -> admin_goeast
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_gowest -> admin_gowest
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_goup -> admin_goup
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_godown -> admin_godown
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_instant_move -> admin_instant_move
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_sendhome -> admin_sendhome
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_tele -> admin_tele
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_teleto -> admin_teleto
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum admin_recall_party -> admin_recall_party
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum[] values() -> values
    com.l2jfrozen.gameserver.handler.admincommandhandlers.CommandEnum valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.custom.CustomBypassHandler -> com.l2jfrozen.gameserver.handler.custom.CustomBypassHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.handler.custom.CustomBypassHandler _instance -> _instance
    java.util.Map _handlers -> _handlers
    void <init>() -> <init>
    com.l2jfrozen.gameserver.handler.custom.CustomBypassHandler getInstance() -> getInstance
    void registerCustomBypassHandler(com.l2jfrozen.gameserver.handler.ICustomByPassHandler) -> registerCustomBypassHandler
    void handleBypass(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleBypass
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.custom.CustomWorldHandler -> com.l2jfrozen.gameserver.handler.custom.CustomWorldHandler:
    com.l2jfrozen.gameserver.handler.custom.CustomWorldHandler _instance -> _instance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.handler.custom.CustomWorldHandler getInstance() -> getInstance
    void enterWorld(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> enterWorld
    void exitWorld(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> exitWorld
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.custom.ExtractableByPassHandler -> com.l2jfrozen.gameserver.handler.custom.ExtractableByPassHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] _IDS -> _IDS
    void <init>() -> <init>
    java.lang.String[] getByPassCommands() -> getByPassCommands
    void handleCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleCommand
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.BeastSoulShot -> com.l2jfrozen.gameserver.handler.itemhandlers.BeastSoulShot:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.BeastSpice -> com.l2jfrozen.gameserver.handler.itemhandlers.BeastSpice:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.BeastSpiritShot -> com.l2jfrozen.gameserver.handler.itemhandlers.BeastSpiritShot:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.BlessedSpiritShot -> com.l2jfrozen.gameserver.handler.itemhandlers.BlessedSpiritShot:
    int[] ITEM_IDS -> ITEM_IDS
    int[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.Book -> com.l2jfrozen.gameserver.handler.itemhandlers.Book:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.BreakingArrow -> com.l2jfrozen.gameserver.handler.itemhandlers.BreakingArrow:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.CharChangePotions -> com.l2jfrozen.gameserver.handler.itemhandlers.CharChangePotions:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.ChestKey -> com.l2jfrozen.gameserver.handler.itemhandlers.ChestKey:
    int INTERACTION_DISTANCE -> INTERACTION_DISTANCE
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.ChristmasTree -> com.l2jfrozen.gameserver.handler.itemhandlers.ChristmasTree:
    int[] ITEM_IDS -> ITEM_IDS
    int[] NPC_IDS -> NPC_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.ChristmasTree$DeSpawn -> com.l2jfrozen.gameserver.handler.itemhandlers.ChristmasTree$DeSpawn:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _npc -> _npc
    com.l2jfrozen.gameserver.handler.itemhandlers.ChristmasTree this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.itemhandlers.ChristmasTree,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.itemhandlers.CompBlessedSpiritShotPacks -> com.l2jfrozen.gameserver.handler.itemhandlers.CompBlessedSpiritShotPacks:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.CompShotPacks -> com.l2jfrozen.gameserver.handler.itemhandlers.CompShotPacks:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.CompSpiritShotPacks -> com.l2jfrozen.gameserver.handler.itemhandlers.CompSpiritShotPacks:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.CrystalCarol -> com.l2jfrozen.gameserver.handler.itemhandlers.CrystalCarol:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.Crystals -> com.l2jfrozen.gameserver.handler.itemhandlers.Crystals:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.CustomPotions -> com.l2jfrozen.gameserver.handler.itemhandlers.CustomPotions:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    boolean usePotion(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> usePotion
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.EnchantScrolls -> com.l2jfrozen.gameserver.handler.itemhandlers.EnchantScrolls:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.EnergyStone -> com.l2jfrozen.gameserver.handler.itemhandlers.EnergyStone:
    int[] ITEM_IDS -> ITEM_IDS
    com.l2jfrozen.gameserver.skills.effects.EffectCharge _effect -> _effect
    com.l2jfrozen.gameserver.skills.l2skills.L2SkillCharge _skill -> _skill
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    com.l2jfrozen.gameserver.skills.l2skills.L2SkillCharge getChargeSkill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getChargeSkill
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.ExtractableItems -> com.l2jfrozen.gameserver.handler.itemhandlers.ExtractableItems:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void doExtract(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,int) -> doExtract
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.Firework -> com.l2jfrozen.gameserver.handler.itemhandlers.Firework:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    void useFw(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> useFw
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.FishShots -> com.l2jfrozen.gameserver.handler.itemhandlers.FishShots:
    int[] ITEM_IDS -> ITEM_IDS
    int[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.Harvester -> com.l2jfrozen.gameserver.handler.itemhandlers.Harvester:
    int[] ITEM_IDS -> ITEM_IDS
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance _target -> _target
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.HeroCustomItem -> com.l2jfrozen.gameserver.handler.itemhandlers.HeroCustomItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String INSERT_DATA -> INSERT_DATA
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void updateDatabase(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,long) -> updateDatabase
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.JackpotSeed -> com.l2jfrozen.gameserver.handler.itemhandlers.JackpotSeed:
    com.l2jfrozen.gameserver.model.actor.instance.L2GourdInstance _gourd -> _gourd
    int[] _itemIds -> _itemIds
    int[] _npcIds -> _npcIds
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.MOSKey -> com.l2jfrozen.gameserver.handler.itemhandlers.MOSKey:
    int[] ITEM_IDS -> ITEM_IDS
    int INTERACTION_DISTANCE -> INTERACTION_DISTANCE
    long LAST_OPEN -> LAST_OPEN
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.MapForestOfTheDead -> com.l2jfrozen.gameserver.handler.itemhandlers.MapForestOfTheDead:
    int[] _itemIds -> _itemIds
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.Maps -> com.l2jfrozen.gameserver.handler.itemhandlers.Maps:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.MercTicket -> com.l2jfrozen.gameserver.handler.itemhandlers.MercTicket:
    java.lang.String[] MESSAGES -> MESSAGES
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.MysteryPotion -> com.l2jfrozen.gameserver.handler.itemhandlers.MysteryPotion:
    int[] ITEM_IDS -> ITEM_IDS
    int BIGHEAD_EFFECT -> BIGHEAD_EFFECT
    int MYSTERY_POTION_SKILL -> MYSTERY_POTION_SKILL
    int EFFECT_DURATION -> EFFECT_DURATION
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.MysteryPotion$MysteryPotionStop -> com.l2jfrozen.gameserver.handler.itemhandlers.MysteryPotion$MysteryPotionStop:
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance _playable -> _playable
    com.l2jfrozen.gameserver.handler.itemhandlers.MysteryPotion this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.itemhandlers.MysteryPotion,com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.itemhandlers.Nectar -> com.l2jfrozen.gameserver.handler.itemhandlers.Nectar:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.NobleCustomItem -> com.l2jfrozen.gameserver.handler.itemhandlers.NobleCustomItem:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.PaganKeys -> com.l2jfrozen.gameserver.handler.itemhandlers.PaganKeys:
    int[] ITEM_IDS -> ITEM_IDS
    int INTERACTION_DISTANCE -> INTERACTION_DISTANCE
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.Potions -> com.l2jfrozen.gameserver.handler.itemhandlers.Potions:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _herbstask -> _herbstask
    javolution.util.FastMap potions -> potions
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void loadPotions() -> loadPotions
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills get_skills_for_potion(java.lang.Integer) -> get_skills_for_potion
    java.util.List get_potions_for_skill(java.lang.Integer,java.lang.Integer) -> get_potions_for_skill
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    boolean isEffectReplaceable(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,java.lang.Enum,int) -> isEffectReplaceable
    boolean usePotion(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,int,int) -> usePotion
    int[] getItemIds() -> getItemIds
    void delete_Potion_Item(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,java.lang.Integer,java.lang.Integer) -> delete_Potion_Item
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.Potions$HerbTask -> com.l2jfrozen.gameserver.handler.itemhandlers.Potions$HerbTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _magicId -> _magicId
    int _level -> _level
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.itemhandlers.Potions,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills -> com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills:
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills mana_drug -> mana_drug
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills mana_potion -> mana_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills red_potion -> red_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills healing_drug -> healing_drug
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills healing_potion_ring -> healing_potion_ring
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills quick_step_potion -> quick_step_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills swift_attack_potion -> swift_attack_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills lesser_healing_potion -> lesser_healing_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills beginner_s_potion -> beginner_s_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills healing_potion -> healing_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills haste_potion -> haste_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills adv_quick_step_potion -> adv_quick_step_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills adv_swift_attack_potion -> adv_swift_attack_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills greater_healing_potion -> greater_healing_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills quick_healing_potion -> quick_healing_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills bless_of_eva -> bless_of_eva
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills endeavor_potion -> endeavor_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills potion_of_critical_escape -> potion_of_critical_escape
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills rsk_damage_shield_potion -> rsk_damage_shield_potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Rice_Cake -> Rice_Cake
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills CP -> CP
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Greater_CP -> Greater_CP
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Magic_Haste_Potion -> Magic_Haste_Potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Greater_Magic_Haste_Potion -> Greater_Magic_Haste_Potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Life_nog -> elixir_of_Life_nog
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Life_d -> elixir_of_Life_d
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Life_c -> elixir_of_Life_c
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Life_b -> elixir_of_Life_b
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Life_a -> elixir_of_Life_a
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Life_s -> elixir_of_Life_s
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Strength_nog -> elixir_of_Strength_nog
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Strength_d -> elixir_of_Strength_d
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Strength_c -> elixir_of_Strength_c
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Strength_b -> elixir_of_Strength_b
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Strength_a -> elixir_of_Strength_a
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_Strength_s -> elixir_of_Strength_s
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_cp_nog -> elixir_of_cp_nog
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_cp_d -> elixir_of_cp_d
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_cp_c -> elixir_of_cp_c
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_cp_b -> elixir_of_cp_b
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_cp_a -> elixir_of_cp_a
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills elixir_of_cp_s -> elixir_of_cp_s
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Amulet_Protection_of_Valakas -> Amulet_Protection_of_Valakas
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Amulet_Flames_of_Valakas_1 -> Amulet_Flames_of_Valakas_1
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Amulet_Flames_of_Valakas_2 -> Amulet_Flames_of_Valakas_2
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Amulet_Slay_Valakas -> Amulet_Slay_Valakas
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Life -> Herb_of_Life
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Greater_Herb_of_Life -> Greater_Herb_of_Life
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Superior_Herb_of_Life -> Superior_Herb_of_Life
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Mana -> Herb_of_Mana
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Greater_Herb_of_Mane -> Greater_Herb_of_Mane
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Superior_Herb_of_Mane -> Superior_Herb_of_Mane
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Strength -> Herb_of_Strength
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Magic -> Herb_of_Magic
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Atk_Spd -> Herb_of_Atk_Spd
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Casting_Spd -> Herb_of_Casting_Spd
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Critical_Attack -> Herb_of_Critical_Attack
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Speed -> Herb_of_Speed
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Warrior -> Herb_of_Warrior
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Mystic -> Herb_of_Mystic
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Herb_of_Recovery -> Herb_of_Recovery
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Fisherman_s_Potion_Green -> Fisherman_s_Potion_Green
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Fisherman_s_Potion_Jade -> Fisherman_s_Potion_Jade
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Fisherman_s_Potion_Blue -> Fisherman_s_Potion_Blue
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Fisherman_s_Potion_Yellow -> Fisherman_s_Potion_Yellow
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Fisherman_s_Potion_Orange -> Fisherman_s_Potion_Orange
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Fisherman_s_Potion_Purple -> Fisherman_s_Potion_Purple
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Fisherman_s_Potion_Red -> Fisherman_s_Potion_Red
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Fisherman_s_Potion_White -> Fisherman_s_Potion_White
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Fisherman_s_Potion_Black -> Fisherman_s_Potion_Black
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Fishing_Potion -> Fishing_Potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Primeval_Potion -> Primeval_Potion
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills Primeval_Potion1 -> Primeval_Potion1
    java.lang.Integer potion_id -> potion_id
    javolution.util.FastMap skills -> skills
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills[] values() -> values
    com.l2jfrozen.gameserver.handler.itemhandlers.Potions$PotionsSkills valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int) -> <init>
    void <init>(java.lang.String,int,int,java.lang.Integer[],java.lang.Integer[]) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.Recipes -> com.l2jfrozen.gameserver.handler.itemhandlers.Recipes:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
com.l2jfrozen.gameserver.handler.itemhandlers.Remedy -> com.l2jfrozen.gameserver.handler.itemhandlers.Remedy:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.RollingDice -> com.l2jfrozen.gameserver.handler.itemhandlers.RollingDice:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int rollDice(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> rollDice
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.ScrollOfEscape -> com.l2jfrozen.gameserver.handler.itemhandlers.ScrollOfEscape:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    boolean checkConditions(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkConditions
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.ScrollOfEscape$EscapeFinalizer -> com.l2jfrozen.gameserver.handler.itemhandlers.ScrollOfEscape$EscapeFinalizer:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _itemId -> _itemId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.itemhandlers.ScrollOfResurrection -> com.l2jfrozen.gameserver.handler.itemhandlers.ScrollOfResurrection:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.Scrolls -> com.l2jfrozen.gameserver.handler.itemhandlers.Scrolls:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    void useScroll(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> useScroll
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.Seed -> com.l2jfrozen.gameserver.handler.itemhandlers.Seed:
    int[] _itemIds -> _itemIds
    int _seedId -> _seedId
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance _target -> _target
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    boolean areaValid(int) -> areaValid
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.SevenSignsRecord -> com.l2jfrozen.gameserver.handler.itemhandlers.SevenSignsRecord:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.SoulCrystals -> com.l2jfrozen.gameserver.handler.itemhandlers.SoulCrystals:
    int[] ITEM_IDS -> ITEM_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.SoulCrystals$CrystalFinalizer -> com.l2jfrozen.gameserver.handler.itemhandlers.SoulCrystals$CrystalFinalizer:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.L2Attackable _target -> _target
    int _crystalId -> _crystalId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.itemhandlers.SoulShots -> com.l2jfrozen.gameserver.handler.itemhandlers.SoulShots:
    int[] ITEM_IDS -> ITEM_IDS
    int[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.SpecialXMas -> com.l2jfrozen.gameserver.handler.itemhandlers.SpecialXMas:
    int[] _itemIds -> _itemIds
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.SpiritShot -> com.l2jfrozen.gameserver.handler.itemhandlers.SpiritShot:
    int[] ITEM_IDS -> ITEM_IDS
    int[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.itemhandlers.SummonItems -> com.l2jfrozen.gameserver.handler.itemhandlers.SummonItems:
    void <init>() -> <init>
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> useItem
    int[] getItemIds() -> getItemIds
com.l2jfrozen.gameserver.handler.itemhandlers.SummonItems$PetSummonFeedWait -> com.l2jfrozen.gameserver.handler.itemhandlers.SummonItems$PetSummonFeedWait:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance _petSummon -> _petSummon
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.itemhandlers.SummonItems$PetSummonFinalizer -> com.l2jfrozen.gameserver.handler.itemhandlers.SummonItems$PetSummonFinalizer:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _item -> _item
    com.l2jfrozen.gameserver.templates.L2NpcTemplate _npcTemplate -> _npcTemplate
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.skillhandlers.BalanceLife -> com.l2jfrozen.gameserver.handler.skillhandlers.BalanceLife:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.BeastFeed -> com.l2jfrozen.gameserver.handler.skillhandlers.BeastFeed:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Blow -> com.l2jfrozen.gameserver.handler.skillhandlers.Blow:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Charge -> com.l2jfrozen.gameserver.handler.skillhandlers.Charge:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.ClanGate -> com.l2jfrozen.gameserver.handler.skillhandlers.ClanGate:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.ClanGate$RemoveClanGate -> com.l2jfrozen.gameserver.handler.skillhandlers.ClanGate$RemoveClanGate:
    int castle -> castle
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance player -> player
    com.l2jfrozen.gameserver.handler.skillhandlers.ClanGate this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.skillhandlers.ClanGate,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.skillhandlers.CombatPointHeal -> com.l2jfrozen.gameserver.handler.skillhandlers.CombatPointHeal:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Continuous -> com.l2jfrozen.gameserver.handler.skillhandlers.Continuous:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.CpDam -> com.l2jfrozen.gameserver.handler.skillhandlers.CpDam:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Craft -> com.l2jfrozen.gameserver.handler.skillhandlers.Craft:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.DeluxeKey -> com.l2jfrozen.gameserver.handler.skillhandlers.DeluxeKey:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Disablers -> com.l2jfrozen.gameserver.handler.skillhandlers.Disablers:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] _negateSkillTypes -> _negateSkillTypes
    java.lang.String[] _negateEffectTypes -> _negateEffectTypes
    float _negatePower -> _negatePower
    int _negateId -> _negateId
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    void negateEffect(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.SkillType,double) -> negateEffect
    void negateEffect(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.SkillType,double,int) -> negateEffect
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Disablers$1 -> com.l2jfrozen.gameserver.handler.skillhandlers.Disablers$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$EffectType -> $SwitchMap$com$l2jfrozen$gameserver$model$EffectType
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.DrainSoul -> com.l2jfrozen.gameserver.handler.skillhandlers.DrainSoul:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Fishing -> com.l2jfrozen.gameserver.handler.skillhandlers.Fishing:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.FishingSkill -> com.l2jfrozen.gameserver.handler.skillhandlers.FishingSkill:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.GetPlayer -> com.l2jfrozen.gameserver.handler.skillhandlers.GetPlayer:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.GiveSp -> com.l2jfrozen.gameserver.handler.skillhandlers.GiveSp:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Harvest -> com.l2jfrozen.gameserver.handler.skillhandlers.Harvest:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance _target -> _target
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    boolean calcSuccess() -> calcSuccess
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Heal -> com.l2jfrozen.gameserver.handler.skillhandlers.Heal:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.ManaHeal -> com.l2jfrozen.gameserver.handler.skillhandlers.ManaHeal:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Manadam -> com.l2jfrozen.gameserver.handler.skillhandlers.Manadam:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Mdam -> com.l2jfrozen.gameserver.handler.skillhandlers.Mdam:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Pdam -> com.l2jfrozen.gameserver.handler.skillhandlers.Pdam:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Recall -> com.l2jfrozen.gameserver.handler.skillhandlers.Recall:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Resurrect -> com.l2jfrozen.gameserver.handler.skillhandlers.Resurrect:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.SiegeFlag -> com.l2jfrozen.gameserver.handler.skillhandlers.SiegeFlag:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    boolean checkIfOkToPlaceFlag(com.l2jfrozen.gameserver.model.L2Character,boolean) -> checkIfOkToPlaceFlag
    boolean checkIfOkToPlaceFlag(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.entity.siege.Castle,boolean) -> checkIfOkToPlaceFlag
    boolean checkIfOkToPlaceFlag(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.entity.siege.Fort,boolean) -> checkIfOkToPlaceFlag
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Sow -> com.l2jfrozen.gameserver.handler.skillhandlers.Sow:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance _target -> _target
    int _seedId -> _seedId
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    boolean calcSuccess() -> calcSuccess
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Spoil -> com.l2jfrozen.gameserver.handler.skillhandlers.Spoil:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.StrSiegeAssault -> com.l2jfrozen.gameserver.handler.skillhandlers.StrSiegeAssault:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    boolean checkIfOkToUseStriderSiegeAssault(com.l2jfrozen.gameserver.model.L2Character,boolean) -> checkIfOkToUseStriderSiegeAssault
    boolean checkIfOkToUseStriderSiegeAssault(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.entity.siege.Castle,boolean) -> checkIfOkToUseStriderSiegeAssault
    boolean checkIfOkToUseStriderSiegeAssault(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.entity.siege.Fort,boolean) -> checkIfOkToUseStriderSiegeAssault
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.SummonFriend -> com.l2jfrozen.gameserver.handler.skillhandlers.SummonFriend:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.SummonTreasureKey -> com.l2jfrozen.gameserver.handler.skillhandlers.SummonTreasureKey:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Sweep -> com.l2jfrozen.gameserver.handler.skillhandlers.Sweep:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.TakeCastle -> com.l2jfrozen.gameserver.handler.skillhandlers.TakeCastle:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    boolean checkIfOkToCastSealOfRule(com.l2jfrozen.gameserver.model.L2Character,boolean) -> checkIfOkToCastSealOfRule
    boolean checkIfOkToCastSealOfRule(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.entity.siege.Castle,boolean) -> checkIfOkToCastSealOfRule
    boolean checkIfOkToCastFlagDisplay(com.l2jfrozen.gameserver.model.L2Character,boolean) -> checkIfOkToCastFlagDisplay
    boolean checkIfOkToCastFlagDisplay(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.entity.siege.Fort,boolean) -> checkIfOkToCastFlagDisplay
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.Unlock -> com.l2jfrozen.gameserver.handler.skillhandlers.Unlock:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.ZakenPlayer -> com.l2jfrozen.gameserver.handler.skillhandlers.ZakenPlayer:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.skillhandlers.ZakenSelf -> com.l2jfrozen.gameserver.handler.skillhandlers.ZakenSelf:
    com.l2jfrozen.gameserver.model.SkillType[] SKILL_IDS -> SKILL_IDS
    void <init>() -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    com.l2jfrozen.gameserver.model.SkillType[] getSkillIds() -> getSkillIds
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.ChannelDelete -> com.l2jfrozen.gameserver.handler.usercommandhandlers.ChannelDelete:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.ChannelLeave -> com.l2jfrozen.gameserver.handler.usercommandhandlers.ChannelLeave:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.ChannelListUpdate -> com.l2jfrozen.gameserver.handler.usercommandhandlers.ChannelListUpdate:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.ClanPenalty -> com.l2jfrozen.gameserver.handler.usercommandhandlers.ClanPenalty:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.ClanWarsList -> com.l2jfrozen.gameserver.handler.usercommandhandlers.ClanWarsList:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.DisMount -> com.l2jfrozen.gameserver.handler.usercommandhandlers.DisMount:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.Escape -> com.l2jfrozen.gameserver.handler.usercommandhandlers.Escape:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.Escape$EscapeFinalizer -> com.l2jfrozen.gameserver.handler.usercommandhandlers.Escape$EscapeFinalizer:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.usercommandhandlers.Loc -> com.l2jfrozen.gameserver.handler.usercommandhandlers.Loc:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.Mount -> com.l2jfrozen.gameserver.handler.usercommandhandlers.Mount:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.OfflineShop -> com.l2jfrozen.gameserver.handler.usercommandhandlers.OfflineShop:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.OlympiadStat -> com.l2jfrozen.gameserver.handler.usercommandhandlers.OlympiadStat:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.PartyInfo -> com.l2jfrozen.gameserver.handler.usercommandhandlers.PartyInfo:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.SiegeStatus -> com.l2jfrozen.gameserver.handler.usercommandhandlers.SiegeStatus:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.usercommandhandlers.Time -> com.l2jfrozen.gameserver.handler.usercommandhandlers.Time:
    int[] COMMAND_IDS -> COMMAND_IDS
    void <init>() -> <init>
    boolean useUserCommand(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useUserCommand
    int[] getUserCommandList() -> getUserCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.AwayCmd -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.AwayCmd:
    java.lang.String[] VOICED_COMMANDS -> VOICED_COMMANDS
    int ZONE_PEACE -> ZONE_PEACE
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    boolean away(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> away
    boolean back(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> back
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.BankingCmd -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.BankingCmd:
    java.lang.String[] _voicedCommands -> _voicedCommands
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CTFCmd -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CTFCmd:
    java.lang.String[] VOICED_COMMANDS -> VOICED_COMMANDS
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    boolean JoinCTF(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> JoinCTF
    boolean LeaveCTF(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> LeaveCTF
    boolean CTFinfo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> CTFinfo
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CastleCmd -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CastleCmd:
    java.lang.String[] VOICED_COMMANDS -> VOICED_COMMANDS
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CommandEnum -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CommandEnum:
    com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CommandEnum repair -> repair
    com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CommandEnum repair_close_win -> repair_close_win
    com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CommandEnum[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CommandEnum[] values() -> values
    com.l2jfrozen.gameserver.handler.voicedcommandhandlers.CommandEnum valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.DMCmd -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.DMCmd:
    java.lang.String[] VOICED_COMMANDS -> VOICED_COMMANDS
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    boolean JoinDM(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> JoinDM
    boolean LeaveDM(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> LeaveDM
    boolean DMinfo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> DMinfo
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.FarmPvpCmd -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.FarmPvpCmd:
    java.lang.String[] VOICED_COMMANDS -> VOICED_COMMANDS
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.FarmPvpCmd$teleportTask -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.FarmPvpCmd$teleportTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _x -> _x
    int _y -> _y
    int _z -> _z
    java.lang.String _message -> _message
    com.l2jfrozen.gameserver.handler.voicedcommandhandlers.FarmPvpCmd this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.handler.voicedcommandhandlers.FarmPvpCmd,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,java.lang.String) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.OfflineShop -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.OfflineShop:
    java.lang.String[] _voicedCommands -> _voicedCommands
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Online -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Online:
    java.lang.String[] _voicedCommands -> _voicedCommands
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Repair -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Repair:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] _voicedCommands -> _voicedCommands
    java.lang.String[] _BYPASSCMD -> _BYPASSCMD
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String getCharList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getCharList
    boolean checkAcc(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> checkAcc
    boolean checkPunish(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> checkPunish
    boolean checkKarma(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> checkKarma
    boolean checkChar(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> checkChar
    void repairBadCharacter(java.lang.String) -> repairBadCharacter
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    java.lang.String[] getByPassCommands() -> getByPassCommands
    void handleCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleCommand
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Repair$1 -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Repair$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$handler$voicedcommandhandlers$CommandEnum -> $SwitchMap$com$l2jfrozen$gameserver$handler$voicedcommandhandlers$CommandEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.SetClanCmd -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.SetClanCmd:
    java.lang.String[] VOICED_COMMANDS -> VOICED_COMMANDS
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.StatsCmd -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.StatsCmd:
    java.lang.String[] VOICED_COMMANDS -> VOICED_COMMANDS
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.TvTCmd -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.TvTCmd:
    java.lang.String[] VOICED_COMMANDS -> VOICED_COMMANDS
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    boolean JoinTvT(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> JoinTvT
    boolean LeaveTvT(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> LeaveTvT
    boolean TvTinfo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> TvTinfo
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.VersionCmd -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.VersionCmd:
    java.lang.String[] _voicedCommands -> _voicedCommands
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Voting -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Voting:
    java.lang.String[] _voicedCommands -> _voicedCommands
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Wedding -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Wedding:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] _voicedCommands -> _voicedCommands
    void <init>() -> <init>
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    boolean Divorce(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> Divorce
    boolean Engage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> Engage
    boolean GoToLove(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> GoToLove
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Wedding$EscapeFinalizer -> com.l2jfrozen.gameserver.handler.voicedcommandhandlers.Wedding$EscapeFinalizer:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _partnerx -> _partnerx
    int _partnery -> _partnery
    int _partnerz -> _partnerz
    boolean _to7sDungeon -> _to7sDungeon
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,boolean) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.idfactory.BitSetIDFactory -> com.l2jfrozen.gameserver.idfactory.BitSetIDFactory:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.BitSet _freeIds -> _freeIds
    java.util.concurrent.atomic.AtomicInteger _freeIdCount -> _freeIdCount
    java.util.concurrent.atomic.AtomicInteger _nextFreeId -> _nextFreeId
    void <init>() -> <init>
    void initialize() -> initialize
    void releaseId(int) -> releaseId
    int getNextId() -> getNextId
    int size() -> size
    int usedIdCount() -> usedIdCount
    boolean reachingBitSetCapacity() -> reachingBitSetCapacity
    void increaseBitSetCapacity() -> increaseBitSetCapacity
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.idfactory.BitSetIDFactory$BitSetCapacityCheck -> com.l2jfrozen.gameserver.idfactory.BitSetIDFactory$BitSetCapacityCheck:
    com.l2jfrozen.gameserver.idfactory.BitSetIDFactory this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.idfactory.BitSetIDFactory) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.idfactory.CompactionIDFactory -> com.l2jfrozen.gameserver.idfactory.CompactionIDFactory:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _curOID -> _curOID
    int _freeSize -> _freeSize
    void <init>() -> <init>
    int insertUntil(int[],int,int,java.sql.Connection) -> insertUntil
    int getNextId() -> getNextId
    void releaseId(int) -> releaseId
    int size() -> size
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.idfactory.IdFactory -> com.l2jfrozen.gameserver.idfactory.IdFactory:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String[] ID_UPDATES -> ID_UPDATES
    java.lang.String[] ID_CHECKS -> ID_CHECKS
    boolean _initialized -> _initialized
    int FIRST_OID -> FIRST_OID
    int LAST_OID -> LAST_OID
    int FREE_OBJECT_ID_SIZE -> FREE_OBJECT_ID_SIZE
    com.l2jfrozen.gameserver.idfactory.IdFactory _instance -> _instance
    void <init>() -> <init>
    void setAllCharacterOffline() -> setAllCharacterOffline
    void cleanUpDB() -> cleanUpDB
    int[] extractUsedObjectIDTable() -> extractUsedObjectIDTable
    boolean isInitialized() -> isInitialized
    com.l2jfrozen.gameserver.idfactory.IdFactory getInstance() -> getInstance
    int getNextId() -> getNextId
    void releaseId(int) -> releaseId
    int size() -> size
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.idfactory.IdFactory$1 -> com.l2jfrozen.gameserver.idfactory.IdFactory$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$config$IdFactoryType -> $SwitchMap$com$l2jfrozen$gameserver$config$IdFactoryType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.idfactory.StackIDFactory -> com.l2jfrozen.gameserver.idfactory.StackIDFactory:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _curOID -> _curOID
    int _tempOID -> _tempOID
    java.util.Stack _freeOIDStack -> _freeOIDStack
    void <init>() -> <init>
    int insertUntil(int[],int,int,java.sql.Connection) -> insertUntil
    com.l2jfrozen.gameserver.idfactory.IdFactory getInstance() -> getInstance
    int getNextId() -> getNextId
    void releaseId(int) -> releaseId
    int size() -> size
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.logs.AuditFilter -> com.l2jfrozen.gameserver.logs.AuditFilter:
    void <init>() -> <init>
    boolean isLoggable(java.util.logging.LogRecord) -> isLoggable
com.l2jfrozen.gameserver.logs.AuditFormatter -> com.l2jfrozen.gameserver.logs.AuditFormatter:
    java.lang.String CRLF -> CRLF
    java.text.SimpleDateFormat dateFmt -> dateFmt
    void <init>() -> <init>
    java.lang.String format(java.util.logging.LogRecord) -> format
com.l2jfrozen.gameserver.logs.AuditLogHandler -> com.l2jfrozen.gameserver.logs.AuditLogHandler:
    void <init>() -> <init>
com.l2jfrozen.gameserver.logs.ChatFilter -> com.l2jfrozen.gameserver.logs.ChatFilter:
    void <init>() -> <init>
    boolean isLoggable(java.util.logging.LogRecord) -> isLoggable
com.l2jfrozen.gameserver.logs.ChatLogFormatter -> com.l2jfrozen.gameserver.logs.ChatLogFormatter:
    java.lang.String CRLF -> CRLF
    java.text.SimpleDateFormat dateFmt -> dateFmt
    void <init>() -> <init>
    java.lang.String format(java.util.logging.LogRecord) -> format
com.l2jfrozen.gameserver.logs.ChatLogHandler -> com.l2jfrozen.gameserver.logs.ChatLogHandler:
    void <init>() -> <init>
com.l2jfrozen.gameserver.logs.ItemFilter -> com.l2jfrozen.gameserver.logs.ItemFilter:
    java.lang.String _excludeProcess -> _excludeProcess
    java.lang.String _excludeItemType -> _excludeItemType
    void <init>() -> <init>
    boolean isLoggable(java.util.logging.LogRecord) -> isLoggable
com.l2jfrozen.gameserver.logs.ItemLogFormatter -> com.l2jfrozen.gameserver.logs.ItemLogFormatter:
    java.lang.String CRLF -> CRLF
    java.text.SimpleDateFormat dateFmt -> dateFmt
    void <init>() -> <init>
    java.lang.String format(java.util.logging.LogRecord) -> format
com.l2jfrozen.gameserver.logs.ItemLogHandler -> com.l2jfrozen.gameserver.logs.ItemLogHandler:
    void <init>() -> <init>
com.l2jfrozen.gameserver.managers.ArenaManager -> com.l2jfrozen.gameserver.managers.ArenaManager:
    com.l2jfrozen.gameserver.managers.ArenaManager _instance -> _instance
    org.apache.log4j.Logger LOGGER -> LOGGER
    javolution.util.FastList _arenas -> _arenas
    com.l2jfrozen.gameserver.managers.ArenaManager getInstance() -> getInstance
    void <init>() -> <init>
    void addArena(com.l2jfrozen.gameserver.model.zone.type.L2ArenaZone) -> addArena
    com.l2jfrozen.gameserver.model.zone.type.L2ArenaZone getArena(com.l2jfrozen.gameserver.model.L2Character) -> getArena
    com.l2jfrozen.gameserver.model.zone.type.L2ArenaZone getArena(int,int,int) -> getArena
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.AuctionManager -> com.l2jfrozen.gameserver.managers.AuctionManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _auctions -> _auctions
    java.lang.String[] ITEM_INIT_DATA -> ITEM_INIT_DATA
    java.lang.Integer[] ItemInitDataId -> ItemInitDataId
    com.l2jfrozen.gameserver.managers.AuctionManager getInstance() -> getInstance
    void <init>() -> <init>
    void reload() -> reload
    void load() -> load
    com.l2jfrozen.gameserver.model.entity.Auction getAuction(int) -> getAuction
    int getAuctionIndex(int) -> getAuctionIndex
    java.util.List getAuctions() -> getAuctions
    void initNPC(int) -> initNPC
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.AuctionManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.AuctionManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.AuctionManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.AutoSaveManager -> com.l2jfrozen.gameserver.managers.AutoSaveManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.concurrent.ScheduledFuture _autoSaveInDB -> _autoSaveInDB
    java.util.concurrent.ScheduledFuture _autoCheckConnectionStatus -> _autoCheckConnectionStatus
    java.util.concurrent.ScheduledFuture _autoCleanDatabase -> _autoCleanDatabase
    com.l2jfrozen.gameserver.managers.AutoSaveManager getInstance() -> getInstance
    void <init>() -> <init>
    void stopAutoSaveManager() -> stopAutoSaveManager
    void startAutoSaveManager() -> startAutoSaveManager
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.AutoSaveManager$AutoCleanDBTask -> com.l2jfrozen.gameserver.managers.AutoSaveManager$AutoCleanDBTask:
    com.l2jfrozen.gameserver.managers.AutoSaveManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.AutoSaveManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.AutoSaveManager$AutoSaveTask -> com.l2jfrozen.gameserver.managers.AutoSaveManager$AutoSaveTask:
    com.l2jfrozen.gameserver.managers.AutoSaveManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.AutoSaveManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.AutoSaveManager$ConnectionCheckTask -> com.l2jfrozen.gameserver.managers.AutoSaveManager$ConnectionCheckTask:
    com.l2jfrozen.gameserver.managers.AutoSaveManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.AutoSaveManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.AutoSaveManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.AutoSaveManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.AutoSaveManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.AwayManager -> com.l2jfrozen.gameserver.managers.AwayManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.managers.AwayManager _instance -> _instance
    java.util.Map _awayPlayers -> _awayPlayers
    com.l2jfrozen.gameserver.managers.AwayManager getInstance() -> getInstance
    void <init>() -> <init>
    void setAway(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> setAway
    void setBack(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setBack
    void extraBack(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> extraBack
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.AwayManager$RestoreData -> com.l2jfrozen.gameserver.managers.AwayManager$RestoreData:
    java.lang.String _originalTitle -> _originalTitle
    int _originalTitleColor -> _originalTitleColor
    boolean _sitForced -> _sitForced
    com.l2jfrozen.gameserver.managers.AwayManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.AwayManager,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    boolean isSitForced() -> isSitForced
    void restore(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> restore
com.l2jfrozen.gameserver.managers.AwayManager$setPlayerAwayTask -> com.l2jfrozen.gameserver.managers.AwayManager$setPlayerAwayTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    java.lang.String _awayText -> _awayText
    com.l2jfrozen.gameserver.managers.AwayManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.AwayManager,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.AwayManager$setPlayerBackTask -> com.l2jfrozen.gameserver.managers.AwayManager$setPlayerBackTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.managers.AwayManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.AwayManager,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.BoatManager -> com.l2jfrozen.gameserver.managers.BoatManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _staticItems -> _staticItems
    com.l2jfrozen.gameserver.managers.BoatManager getInstance() -> getInstance
    void <init>() -> <init>
    void load() -> load
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance parseLine(java.lang.String) -> parseLine
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance GetBoat(int) -> GetBoat
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.BoatManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.BoatManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.BoatManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CastleManager -> com.l2jfrozen.gameserver.managers.CastleManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _castles -> _castles
    int[] _castleCirclets -> _castleCirclets
    int _castleId -> _castleId
    com.l2jfrozen.gameserver.managers.CastleManager getInstance() -> getInstance
    void <init>() -> <init>
    int findNearestCastlesIndex(com.l2jfrozen.gameserver.model.L2Object) -> findNearestCastlesIndex
    void load() -> load
    com.l2jfrozen.gameserver.model.entity.siege.Castle getCastleById(int) -> getCastleById
    com.l2jfrozen.gameserver.model.entity.siege.Castle getCastleByOwner(com.l2jfrozen.gameserver.model.L2Clan) -> getCastleByOwner
    com.l2jfrozen.gameserver.model.entity.siege.Castle getCastle(java.lang.String) -> getCastle
    com.l2jfrozen.gameserver.model.entity.siege.Castle getCastle(int,int,int) -> getCastle
    com.l2jfrozen.gameserver.model.entity.siege.Castle getCastle(com.l2jfrozen.gameserver.model.L2Object) -> getCastle
    int getCastleIndex(int) -> getCastleIndex
    int getCastleIndex(com.l2jfrozen.gameserver.model.L2Object) -> getCastleIndex
    int getCastleIndex(int,int,int) -> getCastleIndex
    java.util.List getCastles() -> getCastles
    void validateTaxes(int) -> validateTaxes
    int getCirclet() -> getCirclet
    int getCircletByCastleId(int) -> getCircletByCastleId
    void removeCirclet(com.l2jfrozen.gameserver.model.L2Clan,int) -> removeCirclet
    void removeCirclet(com.l2jfrozen.gameserver.model.L2ClanMember,int) -> removeCirclet
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CastleManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.CastleManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.CastleManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CastleManorManager -> com.l2jfrozen.gameserver.managers.CastleManorManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.managers.CastleManorManager _instance -> _instance
    int PERIOD_CURRENT -> PERIOD_CURRENT
    int PERIOD_NEXT -> PERIOD_NEXT
    int APPROVE -> APPROVE
    java.lang.String CASTLE_MANOR_LOAD_PROCURE -> CASTLE_MANOR_LOAD_PROCURE
    java.lang.String CASTLE_MANOR_LOAD_PRODUCTION -> CASTLE_MANOR_LOAD_PRODUCTION
    int NEXT_PERIOD_APPROVE -> NEXT_PERIOD_APPROVE
    int NEXT_PERIOD_APPROVE_MIN -> NEXT_PERIOD_APPROVE_MIN
    int MANOR_REFRESH -> MANOR_REFRESH
    int MANOR_REFRESH_MIN -> MANOR_REFRESH_MIN
    long MAINTENANCE_PERIOD -> MAINTENANCE_PERIOD
    boolean _underMaintenance -> _underMaintenance
    boolean _disabled -> _disabled
    com.l2jfrozen.gameserver.managers.CastleManorManager getInstance() -> getInstance
    void <init>() -> <init>
    void load() -> load
    void init() -> init
    void setNextPeriod() -> setNextPeriod
    void approveNextPeriod() -> approveNextPeriod
    javolution.util.FastList getNewSeedsList(int) -> getNewSeedsList
    javolution.util.FastList getNewCropsList(int) -> getNewCropsList
    boolean isUnderMaintenance() -> isUnderMaintenance
    void setUnderMaintenance(boolean) -> setUnderMaintenance
    boolean isDisabled() -> isDisabled
    void setDisabled(boolean) -> setDisabled
    com.l2jfrozen.gameserver.managers.CastleManorManager$SeedProduction getNewSeedProduction(int,int,int,int) -> getNewSeedProduction
    com.l2jfrozen.gameserver.managers.CastleManorManager$CropProcure getNewCropProcure(int,int,int,int,int) -> getNewCropProcure
    void save() -> save
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CastleManorManager$CropProcure -> com.l2jfrozen.gameserver.managers.CastleManorManager$CropProcure:
    int _cropId -> _cropId
    int _buyResidual -> _buyResidual
    int _rewardType -> _rewardType
    int _buy -> _buy
    int _price -> _price
    com.l2jfrozen.gameserver.managers.CastleManorManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.CastleManorManager,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.managers.CastleManorManager,int,int,int,int,int) -> <init>
    int getReward() -> getReward
    int getId() -> getId
    int getAmount() -> getAmount
    int getStartAmount() -> getStartAmount
    int getPrice() -> getPrice
    void setAmount(int) -> setAmount
com.l2jfrozen.gameserver.managers.CastleManorManager$ManorTask -> com.l2jfrozen.gameserver.managers.CastleManorManager$ManorTask:
    com.l2jfrozen.gameserver.managers.CastleManorManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.CastleManorManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.CastleManorManager$SeedProduction -> com.l2jfrozen.gameserver.managers.CastleManorManager$SeedProduction:
    int _seedId -> _seedId
    int _residual -> _residual
    int _price -> _price
    int _sales -> _sales
    com.l2jfrozen.gameserver.managers.CastleManorManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.CastleManorManager,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.managers.CastleManorManager,int,int,int,int) -> <init>
    int getId() -> getId
    int getCanProduce() -> getCanProduce
    int getPrice() -> getPrice
    int getStartProduce() -> getStartProduce
    void setCanProduce(int) -> setCanProduce
com.l2jfrozen.gameserver.managers.ChristmasManager -> com.l2jfrozen.gameserver.managers.ChristmasManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List objectQueue -> objectQueue
    java.util.Random rand -> rand
    java.lang.String[] message -> message
    java.lang.String[] sender -> sender
    int[] presents -> presents
    java.util.concurrent.Future _XMasMessageTask -> _XMasMessageTask
    java.util.concurrent.Future _XMasPresentsTask -> _XMasPresentsTask
    int isManagerInit -> isManagerInit
    long _IntervalOfChristmas -> _IntervalOfChristmas
    int first -> first
    int last -> last
    void <init>() -> <init>
    com.l2jfrozen.gameserver.managers.ChristmasManager getInstance() -> getInstance
    void init(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> init
    void end(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> end
    void spawnTrees() -> spawnTrees
    int getTreeId() -> getTreeId
    void spawnOneTree(int,int,int,int) -> spawnOneTree
    void endFestiveMessagesAtFixedRate() -> endFestiveMessagesAtFixedRate
    void startFestiveMessagesAtFixedRate() -> startFestiveMessagesAtFixedRate
    com.l2jfrozen.gameserver.network.serverpackets.CreatureSay getXMasMessage() -> getXMasMessage
    java.lang.String getRandomSender() -> getRandomSender
    java.lang.String getRandomXMasMessage() -> getRandomXMasMessage
    void givePresentsAtFixedRate() -> givePresentsAtFixedRate
    int getSantaRandomPresent() -> getSantaRandomPresent
    void endPresentGivingAtFixedRate() -> endPresentGivingAtFixedRate
    int getSantaId() -> getSantaId
    void checkIfOkToAnnounce() -> checkIfOkToAnnounce
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.ChristmasManager$DeleteSpawns -> com.l2jfrozen.gameserver.managers.ChristmasManager$DeleteSpawns:
    com.l2jfrozen.gameserver.managers.ChristmasManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.ChristmasManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.ChristmasManager$EndEvent -> com.l2jfrozen.gameserver.managers.ChristmasManager$EndEvent:
    java.util.concurrent.Future _task -> _task
    com.l2jfrozen.gameserver.managers.ChristmasManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.ChristmasManager) -> <init>
    void setTask(java.util.concurrent.Future) -> setTask
    void run() -> run
com.l2jfrozen.gameserver.managers.ChristmasManager$GetTreePos -> com.l2jfrozen.gameserver.managers.ChristmasManager$GetTreePos:
    int _iterator -> _iterator
    java.util.concurrent.Future _task -> _task
    com.l2jfrozen.gameserver.managers.ChristmasManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.ChristmasManager,int) -> <init>
    void setTask(java.util.concurrent.Future) -> setTask
    void run() -> run
com.l2jfrozen.gameserver.managers.ChristmasManager$SendXMasMessage -> com.l2jfrozen.gameserver.managers.ChristmasManager$SendXMasMessage:
    com.l2jfrozen.gameserver.managers.ChristmasManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.ChristmasManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.ChristmasManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.ChristmasManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.ChristmasManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.ChristmasManager$SpawnSantaNPCs -> com.l2jfrozen.gameserver.managers.ChristmasManager$SpawnSantaNPCs:
    int _iterator -> _iterator
    java.util.concurrent.Future _task -> _task
    com.l2jfrozen.gameserver.managers.ChristmasManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.ChristmasManager,int) -> <init>
    void setTask(java.util.concurrent.Future) -> setTask
    void run() -> run
com.l2jfrozen.gameserver.managers.ChristmasManager$XMasPresentGivingTask -> com.l2jfrozen.gameserver.managers.ChristmasManager$XMasPresentGivingTask:
    com.l2jfrozen.gameserver.managers.ChristmasManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.ChristmasManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.ClanHallManager -> com.l2jfrozen.gameserver.managers.ClanHallManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _clanHall -> _clanHall
    java.util.Map _freeClanHall -> _freeClanHall
    boolean _loaded -> _loaded
    com.l2jfrozen.gameserver.managers.ClanHallManager getInstance() -> getInstance
    boolean loaded() -> loaded
    void <init>() -> <init>
    void load() -> load
    java.util.Map getFreeClanHalls() -> getFreeClanHalls
    java.util.Map getClanHalls() -> getClanHalls
    boolean isFree(int) -> isFree
    void setFree(int) -> setFree
    void setOwner(int,com.l2jfrozen.gameserver.model.L2Clan) -> setOwner
    com.l2jfrozen.gameserver.model.entity.ClanHall getClanHallById(int) -> getClanHallById
    com.l2jfrozen.gameserver.model.entity.ClanHall getNearbyClanHall(int,int,int) -> getNearbyClanHall
    com.l2jfrozen.gameserver.model.entity.ClanHall getClanHallByOwner(com.l2jfrozen.gameserver.model.L2Clan) -> getClanHallByOwner
    void <init>(com.l2jfrozen.gameserver.managers.ClanHallManager$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.ClanHallManager$1 -> com.l2jfrozen.gameserver.managers.ClanHallManager$1:
com.l2jfrozen.gameserver.managers.ClanHallManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.ClanHallManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.ClanHallManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.ClassDamageManager -> com.l2jfrozen.gameserver.managers.ClassDamageManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Hashtable damage_to_mage -> damage_to_mage
    java.util.Hashtable damage_to_fighter -> damage_to_fighter
    java.util.Hashtable damage_by_mage -> damage_by_mage
    java.util.Hashtable damage_by_fighter -> damage_by_fighter
    java.util.Hashtable id_to_name -> id_to_name
    java.util.Hashtable name_to_id -> name_to_id
    void <init>() -> <init>
    void loadConfig() -> loadConfig
    double getClassDamageToMage(int) -> getClassDamageToMage
    double getClassDamageToFighter(int) -> getClassDamageToFighter
    double getClassDamageByMage(int) -> getClassDamageByMage
    double getClassDamageByFighter(int) -> getClassDamageByFighter
    int getIdByName(java.lang.String) -> getIdByName
    java.lang.String getNameById(int) -> getNameById
    double getDamageMultiplier(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getDamageMultiplier
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CoupleManager -> com.l2jfrozen.gameserver.managers.CoupleManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    javolution.util.FastList _couples -> _couples
    com.l2jfrozen.gameserver.managers.CoupleManager getInstance() -> getInstance
    void <init>() -> <init>
    void reload() -> reload
    void load() -> load
    com.l2jfrozen.gameserver.model.entity.Wedding getCouple(int) -> getCouple
    void createCouple(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> createCouple
    void deleteCouple(int) -> deleteCouple
    int getCoupleIndex(int) -> getCoupleIndex
    javolution.util.FastList getCouples() -> getCouples
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CoupleManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.CoupleManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.CoupleManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CrownManager -> com.l2jfrozen.gameserver.managers.CrownManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.managers.CrownManager _instance -> _instance
    com.l2jfrozen.gameserver.managers.CrownManager getInstance() -> getInstance
    void <init>() -> <init>
    void checkCrowns(com.l2jfrozen.gameserver.model.L2Clan) -> checkCrowns
    void checkCrowns(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkCrowns
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CursedWeaponsManager -> com.l2jfrozen.gameserver.managers.CursedWeaponsManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _cursedWeapons -> _cursedWeapons
    com.l2jfrozen.gameserver.managers.CursedWeaponsManager getInstance() -> getInstance
    void <init>() -> <init>
    void reload() -> reload
    void load() -> load
    void restore() -> restore
    void controlPlayers() -> controlPlayers
    void checkDrop(com.l2jfrozen.gameserver.model.L2Attackable,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkDrop
    void activate(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> activate
    void drop(int,com.l2jfrozen.gameserver.model.L2Character) -> drop
    void increaseKills(int) -> increaseKills
    int getLevel(int) -> getLevel
    void announce(com.l2jfrozen.gameserver.network.serverpackets.SystemMessage) -> announce
    void checkPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkPlayer
    void removeFromDb(int) -> removeFromDb
    void saveData() -> saveData
    boolean isCursed(int) -> isCursed
    java.util.Collection getCursedWeapons() -> getCursedWeapons
    java.util.Set getCursedWeaponsIds() -> getCursedWeaponsIds
    com.l2jfrozen.gameserver.model.CursedWeapon getCursedWeapon(int) -> getCursedWeapon
    void givePassive(int) -> givePassive
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CursedWeaponsManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.CursedWeaponsManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.CursedWeaponsManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager -> com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager _instance -> _instance
    javolution.util.FastMap spawns -> spawns
    javolution.util.FastMap templates -> templates
    void <init>() -> <init>
    com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager getInstance() -> getInstance
    void reload() -> reload
    void load() -> load
    boolean isThisL2CustomNpcInstance(int,int) -> isThisL2CustomNpcInstance
    com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager$customInfo getCustomData(int,int) -> getCustomData
    javolution.util.FastMap getAllTemplates() -> getAllTemplates
    javolution.util.FastMap getAllSpawns() -> getAllSpawns
    void updateRemoveInDB(com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager$customInfo) -> updateRemoveInDB
    void AddInDB(com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager$customInfo) -> AddInDB
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager$customInfo -> com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager$customInfo:
    java.lang.String[] stringData -> stringData
    int[] integerData -> integerData
    boolean[] booleanData -> booleanData
    com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager) -> <init>
com.l2jfrozen.gameserver.managers.DatatablesManager -> com.l2jfrozen.gameserver.managers.DatatablesManager:
    void <init>() -> <init>
    void reloadAll() -> reloadAll
com.l2jfrozen.gameserver.managers.DayNightSpawnManager -> com.l2jfrozen.gameserver.managers.DayNightSpawnManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.managers.DayNightSpawnManager _instance -> _instance
    java.util.Map _dayCreatures -> _dayCreatures
    java.util.Map _nightCreatures -> _nightCreatures
    java.util.Map _bosses -> _bosses
    com.l2jfrozen.gameserver.managers.DayNightSpawnManager getInstance() -> getInstance
    void <init>() -> <init>
    void addDayCreature(com.l2jfrozen.gameserver.model.spawn.L2Spawn) -> addDayCreature
    void addNightCreature(com.l2jfrozen.gameserver.model.spawn.L2Spawn) -> addNightCreature
    void spawnDayCreatures() -> spawnDayCreatures
    void spawnNightCreatures() -> spawnNightCreatures
    void spawnCreatures(java.util.Map,java.util.Map,java.lang.String,java.lang.String) -> spawnCreatures
    void changeMode(int) -> changeMode
    void notifyChangeMode() -> notifyChangeMode
    void cleanUp() -> cleanUp
    void specialNightBoss(int) -> specialNightBoss
    void handleHellmans(com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance,int) -> handleHellmans
    void ShadowSenseMsg(int) -> ShadowSenseMsg
    com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance handleBoss(com.l2jfrozen.gameserver.model.spawn.L2Spawn) -> handleBoss
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.DimensionalRiftManager -> com.l2jfrozen.gameserver.managers.DimensionalRiftManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.managers.DimensionalRiftManager _instance -> _instance
    javolution.util.FastMap _rooms -> _rooms
    short DIMENSIONAL_FRAGMENT_ITEM_ID -> DIMENSIONAL_FRAGMENT_ITEM_ID
    int MAX_PARTY_PER_AREA -> MAX_PARTY_PER_AREA
    com.l2jfrozen.gameserver.managers.DimensionalRiftManager getInstance() -> getInstance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.managers.DimensionalRiftManager$DimensionalRiftRoom getRoom(byte,byte) -> getRoom
    boolean isAreaAvailable(byte) -> isAreaAvailable
    boolean isRoomAvailable(byte,byte) -> isRoomAvailable
    void loadRooms() -> loadRooms
    void loadSpawns() -> loadSpawns
    void reload() -> reload
    boolean checkIfInRiftZone(int,int,int,boolean) -> checkIfInRiftZone
    boolean checkIfInPeaceZone(int,int,int) -> checkIfInPeaceZone
    void teleportToWaitingRoom(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> teleportToWaitingRoom
    void start(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,byte,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> start
    void killRift(com.l2jfrozen.gameserver.model.entity.DimensionalRift) -> killRift
    int getNeededItems(byte) -> getNeededItems
    void showHtmlFile(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> showHtmlFile
    void handleCheat(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> handleCheat
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.DimensionalRiftManager$DimensionalRiftRoom -> com.l2jfrozen.gameserver.managers.DimensionalRiftManager$DimensionalRiftRoom:
    byte _type -> _type
    byte _room -> _room
    int _xMin -> _xMin
    int _xMax -> _xMax
    int _yMin -> _yMin
    int _yMax -> _yMax
    int _zMin -> _zMin
    int _zMax -> _zMax
    int[] _teleportCoords -> _teleportCoords
    java.awt.Shape _s -> _s
    boolean _isBossRoom -> _isBossRoom
    javolution.util.FastList _roomSpawns -> _roomSpawns
    javolution.util.FastList _roomMobs -> _roomMobs
    boolean _isUsed -> _isUsed
    com.l2jfrozen.gameserver.managers.DimensionalRiftManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.DimensionalRiftManager,byte,byte,int,int,int,int,int,int,int,int,int,boolean) -> <init>
    int getRandomX() -> getRandomX
    int getRandomY() -> getRandomY
    int[] getTeleportCoords() -> getTeleportCoords
    boolean checkIfInZone(int,int,int) -> checkIfInZone
    boolean isBossRoom() -> isBossRoom
    javolution.util.FastList getSpawns() -> getSpawns
    void spawn() -> spawn
    void unspawn() -> unspawn
    void setUsed() -> setUsed
    boolean isUsed() -> isUsed
com.l2jfrozen.gameserver.managers.DuelManager -> com.l2jfrozen.gameserver.managers.DuelManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.managers.DuelManager _instance -> _instance
    javolution.util.FastList _duels -> _duels
    int _currentDuelId -> _currentDuelId
    com.l2jfrozen.gameserver.managers.DuelManager getInstance() -> getInstance
    void <init>() -> <init>
    int getNextDuelId() -> getNextDuelId
    com.l2jfrozen.gameserver.model.entity.Duel getDuel(int) -> getDuel
    void addDuel(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> addDuel
    void removeDuel(com.l2jfrozen.gameserver.model.entity.Duel) -> removeDuel
    void doSurrender(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> doSurrender
    void onPlayerDefeat(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onPlayerDefeat
    void onBuff(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Effect) -> onBuff
    void onRemoveFromParty(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onRemoveFromParty
    void broadcastToOppositTeam(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastToOppositTeam
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.FishingZoneManager -> com.l2jfrozen.gameserver.managers.FishingZoneManager:
    com.l2jfrozen.gameserver.managers.FishingZoneManager _instance -> _instance
    org.apache.log4j.Logger LOGGER -> LOGGER
    javolution.util.FastList _fishingZones -> _fishingZones
    javolution.util.FastList _waterZones -> _waterZones
    com.l2jfrozen.gameserver.managers.FishingZoneManager getInstance() -> getInstance
    void <init>() -> <init>
    void addFishingZone(com.l2jfrozen.gameserver.model.zone.type.L2FishingZone) -> addFishingZone
    void addWaterZone(com.l2jfrozen.gameserver.model.zone.type.L2WaterZone) -> addWaterZone
    com.l2jfrozen.gameserver.model.zone.type.L2FishingZone isInsideFishingZone(int,int,int) -> isInsideFishingZone
    com.l2jfrozen.gameserver.model.zone.type.L2WaterZone isInsideWaterZone(int,int,int) -> isInsideWaterZone
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.FortManager -> com.l2jfrozen.gameserver.managers.FortManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _forts -> _forts
    com.l2jfrozen.gameserver.managers.FortManager getInstance() -> getInstance
    void <init>() -> <init>
    int findNearestFortIndex(com.l2jfrozen.gameserver.model.L2Object) -> findNearestFortIndex
    void load() -> load
    com.l2jfrozen.gameserver.model.entity.siege.Fort getFortById(int) -> getFortById
    com.l2jfrozen.gameserver.model.entity.siege.Fort getFortByOwner(com.l2jfrozen.gameserver.model.L2Clan) -> getFortByOwner
    com.l2jfrozen.gameserver.model.entity.siege.Fort getFort(java.lang.String) -> getFort
    com.l2jfrozen.gameserver.model.entity.siege.Fort getFort(int,int,int) -> getFort
    com.l2jfrozen.gameserver.model.entity.siege.Fort getFort(com.l2jfrozen.gameserver.model.L2Object) -> getFort
    int getFortIndex(int) -> getFortIndex
    int getFortIndex(com.l2jfrozen.gameserver.model.L2Object) -> getFortIndex
    int getFortIndex(int,int,int) -> getFortIndex
    java.util.List getForts() -> getForts
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.FortManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.FortManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.FortManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.FortSiegeGuardManager -> com.l2jfrozen.gameserver.managers.FortSiegeGuardManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.siege.Fort _fort -> _fort
    java.util.List _siegeGuardSpawn -> _siegeGuardSpawn
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Fort) -> <init>
    void addSiegeGuard(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> addSiegeGuard
    void addSiegeGuard(int,int,int,int,int) -> addSiegeGuard
    void hireMerc(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> hireMerc
    void hireMerc(int,int,int,int,int) -> hireMerc
    void removeMerc(int,int,int,int) -> removeMerc
    void removeMercs() -> removeMercs
    void spawnSiegeGuard() -> spawnSiegeGuard
    void unspawnSiegeGuard() -> unspawnSiegeGuard
    void loadSiegeGuard() -> loadSiegeGuard
    void saveSiegeGuard(int,int,int,int,int,int) -> saveSiegeGuard
    com.l2jfrozen.gameserver.model.entity.siege.Fort getFort() -> getFort
    java.util.List getSiegeGuardSpawn() -> getSiegeGuardSpawn
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.FortSiegeManager -> com.l2jfrozen.gameserver.managers.FortSiegeManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _attackerMaxClans -> _attackerMaxClans
    int _attackerRespawnDelay -> _attackerRespawnDelay
    int _defenderMaxClans -> _defenderMaxClans
    int _defenderRespawnDelay -> _defenderRespawnDelay
    javolution.util.FastMap _commanderSpawnList -> _commanderSpawnList
    javolution.util.FastMap _flagList -> _flagList
    int _controlTowerLosePenalty -> _controlTowerLosePenalty
    int _flagMaxCount -> _flagMaxCount
    int _siegeClanMinLevel -> _siegeClanMinLevel
    int _siegeLength -> _siegeLength
    java.util.List _sieges -> _sieges
    com.l2jfrozen.gameserver.managers.FortSiegeManager getInstance() -> getInstance
    void <init>() -> <init>
    void addSiegeSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addSiegeSkills
    boolean checkIfOkToSummon(com.l2jfrozen.gameserver.model.L2Character,boolean) -> checkIfOkToSummon
    boolean checkIsRegistered(com.l2jfrozen.gameserver.model.L2Clan,int) -> checkIsRegistered
    void removeSiegeSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeSiegeSkills
    void load() -> load
    javolution.util.FastList getCommanderSpawnList(int) -> getCommanderSpawnList
    javolution.util.FastList getFlagList(int) -> getFlagList
    int getAttackerMaxClans() -> getAttackerMaxClans
    int getAttackerRespawnDelay() -> getAttackerRespawnDelay
    int getControlTowerLosePenalty() -> getControlTowerLosePenalty
    int getDefenderMaxClans() -> getDefenderMaxClans
    int getDefenderRespawnDelay() -> getDefenderRespawnDelay
    int getFlagMaxCount() -> getFlagMaxCount
    com.l2jfrozen.gameserver.model.entity.siege.FortSiege getSiege(com.l2jfrozen.gameserver.model.L2Object) -> getSiege
    com.l2jfrozen.gameserver.model.entity.siege.FortSiege getSiege(int,int,int) -> getSiege
    int getSiegeClanMinLevel() -> getSiegeClanMinLevel
    int getSiegeLength() -> getSiegeLength
    java.util.List getSieges() -> getSieges
    void addSiege(com.l2jfrozen.gameserver.model.entity.siege.FortSiege) -> addSiege
    void removeSiege(com.l2jfrozen.gameserver.model.entity.siege.FortSiege) -> removeSiege
    boolean isCombat(int) -> isCombat
    boolean checkIsRegisteredInSiege(com.l2jfrozen.gameserver.model.L2Clan) -> checkIsRegisteredInSiege
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.FortSiegeManager$SiegeSpawn -> com.l2jfrozen.gameserver.managers.FortSiegeManager$SiegeSpawn:
    com.l2jfrozen.gameserver.model.Location _location -> _location
    int _npcId -> _npcId
    int _heading -> _heading
    int _fortId -> _fortId
    int _hp -> _hp
    com.l2jfrozen.gameserver.managers.FortSiegeManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.FortSiegeManager,int,int,int,int,int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.managers.FortSiegeManager,int,int,int,int,int,int,int) -> <init>
    int getFortId() -> getFortId
    int getNpcId() -> getNpcId
    int getHeading() -> getHeading
    int getHp() -> getHp
    com.l2jfrozen.gameserver.model.Location getLocation() -> getLocation
com.l2jfrozen.gameserver.managers.FortSiegeManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.FortSiegeManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.FortSiegeManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.FourSepulchersManager -> com.l2jfrozen.gameserver.managers.FourSepulchersManager:
    java.lang.String QUEST_ID -> QUEST_ID
    int ENTRANCE_PASS -> ENTRANCE_PASS
    int USED_PASS -> USED_PASS
    int CHAPEL_KEY -> CHAPEL_KEY
    int ANTIQUE_BROOCH -> ANTIQUE_BROOCH
    boolean _firstTimeRun -> _firstTimeRun
    boolean _inEntryTime -> _inEntryTime
    boolean _inWarmUpTime -> _inWarmUpTime
    boolean _inAttackTime -> _inAttackTime
    boolean _inCoolDownTime -> _inCoolDownTime
    java.util.concurrent.ScheduledFuture _changeCoolDownTimeTask -> _changeCoolDownTimeTask
    java.util.concurrent.ScheduledFuture _changeEntryTimeTask -> _changeEntryTimeTask
    java.util.concurrent.ScheduledFuture _changeWarmUpTimeTask -> _changeWarmUpTimeTask
    java.util.concurrent.ScheduledFuture _changeAttackTimeTask -> _changeAttackTimeTask
    java.util.concurrent.ScheduledFuture _onPartyAnnihilatedTask -> _onPartyAnnihilatedTask
    int[][] _startHallSpawn -> _startHallSpawn
    int[][][] _shadowSpawnLoc -> _shadowSpawnLoc
    javolution.util.FastMap _archonSpawned -> _archonSpawned
    javolution.util.FastMap _hallInUse -> _hallInUse
    javolution.util.FastMap _startHallSpawns -> _startHallSpawns
    javolution.util.FastMap _hallGateKeepers -> _hallGateKeepers
    javolution.util.FastMap _keyBoxNpc -> _keyBoxNpc
    javolution.util.FastMap _victim -> _victim
    javolution.util.FastMap _challengers -> _challengers
    javolution.util.FastMap _executionerSpawns -> _executionerSpawns
    javolution.util.FastMap _keyBoxSpawns -> _keyBoxSpawns
    javolution.util.FastMap _mysteriousBoxSpawns -> _mysteriousBoxSpawns
    javolution.util.FastMap _shadowSpawns -> _shadowSpawns
    javolution.util.FastMap _dukeFinalMobs -> _dukeFinalMobs
    javolution.util.FastMap _dukeMobs -> _dukeMobs
    javolution.util.FastMap _emperorsGraveNpcs -> _emperorsGraveNpcs
    javolution.util.FastMap _magicalMonsters -> _magicalMonsters
    javolution.util.FastMap _physicalMonsters -> _physicalMonsters
    javolution.util.FastMap _viscountMobs -> _viscountMobs
    javolution.util.FastList _physicalSpawns -> _physicalSpawns
    javolution.util.FastList _magicalSpawns -> _magicalSpawns
    javolution.util.FastList _managers -> _managers
    javolution.util.FastList _dukeFinalSpawns -> _dukeFinalSpawns
    javolution.util.FastList _emperorsGraveSpawns -> _emperorsGraveSpawns
    javolution.util.FastList _allMobs -> _allMobs
    long _attackTimeEnd -> _attackTimeEnd
    long _coolDownTimeEnd -> _coolDownTimeEnd
    long _entryTimeEnd -> _entryTimeEnd
    long _warmUpTimeEnd -> _warmUpTimeEnd
    byte _newCycleMin -> _newCycleMin
    com.l2jfrozen.gameserver.managers.FourSepulchersManager getInstance() -> getInstance
    void <init>() -> <init>
    void init() -> init
    void timeSelector() -> timeSelector
    void timeCalculator() -> timeCalculator
    void clean() -> clean
    void spawnManagers() -> spawnManagers
    void initFixedInfo() -> initFixedInfo
    void loadMysteriousBox() -> loadMysteriousBox
    void initKeyBoxSpawns() -> initKeyBoxSpawns
    void loadPhysicalMonsters() -> loadPhysicalMonsters
    void loadMagicalMonsters() -> loadMagicalMonsters
    void loadDukeMonsters() -> loadDukeMonsters
    void loadEmperorsGraveMonsters() -> loadEmperorsGraveMonsters
    void initLocationShadowSpawns() -> initLocationShadowSpawns
    void initExecutionerSpawns() -> initExecutionerSpawns
    boolean isEntryTime() -> isEntryTime
    boolean isAttackTime() -> isAttackTime
    void tryEntry(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> tryEntry
    void entry(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> entry
    void spawnMysteriousBox(int) -> spawnMysteriousBox
    void spawnMonster(int) -> spawnMonster
    boolean isViscountMobsAnnihilated(int) -> isViscountMobsAnnihilated
    boolean isDukeMobsAnnihilated(int) -> isDukeMobsAnnihilated
    void spawnKeyBox(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> spawnKeyBox
    void spawnExecutionerOfHalisha(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> spawnExecutionerOfHalisha
    void spawnArchonOfHalisha(int) -> spawnArchonOfHalisha
    void spawnEmperorsGraveNpc(int) -> spawnEmperorsGraveNpc
    void locationShadowSpawns() -> locationShadowSpawns
    void spawnShadow(int) -> spawnShadow
    void deleteAllMobs() -> deleteAllMobs
    void closeAllDoors() -> closeAllDoors
    byte minuteSelect(byte) -> minuteSelect
    void managerSay(byte) -> managerSay
    java.util.Map getHallGateKeepers() -> getHallGateKeepers
    void showHtmlFile(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showHtmlFile
com.l2jfrozen.gameserver.managers.FourSepulchersManager$ChangeAttackTime -> com.l2jfrozen.gameserver.managers.FourSepulchersManager$ChangeAttackTime:
    com.l2jfrozen.gameserver.managers.FourSepulchersManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.FourSepulchersManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.FourSepulchersManager$ChangeCoolDownTime -> com.l2jfrozen.gameserver.managers.FourSepulchersManager$ChangeCoolDownTime:
    com.l2jfrozen.gameserver.managers.FourSepulchersManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.FourSepulchersManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.FourSepulchersManager$ChangeEntryTime -> com.l2jfrozen.gameserver.managers.FourSepulchersManager$ChangeEntryTime:
    com.l2jfrozen.gameserver.managers.FourSepulchersManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.FourSepulchersManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.FourSepulchersManager$ChangeWarmUpTime -> com.l2jfrozen.gameserver.managers.FourSepulchersManager$ChangeWarmUpTime:
    com.l2jfrozen.gameserver.managers.FourSepulchersManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.FourSepulchersManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.FourSepulchersManager$ManagerSay -> com.l2jfrozen.gameserver.managers.FourSepulchersManager$ManagerSay:
    com.l2jfrozen.gameserver.managers.FourSepulchersManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.FourSepulchersManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.FourSepulchersManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.FourSepulchersManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.FourSepulchersManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.GrandBossManager -> com.l2jfrozen.gameserver.managers.GrandBossManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String DELETE_GRAND_BOSS_LIST -> DELETE_GRAND_BOSS_LIST
    java.lang.String INSERT_GRAND_BOSS_LIST -> INSERT_GRAND_BOSS_LIST
    java.lang.String UPDATE_GRAND_BOSS_DATA -> UPDATE_GRAND_BOSS_DATA
    java.lang.String UPDATE_GRAND_BOSS_DATA2 -> UPDATE_GRAND_BOSS_DATA2
    com.l2jfrozen.gameserver.managers.GrandBossManager _instance -> _instance
    java.util.Map _bosses -> _bosses
    java.util.Map _storedInfo -> _storedInfo
    java.util.Map _bossStatus -> _bossStatus
    java.util.List _zones -> _zones
    com.l2jfrozen.gameserver.managers.GrandBossManager getInstance() -> getInstance
    void <init>() -> <init>
    void init() -> init
    void initZones() -> initZones
    void addZone(com.l2jfrozen.gameserver.model.zone.type.L2BossZone) -> addZone
    com.l2jfrozen.gameserver.model.zone.type.L2BossZone getZone(com.l2jfrozen.gameserver.model.L2Character) -> getZone
    com.l2jfrozen.gameserver.model.zone.type.L2BossZone getZone(int,int,int) -> getZone
    boolean checkIfInZone(java.lang.String,com.l2jfrozen.gameserver.model.L2Object) -> checkIfInZone
    java.lang.Integer getBossStatus(int) -> getBossStatus
    void setBossStatus(int,int) -> setBossStatus
    void addBoss(com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance) -> addBoss
    com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance getBoss(int) -> getBoss
    com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance deleteBoss(int) -> deleteBoss
    com.l2jfrozen.gameserver.templates.StatsSet getStatsSet(int) -> getStatsSet
    void setStatsSet(int,com.l2jfrozen.gameserver.templates.StatsSet) -> setStatsSet
    void fastStoreToDb() -> fastStoreToDb
    void storeToDb() -> storeToDb
    void updateDb(int,boolean) -> updateDb
    void cleanUp() -> cleanUp
    com.l2jfrozen.gameserver.templates.L2NpcTemplate getValidTemplate(int) -> getValidTemplate
    boolean isDefined(int) -> isDefined
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.ItemsOnGroundManager -> com.l2jfrozen.gameserver.managers.ItemsOnGroundManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _items -> _items
    void <init>() -> <init>
    com.l2jfrozen.gameserver.managers.ItemsOnGroundManager getInstance() -> getInstance
    void load() -> load
    void save(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> save
    void removeObject(com.l2jfrozen.gameserver.model.L2Object) -> removeObject
    void saveInDb() -> saveInDb
    void cleanUp() -> cleanUp
    void emptyTable() -> emptyTable
    void <init>(com.l2jfrozen.gameserver.managers.ItemsOnGroundManager$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.ItemsOnGroundManager$1 -> com.l2jfrozen.gameserver.managers.ItemsOnGroundManager$1:
com.l2jfrozen.gameserver.managers.ItemsOnGroundManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.ItemsOnGroundManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.ItemsOnGroundManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.ItemsOnGroundManager$StoreInDb -> com.l2jfrozen.gameserver.managers.ItemsOnGroundManager$StoreInDb:
    com.l2jfrozen.gameserver.managers.ItemsOnGroundManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.ItemsOnGroundManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.Manager -> com.l2jfrozen.gameserver.managers.Manager:
    void <init>() -> <init>
    void reloadAll() -> reloadAll
com.l2jfrozen.gameserver.managers.MercTicketManager -> com.l2jfrozen.gameserver.managers.MercTicketManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _droppedTickets -> _droppedTickets
    int[] MAX_MERC_PER_TYPE -> MAX_MERC_PER_TYPE
    int[] MERCS_MAX_PER_CASTLE -> MERCS_MAX_PER_CASTLE
    int[] ITEM_IDS -> ITEM_IDS
    int[] NPC_IDS -> NPC_IDS
    com.l2jfrozen.gameserver.managers.MercTicketManager getInstance() -> getInstance
    void <init>() -> <init>
    int getTicketCastleId(int) -> getTicketCastleId
    void reload() -> reload
    void load() -> load
    boolean isAtTypeLimit(int) -> isAtTypeLimit
    boolean isAtCasleLimit(int) -> isAtCasleLimit
    int addTicket(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String[]) -> addTicket
    void spawnMercenary(int,int,int,int,int,java.lang.String[],int) -> spawnMercenary
    void deleteTickets(int) -> deleteTickets
    void removeTicket(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> removeTicket
    int[] getItemIds() -> getItemIds
    java.util.List getDroppedTickets() -> getDroppedTickets
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.MercTicketManager$1 -> com.l2jfrozen.gameserver.managers.MercTicketManager$1:
    com.l2jfrozen.gameserver.model.actor.instance.L2SiegeGuardInstance val$npc -> val$npc
    com.l2jfrozen.gameserver.managers.MercTicketManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.MercTicketManager,com.l2jfrozen.gameserver.model.actor.instance.L2SiegeGuardInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.MercTicketManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.MercTicketManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.MercTicketManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.OlympiadStadiaManager -> com.l2jfrozen.gameserver.managers.OlympiadStadiaManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.managers.OlympiadStadiaManager _instance -> _instance
    javolution.util.FastList _olympiadStadias -> _olympiadStadias
    com.l2jfrozen.gameserver.managers.OlympiadStadiaManager getInstance() -> getInstance
    void <init>() -> <init>
    void addStadium(com.l2jfrozen.gameserver.model.zone.type.L2OlympiadStadiumZone) -> addStadium
    com.l2jfrozen.gameserver.model.zone.type.L2OlympiadStadiumZone getStadium(com.l2jfrozen.gameserver.model.L2Character) -> getStadium
    com.l2jfrozen.gameserver.model.zone.type.L2OlympiadStadiumZone getStadiumByLoc(int,int,int) -> getStadiumByLoc
    com.l2jfrozen.gameserver.model.zone.type.L2OlympiadStadiumZone getOlympiadStadiumById(int) -> getOlympiadStadiumById
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.PetitionManager -> com.l2jfrozen.gameserver.managers.PetitionManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.managers.PetitionManager _instance -> _instance
    java.util.Map _pendingPetitions -> _pendingPetitions
    java.util.Map _completedPetitions -> _completedPetitions
    com.l2jfrozen.gameserver.managers.PetitionManager getInstance() -> getInstance
    void <init>() -> <init>
    void clearCompletedPetitions() -> clearCompletedPetitions
    void clearPendingPetitions() -> clearPendingPetitions
    boolean acceptPetition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> acceptPetition
    boolean cancelActivePetition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> cancelActivePetition
    void checkPetitionMessages(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkPetitionMessages
    boolean endActivePetition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> endActivePetition
    java.util.Map getCompletedPetitions() -> getCompletedPetitions
    java.util.Map getPendingPetitions() -> getPendingPetitions
    int getPendingPetitionCount() -> getPendingPetitionCount
    int getPlayerTotalPetitionCount(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPlayerTotalPetitionCount
    boolean isPetitionInProcess() -> isPetitionInProcess
    boolean isPetitionInProcess(int) -> isPetitionInProcess
    boolean isPlayerInConsultation(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isPlayerInConsultation
    boolean isPetitioningAllowed() -> isPetitioningAllowed
    boolean isPlayerPetitionPending(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isPlayerPetitionPending
    boolean isValidPetition(int) -> isValidPetition
    boolean rejectPetition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> rejectPetition
    boolean sendActivePetitionMessage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> sendActivePetitionMessage
    void sendPendingPetitionList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendPendingPetitionList
    int submitPetition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int) -> submitPetition
    void viewPetition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> viewPetition
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.PetitionManager$Petition -> com.l2jfrozen.gameserver.managers.PetitionManager$Petition:
    long _submitTime -> _submitTime
    int _id -> _id
    com.l2jfrozen.gameserver.managers.PetitionType _type -> _type
    com.l2jfrozen.gameserver.managers.PetitionState _state -> _state
    java.lang.String _content -> _content
    java.util.List _messageLogger -> _messageLogger
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _petitioner -> _petitioner
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _responder -> _responder
    com.l2jfrozen.gameserver.managers.PetitionManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.PetitionManager,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int) -> <init>
    boolean addLogMessage(com.l2jfrozen.gameserver.network.serverpackets.CreatureSay) -> addLogMessage
    java.util.List getLogMessages() -> getLogMessages
    boolean endPetitionConsultation(com.l2jfrozen.gameserver.managers.PetitionState) -> endPetitionConsultation
    java.lang.String getContent() -> getContent
    int getId() -> getId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPetitioner() -> getPetitioner
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getResponder() -> getResponder
    long getSubmitTime() -> getSubmitTime
    com.l2jfrozen.gameserver.managers.PetitionState getState() -> getState
    java.lang.String getTypeAsString() -> getTypeAsString
    void sendPetitionerPacket(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> sendPetitionerPacket
    void sendResponderPacket(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> sendResponderPacket
    void setState(com.l2jfrozen.gameserver.managers.PetitionState) -> setState
    void setResponder(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setResponder
com.l2jfrozen.gameserver.managers.PetitionState -> com.l2jfrozen.gameserver.managers.PetitionState:
    com.l2jfrozen.gameserver.managers.PetitionState Pending -> Pending
    com.l2jfrozen.gameserver.managers.PetitionState Responder_Cancel -> Responder_Cancel
    com.l2jfrozen.gameserver.managers.PetitionState Responder_Missing -> Responder_Missing
    com.l2jfrozen.gameserver.managers.PetitionState Responder_Reject -> Responder_Reject
    com.l2jfrozen.gameserver.managers.PetitionState Responder_Complete -> Responder_Complete
    com.l2jfrozen.gameserver.managers.PetitionState Petitioner_Cancel -> Petitioner_Cancel
    com.l2jfrozen.gameserver.managers.PetitionState Petitioner_Missing -> Petitioner_Missing
    com.l2jfrozen.gameserver.managers.PetitionState In_Process -> In_Process
    com.l2jfrozen.gameserver.managers.PetitionState Completed -> Completed
    com.l2jfrozen.gameserver.managers.PetitionState[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.managers.PetitionState[] values() -> values
    com.l2jfrozen.gameserver.managers.PetitionState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.PetitionType -> com.l2jfrozen.gameserver.managers.PetitionType:
    com.l2jfrozen.gameserver.managers.PetitionType Immobility -> Immobility
    com.l2jfrozen.gameserver.managers.PetitionType Recovery_Related -> Recovery_Related
    com.l2jfrozen.gameserver.managers.PetitionType Bug_Report -> Bug_Report
    com.l2jfrozen.gameserver.managers.PetitionType Quest_Related -> Quest_Related
    com.l2jfrozen.gameserver.managers.PetitionType Bad_User -> Bad_User
    com.l2jfrozen.gameserver.managers.PetitionType Suggestions -> Suggestions
    com.l2jfrozen.gameserver.managers.PetitionType Game_Tip -> Game_Tip
    com.l2jfrozen.gameserver.managers.PetitionType Operation_Related -> Operation_Related
    com.l2jfrozen.gameserver.managers.PetitionType Other -> Other
    com.l2jfrozen.gameserver.managers.PetitionType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.managers.PetitionType[] values() -> values
    com.l2jfrozen.gameserver.managers.PetitionType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.QuestManager -> com.l2jfrozen.gameserver.managers.QuestManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _quests -> _quests
    com.l2jfrozen.gameserver.managers.QuestManager _instance -> _instance
    com.l2jfrozen.gameserver.managers.QuestManager getInstance() -> getInstance
    void <init>() -> <init>
    boolean reload(java.lang.String) -> reload
    boolean reload(int) -> reload
    void reloadAllQuests() -> reloadAllQuests
    void report() -> report
    void save() -> save
    com.l2jfrozen.gameserver.model.quest.Quest getQuest(java.lang.String) -> getQuest
    com.l2jfrozen.gameserver.model.quest.Quest getQuest(int) -> getQuest
    void addQuest(com.l2jfrozen.gameserver.model.quest.Quest) -> addQuest
    javolution.util.FastMap getQuests() -> getQuests
    void reload() -> reload
    java.lang.Iterable getAllManagedScripts() -> getAllManagedScripts
    boolean unload(com.l2jfrozen.gameserver.model.quest.Quest) -> unload
    java.lang.String getScriptManagerName() -> getScriptManagerName
    boolean removeQuest(com.l2jfrozen.gameserver.model.quest.Quest) -> removeQuest
    void unloadAllQuests() -> unloadAllQuests
    boolean unload(com.l2jfrozen.gameserver.scripting.ManagedScript) -> unload
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.RaidBossPointsManager -> com.l2jfrozen.gameserver.managers.RaidBossPointsManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    javolution.util.FastMap _list -> _list
    java.util.Comparator _comparator -> _comparator
    void <init>() -> <init>
    void init() -> init
    void updatePointsInDB(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> updatePointsInDB
    void addPoints(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> addPoints
    int getPointsByOwnerId(int) -> getPointsByOwnerId
    java.util.Map getList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getList
    void cleanUp() -> cleanUp
    int calculateRanking(int) -> calculateRanking
    java.util.Map getRankList() -> getRankList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.RaidBossPointsManager$1 -> com.l2jfrozen.gameserver.managers.RaidBossPointsManager$1:
    void <init>() -> <init>
    int compare(java.util.Map$Entry,java.util.Map$Entry) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.l2jfrozen.gameserver.managers.RaidBossSpawnManager -> com.l2jfrozen.gameserver.managers.RaidBossSpawnManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _bosses -> _bosses
    java.util.Map _spawns -> _spawns
    java.util.Map _storedInfo -> _storedInfo
    java.util.Map _schedules -> _schedules
    void <init>() -> <init>
    com.l2jfrozen.gameserver.managers.RaidBossSpawnManager getInstance() -> getInstance
    void init() -> init
    void updateStatus(com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance,boolean) -> updateStatus
    void addNewSpawn(com.l2jfrozen.gameserver.model.spawn.L2Spawn,long,double,double,boolean) -> addNewSpawn
    void deleteSpawn(com.l2jfrozen.gameserver.model.spawn.L2Spawn,boolean) -> deleteSpawn
    void updateDb() -> updateDb
    java.lang.String[] getAllRaidBossStatus() -> getAllRaidBossStatus
    java.lang.String getRaidBossStatus(int) -> getRaidBossStatus
    com.l2jfrozen.gameserver.managers.StatusEnum getRaidBossStatusId(int) -> getRaidBossStatusId
    com.l2jfrozen.gameserver.templates.L2NpcTemplate getValidTemplate(int) -> getValidTemplate
    void notifySpawnNightBoss(com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance) -> notifySpawnNightBoss
    boolean isDefined(int) -> isDefined
    java.util.Map getBosses() -> getBosses
    java.util.Map getSpawns() -> getSpawns
    void reloadBosses() -> reloadBosses
    void cleanUp() -> cleanUp
    com.l2jfrozen.gameserver.templates.StatsSet getStatsSet(int) -> getStatsSet
    com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance getBoss(int) -> getBoss
    void access$000(com.l2jfrozen.gameserver.managers.RaidBossSpawnManager) -> access$000
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.RaidBossSpawnManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.RaidBossSpawnManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.RaidBossSpawnManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.RaidBossSpawnManager$spawnSchedule -> com.l2jfrozen.gameserver.managers.RaidBossSpawnManager$spawnSchedule:
    int bossId -> bossId
    com.l2jfrozen.gameserver.managers.RaidBossSpawnManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.RaidBossSpawnManager,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.managers.SiegeGuardManager -> com.l2jfrozen.gameserver.managers.SiegeGuardManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.siege.Castle _castle -> _castle
    java.util.List _siegeGuardSpawn -> _siegeGuardSpawn
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Castle) -> <init>
    void addSiegeGuard(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> addSiegeGuard
    void addSiegeGuard(int,int,int,int,int) -> addSiegeGuard
    void hireMerc(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> hireMerc
    void hireMerc(int,int,int,int,int) -> hireMerc
    void removeMerc(int,int,int,int) -> removeMerc
    void removeMercs() -> removeMercs
    void spawnSiegeGuard() -> spawnSiegeGuard
    void unspawnSiegeGuard() -> unspawnSiegeGuard
    void loadSiegeGuard() -> loadSiegeGuard
    void saveSiegeGuard(int,int,int,int,int,int) -> saveSiegeGuard
    com.l2jfrozen.gameserver.model.entity.siege.Castle getCastle() -> getCastle
    java.util.List getSiegeGuardSpawn() -> getSiegeGuardSpawn
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.SiegeManager -> com.l2jfrozen.gameserver.managers.SiegeManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _attackerMaxClans -> _attackerMaxClans
    int _attackerRespawnDelay -> _attackerRespawnDelay
    int _defenderMaxClans -> _defenderMaxClans
    int _defenderRespawnDelay -> _defenderRespawnDelay
    javolution.util.FastMap _artefactSpawnList -> _artefactSpawnList
    javolution.util.FastMap _controlTowerSpawnList -> _controlTowerSpawnList
    int _controlTowerLosePenalty -> _controlTowerLosePenalty
    int _flagMaxCount -> _flagMaxCount
    int _siegeClanMinLevel -> _siegeClanMinLevel
    int _siegeLength -> _siegeLength
    boolean _teleport_to_siege -> _teleport_to_siege
    boolean _teleport_to_siege_town -> _teleport_to_siege_town
    com.l2jfrozen.gameserver.managers.SiegeManager getInstance() -> getInstance
    void <init>() -> <init>
    void addSiegeSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addSiegeSkills
    boolean checkIfOkToSummon(com.l2jfrozen.gameserver.model.L2Character,boolean) -> checkIfOkToSummon
    boolean checkIsRegisteredInSiege(com.l2jfrozen.gameserver.model.L2Clan) -> checkIsRegisteredInSiege
    boolean checkIsRegistered(com.l2jfrozen.gameserver.model.L2Clan,int) -> checkIsRegistered
    void removeSiegeSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeSiegeSkills
    void load() -> load
    javolution.util.FastList getArtefactSpawnList(int) -> getArtefactSpawnList
    javolution.util.FastList getControlTowerSpawnList(int) -> getControlTowerSpawnList
    int getAttackerMaxClans() -> getAttackerMaxClans
    int getAttackerRespawnDelay() -> getAttackerRespawnDelay
    int getControlTowerLosePenalty() -> getControlTowerLosePenalty
    int getDefenderMaxClans() -> getDefenderMaxClans
    int getDefenderRespawnDelay() -> getDefenderRespawnDelay
    int getFlagMaxCount() -> getFlagMaxCount
    com.l2jfrozen.gameserver.model.entity.siege.Siege getSiege(com.l2jfrozen.gameserver.model.L2Object) -> getSiege
    com.l2jfrozen.gameserver.model.entity.siege.Siege getSiege(int,int,int) -> getSiege
    int getSiegeClanMinLevel() -> getSiegeClanMinLevel
    int getSiegeLength() -> getSiegeLength
    java.util.List getSieges() -> getSieges
    boolean is_teleport_to_siege_allowed() -> is_teleport_to_siege_allowed
    boolean is_teleport_to_siege_town_allowed() -> is_teleport_to_siege_town_allowed
    void <init>(com.l2jfrozen.gameserver.managers.SiegeManager$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.SiegeManager$1 -> com.l2jfrozen.gameserver.managers.SiegeManager$1:
com.l2jfrozen.gameserver.managers.SiegeManager$SiegeSpawn -> com.l2jfrozen.gameserver.managers.SiegeManager$SiegeSpawn:
    com.l2jfrozen.gameserver.model.Location _location -> _location
    int _npcId -> _npcId
    int _heading -> _heading
    int _castleId -> _castleId
    int _hp -> _hp
    com.l2jfrozen.gameserver.managers.SiegeManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.managers.SiegeManager,int,int,int,int,int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.managers.SiegeManager,int,int,int,int,int,int,int) -> <init>
    int getCastleId() -> getCastleId
    int getNpcId() -> getNpcId
    int getHeading() -> getHeading
    int getHp() -> getHp
    com.l2jfrozen.gameserver.model.Location getLocation() -> getLocation
com.l2jfrozen.gameserver.managers.SiegeManager$SingletonHolder -> com.l2jfrozen.gameserver.managers.SiegeManager$SingletonHolder:
    com.l2jfrozen.gameserver.managers.SiegeManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.StatusEnum -> com.l2jfrozen.gameserver.managers.StatusEnum:
    com.l2jfrozen.gameserver.managers.StatusEnum ALIVE -> ALIVE
    com.l2jfrozen.gameserver.managers.StatusEnum DEAD -> DEAD
    com.l2jfrozen.gameserver.managers.StatusEnum UNDEFINED -> UNDEFINED
    com.l2jfrozen.gameserver.managers.StatusEnum[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.managers.StatusEnum[] values() -> values
    com.l2jfrozen.gameserver.managers.StatusEnum valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.managers.TownManager -> com.l2jfrozen.gameserver.managers.TownManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.managers.TownManager _instance -> _instance
    javolution.util.FastList _towns -> _towns
    com.l2jfrozen.gameserver.managers.TownManager getInstance() -> getInstance
    void <init>() -> <init>
    void addTown(com.l2jfrozen.gameserver.model.zone.type.L2TownZone) -> addTown
    com.l2jfrozen.gameserver.model.zone.type.L2TownZone getClosestTown(com.l2jfrozen.gameserver.model.L2Object) -> getClosestTown
    int getClosestLocation(com.l2jfrozen.gameserver.model.L2Object) -> getClosestLocation
    boolean townHasCastleInSiege(int) -> townHasCastleInSiege
    boolean townHasCastleInSiege(int,int) -> townHasCastleInSiege
    com.l2jfrozen.gameserver.model.zone.type.L2TownZone getTown(int) -> getTown
    com.l2jfrozen.gameserver.model.zone.type.L2TownZone getTown(int,int,int) -> getTown
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.BlockList -> com.l2jfrozen.gameserver.model.BlockList:
    java.util.Set _blockSet -> _blockSet
    boolean _blockAll -> _blockAll
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void addToBlockList(java.lang.String) -> addToBlockList
    void removeFromBlockList(java.lang.String) -> removeFromBlockList
    boolean isInBlockList(java.lang.String) -> isInBlockList
    boolean isBlockAll() -> isBlockAll
    void setBlockAll(boolean) -> setBlockAll
    java.util.Set getBlockList() -> getBlockList
com.l2jfrozen.gameserver.model.ChanceCondition -> com.l2jfrozen.gameserver.model.ChanceCondition:
    int EVT_HIT -> EVT_HIT
    int EVT_CRIT -> EVT_CRIT
    int EVT_CAST -> EVT_CAST
    int EVT_PHYSICAL -> EVT_PHYSICAL
    int EVT_MAGIC -> EVT_MAGIC
    int EVT_MAGIC_GOOD -> EVT_MAGIC_GOOD
    int EVT_MAGIC_OFFENSIVE -> EVT_MAGIC_OFFENSIVE
    int EVT_ATTACKED -> EVT_ATTACKED
    int EVT_ATTACKED_HIT -> EVT_ATTACKED_HIT
    int EVT_ATTACKED_CRIT -> EVT_ATTACKED_CRIT
    int EVT_HIT_BY_SKILL -> EVT_HIT_BY_SKILL
    int EVT_HIT_BY_OFFENSIVE_SKILL -> EVT_HIT_BY_OFFENSIVE_SKILL
    int EVT_HIT_BY_GOOD_MAGIC -> EVT_HIT_BY_GOOD_MAGIC
    com.l2jfrozen.gameserver.model.TriggerType _triggerType -> _triggerType
    int _chance -> _chance
    void <init>(com.l2jfrozen.gameserver.model.TriggerType,int) -> <init>
    com.l2jfrozen.gameserver.model.ChanceCondition parse(com.l2jfrozen.gameserver.templates.StatsSet) -> parse
    boolean trigger(int) -> trigger
    java.lang.String toString() -> toString
com.l2jfrozen.gameserver.model.ChanceSkillList -> com.l2jfrozen.gameserver.model.ChanceSkillList:
    long serialVersionUID -> serialVersionUID
    com.l2jfrozen.gameserver.model.L2Character _owner -> _owner
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    com.l2jfrozen.gameserver.model.L2Character getOwner() -> getOwner
    void setOwner(com.l2jfrozen.gameserver.model.L2Character) -> setOwner
    void onHit(com.l2jfrozen.gameserver.model.L2Character,boolean,boolean) -> onHit
    void onSkillHit(com.l2jfrozen.gameserver.model.L2Character,boolean,boolean,boolean) -> onSkillHit
    boolean canTriggerByCast(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> canTriggerByCast
    void onEvent(int,com.l2jfrozen.gameserver.model.L2Character) -> onEvent
    void makeCast(com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Character) -> makeCast
com.l2jfrozen.gameserver.model.ChanceSkillList$1 -> com.l2jfrozen.gameserver.model.ChanceSkillList$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.CharSelectInfoPackage -> com.l2jfrozen.gameserver.model.CharSelectInfoPackage:
    java.lang.String _name -> _name
    int _objectId -> _objectId
    int _charId -> _charId
    long _exp -> _exp
    int _sp -> _sp
    int _clanId -> _clanId
    int _race -> _race
    int _classId -> _classId
    int _baseClassId -> _baseClassId
    long _deleteTimer -> _deleteTimer
    long _lastAccess -> _lastAccess
    int _face -> _face
    int _hairStyle -> _hairStyle
    int _hairColor -> _hairColor
    int _sex -> _sex
    int _level -> _level
    int _maxHp -> _maxHp
    double _currentHp -> _currentHp
    int _maxMp -> _maxMp
    double _currentMp -> _currentMp
    int[][] _paperdoll -> _paperdoll
    int _karma -> _karma
    int _augmentationId -> _augmentationId
    int _accessLevel -> _accessLevel
    void <init>(int,java.lang.String) -> <init>
    int getObjectId() -> getObjectId
    void setObjectId(int) -> setObjectId
    int getCharId() -> getCharId
    void setCharId(int) -> setCharId
    int getClanId() -> getClanId
    void setClanId(int) -> setClanId
    int getClassId() -> getClassId
    int getBaseClassId() -> getBaseClassId
    void setClassId(int) -> setClassId
    void setBaseClassId(int) -> setBaseClassId
    double getCurrentHp() -> getCurrentHp
    void setCurrentHp(double) -> setCurrentHp
    double getCurrentMp() -> getCurrentMp
    void setCurrentMp(double) -> setCurrentMp
    long getDeleteTimer() -> getDeleteTimer
    void setDeleteTimer(long) -> setDeleteTimer
    long getLastAccess() -> getLastAccess
    void setLastAccess(long) -> setLastAccess
    long getExp() -> getExp
    void setExp(long) -> setExp
    int getFace() -> getFace
    void setFace(int) -> setFace
    int getHairColor() -> getHairColor
    void setHairColor(int) -> setHairColor
    int getHairStyle() -> getHairStyle
    void setHairStyle(int) -> setHairStyle
    int getPaperdollObjectId(int) -> getPaperdollObjectId
    int getPaperdollItemId(int) -> getPaperdollItemId
    int getLevel() -> getLevel
    void setLevel(int) -> setLevel
    int getMaxHp() -> getMaxHp
    void setMaxHp(int) -> setMaxHp
    int getMaxMp() -> getMaxMp
    void setMaxMp(int) -> setMaxMp
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getRace() -> getRace
    void setRace(int) -> setRace
    int getSex() -> getSex
    void setSex(int) -> setSex
    int getSp() -> getSp
    void setSp(int) -> setSp
    int getEnchantEffect() -> getEnchantEffect
    void setKarma(int) -> setKarma
    int getKarma() -> getKarma
    void setAugmentationId(int) -> setAugmentationId
    int getAugmentationId() -> getAugmentationId
    int getAccessLevel() -> getAccessLevel
    void setAccessLevel(int) -> setAccessLevel
com.l2jfrozen.gameserver.model.ClanWarehouse -> com.l2jfrozen.gameserver.model.ClanWarehouse:
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    void <init>(com.l2jfrozen.gameserver.model.L2Clan) -> <init>
    int getOwnerId() -> getOwnerId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getOwner() -> getOwner
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation getBaseLocation() -> getBaseLocation
    java.lang.String getLocationId() -> getLocationId
    int getLocationId(boolean) -> getLocationId
    void setLocationId(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setLocationId
    boolean validateCapacity(int) -> validateCapacity
    com.l2jfrozen.gameserver.model.L2Character getOwner() -> getOwner
com.l2jfrozen.gameserver.model.CombatFlag -> com.l2jfrozen.gameserver.model.CombatFlag:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    int playerId -> playerId
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _item -> _item
    com.l2jfrozen.gameserver.model.Location _location -> _location
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance itemInstance -> itemInstance
    int _itemId -> _itemId
    void <init>(int,int,int,int,int) -> <init>
    void spawnMe() -> spawnMe
    void unSpawnMe() -> unSpawnMe
    void activate(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> activate
    void dropIt() -> dropIt
    void giveSkill() -> giveSkill
    void removeSkill() -> removeSkill
com.l2jfrozen.gameserver.model.CursedWeapon -> com.l2jfrozen.gameserver.model.CursedWeapon:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _name -> _name
    int _itemId -> _itemId
    int _skillId -> _skillId
    int _skillMaxLevel -> _skillMaxLevel
    int _dropRate -> _dropRate
    int _duration -> _duration
    int _durationLost -> _durationLost
    int _disapearChance -> _disapearChance
    int _stageKills -> _stageKills
    boolean _isDropped -> _isDropped
    boolean _isActivated -> _isActivated
    java.util.concurrent.ScheduledFuture _removeTask -> _removeTask
    int _nbKills -> _nbKills
    long _endTime -> _endTime
    int _playerId -> _playerId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _item -> _item
    int _playerKarma -> _playerKarma
    int _playerPkKills -> _playerPkKills
    void <init>(int,int,java.lang.String) -> <init>
    void endOfLife() -> endOfLife
    void cancelTask() -> cancelTask
    void dropIt(com.l2jfrozen.gameserver.model.L2Attackable,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> dropIt
    void dropIt(com.l2jfrozen.gameserver.model.L2Attackable,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Character,boolean) -> dropIt
    void giveSkill() -> giveSkill
    void removeSkill() -> removeSkill
    void reActivate() -> reActivate
    boolean checkDrop(com.l2jfrozen.gameserver.model.L2Attackable,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkDrop
    void activate(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> activate
    void saveData() -> saveData
    void dropIt(com.l2jfrozen.gameserver.model.L2Character) -> dropIt
    void increaseKills() -> increaseKills
    void setDisapearChance(int) -> setDisapearChance
    void setDropRate(int) -> setDropRate
    void setDuration(int) -> setDuration
    void setDurationLost(int) -> setDurationLost
    void setStageKills(int) -> setStageKills
    void setNbKills(int) -> setNbKills
    void setPlayerId(int) -> setPlayerId
    void setPlayerKarma(int) -> setPlayerKarma
    void setPlayerPkKills(int) -> setPlayerPkKills
    void setActivated(boolean) -> setActivated
    void setDropped(boolean) -> setDropped
    void setEndTime(long) -> setEndTime
    void setPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setPlayer
    void setItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> setItem
    boolean isActivated() -> isActivated
    boolean isDropped() -> isDropped
    long getEndTime() -> getEndTime
    java.lang.String getName() -> getName
    int getItemId() -> getItemId
    int getSkillId() -> getSkillId
    int getPlayerId() -> getPlayerId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayer() -> getPlayer
    int getPlayerKarma() -> getPlayerKarma
    int getPlayerPkKills() -> getPlayerPkKills
    int getNbKills() -> getNbKills
    int getStageKills() -> getStageKills
    boolean isActive() -> isActive
    int getLevel() -> getLevel
    long getTimeLeft() -> getTimeLeft
    int getDuration() -> getDuration
    void goTo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> goTo
    com.l2jfrozen.common.util.Point3D getWorldPosition() -> getWorldPosition
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.CursedWeapon$RemoveTask -> com.l2jfrozen.gameserver.model.CursedWeapon$RemoveTask:
    com.l2jfrozen.gameserver.model.CursedWeapon this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.CursedWeapon) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.DropProtection -> com.l2jfrozen.gameserver.model.DropProtection:
    boolean _isProtected -> _isProtected
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    java.util.concurrent.ScheduledFuture _task -> _task
    long PROTECTED_MILLIS_TIME -> PROTECTED_MILLIS_TIME
    void <init>() -> <init>
    void run() -> run
    boolean isProtected() -> isProtected
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getOwner() -> getOwner
    boolean tryPickUp(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> tryPickUp
    boolean tryPickUp(com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance) -> tryPickUp
    void unprotect() -> unprotect
    void protect(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> protect
com.l2jfrozen.gameserver.model.EffectState -> com.l2jfrozen.gameserver.model.EffectState:
    com.l2jfrozen.gameserver.model.EffectState CREATED -> CREATED
    com.l2jfrozen.gameserver.model.EffectState ACTING -> ACTING
    com.l2jfrozen.gameserver.model.EffectState FINISHING -> FINISHING
    com.l2jfrozen.gameserver.model.EffectState[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.EffectState[] values() -> values
    com.l2jfrozen.gameserver.model.EffectState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.EffectType -> com.l2jfrozen.gameserver.model.EffectType:
    com.l2jfrozen.gameserver.model.EffectType BUFF -> BUFF
    com.l2jfrozen.gameserver.model.EffectType DEBUFF -> DEBUFF
    com.l2jfrozen.gameserver.model.EffectType CHARGE -> CHARGE
    com.l2jfrozen.gameserver.model.EffectType DMG_OVER_TIME -> DMG_OVER_TIME
    com.l2jfrozen.gameserver.model.EffectType HEAL_OVER_TIME -> HEAL_OVER_TIME
    com.l2jfrozen.gameserver.model.EffectType COMBAT_POINT_HEAL_OVER_TIME -> COMBAT_POINT_HEAL_OVER_TIME
    com.l2jfrozen.gameserver.model.EffectType MANA_DMG_OVER_TIME -> MANA_DMG_OVER_TIME
    com.l2jfrozen.gameserver.model.EffectType MANA_HEAL_OVER_TIME -> MANA_HEAL_OVER_TIME
    com.l2jfrozen.gameserver.model.EffectType MP_CONSUME_PER_LEVEL -> MP_CONSUME_PER_LEVEL
    com.l2jfrozen.gameserver.model.EffectType RELAXING -> RELAXING
    com.l2jfrozen.gameserver.model.EffectType STUN -> STUN
    com.l2jfrozen.gameserver.model.EffectType ROOT -> ROOT
    com.l2jfrozen.gameserver.model.EffectType SLEEP -> SLEEP
    com.l2jfrozen.gameserver.model.EffectType HATE -> HATE
    com.l2jfrozen.gameserver.model.EffectType FAKE_DEATH -> FAKE_DEATH
    com.l2jfrozen.gameserver.model.EffectType CONFUSION -> CONFUSION
    com.l2jfrozen.gameserver.model.EffectType CONFUSE_MOB_ONLY -> CONFUSE_MOB_ONLY
    com.l2jfrozen.gameserver.model.EffectType MUTE -> MUTE
    com.l2jfrozen.gameserver.model.EffectType IMMOBILEUNTILATTACKED -> IMMOBILEUNTILATTACKED
    com.l2jfrozen.gameserver.model.EffectType FEAR -> FEAR
    com.l2jfrozen.gameserver.model.EffectType SALVATION -> SALVATION
    com.l2jfrozen.gameserver.model.EffectType SILENT_MOVE -> SILENT_MOVE
    com.l2jfrozen.gameserver.model.EffectType SIGNET_EFFECT -> SIGNET_EFFECT
    com.l2jfrozen.gameserver.model.EffectType SIGNET_GROUND -> SIGNET_GROUND
    com.l2jfrozen.gameserver.model.EffectType SEED -> SEED
    com.l2jfrozen.gameserver.model.EffectType PARALYZE -> PARALYZE
    com.l2jfrozen.gameserver.model.EffectType STUN_SELF -> STUN_SELF
    com.l2jfrozen.gameserver.model.EffectType PSYCHICAL_MUTE -> PSYCHICAL_MUTE
    com.l2jfrozen.gameserver.model.EffectType REMOVE_TARGET -> REMOVE_TARGET
    com.l2jfrozen.gameserver.model.EffectType TARGET_ME -> TARGET_ME
    com.l2jfrozen.gameserver.model.EffectType SILENCE_MAGIC_PHYSICAL -> SILENCE_MAGIC_PHYSICAL
    com.l2jfrozen.gameserver.model.EffectType BETRAY -> BETRAY
    com.l2jfrozen.gameserver.model.EffectType NOBLESSE_BLESSING -> NOBLESSE_BLESSING
    com.l2jfrozen.gameserver.model.EffectType PHOENIX_BLESSING -> PHOENIX_BLESSING
    com.l2jfrozen.gameserver.model.EffectType PETRIFICATION -> PETRIFICATION
    com.l2jfrozen.gameserver.model.EffectType BLUFF -> BLUFF
    com.l2jfrozen.gameserver.model.EffectType BATTLE_FORCE -> BATTLE_FORCE
    com.l2jfrozen.gameserver.model.EffectType SPELL_FORCE -> SPELL_FORCE
    com.l2jfrozen.gameserver.model.EffectType CHARM_OF_LUCK -> CHARM_OF_LUCK
    com.l2jfrozen.gameserver.model.EffectType INVINCIBLE -> INVINCIBLE
    com.l2jfrozen.gameserver.model.EffectType PROTECTION_BLESSING -> PROTECTION_BLESSING
    com.l2jfrozen.gameserver.model.EffectType INTERRUPT -> INTERRUPT
    com.l2jfrozen.gameserver.model.EffectType MEDITATION -> MEDITATION
    com.l2jfrozen.gameserver.model.EffectType BLOW -> BLOW
    com.l2jfrozen.gameserver.model.EffectType FUSION -> FUSION
    com.l2jfrozen.gameserver.model.EffectType CANCEL -> CANCEL
    com.l2jfrozen.gameserver.model.EffectType BLOCK_BUFF -> BLOCK_BUFF
    com.l2jfrozen.gameserver.model.EffectType BLOCK_DEBUFF -> BLOCK_DEBUFF
    com.l2jfrozen.gameserver.model.EffectType PREVENT_BUFF -> PREVENT_BUFF
    com.l2jfrozen.gameserver.model.EffectType CLAN_GATE -> CLAN_GATE
    com.l2jfrozen.gameserver.model.EffectType NEGATE -> NEGATE
    com.l2jfrozen.gameserver.model.EffectType HERO_CANCEL -> HERO_CANCEL
    com.l2jfrozen.gameserver.model.EffectType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.EffectType[] values() -> values
    com.l2jfrozen.gameserver.model.EffectType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.FishData -> com.l2jfrozen.gameserver.model.FishData:
    int _id -> _id
    int _level -> _level
    java.lang.String _name -> _name
    int _hp -> _hp
    int _hpRegen -> _hpRegen
    int _type -> _type
    int _group -> _group
    int _fishGuts -> _fishGuts
    int _gutsCheckTime -> _gutsCheckTime
    int _waitTime -> _waitTime
    int _combatTime -> _combatTime
    void <init>(int,int,java.lang.String,int,int,int,int,int,int,int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.FishData) -> <init>
    int getId() -> getId
    int getLevel() -> getLevel
    java.lang.String getName() -> getName
    int getHP() -> getHP
    int getHpRegen() -> getHpRegen
    int getType() -> getType
    int getGroup() -> getGroup
    int getFishGuts() -> getFishGuts
    int getGutsCheckTime() -> getGutsCheckTime
    int getWaitTime() -> getWaitTime
    int getCombatTime() -> getCombatTime
    void setType(int) -> setType
com.l2jfrozen.gameserver.model.ForceBuff -> com.l2jfrozen.gameserver.model.ForceBuff:
    int _forceId -> _forceId
    int _forceLevel -> _forceLevel
    com.l2jfrozen.gameserver.model.L2Character _caster -> _caster
    com.l2jfrozen.gameserver.model.L2Character _target -> _target
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.L2Character getCaster() -> getCaster
    com.l2jfrozen.gameserver.model.L2Character getTarget() -> getTarget
    void <init>(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> <init>
    void onCastAbort() -> onCastAbort
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.Inventory -> com.l2jfrozen.gameserver.model.Inventory:
    int PAPERDOLL_UNDER -> PAPERDOLL_UNDER
    int PAPERDOLL_LEAR -> PAPERDOLL_LEAR
    int PAPERDOLL_REAR -> PAPERDOLL_REAR
    int PAPERDOLL_NECK -> PAPERDOLL_NECK
    int PAPERDOLL_LFINGER -> PAPERDOLL_LFINGER
    int PAPERDOLL_RFINGER -> PAPERDOLL_RFINGER
    int PAPERDOLL_HEAD -> PAPERDOLL_HEAD
    int PAPERDOLL_RHAND -> PAPERDOLL_RHAND
    int PAPERDOLL_LHAND -> PAPERDOLL_LHAND
    int PAPERDOLL_GLOVES -> PAPERDOLL_GLOVES
    int PAPERDOLL_CHEST -> PAPERDOLL_CHEST
    int PAPERDOLL_LEGS -> PAPERDOLL_LEGS
    int PAPERDOLL_FEET -> PAPERDOLL_FEET
    int PAPERDOLL_BACK -> PAPERDOLL_BACK
    int PAPERDOLL_LRHAND -> PAPERDOLL_LRHAND
    int PAPERDOLL_FACE -> PAPERDOLL_FACE
    int PAPERDOLL_HAIR -> PAPERDOLL_HAIR
    int PAPERDOLL_DHAIR -> PAPERDOLL_DHAIR
    int PAPERDOLL_TOTALSLOTS -> PAPERDOLL_TOTALSLOTS
    double MAX_ARMOR_WEIGHT -> MAX_ARMOR_WEIGHT
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _paperdoll -> _paperdoll
    java.util.List _paperdollListeners -> _paperdollListeners
    int _totalWeight -> _totalWeight
    int _wearedMask -> _wearedMask
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation getEquipLocation() -> getEquipLocation
    com.l2jfrozen.gameserver.model.Inventory$ChangeRecorder newRecorder() -> newRecorder
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance dropItem(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> dropItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance dropItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> dropItem
    void addItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addItem
    void removeItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> removeItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getPaperdollItem(int) -> getPaperdollItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getPaperdollItemByL2ItemId(int) -> getPaperdollItemByL2ItemId
    int getPaperdollItemId(int) -> getPaperdollItemId
    int getPaperdollAugmentationId(int) -> getPaperdollAugmentationId
    int getPaperdollObjectId(int) -> getPaperdollObjectId
    void addPaperdollListener(com.l2jfrozen.gameserver.model.Inventory$PaperdollListener) -> addPaperdollListener
    void removePaperdollListener(com.l2jfrozen.gameserver.model.Inventory$PaperdollListener) -> removePaperdollListener
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance setPaperdollItem(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> setPaperdollItem
    int getWearedMask() -> getWearedMask
    int getSlotFromItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> getSlotFromItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] unEquipItemInBodySlotAndRecord(int) -> unEquipItemInBodySlotAndRecord
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance unEquipItemInSlot(int) -> unEquipItemInSlot
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] unEquipItemInSlotAndRecord(int) -> unEquipItemInSlotAndRecord
    void unEquipItemInBodySlot(int) -> unEquipItemInBodySlot
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] equipItemAndRecord(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> equipItemAndRecord
    void equipItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> equipItem
    void refreshWeight() -> refreshWeight
    int getTotalWeight() -> getTotalWeight
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance findArrowForBow(com.l2jfrozen.gameserver.templates.L2Item) -> findArrowForBow
    void restore() -> restore
    void reloadEquippedItems() -> reloadEquippedItems
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.Inventory$ArmorSetListener -> com.l2jfrozen.gameserver.model.Inventory$ArmorSetListener:
    com.l2jfrozen.gameserver.model.Inventory this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.Inventory) -> <init>
    void notifyEquiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyEquiped
    void notifyUnequiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyUnequiped
com.l2jfrozen.gameserver.model.Inventory$BowListener -> com.l2jfrozen.gameserver.model.Inventory$BowListener:
    boolean $assertionsDisabled -> $assertionsDisabled
    com.l2jfrozen.gameserver.model.Inventory this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.Inventory) -> <init>
    void notifyUnequiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyUnequiped
    void notifyEquiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyEquiped
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.Inventory$ChangeRecorder -> com.l2jfrozen.gameserver.model.Inventory$ChangeRecorder:
    com.l2jfrozen.gameserver.model.Inventory _inventory -> _inventory
    java.util.List _changed -> _changed
    void <init>(com.l2jfrozen.gameserver.model.Inventory) -> <init>
    void notifyEquiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyEquiped
    void notifyUnequiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyUnequiped
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getChangedItems() -> getChangedItems
com.l2jfrozen.gameserver.model.Inventory$FormalWearListener -> com.l2jfrozen.gameserver.model.Inventory$FormalWearListener:
    com.l2jfrozen.gameserver.model.Inventory this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.Inventory) -> <init>
    void notifyUnequiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyUnequiped
    void notifyEquiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyEquiped
com.l2jfrozen.gameserver.model.Inventory$ItemPassiveSkillsListener -> com.l2jfrozen.gameserver.model.Inventory$ItemPassiveSkillsListener:
    com.l2jfrozen.gameserver.model.Inventory this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.Inventory) -> <init>
    void notifyUnequiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyUnequiped
    void notifyEquiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyEquiped
com.l2jfrozen.gameserver.model.Inventory$PaperdollListener -> com.l2jfrozen.gameserver.model.Inventory$PaperdollListener:
    void notifyEquiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyEquiped
    void notifyUnequiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyUnequiped
com.l2jfrozen.gameserver.model.Inventory$StatsListener -> com.l2jfrozen.gameserver.model.Inventory$StatsListener:
    com.l2jfrozen.gameserver.model.Inventory this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.Inventory) -> <init>
    void notifyUnequiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyUnequiped
    void notifyEquiped(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> notifyEquiped
com.l2jfrozen.gameserver.model.Item -> com.l2jfrozen.gameserver.model.Item:
    int id -> id
    java.lang.Enum type -> type
    java.lang.String name -> name
    com.l2jfrozen.gameserver.templates.StatsSet set -> set
    int currentLevel -> currentLevel
    com.l2jfrozen.gameserver.templates.L2Item item -> item
    void <init>() -> <init>
com.l2jfrozen.gameserver.model.ItemContainer -> com.l2jfrozen.gameserver.model.ItemContainer:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _items -> _items
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.L2Character getOwner() -> getOwner
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation getBaseLocation() -> getBaseLocation
    int getOwnerId() -> getOwnerId
    int getSize() -> getSize
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getItems() -> getItems
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getItemByItemId(int) -> getItemByItemId
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getItemByItemId(int,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> getItemByItemId
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getItemByObjectId(int) -> getItemByObjectId
    int getInventoryItemCount(int,int) -> getInventoryItemCount
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance addItem(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> addItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance addItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> addItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance addWearItem(java.lang.String,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> addWearItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance transferItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.ItemContainer,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> transferItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance destroyItem(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> destroyItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance destroyItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> destroyItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance destroyItemByItemId(java.lang.String,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> destroyItemByItemId
    void destroyAllItems(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> destroyAllItems
    int getAdena() -> getAdena
    void addItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addItem
    void removeItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> removeItem
    void refreshWeight() -> refreshWeight
    void deleteMe() -> deleteMe
    void updateDatabase() -> updateDatabase
    void restore() -> restore
    boolean validateCapacity(int) -> validateCapacity
    boolean validateWeight(int) -> validateWeight
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.ItemInfo -> com.l2jfrozen.gameserver.model.ItemInfo:
    int _objectId -> _objectId
    com.l2jfrozen.gameserver.templates.L2Item _item -> _item
    int _enchant -> _enchant
    int _augmentation -> _augmentation
    int _count -> _count
    int _price -> _price
    int _type1 -> _type1
    int _type2 -> _type2
    int _equipped -> _equipped
    int _change -> _change
    int _mana -> _mana
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,int) -> <init>
    int getObjectId() -> getObjectId
    com.l2jfrozen.gameserver.templates.L2Item getItem() -> getItem
    int getEnchant() -> getEnchant
    int getAugemtationBoni() -> getAugemtationBoni
    int getCount() -> getCount
    int getPrice() -> getPrice
    int getCustomType1() -> getCustomType1
    int getCustomType2() -> getCustomType2
    int getEquipped() -> getEquipped
    int getChange() -> getChange
    int getMana() -> getMana
com.l2jfrozen.gameserver.model.ItemRequest -> com.l2jfrozen.gameserver.model.ItemRequest:
    int _objectId -> _objectId
    int _itemId -> _itemId
    int _enchant -> _enchant
    int _count -> _count
    int _price -> _price
    void <init>(int,int,int) -> <init>
    void <init>(int,int,int,int) -> <init>
    void <init>(int,int,int,int,int) -> <init>
    int getObjectId() -> getObjectId
    int getItemId() -> getItemId
    void setCount(int) -> setCount
    int getCount() -> getCount
    int getPrice() -> getPrice
    int getEnchant() -> getEnchant
    void setEnchant(int) -> setEnchant
com.l2jfrozen.gameserver.model.L2ArmorSet -> com.l2jfrozen.gameserver.model.L2ArmorSet:
    int _chest -> _chest
    int _legs -> _legs
    int _head -> _head
    int _gloves -> _gloves
    int _feet -> _feet
    int _skillId -> _skillId
    int _shield -> _shield
    int _shieldSkillId -> _shieldSkillId
    int _enchant6Skill -> _enchant6Skill
    void <init>(int,int,int,int,int,int,int,int,int) -> <init>
    boolean containAll(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> containAll
    boolean containAll(int,int,int,int,int) -> containAll
    boolean containItem(int,int) -> containItem
    int getSkillId() -> getSkillId
    boolean containShield(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> containShield
    boolean containShield(int) -> containShield
    int getShieldSkillId() -> getShieldSkillId
    int getEnchant6skillId() -> getEnchant6skillId
    boolean isEnchanted6(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isEnchanted6
com.l2jfrozen.gameserver.model.L2Attackable -> com.l2jfrozen.gameserver.model.L2Attackable:
    javolution.util.FastMap _aggroList -> _aggroList
    boolean _isReturningToSpawnPoint -> _isReturningToSpawnPoint
    boolean _canReturnToSpawnPoint -> _canReturnToSpawnPoint
    com.l2jfrozen.gameserver.model.L2Attackable$RewardItem[] _sweepItems -> _sweepItems
    com.l2jfrozen.gameserver.model.L2Attackable$RewardItem[] _harvestItems -> _harvestItems
    boolean _seeded -> _seeded
    int _seedType -> _seedType
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _seeder -> _seeder
    boolean _overhit -> _overhit
    double _overhitDamage -> _overhitDamage
    com.l2jfrozen.gameserver.model.L2Character _overhitAttacker -> _overhitAttacker
    com.l2jfrozen.gameserver.model.L2CommandChannel _firstCommandChannelAttacked -> _firstCommandChannelAttacked
    com.l2jfrozen.gameserver.model.L2Attackable$CommandChannelTimer _commandChannelTimer -> _commandChannelTimer
    long _commandChannelLastAttack -> _commandChannelLastAttack
    boolean _absorbed -> _absorbed
    javolution.util.FastMap _absorbersList -> _absorbersList
    boolean _mustGiveExpSp -> _mustGiveExpSp
    com.l2jfrozen.gameserver.model.L2Character _mostHated -> _mostHated
    javolution.util.FastMap getAggroListRP() -> getAggroListRP
    javolution.util.FastMap getAggroList() -> getAggroList
    boolean isReturningToSpawnPoint() -> isReturningToSpawnPoint
    void setisReturningToSpawnPoint(boolean) -> setisReturningToSpawnPoint
    boolean canReturnToSpawnPoint() -> canReturnToSpawnPoint
    void setCanReturnToSpawnPoint(boolean) -> setCanReturnToSpawnPoint
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.AttackableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.ai.L2CharacterAI getAI() -> getAI
    boolean getCondition2(com.l2jfrozen.gameserver.model.L2Character) -> getCondition2
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character) -> reduceCurrentHp
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceCurrentHp
    void setMustRewardExpSp(boolean) -> setMustRewardExpSp
    boolean getMustRewardExpSP() -> getMustRewardExpSP
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void calculateRewards(com.l2jfrozen.gameserver.model.L2Character) -> calculateRewards
    void addDamage(com.l2jfrozen.gameserver.model.L2Character,int) -> addDamage
    void addDamageHate(com.l2jfrozen.gameserver.model.L2Character,int,int) -> addDamageHate
    void reduceHate(com.l2jfrozen.gameserver.model.L2Character,int) -> reduceHate
    void stopHating(com.l2jfrozen.gameserver.model.L2Character) -> stopHating
    com.l2jfrozen.gameserver.model.L2Character getMostHated() -> getMostHated
    int getHating(com.l2jfrozen.gameserver.model.L2Character) -> getHating
    com.l2jfrozen.gameserver.model.L2Attackable$RewardItem calculateRewardItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2DropData,int,boolean) -> calculateRewardItem
    com.l2jfrozen.gameserver.model.L2Attackable$RewardItem calculateCategorizedRewardItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2DropCategory,int) -> calculateCategorizedRewardItem
    int calculateLevelModifierForDrop(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> calculateLevelModifierForDrop
    void doItemDrop(com.l2jfrozen.gameserver.model.L2Character) -> doItemDrop
    void doItemDrop(com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.L2Character) -> doItemDrop
    void doEventDrop(com.l2jfrozen.gameserver.model.L2Character) -> doEventDrop
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance DropItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Attackable$RewardItem) -> DropItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance DropItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> DropItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getActiveWeapon() -> getActiveWeapon
    boolean noTarget() -> noTarget
    boolean containsTarget(com.l2jfrozen.gameserver.model.L2Character) -> containsTarget
    void clearAggroList() -> clearAggroList
    boolean isSweepActive() -> isSweepActive
    com.l2jfrozen.gameserver.model.L2Attackable$RewardItem[] takeSweep() -> takeSweep
    com.l2jfrozen.gameserver.model.L2Attackable$RewardItem[] takeHarvest() -> takeHarvest
    void overhitEnabled(boolean) -> overhitEnabled
    void setOverhitValues(com.l2jfrozen.gameserver.model.L2Character,double) -> setOverhitValues
    com.l2jfrozen.gameserver.model.L2Character getOverhitAttacker() -> getOverhitAttacker
    double getOverhitDamage() -> getOverhitDamage
    boolean isOverhit() -> isOverhit
    void absorbSoul() -> absorbSoul
    boolean isAbsorbed() -> isAbsorbed
    void addAbsorber(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> addAbsorber
    void levelSoulCrystals(com.l2jfrozen.gameserver.model.L2Character) -> levelSoulCrystals
    void exchangeCrystal(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,boolean) -> exchangeCrystal
    void resetAbsorbList() -> resetAbsorbList
    int[] calculateExpAndSp(int,int) -> calculateExpAndSp
    long calculateOverhitExp(long) -> calculateOverhitExp
    boolean isAttackable() -> isAttackable
    void onSpawn() -> onSpawn
    void setSeeded() -> setSeeded
    void setSeeded(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setSeeded
    void setSeeded(int,int) -> setSeeded
    void setSeeded(boolean) -> setSeeded
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getSeeder() -> getSeeder
    int getSeedType() -> getSeedType
    boolean isSeeded() -> isSeeded
    int getAbsorbLevel() -> getAbsorbLevel
    boolean hasRandomAnimation() -> hasRandomAnimation
    boolean isMob() -> isMob
    void setCommandChannelTimer(com.l2jfrozen.gameserver.model.L2Attackable$CommandChannelTimer) -> setCommandChannelTimer
    com.l2jfrozen.gameserver.model.L2Attackable$CommandChannelTimer getCommandChannelTimer() -> getCommandChannelTimer
    com.l2jfrozen.gameserver.model.L2CommandChannel getFirstCommandChannelAttacked() -> getFirstCommandChannelAttacked
    void setFirstCommandChannelAttacked(com.l2jfrozen.gameserver.model.L2CommandChannel) -> setFirstCommandChannelAttacked
    long getCommandChannelLastAttack() -> getCommandChannelLastAttack
    void setCommandChannelLastAttack(long) -> setCommandChannelLastAttack
    com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
com.l2jfrozen.gameserver.model.L2Attackable$AbsorberInfo -> com.l2jfrozen.gameserver.model.L2Attackable$AbsorberInfo:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _absorber -> _absorber
    int _crystalId -> _crystalId
    double _absorbedHP -> _absorbedHP
    com.l2jfrozen.gameserver.model.L2Attackable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Attackable,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,double) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.l2jfrozen.gameserver.model.L2Attackable$AggroInfo -> com.l2jfrozen.gameserver.model.L2Attackable$AggroInfo:
    com.l2jfrozen.gameserver.model.L2Character _attacker -> _attacker
    int _hate -> _hate
    int _damage -> _damage
    com.l2jfrozen.gameserver.model.L2Attackable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Attackable,com.l2jfrozen.gameserver.model.L2Character) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.l2jfrozen.gameserver.model.L2Attackable$CommandChannelTimer -> com.l2jfrozen.gameserver.model.L2Attackable$CommandChannelTimer:
    com.l2jfrozen.gameserver.model.L2Attackable _monster -> _monster
    void <init>(com.l2jfrozen.gameserver.model.L2Attackable) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Attackable$OnKillNotifyTask -> com.l2jfrozen.gameserver.model.L2Attackable$OnKillNotifyTask:
    com.l2jfrozen.gameserver.model.L2Attackable _attackable -> _attackable
    com.l2jfrozen.gameserver.model.quest.Quest _quest -> _quest
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _killer -> _killer
    boolean _isPet -> _isPet
    com.l2jfrozen.gameserver.model.L2Attackable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Attackable,com.l2jfrozen.gameserver.model.L2Attackable,com.l2jfrozen.gameserver.model.quest.Quest,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Attackable$RewardInfo -> com.l2jfrozen.gameserver.model.L2Attackable$RewardInfo:
    com.l2jfrozen.gameserver.model.L2Character _attacker -> _attacker
    int _dmg -> _dmg
    com.l2jfrozen.gameserver.model.L2Attackable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Attackable,com.l2jfrozen.gameserver.model.L2Character,int) -> <init>
    void addDamage(int) -> addDamage
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.l2jfrozen.gameserver.model.L2Attackable$RewardItem -> com.l2jfrozen.gameserver.model.L2Attackable$RewardItem:
    int _itemId -> _itemId
    int _count -> _count
    com.l2jfrozen.gameserver.model.L2Attackable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Attackable,int,int) -> <init>
    int getItemId() -> getItemId
    int getCount() -> getCount
com.l2jfrozen.gameserver.model.L2Augmentation -> com.l2jfrozen.gameserver.model.L2Augmentation:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _item -> _item
    int _effectsId -> _effectsId
    com.l2jfrozen.gameserver.model.L2Augmentation$augmentationStatBoni _boni -> _boni
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,int,com.l2jfrozen.gameserver.model.L2Skill,boolean) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,int,int,int,boolean) -> <init>
    void saveAugmentationData() -> saveAugmentationData
    void deleteAugmentationData() -> deleteAugmentationData
    int getAugmentationId() -> getAugmentationId
    com.l2jfrozen.gameserver.model.L2Skill getSkill() -> getSkill
    void applyBoni(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> applyBoni
    void removeBoni(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeBoni
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Augmentation$augmentationStatBoni -> com.l2jfrozen.gameserver.model.L2Augmentation$augmentationStatBoni:
    com.l2jfrozen.gameserver.skills.Stats[] _stats -> _stats
    float[] _values -> _values
    boolean _active -> _active
    com.l2jfrozen.gameserver.model.L2Augmentation this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Augmentation,int) -> <init>
    void applyBoni(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> applyBoni
    void removeBoni(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeBoni
com.l2jfrozen.gameserver.model.L2Character -> com.l2jfrozen.gameserver.model.L2Character:
    org.apache.log4j.Logger LOGGER -> LOGGER
    long attackStance -> attackStance
    java.util.List _attackByList -> _attackByList
    com.l2jfrozen.gameserver.model.L2Skill _lastSkillCast -> _lastSkillCast
    com.l2jfrozen.gameserver.model.L2Skill _lastPotionCast -> _lastPotionCast
    boolean _isBuffProtected -> _isBuffProtected
    boolean _isAfraid -> _isAfraid
    boolean _isConfused -> _isConfused
    boolean _isFakeDeath -> _isFakeDeath
    boolean _isFlying -> _isFlying
    boolean _isFallsdown -> _isFallsdown
    boolean _isMuted -> _isMuted
    boolean _isPsychicalMuted -> _isPsychicalMuted
    boolean _isKilledAlready -> _isKilledAlready
    boolean _isOverloaded -> _isOverloaded
    boolean _isParalyzed -> _isParalyzed
    boolean _isRiding -> _isRiding
    boolean _isPendingRevive -> _isPendingRevive
    boolean _imobilised -> _imobilised
    boolean _isRooted -> _isRooted
    boolean _isRunning -> _isRunning
    boolean _isImmobileUntilAttacked -> _isImmobileUntilAttacked
    boolean _isSleeping -> _isSleeping
    boolean _isStunned -> _isStunned
    boolean _isBetrayed -> _isBetrayed
    boolean _isBlockBuff -> _isBlockBuff
    boolean _isBlockDebuff -> _isBlockDebuff
    boolean _isTeleporting -> _isTeleporting
    boolean _isInvul -> _isInvul
    boolean _isUnkillable -> _isUnkillable
    boolean _isAttackDisabled -> _isAttackDisabled
    int _lastHealAmount -> _lastHealAmount
    com.l2jfrozen.gameserver.model.actor.stat.CharStat _stat -> _stat
    com.l2jfrozen.gameserver.model.actor.status.CharStatus _status -> _status
    com.l2jfrozen.gameserver.templates.L2CharTemplate _template -> _template
    java.lang.String _title -> _title
    java.lang.String _aiClass -> _aiClass
    double _hpUpdateIncCheck -> _hpUpdateIncCheck
    double _hpUpdateDecCheck -> _hpUpdateDecCheck
    double _hpUpdateInterval -> _hpUpdateInterval
    boolean _champion -> _champion
    com.l2jfrozen.gameserver.skills.Calculator[] _calculators -> _calculators
    java.util.Map _skills -> _skills
    java.util.Map _triggeredSkills -> _triggeredSkills
    com.l2jfrozen.gameserver.model.ChanceSkillList _chanceSkills -> _chanceSkills
    com.l2jfrozen.gameserver.model.ForceBuff _forceBuff -> _forceBuff
    boolean _blocked -> _blocked
    boolean _meditated -> _meditated
    int ZONE_PVP -> ZONE_PVP
    int ZONE_PEACE -> ZONE_PEACE
    int ZONE_SIEGE -> ZONE_SIEGE
    int ZONE_MOTHERTREE -> ZONE_MOTHERTREE
    int ZONE_CLANHALL -> ZONE_CLANHALL
    int ZONE_UNUSED -> ZONE_UNUSED
    int ZONE_NOLANDING -> ZONE_NOLANDING
    int ZONE_WATER -> ZONE_WATER
    int ZONE_JAIL -> ZONE_JAIL
    int ZONE_MONSTERTRACK -> ZONE_MONSTERTRACK
    int ZONE_SWAMP -> ZONE_SWAMP
    int ZONE_NOSUMMONFRIEND -> ZONE_NOSUMMONFRIEND
    int ZONE_OLY -> ZONE_OLY
    int ZONE_NOHQ -> ZONE_NOHQ
    int ZONE_DANGERAREA -> ZONE_DANGERAREA
    int ZONE_NOSTORE -> ZONE_NOSTORE
    int _currentZones -> _currentZones
    boolean _advanceFlag -> _advanceFlag
    int _advanceMultiplier -> _advanceMultiplier
    byte _startingRotationCounter -> _startingRotationCounter
    boolean _inTownWar -> _inTownWar
    byte _zoneValidateCounter -> _zoneValidateCounter
    int _AbnormalEffects -> _AbnormalEffects
    javolution.util.FastTable _effects -> _effects
    java.util.Map _stackedEffects -> _stackedEffects
    int ABNORMAL_EFFECT_BLEEDING -> ABNORMAL_EFFECT_BLEEDING
    int ABNORMAL_EFFECT_POISON -> ABNORMAL_EFFECT_POISON
    int ABNORMAL_EFFECT_REDCIRCLE -> ABNORMAL_EFFECT_REDCIRCLE
    int ABNORMAL_EFFECT_ICE -> ABNORMAL_EFFECT_ICE
    int ABNORMAL_EFFECT_WIND -> ABNORMAL_EFFECT_WIND
    int ABNORMAL_EFFECT_FEAR -> ABNORMAL_EFFECT_FEAR
    int ABNORMAL_EFFECT_STUN -> ABNORMAL_EFFECT_STUN
    int ABNORMAL_EFFECT_SLEEP -> ABNORMAL_EFFECT_SLEEP
    int ABNORMAL_EFFECT_MUTED -> ABNORMAL_EFFECT_MUTED
    int ABNORMAL_EFFECT_ROOT -> ABNORMAL_EFFECT_ROOT
    int ABNORMAL_EFFECT_HOLD_1 -> ABNORMAL_EFFECT_HOLD_1
    int ABNORMAL_EFFECT_HOLD_2 -> ABNORMAL_EFFECT_HOLD_2
    int ABNORMAL_EFFECT_UNKNOWN_13 -> ABNORMAL_EFFECT_UNKNOWN_13
    int ABNORMAL_EFFECT_BIG_HEAD -> ABNORMAL_EFFECT_BIG_HEAD
    int ABNORMAL_EFFECT_FLAME -> ABNORMAL_EFFECT_FLAME
    int ABNORMAL_EFFECT_UNKNOWN_16 -> ABNORMAL_EFFECT_UNKNOWN_16
    int ABNORMAL_EFFECT_GROW -> ABNORMAL_EFFECT_GROW
    int ABNORMAL_EFFECT_FLOATING_ROOT -> ABNORMAL_EFFECT_FLOATING_ROOT
    int ABNORMAL_EFFECT_DANCE_STUNNED -> ABNORMAL_EFFECT_DANCE_STUNNED
    int ABNORMAL_EFFECT_FIREROOT_STUN -> ABNORMAL_EFFECT_FIREROOT_STUN
    int ABNORMAL_EFFECT_STEALTH -> ABNORMAL_EFFECT_STEALTH
    int ABNORMAL_EFFECT_IMPRISIONING_1 -> ABNORMAL_EFFECT_IMPRISIONING_1
    int ABNORMAL_EFFECT_IMPRISIONING_2 -> ABNORMAL_EFFECT_IMPRISIONING_2
    int ABNORMAL_EFFECT_MAGIC_CIRCLE -> ABNORMAL_EFFECT_MAGIC_CIRCLE
    int ABNORMAL_EFFECT_CONFUSED -> ABNORMAL_EFFECT_CONFUSED
    int ABNORMAL_EFFECT_AFRAID -> ABNORMAL_EFFECT_AFRAID
    java.util.List _disabledSkills -> _disabledSkills
    boolean _allSkillsDisabled -> _allSkillsDisabled
    com.l2jfrozen.gameserver.model.L2Character$MoveData _move -> _move
    int _heading -> _heading
    com.l2jfrozen.gameserver.model.L2Object _target -> _target
    int _castEndTime -> _castEndTime
    int _castInterruptTime -> _castInterruptTime
    int _castPotionEndTime -> _castPotionEndTime
    int _castPotionInterruptTime -> _castPotionInterruptTime
    int _attackEndTime -> _attackEndTime
    int _attacking -> _attacking
    int _disableBowAttackEndTime -> _disableBowAttackEndTime
    com.l2jfrozen.gameserver.skills.Calculator[] NPC_STD_CALCULATOR -> NPC_STD_CALCULATOR
    com.l2jfrozen.gameserver.ai.L2CharacterAI _ai -> _ai
    java.util.concurrent.Future _skillCast -> _skillCast
    java.util.concurrent.Future _potionCast -> _potionCast
    int _clientX -> _clientX
    int _clientY -> _clientY
    int _clientZ -> _clientZ
    int _clientHeading -> _clientHeading
    java.util.List _NotifyQuestOfDeathList -> _NotifyQuestOfDeathList
    java.util.concurrent.Future _PvPRegTask -> _PvPRegTask
    long _pvpFlagLasts -> _pvpFlagLasts
    long _nextReducingHPByOverTime -> _nextReducingHPByOverTime
    long _nextReducingMPByOverTime -> _nextReducingMPByOverTime
    boolean _petrified -> _petrified
    boolean isInsideZone(int) -> isInsideZone
    void setInsideZone(int,boolean) -> setInsideZone
    boolean charIsGM() -> charIsGM
    void <init>(int,com.l2jfrozen.gameserver.templates.L2CharTemplate) -> <init>
    void initCharStatusUpdateValues() -> initCharStatusUpdateValues
    void onDecay() -> onDecay
    void onSpawn() -> onSpawn
    void onTeleported() -> onTeleported
    void addAttackerToAttackByList(com.l2jfrozen.gameserver.model.L2Character) -> addAttackerToAttackByList
    boolean isStartingRotationAllowed() -> isStartingRotationAllowed
    void broadcastPacket(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastPacket
    void broadcastPacket(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket,int) -> broadcastPacket
    boolean needHpUpdate(int) -> needHpUpdate
    void broadcastStatusUpdate() -> broadcastStatusUpdate
    void sendPacket(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> sendPacket
    boolean isinTownWar() -> isinTownWar
    void setInTownWar(boolean) -> setInTownWar
    void teleToLocation(int,int,int,boolean) -> teleToLocation
    void revalidateZone(boolean) -> revalidateZone
    void teleToLocation(int,int,int) -> teleToLocation
    void teleToLocation(com.l2jfrozen.gameserver.model.Location,boolean) -> teleToLocation
    void teleToLocation(com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType) -> teleToLocation
    void doAttack(com.l2jfrozen.gameserver.model.L2Character) -> doAttack
    boolean doAttackHitByBow(com.l2jfrozen.gameserver.network.serverpackets.Attack,com.l2jfrozen.gameserver.model.L2Character,int,int) -> doAttackHitByBow
    boolean doAttackHitByDual(com.l2jfrozen.gameserver.network.serverpackets.Attack,com.l2jfrozen.gameserver.model.L2Character,int) -> doAttackHitByDual
    boolean doAttackHitByPole(com.l2jfrozen.gameserver.network.serverpackets.Attack,int) -> doAttackHitByPole
    boolean doAttackHitSimple(com.l2jfrozen.gameserver.network.serverpackets.Attack,com.l2jfrozen.gameserver.model.L2Character,int) -> doAttackHitSimple
    boolean doAttackHitSimple(com.l2jfrozen.gameserver.network.serverpackets.Attack,com.l2jfrozen.gameserver.model.L2Character,double,int) -> doAttackHitSimple
    void doCast(com.l2jfrozen.gameserver.model.L2Skill) -> doCast
    void addTimeStamp(com.l2jfrozen.gameserver.model.L2Skill,int) -> addTimeStamp
    void removeTimeStamp(com.l2jfrozen.gameserver.model.L2Skill) -> removeTimeStamp
    void startForceBuff(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> startForceBuff
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void calculateRewards(com.l2jfrozen.gameserver.model.L2Character) -> calculateRewards
    void doRevive() -> doRevive
    void doRevive(double) -> doRevive
    void useMagic(com.l2jfrozen.gameserver.model.L2Skill) -> useMagic
    com.l2jfrozen.gameserver.ai.L2CharacterAI getAI() -> getAI
    void setAI(com.l2jfrozen.gameserver.ai.L2CharacterAI) -> setAI
    boolean hasAI() -> hasAI
    boolean isRaid() -> isRaid
    boolean isNpc() -> isNpc
    java.util.List getAttackByList() -> getAttackByList
    com.l2jfrozen.gameserver.model.L2Skill getLastSkillCast() -> getLastSkillCast
    void setLastSkillCast(com.l2jfrozen.gameserver.model.L2Skill) -> setLastSkillCast
    com.l2jfrozen.gameserver.model.L2Skill getLastPotionCast() -> getLastPotionCast
    void setLastPotionCast(com.l2jfrozen.gameserver.model.L2Skill) -> setLastPotionCast
    boolean isAfraid() -> isAfraid
    void setIsAfraid(boolean) -> setIsAfraid
    boolean isAlikeDead() -> isAlikeDead
    boolean isAllSkillsDisabled() -> isAllSkillsDisabled
    boolean isAttackingDisabled() -> isAttackingDisabled
    com.l2jfrozen.gameserver.skills.Calculator[] getCalculators() -> getCalculators
    boolean isConfused() -> isConfused
    void setIsConfused(boolean) -> setIsConfused
    boolean isDead() -> isDead
    boolean isFakeDeath() -> isFakeDeath
    void setIsFakeDeath(boolean) -> setIsFakeDeath
    boolean isFlying() -> isFlying
    void setIsFlying(boolean) -> setIsFlying
    boolean isFallsdown() -> isFallsdown
    void setIsFallsdown(boolean) -> setIsFallsdown
    boolean isImobilised() -> isImobilised
    void setIsImobilised(boolean) -> setIsImobilised
    boolean isBlockBuff() -> isBlockBuff
    void setBlockBuff(boolean) -> setBlockBuff
    boolean isBlockDebuff() -> isBlockDebuff
    void setBlockDebuff(boolean) -> setBlockDebuff
    boolean isKilledAlready() -> isKilledAlready
    void setIsKilledAlready(boolean) -> setIsKilledAlready
    boolean isMuted() -> isMuted
    void setIsMuted(boolean) -> setIsMuted
    boolean isPsychicalMuted() -> isPsychicalMuted
    void setIsPsychicalMuted(boolean) -> setIsPsychicalMuted
    boolean isMovementDisabled() -> isMovementDisabled
    boolean isOutOfControl() -> isOutOfControl
    boolean isOverloaded() -> isOverloaded
    void setIsOverloaded(boolean) -> setIsOverloaded
    boolean isParalyzed() -> isParalyzed
    void setIsParalyzed(boolean) -> setIsParalyzed
    boolean isPendingRevive() -> isPendingRevive
    void setIsPendingRevive(boolean) -> setIsPendingRevive
    com.l2jfrozen.gameserver.model.L2Summon getPet() -> getPet
    boolean isRiding() -> isRiding
    void setIsRiding(boolean) -> setIsRiding
    boolean isRooted() -> isRooted
    void setIsRooted(boolean) -> setIsRooted
    boolean isRunning() -> isRunning
    void setIsRunning(boolean) -> setIsRunning
    void setRunning() -> setRunning
    boolean isImmobileUntilAttacked() -> isImmobileUntilAttacked
    void setIsImmobileUntilAttacked(boolean) -> setIsImmobileUntilAttacked
    boolean isSleeping() -> isSleeping
    void setIsSleeping(boolean) -> setIsSleeping
    boolean isStunned() -> isStunned
    void setIsStunned(boolean) -> setIsStunned
    boolean isBetrayed() -> isBetrayed
    void setIsBetrayed(boolean) -> setIsBetrayed
    boolean isTeleporting() -> isTeleporting
    void setIsTeleporting(boolean) -> setIsTeleporting
    void setIsInvul(boolean) -> setIsInvul
    boolean isInvul() -> isInvul
    boolean isUndead() -> isUndead
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.stat.CharStat getStat() -> getStat
    void setStat(com.l2jfrozen.gameserver.model.actor.stat.CharStat) -> setStat
    com.l2jfrozen.gameserver.model.actor.status.CharStatus getStatus() -> getStatus
    void setStatus(com.l2jfrozen.gameserver.model.actor.status.CharStatus) -> setStatus
    com.l2jfrozen.gameserver.templates.L2CharTemplate getTemplate() -> getTemplate
    void setTemplate(com.l2jfrozen.gameserver.templates.L2CharTemplate) -> setTemplate
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    void setWalking() -> setWalking
    void addEffect(com.l2jfrozen.gameserver.model.L2Effect) -> addEffect
    java.util.List effectQueueInsert(com.l2jfrozen.gameserver.model.L2Effect,java.util.List) -> effectQueueInsert
    void removeEffect(com.l2jfrozen.gameserver.model.L2Effect) -> removeEffect
    void startAbnormalEffect(int) -> startAbnormalEffect
    void startImmobileUntilAttacked() -> startImmobileUntilAttacked
    void startConfused() -> startConfused
    void startFakeDeath() -> startFakeDeath
    void startFear() -> startFear
    void startMuted() -> startMuted
    void startPsychicalMuted() -> startPsychicalMuted
    void startRooted() -> startRooted
    void startSleeping() -> startSleeping
    void startStunning() -> startStunning
    void startBetray() -> startBetray
    void stopBetray() -> stopBetray
    void stopAbnormalEffect(int) -> stopAbnormalEffect
    void stopAllEffects() -> stopAllEffects
    void stopImmobileUntilAttacked(com.l2jfrozen.gameserver.model.L2Effect) -> stopImmobileUntilAttacked
    void stopConfused(com.l2jfrozen.gameserver.model.L2Effect) -> stopConfused
    void stopSkillEffects(int) -> stopSkillEffects
    void stopEffects(com.l2jfrozen.gameserver.model.EffectType) -> stopEffects
    void stopSkillEffects(com.l2jfrozen.gameserver.model.SkillType,double) -> stopSkillEffects
    void stopSkillEffects(com.l2jfrozen.gameserver.model.SkillType) -> stopSkillEffects
    void stopFakeDeath(com.l2jfrozen.gameserver.model.L2Effect) -> stopFakeDeath
    void stopFear(com.l2jfrozen.gameserver.model.L2Effect) -> stopFear
    void stopMuted(com.l2jfrozen.gameserver.model.L2Effect) -> stopMuted
    void stopPsychicalMuted(com.l2jfrozen.gameserver.model.L2Effect) -> stopPsychicalMuted
    void stopRooting(com.l2jfrozen.gameserver.model.L2Effect) -> stopRooting
    void stopSleeping(com.l2jfrozen.gameserver.model.L2Effect) -> stopSleeping
    void stopStunning(com.l2jfrozen.gameserver.model.L2Effect) -> stopStunning
    void updateAbnormalEffect() -> updateAbnormalEffect
    void updateEffectIcons() -> updateEffectIcons
    void updateEffectIcons(boolean) -> updateEffectIcons
    int getAbnormalEffect() -> getAbnormalEffect
    com.l2jfrozen.gameserver.model.L2Effect[] getAllEffects() -> getAllEffects
    com.l2jfrozen.gameserver.model.L2Effect getFirstEffect(int) -> getFirstEffect
    com.l2jfrozen.gameserver.model.L2Effect getFirstEffect(com.l2jfrozen.gameserver.model.SkillType) -> getFirstEffect
    com.l2jfrozen.gameserver.model.L2Effect getFirstEffect(com.l2jfrozen.gameserver.model.L2Skill) -> getFirstEffect
    com.l2jfrozen.gameserver.model.L2Effect getFirstEffect(com.l2jfrozen.gameserver.model.EffectType) -> getFirstEffect
    com.l2jfrozen.gameserver.skills.effects.EffectCharge getChargeEffect() -> getChargeEffect
    void addNotifyQuestOfDeath(com.l2jfrozen.gameserver.model.quest.QuestState) -> addNotifyQuestOfDeath
    java.util.List getNotifyQuestOfDeath() -> getNotifyQuestOfDeath
    void addStatFunc(com.l2jfrozen.gameserver.skills.funcs.Func) -> addStatFunc
    void addStatFuncs(com.l2jfrozen.gameserver.skills.funcs.Func[]) -> addStatFuncs
    void removeStatFunc(com.l2jfrozen.gameserver.skills.funcs.Func) -> removeStatFunc
    void removeStatFuncs(com.l2jfrozen.gameserver.skills.funcs.Func[]) -> removeStatFuncs
    void removeStatsOwner(java.lang.Object) -> removeStatsOwner
    void broadcastModifiedStats(javolution.util.FastList) -> broadcastModifiedStats
    int getHeading() -> getHeading
    void setHeading(int) -> setHeading
    int getClientX() -> getClientX
    int getClientY() -> getClientY
    int getClientZ() -> getClientZ
    int getClientHeading() -> getClientHeading
    void setClientX(int) -> setClientX
    void setClientY(int) -> setClientY
    void setClientZ(int) -> setClientZ
    void setClientHeading(int) -> setClientHeading
    int getXdestination() -> getXdestination
    int getYdestination() -> getYdestination
    int getZdestination() -> getZdestination
    boolean isInCombat() -> isInCombat
    boolean isMoving() -> isMoving
    boolean isOnGeodataPath() -> isOnGeodataPath
    boolean isCastingNow() -> isCastingNow
    boolean isCastingPotionNow() -> isCastingPotionNow
    boolean canAbortCast() -> canAbortCast
    boolean isAttackingNow() -> isAttackingNow
    boolean isAttackAborted() -> isAttackAborted
    void abortAttack() -> abortAttack
    int getAttackingBodyPart() -> getAttackingBodyPart
    void abortCast() -> abortCast
    void abortCast(boolean) -> abortCast
    boolean updatePosition(int) -> updatePosition
    void revalidateZone() -> revalidateZone
    void stopMove(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> stopMove
    void stopMove(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition,boolean) -> stopMove
    void setTarget(com.l2jfrozen.gameserver.model.L2Object) -> setTarget
    int getTargetId() -> getTargetId
    com.l2jfrozen.gameserver.model.L2Object getTarget() -> getTarget
    void moveToLocation(int,int,int,int) -> moveToLocation
    boolean moveToNextRoutePoint() -> moveToNextRoutePoint
    boolean validateMovementHeading(int) -> validateMovementHeading
    double getDistance(int,int) -> getDistance
    double getDistance(int,int,int) -> getDistance
    double getDistanceSq(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceSq
    double getDistanceSq(int,int,int) -> getDistanceSq
    double getPlanDistanceSq(com.l2jfrozen.gameserver.model.L2Object) -> getPlanDistanceSq
    double getPlanDistanceSq(int,int) -> getPlanDistanceSq
    boolean isInsideRadius(com.l2jfrozen.gameserver.model.L2Object,int,boolean,boolean) -> isInsideRadius
    boolean isInsideRadius(int,int,int,boolean) -> isInsideRadius
    boolean isInsideRadius(int,int,int,int,boolean,boolean) -> isInsideRadius
    float getWeaponExpertisePenalty() -> getWeaponExpertisePenalty
    float getArmourExpertisePenalty() -> getArmourExpertisePenalty
    void setAttackingBodypart() -> setAttackingBodypart
    boolean checkAndEquipArrows() -> checkAndEquipArrows
    void addExpAndSp(long,int) -> addExpAndSp
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getActiveWeaponInstance() -> getActiveWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getActiveWeaponItem() -> getActiveWeaponItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getSecondaryWeaponInstance() -> getSecondaryWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getSecondaryWeaponItem() -> getSecondaryWeaponItem
    void onHitTimer(com.l2jfrozen.gameserver.model.L2Character,int,boolean,boolean,boolean,boolean) -> onHitTimer
    void breakAttack() -> breakAttack
    void breakCast() -> breakCast
    void reduceArrowCount() -> reduceArrowCount
    void onForcedAttack(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onForcedAttack
    boolean isInsidePeaceZone(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isInsidePeaceZone
    boolean isInsidePeaceZone(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Object) -> isInsidePeaceZone
    java.lang.Boolean isInActiveRegion() -> isInActiveRegion
    boolean isInParty() -> isInParty
    com.l2jfrozen.gameserver.model.L2Party getParty() -> getParty
    int calculateTimeBetweenAttacks(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.templates.L2Weapon) -> calculateTimeBetweenAttacks
    int calculateReuseTime(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.templates.L2Weapon) -> calculateReuseTime
    boolean isUsingDualWeapon() -> isUsingDualWeapon
    com.l2jfrozen.gameserver.model.L2Skill addSkill(com.l2jfrozen.gameserver.model.L2Skill) -> addSkill
    void addChanceSkill(com.l2jfrozen.gameserver.model.L2Skill) -> addChanceSkill
    void removeChanceSkill(int) -> removeChanceSkill
    com.l2jfrozen.gameserver.model.L2Skill removeSkill(com.l2jfrozen.gameserver.model.L2Skill) -> removeSkill
    com.l2jfrozen.gameserver.model.L2Skill removeSkill(int) -> removeSkill
    com.l2jfrozen.gameserver.model.L2Skill removeSkill(int,boolean) -> removeSkill
    com.l2jfrozen.gameserver.model.L2Skill[] getAllSkills() -> getAllSkills
    java.util.Map getSkills() -> getSkills
    com.l2jfrozen.gameserver.model.ChanceSkillList getChanceSkills() -> getChanceSkills
    int getSkillLevel(int) -> getSkillLevel
    com.l2jfrozen.gameserver.model.L2Skill getKnownSkill(int) -> getKnownSkill
    int getBuffCount() -> getBuffCount
    int getDeBuffCount() -> getDeBuffCount
    int getMaxBuffCount() -> getMaxBuffCount
    void removeFirstBuff(int) -> removeFirstBuff
    void removeFirstDeBuff(int) -> removeFirstDeBuff
    int getDanceCount() -> getDanceCount
    boolean doesStack(com.l2jfrozen.gameserver.model.L2Skill) -> doesStack
    void onMagicLaunchedTimer(com.l2jfrozen.gameserver.model.L2Object[],com.l2jfrozen.gameserver.model.L2Skill,int,boolean) -> onMagicLaunchedTimer
    void onMagicHitTimer(com.l2jfrozen.gameserver.model.L2Object[],com.l2jfrozen.gameserver.model.L2Skill,int,boolean) -> onMagicHitTimer
    void onMagicFinalizer(com.l2jfrozen.gameserver.model.L2Object[],com.l2jfrozen.gameserver.model.L2Skill) -> onMagicFinalizer
    void notifyQuestEventSkillFinished(com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object) -> notifyQuestEventSkillFinished
    void consumeItem(int,int) -> consumeItem
    void enableSkill(com.l2jfrozen.gameserver.model.L2Skill) -> enableSkill
    void disableSkill(com.l2jfrozen.gameserver.model.L2Skill) -> disableSkill
    void disableSkill(com.l2jfrozen.gameserver.model.L2Skill,long) -> disableSkill
    boolean isSkillDisabled(com.l2jfrozen.gameserver.model.L2Skill) -> isSkillDisabled
    void disableAllSkills() -> disableAllSkills
    void enableAllSkills() -> enableAllSkills
    void callSkill(com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> callSkill
    void seeSpell(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Skill) -> seeSpell
    boolean isBehind(com.l2jfrozen.gameserver.model.L2Object) -> isBehind
    boolean isBehindTarget() -> isBehindTarget
    boolean isFacing(com.l2jfrozen.gameserver.model.L2Object,int) -> isFacing
    boolean isFront(com.l2jfrozen.gameserver.model.L2Object) -> isFront
    boolean isFrontTarget() -> isFrontTarget
    boolean isSide(com.l2jfrozen.gameserver.model.L2Object) -> isSide
    boolean isSideTarget() -> isSideTarget
    double getLevelMod() -> getLevelMod
    void setSkillCast(java.util.concurrent.Future) -> setSkillCast
    void setSkillCastEndTime(int) -> setSkillCastEndTime
    void setPvpFlagLasts(long) -> setPvpFlagLasts
    long getPvpFlagLasts() -> getPvpFlagLasts
    void startPvPFlag() -> startPvPFlag
    void stopPvpRegTask() -> stopPvpRegTask
    void stopPvPFlag() -> stopPvPFlag
    void updatePvPFlag(int) -> updatePvPFlag
    int getRandomDamage(com.l2jfrozen.gameserver.model.L2Character) -> getRandomDamage
    java.lang.String toString() -> toString
    int getAttackEndTime() -> getAttackEndTime
    int getLevel() -> getLevel
    double calcStat(com.l2jfrozen.gameserver.skills.Stats,double,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> calcStat
    int getAccuracy() -> getAccuracy
    float getAttackSpeedMultiplier() -> getAttackSpeedMultiplier
    int getCON() -> getCON
    int getDEX() -> getDEX
    double getCriticalDmg(com.l2jfrozen.gameserver.model.L2Character,double) -> getCriticalDmg
    int getCriticalHit(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getCriticalHit
    int getEvasionRate(com.l2jfrozen.gameserver.model.L2Character) -> getEvasionRate
    int getINT() -> getINT
    int getMagicalAttackRange(com.l2jfrozen.gameserver.model.L2Skill) -> getMagicalAttackRange
    int getMaxCp() -> getMaxCp
    int getMAtk(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMAtk
    int getMAtkSpd() -> getMAtkSpd
    int getMaxMp() -> getMaxMp
    int getMaxHp() -> getMaxHp
    int getMCriticalHit(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMCriticalHit
    int getMDef(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMDef
    int getMEN() -> getMEN
    double getMReuseRate(com.l2jfrozen.gameserver.model.L2Skill) -> getMReuseRate
    float getMovementSpeedMultiplier() -> getMovementSpeedMultiplier
    int getPAtk(com.l2jfrozen.gameserver.model.L2Character) -> getPAtk
    double getPAtkAnimals(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkAnimals
    double getPAtkDragons(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkDragons
    double getPAtkAngels(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkAngels
    double getPAtkInsects(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkInsects
    double getPAtkMonsters(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkMonsters
    double getPAtkPlants(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkPlants
    int getPAtkSpd() -> getPAtkSpd
    double getPAtkUndead(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkUndead
    double getPDefUndead(com.l2jfrozen.gameserver.model.L2Character) -> getPDefUndead
    double getPDefPlants(com.l2jfrozen.gameserver.model.L2Character) -> getPDefPlants
    double getPDefInsects(com.l2jfrozen.gameserver.model.L2Character) -> getPDefInsects
    double getPDefAnimals(com.l2jfrozen.gameserver.model.L2Character) -> getPDefAnimals
    double getPDefMonsters(com.l2jfrozen.gameserver.model.L2Character) -> getPDefMonsters
    double getPDefDragons(com.l2jfrozen.gameserver.model.L2Character) -> getPDefDragons
    double getPDefAngels(com.l2jfrozen.gameserver.model.L2Character) -> getPDefAngels
    int getPDef(com.l2jfrozen.gameserver.model.L2Character) -> getPDef
    double getPAtkGiants(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkGiants
    double getPAtkMagicCreatures(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkMagicCreatures
    double getPDefGiants(com.l2jfrozen.gameserver.model.L2Character) -> getPDefGiants
    double getPDefMagicCreatures(com.l2jfrozen.gameserver.model.L2Character) -> getPDefMagicCreatures
    int getPhysicalAttackRange() -> getPhysicalAttackRange
    int getRunSpeed() -> getRunSpeed
    int getShldDef() -> getShldDef
    int getSTR() -> getSTR
    int getWalkSpeed() -> getWalkSpeed
    int getWIT() -> getWIT
    void addStatusListener(com.l2jfrozen.gameserver.model.L2Character) -> addStatusListener
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character) -> reduceCurrentHp
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceCurrentHp
    void reduceCurrentHpByDamOverTime(double,com.l2jfrozen.gameserver.model.L2Character,boolean,int) -> reduceCurrentHpByDamOverTime
    void reduceCurrentMpByDamOverTime(double,int) -> reduceCurrentMpByDamOverTime
    void reduceCurrentMp(double) -> reduceCurrentMp
    void removeStatusListener(com.l2jfrozen.gameserver.model.L2Character) -> removeStatusListener
    void stopHpMpRegeneration() -> stopHpMpRegeneration
    double getCurrentCp() -> getCurrentCp
    void setCurrentCp(java.lang.Double) -> setCurrentCp
    void setCurrentCp(double) -> setCurrentCp
    double getCurrentHp() -> getCurrentHp
    void setCurrentHp(double) -> setCurrentHp
    void setCurrentHpDirect(double) -> setCurrentHpDirect
    void setCurrentCpDirect(double) -> setCurrentCpDirect
    void setCurrentMpDirect(double) -> setCurrentMpDirect
    void setCurrentHpMp(double,double) -> setCurrentHpMp
    double getCurrentMp() -> getCurrentMp
    void setCurrentMp(java.lang.Double) -> setCurrentMp
    void setCurrentMp(double) -> setCurrentMp
    void setAiClass(java.lang.String) -> setAiClass
    java.lang.String getAiClass() -> getAiClass
    void setChampion(boolean) -> setChampion
    boolean isChampion() -> isChampion
    int getLastHealAmount() -> getLastHealAmount
    void setLastHealAmount(int) -> setLastHealAmount
    boolean is_advanceFlag() -> is_advanceFlag
    void set_advanceFlag(boolean) -> set_advanceFlag
    void set_advanceMultiplier(int) -> set_advanceMultiplier
    boolean reflectSkill(com.l2jfrozen.gameserver.model.L2Skill) -> reflectSkill
    boolean vengeanceSkill(com.l2jfrozen.gameserver.model.L2Skill) -> vengeanceSkill
    void sendDamageMessage(com.l2jfrozen.gameserver.model.L2Character,int,boolean,boolean,boolean) -> sendDamageMessage
    com.l2jfrozen.gameserver.model.ForceBuff getForceBuff() -> getForceBuff
    void setForceBuff(com.l2jfrozen.gameserver.model.ForceBuff) -> setForceBuff
    boolean isFearImmune() -> isFearImmune
    void restoreHPMP() -> restoreHPMP
    void restoreCP() -> restoreCP
    void block() -> block
    void unblock() -> unblock
    boolean isBlocked() -> isBlocked
    boolean isMeditated() -> isMeditated
    void setMeditated(boolean) -> setMeditated
    void updateAttackStance() -> updateAttackStance
    long getAttackStance() -> getAttackStance
    boolean isPetrified() -> isPetrified
    void setPetrified(boolean) -> setPetrified
    boolean checkBss() -> checkBss
    void removeBss() -> removeBss
    boolean checkSps() -> checkSps
    void removeSps() -> removeSps
    boolean checkSs() -> checkSs
    void removeSs() -> removeSs
    double getRandomDamageMultiplier() -> getRandomDamageMultiplier
    void setIsBuffProtected(boolean) -> setIsBuffProtected
    boolean isBuffProtected() -> isBuffProtected
    java.util.Map get_triggeredSkills() -> get_triggeredSkills
    void setTargetTrasformedNpc(com.l2jfrozen.gameserver.model.L2Attackable) -> setTargetTrasformedNpc
    boolean isUnkillable() -> isUnkillable
    void setIsUnkillable(boolean) -> setIsUnkillable
    boolean isAttackDisabled() -> isAttackDisabled
    void setIsAttackDisabled(boolean) -> setIsAttackDisabled
    void reloadShots(boolean) -> reloadShots
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Character$1 -> com.l2jfrozen.gameserver.model.L2Character$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillTargetType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillTargetType
    int[] $SwitchMap$com$l2jfrozen$gameserver$templates$L2WeaponType -> $SwitchMap$com$l2jfrozen$gameserver$templates$L2WeaponType
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Character$AIAccessor -> com.l2jfrozen.gameserver.model.L2Character$AIAccessor:
    com.l2jfrozen.gameserver.model.L2Character this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    com.l2jfrozen.gameserver.model.L2Character getActor() -> getActor
    void moveTo(int,int,int,int) -> moveTo
    void moveTo(int,int,int) -> moveTo
    void stopMove(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> stopMove
    void doAttack(com.l2jfrozen.gameserver.model.L2Character) -> doAttack
    void doCast(com.l2jfrozen.gameserver.model.L2Skill) -> doCast
    com.l2jfrozen.gameserver.model.L2Character$NotifyAITask newNotifyTask(com.l2jfrozen.gameserver.ai.CtrlEvent) -> newNotifyTask
    void detachAI() -> detachAI
com.l2jfrozen.gameserver.model.L2Character$EnableSkill -> com.l2jfrozen.gameserver.model.L2Character$EnableSkill:
    com.l2jfrozen.gameserver.model.L2Skill _skillId -> _skillId
    com.l2jfrozen.gameserver.model.L2Character this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Character$HitTask -> com.l2jfrozen.gameserver.model.L2Character$HitTask:
    com.l2jfrozen.gameserver.model.L2Character _hitTarget -> _hitTarget
    int _damage -> _damage
    boolean _crit -> _crit
    boolean _miss -> _miss
    boolean _shld -> _shld
    boolean _soulshot -> _soulshot
    com.l2jfrozen.gameserver.model.L2Character this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,int,boolean,boolean,boolean,boolean) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Character$MagicUseTask -> com.l2jfrozen.gameserver.model.L2Character$MagicUseTask:
    com.l2jfrozen.gameserver.model.L2Object[] _targets -> _targets
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    int _coolTime -> _coolTime
    int _phase -> _phase
    com.l2jfrozen.gameserver.model.L2Character this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[],com.l2jfrozen.gameserver.model.L2Skill,int,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Character$MoveData -> com.l2jfrozen.gameserver.model.L2Character$MoveData:
    int _moveStartTime -> _moveStartTime
    int _moveTimestamp -> _moveTimestamp
    int _xDestination -> _xDestination
    int _yDestination -> _yDestination
    int _zDestination -> _zDestination
    double _xAccurate -> _xAccurate
    double _yAccurate -> _yAccurate
    double _zAccurate -> _zAccurate
    int _heading -> _heading
    boolean disregardingGeodata -> disregardingGeodata
    int onGeodataPathIndex -> onGeodataPathIndex
    com.l2jfrozen.gameserver.geo.pathfinding.Node[] geoPath -> geoPath
    int geoPathAccurateTx -> geoPathAccurateTx
    int geoPathAccurateTy -> geoPathAccurateTy
    int geoPathGtx -> geoPathGtx
    int geoPathGty -> geoPathGty
    void <init>() -> <init>
com.l2jfrozen.gameserver.model.L2Character$NotifyAITask -> com.l2jfrozen.gameserver.model.L2Character$NotifyAITask:
    com.l2jfrozen.gameserver.ai.CtrlEvent _evt -> _evt
    com.l2jfrozen.gameserver.model.L2Character this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.ai.CtrlEvent) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Character$PvPFlag -> com.l2jfrozen.gameserver.model.L2Character$PvPFlag:
    com.l2jfrozen.gameserver.model.L2Character this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Character$QueuedMagicUseTask -> com.l2jfrozen.gameserver.model.L2Character$QueuedMagicUseTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _currPlayer -> _currPlayer
    com.l2jfrozen.gameserver.model.L2Skill _queuedSkill -> _queuedSkill
    boolean _isCtrlPressed -> _isCtrlPressed
    boolean _isShiftPressed -> _isShiftPressed
    com.l2jfrozen.gameserver.model.L2Character this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Character$notifyAiTaskDelayed -> com.l2jfrozen.gameserver.model.L2Character$notifyAiTaskDelayed:
    com.l2jfrozen.gameserver.ai.CtrlEvent event -> event
    java.lang.Object object -> object
    com.l2jfrozen.gameserver.model.L2Object tgt -> tgt
    void <init>(com.l2jfrozen.gameserver.ai.CtrlEvent,java.lang.Object,com.l2jfrozen.gameserver.model.L2Object) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Clan -> com.l2jfrozen.gameserver.model.L2Clan:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _name -> _name
    int _clanId -> _clanId
    com.l2jfrozen.gameserver.model.L2ClanMember _leader -> _leader
    java.util.Map _members -> _members
    java.lang.String _allyName -> _allyName
    int _allyId -> _allyId
    int _level -> _level
    int _hasCastle -> _hasCastle
    int _hasFort -> _hasFort
    int _hasHideout -> _hasHideout
    boolean _hasCrest -> _hasCrest
    int _hiredGuards -> _hiredGuards
    int _crestId -> _crestId
    int _crestLargeId -> _crestLargeId
    int _allyCrestId -> _allyCrestId
    int _auctionBiddedAt -> _auctionBiddedAt
    long _allyPenaltyExpiryTime -> _allyPenaltyExpiryTime
    int _allyPenaltyType -> _allyPenaltyType
    long _charPenaltyExpiryTime -> _charPenaltyExpiryTime
    long _dissolvingExpiryTime -> _dissolvingExpiryTime
    int PENALTY_TYPE_CLAN_LEAVED -> PENALTY_TYPE_CLAN_LEAVED
    int PENALTY_TYPE_CLAN_DISMISSED -> PENALTY_TYPE_CLAN_DISMISSED
    int PENALTY_TYPE_DISMISS_CLAN -> PENALTY_TYPE_DISMISS_CLAN
    int PENALTY_TYPE_DISSOLVE_ALLY -> PENALTY_TYPE_DISSOLVE_ALLY
    com.l2jfrozen.gameserver.model.ItemContainer _warehouse -> _warehouse
    java.util.List _atWarWith -> _atWarWith
    java.util.List _atWarAttackers -> _atWarAttackers
    boolean _hasCrestLarge -> _hasCrestLarge
    com.l2jfrozen.gameserver.communitybbs.BB.Forum _forum -> _forum
    java.util.List _skillList -> _skillList
    java.lang.String _notice -> _notice
    boolean _noticeEnabled -> _noticeEnabled
    int MAX_NOTICE_LENGTH -> MAX_NOTICE_LENGTH
    int CP_NOTHING -> CP_NOTHING
    int CP_CL_JOIN_CLAN -> CP_CL_JOIN_CLAN
    int CP_CL_GIVE_TITLE -> CP_CL_GIVE_TITLE
    int CP_CL_VIEW_WAREHOUSE -> CP_CL_VIEW_WAREHOUSE
    int CP_CL_MANAGE_RANKS -> CP_CL_MANAGE_RANKS
    int CP_CL_PLEDGE_WAR -> CP_CL_PLEDGE_WAR
    int CP_CL_DISMISS -> CP_CL_DISMISS
    int CP_CL_REGISTER_CREST -> CP_CL_REGISTER_CREST
    int CP_CL_MASTER_RIGHTS -> CP_CL_MASTER_RIGHTS
    int CP_CL_MANAGE_LEVELS -> CP_CL_MANAGE_LEVELS
    int CP_CH_OPEN_DOOR -> CP_CH_OPEN_DOOR
    int CP_CH_OTHER_RIGHTS -> CP_CH_OTHER_RIGHTS
    int CP_CH_AUCTION -> CP_CH_AUCTION
    int CP_CH_DISMISS -> CP_CH_DISMISS
    int CP_CH_SET_FUNCTIONS -> CP_CH_SET_FUNCTIONS
    int CP_CS_OPEN_DOOR -> CP_CS_OPEN_DOOR
    int CP_CS_MANOR_ADMIN -> CP_CS_MANOR_ADMIN
    int CP_CS_MANAGE_SIEGE -> CP_CS_MANAGE_SIEGE
    int CP_CS_USE_FUNCTIONS -> CP_CS_USE_FUNCTIONS
    int CP_CS_DISMISS -> CP_CS_DISMISS
    int CP_CS_TAXES -> CP_CS_TAXES
    int CP_CS_MERCENARIES -> CP_CS_MERCENARIES
    int CP_CS_SET_FUNCTIONS -> CP_CS_SET_FUNCTIONS
    int CP_ALL -> CP_ALL
    int SUBUNIT_ACADEMY -> SUBUNIT_ACADEMY
    int SUBUNIT_ROYAL1 -> SUBUNIT_ROYAL1
    int SUBUNIT_ROYAL2 -> SUBUNIT_ROYAL2
    int SUBUNIT_KNIGHT1 -> SUBUNIT_KNIGHT1
    int SUBUNIT_KNIGHT2 -> SUBUNIT_KNIGHT2
    int SUBUNIT_KNIGHT3 -> SUBUNIT_KNIGHT3
    int SUBUNIT_KNIGHT4 -> SUBUNIT_KNIGHT4
    java.util.Map _skills -> _skills
    java.util.Map _privs -> _privs
    java.util.Map _subPledges -> _subPledges
    int _reputationScore -> _reputationScore
    int _rank -> _rank
    void <init>(int) -> <init>
    void <init>(int,java.lang.String) -> <init>
    int getClanId() -> getClanId
    void setClanId(int) -> setClanId
    int getLeaderId() -> getLeaderId
    com.l2jfrozen.gameserver.model.L2ClanMember getLeader() -> getLeader
    boolean setLeader(com.l2jfrozen.gameserver.model.L2ClanMember) -> setLeader
    void setNewLeader(com.l2jfrozen.gameserver.model.L2ClanMember,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setNewLeader
    java.lang.String getLeaderName() -> getLeaderName
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    void addClanMember(com.l2jfrozen.gameserver.model.L2ClanMember) -> addClanMember
    void addClanMember(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addClanMember
    void updateClanMember(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> updateClanMember
    com.l2jfrozen.gameserver.model.L2ClanMember getClanMember(java.lang.String) -> getClanMember
    com.l2jfrozen.gameserver.model.L2ClanMember getClanMember(int) -> getClanMember
    void removeClanMember(java.lang.String,long) -> removeClanMember
    com.l2jfrozen.gameserver.model.L2ClanMember[] getMembers() -> getMembers
    int getMembersCount() -> getMembersCount
    int getSubPledgeMembersCount(int) -> getSubPledgeMembersCount
    int getMaxNrOfMembers(int) -> getMaxNrOfMembers
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance[] getOnlineMembers(java.lang.String) -> getOnlineMembers
    int getAllyId() -> getAllyId
    java.lang.String getAllyName() -> getAllyName
    void setAllyCrestId(int) -> setAllyCrestId
    int getAllyCrestId() -> getAllyCrestId
    int getLevel() -> getLevel
    int getHasCastle() -> getHasCastle
    int getHasFort() -> getHasFort
    int getHasHideout() -> getHasHideout
    void setCrestId(int) -> setCrestId
    int getCrestId() -> getCrestId
    void setCrestLargeId(int) -> setCrestLargeId
    int getCrestLargeId() -> getCrestLargeId
    void setAllyId(int) -> setAllyId
    void setAllyName(java.lang.String) -> setAllyName
    void setHasCastle(int) -> setHasCastle
    void setHasFort(int) -> setHasFort
    void setHasHideout(int) -> setHasHideout
    void setLevel(int) -> setLevel
    boolean isMember(java.lang.String) -> isMember
    void updateClanInDB() -> updateClanInDB
    void store() -> store
    void removeMemberInDatabase(com.l2jfrozen.gameserver.model.L2ClanMember,long,long) -> removeMemberInDatabase
    void restore() -> restore
    void restoreNotice() -> restoreNotice
    void storeNotice(java.lang.String,boolean) -> storeNotice
    void setNoticeEnabled(boolean) -> setNoticeEnabled
    void setNotice(java.lang.String) -> setNotice
    boolean isNoticeEnabled() -> isNoticeEnabled
    java.lang.String getNotice() -> getNotice
    void restoreSkills() -> restoreSkills
    com.l2jfrozen.gameserver.model.L2Skill[] getAllSkills() -> getAllSkills
    com.l2jfrozen.gameserver.model.L2Skill addSkill(com.l2jfrozen.gameserver.model.L2Skill) -> addSkill
    com.l2jfrozen.gameserver.model.L2Skill addNewSkill(com.l2jfrozen.gameserver.model.L2Skill) -> addNewSkill
    void addSkillEffects() -> addSkillEffects
    void addSkillEffects(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addSkillEffects
    void broadcastToOnlineAllyMembers(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastToOnlineAllyMembers
    void broadcastToOnlineMembers(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastToOnlineMembers
    void broadcastToOtherOnlineMembers(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> broadcastToOtherOnlineMembers
    boolean hasCrest() -> hasCrest
    boolean hasCrestLarge() -> hasCrestLarge
    void setHasCrest(boolean) -> setHasCrest
    void setHasCrestLarge(boolean) -> setHasCrestLarge
    com.l2jfrozen.gameserver.model.ItemContainer getWarehouse() -> getWarehouse
    boolean isAtWarWith(java.lang.Integer) -> isAtWarWith
    boolean isAtWarAttacker(java.lang.Integer) -> isAtWarAttacker
    void setEnemyClan(com.l2jfrozen.gameserver.model.L2Clan) -> setEnemyClan
    void setEnemyClan(java.lang.Integer) -> setEnemyClan
    void setAttackerClan(com.l2jfrozen.gameserver.model.L2Clan) -> setAttackerClan
    void setAttackerClan(java.lang.Integer) -> setAttackerClan
    void deleteEnemyClan(com.l2jfrozen.gameserver.model.L2Clan) -> deleteEnemyClan
    void deleteAttackerClan(com.l2jfrozen.gameserver.model.L2Clan) -> deleteAttackerClan
    int getHiredGuards() -> getHiredGuards
    void incrementHiredGuards() -> incrementHiredGuards
    int isAtWar() -> isAtWar
    java.util.List getWarList() -> getWarList
    java.util.List getAttackerList() -> getAttackerList
    void broadcastClanStatus() -> broadcastClanStatus
    void removeSkill(int) -> removeSkill
    void removeSkill(com.l2jfrozen.gameserver.model.L2Skill) -> removeSkill
    java.util.List getSkills() -> getSkills
    void restoreSubPledges() -> restoreSubPledges
    com.l2jfrozen.gameserver.model.L2Clan$SubPledge getSubPledge(int) -> getSubPledge
    com.l2jfrozen.gameserver.model.L2Clan$SubPledge getSubPledge(java.lang.String) -> getSubPledge
    com.l2jfrozen.gameserver.model.L2Clan$SubPledge[] getAllSubPledges() -> getAllSubPledges
    com.l2jfrozen.gameserver.model.L2Clan$SubPledge createSubPledge(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,java.lang.String,java.lang.String) -> createSubPledge
    int getAvailablePledgeTypes(int) -> getAvailablePledgeTypes
    void updateSubPledgeInDB(int) -> updateSubPledgeInDB
    void restoreRankPrivs() -> restoreRankPrivs
    void initializePrivs() -> initializePrivs
    int getRankPrivs(int) -> getRankPrivs
    void setRankPrivs(int,int) -> setRankPrivs
    com.l2jfrozen.gameserver.model.L2Clan$RankPrivs[] getAllRankPrivs() -> getAllRankPrivs
    int getLeaderSubPledge(java.lang.String) -> getLeaderSubPledge
    void setReputationScore(int,boolean) -> setReputationScore
    int getReputationScore() -> getReputationScore
    void setRank(int) -> setRank
    int getRank() -> getRank
    int getAuctionBiddedAt() -> getAuctionBiddedAt
    void setAuctionBiddedAt(int,boolean) -> setAuctionBiddedAt
    boolean checkClanJoinCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> checkClanJoinCondition
    boolean checkAllyJoinCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkAllyJoinCondition
    long getAllyPenaltyExpiryTime() -> getAllyPenaltyExpiryTime
    int getAllyPenaltyType() -> getAllyPenaltyType
    void setAllyPenaltyExpiryTime(long,int) -> setAllyPenaltyExpiryTime
    long getCharPenaltyExpiryTime() -> getCharPenaltyExpiryTime
    void setCharPenaltyExpiryTime(long) -> setCharPenaltyExpiryTime
    long getDissolvingExpiryTime() -> getDissolvingExpiryTime
    void setDissolvingExpiryTime(long) -> setDissolvingExpiryTime
    void createAlly(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> createAlly
    void dissolveAlly(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> dissolveAlly
    void levelUpClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> levelUpClan
    void changeLevel(int) -> changeLevel
    void setAllyCrest(int) -> setAllyCrest
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Clan$RankPrivs -> com.l2jfrozen.gameserver.model.L2Clan$RankPrivs:
    int _rankId -> _rankId
    int _party -> _party
    int _rankPrivs -> _rankPrivs
    com.l2jfrozen.gameserver.model.L2Clan this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Clan,int,int,int) -> <init>
    int getRank() -> getRank
    int getParty() -> getParty
    int getPrivs() -> getPrivs
    void setPrivs(int) -> setPrivs
com.l2jfrozen.gameserver.model.L2Clan$SubPledge -> com.l2jfrozen.gameserver.model.L2Clan$SubPledge:
    int _id -> _id
    java.lang.String _subPledgeName -> _subPledgeName
    java.lang.String _leaderName -> _leaderName
    com.l2jfrozen.gameserver.model.L2Clan this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Clan,int,java.lang.String,java.lang.String) -> <init>
    int getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getLeaderName() -> getLeaderName
    void setLeaderName(java.lang.String) -> setLeaderName
    void setName(java.lang.String) -> setName
com.l2jfrozen.gameserver.model.L2ClanMember -> com.l2jfrozen.gameserver.model.L2ClanMember:
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    int _objectId -> _objectId
    java.lang.String _name -> _name
    java.lang.String _title -> _title
    int _powerGrade -> _powerGrade
    int _level -> _level
    int _classId -> _classId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    int _pledgeType -> _pledgeType
    int _apprentice -> _apprentice
    int _sponsor -> _sponsor
    void <init>(com.l2jfrozen.gameserver.model.L2Clan,java.lang.String,int,int,int,int,int,java.lang.String) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void setPlayerInstance(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setPlayerInstance
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayerInstance() -> getPlayerInstance
    boolean isOnline() -> isOnline
    int getClassId() -> getClassId
    int getLevel() -> getLevel
    java.lang.String getName() -> getName
    int getObjectId() -> getObjectId
    java.lang.String getTitle() -> getTitle
    int getPledgeType() -> getPledgeType
    void setPledgeType(int) -> setPledgeType
    void updatePledgeType() -> updatePledgeType
    int getPowerGrade() -> getPowerGrade
    void setPowerGrade(int) -> setPowerGrade
    void updatePowerGrade() -> updatePowerGrade
    void initApprenticeAndSponsor(int,int) -> initApprenticeAndSponsor
    int getSponsor() -> getSponsor
    int getApprentice() -> getApprentice
    java.lang.String getApprenticeOrSponsorName() -> getApprenticeOrSponsorName
    com.l2jfrozen.gameserver.model.L2Clan getClan() -> getClan
    int calculatePledgeClass(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> calculatePledgeClass
    void saveApprenticeAndSponsor(int,int) -> saveApprenticeAndSponsor
com.l2jfrozen.gameserver.model.L2CommandChannel -> com.l2jfrozen.gameserver.model.L2CommandChannel:
    java.util.List _partys -> _partys
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _commandLeader -> _commandLeader
    int _channelLvl -> _channelLvl
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void addParty(com.l2jfrozen.gameserver.model.L2Party) -> addParty
    void removeParty(com.l2jfrozen.gameserver.model.L2Party) -> removeParty
    void disbandChannel() -> disbandChannel
    int getMemberCount() -> getMemberCount
    void broadcastToChannelMembers(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastToChannelMembers
    void broadcastCSToChannelMembers(com.l2jfrozen.gameserver.network.serverpackets.CreatureSay,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> broadcastCSToChannelMembers
    java.util.List getPartys() -> getPartys
    java.util.List getMembers() -> getMembers
    int getLevel() -> getLevel
    void setChannelLeader(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setChannelLeader
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getChannelLeader() -> getChannelLeader
    boolean meetRaidWarCondition(com.l2jfrozen.gameserver.model.L2Object) -> meetRaidWarCondition
com.l2jfrozen.gameserver.model.L2DropCategory -> com.l2jfrozen.gameserver.model.L2DropCategory:
    javolution.util.FastList _drops -> _drops
    int _categoryChance -> _categoryChance
    int _categoryBalancedChance -> _categoryBalancedChance
    int _categoryType -> _categoryType
    void <init>(int) -> <init>
    void addDropData(com.l2jfrozen.gameserver.model.L2DropData,boolean) -> addDropData
    javolution.util.FastList getAllDrops() -> getAllDrops
    void clearAllDrops() -> clearAllDrops
    boolean isSweep() -> isSweep
    int getCategoryChance() -> getCategoryChance
    int getCategoryBalancedChance() -> getCategoryBalancedChance
    int getCategoryType() -> getCategoryType
    com.l2jfrozen.gameserver.model.L2DropData dropSeedAllowedDropsOnly() -> dropSeedAllowedDropsOnly
    com.l2jfrozen.gameserver.model.L2DropData dropOne(boolean) -> dropOne
com.l2jfrozen.gameserver.model.L2DropData -> com.l2jfrozen.gameserver.model.L2DropData:
    int MAX_CHANCE -> MAX_CHANCE
    int _itemId -> _itemId
    int _minDrop -> _minDrop
    int _maxDrop -> _maxDrop
    int _chance -> _chance
    java.lang.String _questID -> _questID
    java.lang.String[] _stateID -> _stateID
    void <init>() -> <init>
    int getItemId() -> getItemId
    void setItemId(int) -> setItemId
    int getMinDrop() -> getMinDrop
    int getMaxDrop() -> getMaxDrop
    int getChance() -> getChance
    void setMinDrop(int) -> setMinDrop
    void setMaxDrop(int) -> setMaxDrop
    void setChance(int) -> setChance
    java.lang.String[] getStateIDs() -> getStateIDs
    void addStates(java.lang.String[]) -> addStates
    java.lang.String getQuestID() -> getQuestID
    void setQuestID(java.lang.String) -> setQuestID
    boolean isQuestDrop() -> isQuestDrop
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.l2jfrozen.gameserver.model.L2Effect -> com.l2jfrozen.gameserver.model.L2Effect:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.skills.funcs.Func[] _emptyFunctionSet -> _emptyFunctionSet
    com.l2jfrozen.gameserver.model.L2Character _effector -> _effector
    com.l2jfrozen.gameserver.model.L2Character _effected -> _effected
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    com.l2jfrozen.gameserver.skills.funcs.Lambda _lambda -> _lambda
    com.l2jfrozen.gameserver.model.EffectState _state -> _state
    int _period -> _period
    int _periodStartTicks -> _periodStartTicks
    int _periodfirsttime -> _periodfirsttime
    com.l2jfrozen.gameserver.skills.funcs.FuncTemplate[] _funcTemplates -> _funcTemplates
    int _totalCount -> _totalCount
    int _count -> _count
    int _abnormalEffect -> _abnormalEffect
    boolean preventExitUpdate -> preventExitUpdate
    boolean _cancelEffect -> _cancelEffect
    java.util.concurrent.ScheduledFuture _currentFuture -> _currentFuture
    com.l2jfrozen.gameserver.model.L2Effect$EffectTask _currentTask -> _currentTask
    java.lang.String _stackType -> _stackType
    float _stackOrder -> _stackOrder
    com.l2jfrozen.gameserver.skills.effects.EffectTemplate _template -> _template
    boolean _inUse -> _inUse
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    int getCount() -> getCount
    int getTotalCount() -> getTotalCount
    void setCount(int) -> setCount
    void setFirstTime(int) -> setFirstTime
    int getPeriod() -> getPeriod
    int getTime() -> getTime
    int getTaskTime() -> getTaskTime
    boolean getInUse() -> getInUse
    void setInUse(boolean) -> setInUse
    java.lang.String getStackType() -> getStackType
    float getStackOrder() -> getStackOrder
    com.l2jfrozen.gameserver.model.L2Skill getSkill() -> getSkill
    com.l2jfrozen.gameserver.model.L2Character getEffector() -> getEffector
    com.l2jfrozen.gameserver.model.L2Character getEffected() -> getEffected
    boolean isSelfEffect() -> isSelfEffect
    boolean isHerbEffect() -> isHerbEffect
    double calc() -> calc
    void startEffectTask(int) -> startEffectTask
    void startEffectTaskAtFixedRate(int,int) -> startEffectTaskAtFixedRate
    void exit() -> exit
    void exit(boolean) -> exit
    void exit(boolean,boolean) -> exit
    void stopEffectTask() -> stopEffectTask
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
    void rescheduleEffect() -> rescheduleEffect
    void scheduleEffect() -> scheduleEffect
    com.l2jfrozen.gameserver.skills.funcs.Func[] getStatFuncs() -> getStatFuncs
    void addIcon(com.l2jfrozen.gameserver.network.serverpackets.MagicEffectIcons) -> addIcon
    void addPartySpelledIcon(com.l2jfrozen.gameserver.network.serverpackets.PartySpelled) -> addPartySpelledIcon
    void addOlympiadSpelledIcon(com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadSpelledInfo) -> addOlympiadSpelledIcon
    int getLevel() -> getLevel
    int getPeriodfirsttime() -> getPeriodfirsttime
    void setPeriodfirsttime(int) -> setPeriodfirsttime
    int getPeriodStartTicks() -> getPeriodStartTicks
    void setPeriodStartTicks(int) -> setPeriodStartTicks
    boolean getShowIcon() -> getShowIcon
    com.l2jfrozen.gameserver.model.EffectState get_state() -> get_state
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Effect$EffectTask -> com.l2jfrozen.gameserver.model.L2Effect$EffectTask:
    int _delay -> _delay
    int _rate -> _rate
    com.l2jfrozen.gameserver.model.L2Effect this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Effect,int,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2EnchantSkillLearn -> com.l2jfrozen.gameserver.model.L2EnchantSkillLearn:
    int id -> id
    int level -> level
    java.lang.String name -> name
    int spCost -> spCost
    int baseLvl -> baseLvl
    int minSkillLevel -> minSkillLevel
    int exp -> exp
    byte rate76 -> rate76
    byte rate77 -> rate77
    byte rate78 -> rate78
    byte rate79 -> rate79
    byte rate80 -> rate80
    void <init>(int,int,int,int,java.lang.String,int,int,byte,byte,byte,byte,byte) -> <init>
    int getId() -> getId
    int getLevel() -> getLevel
    int getBaseLevel() -> getBaseLevel
    int getMinSkillLevel() -> getMinSkillLevel
    java.lang.String getName() -> getName
    int getSpCost() -> getSpCost
    int getExp() -> getExp
    byte getRate(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getRate
com.l2jfrozen.gameserver.model.L2ExtractableItem -> com.l2jfrozen.gameserver.model.L2ExtractableItem:
    int _itemId -> _itemId
    java.util.List _products -> _products
    void <init>(int,java.util.List) -> <init>
    int getItemId() -> getItemId
    java.util.List getProductItems() -> getProductItems
com.l2jfrozen.gameserver.model.L2ExtractableProductItem -> com.l2jfrozen.gameserver.model.L2ExtractableProductItem:
    int _id -> _id
    int _ammount -> _ammount
    int _chance -> _chance
    void <init>(int,int,int) -> <init>
    int getId() -> getId
    int getAmmount() -> getAmmount
    int getChance() -> getChance
com.l2jfrozen.gameserver.model.L2Fishing -> com.l2jfrozen.gameserver.model.L2Fishing:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _fisher -> _fisher
    int _time -> _time
    int _stop -> _stop
    int _goodUse -> _goodUse
    int _anim -> _anim
    int _mode -> _mode
    int _deceptiveMode -> _deceptiveMode
    java.util.concurrent.Future _fishAiTask -> _fishAiTask
    boolean _thinking -> _thinking
    int _fishId -> _fishId
    int _fishMaxHp -> _fishMaxHp
    int _fishCurHp -> _fishCurHp
    double _regenHp -> _regenHp
    boolean _isUpperGrade -> _isUpperGrade
    int _lureType -> _lureType
    void run() -> run
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.FishData,boolean,boolean) -> <init>
    void changeHp(int,int) -> changeHp
    void doDie(boolean) -> doDie
    void aiTask() -> aiTask
    void useRealing(int,int) -> useRealing
    void usePomping(int,int) -> usePomping
    void PenaltyMonster() -> PenaltyMonster
com.l2jfrozen.gameserver.model.L2LvlupData -> com.l2jfrozen.gameserver.model.L2LvlupData:
    int _classid -> _classid
    int _classLvl -> _classLvl
    float _classHpAdd -> _classHpAdd
    float _classHpBase -> _classHpBase
    float _classHpModifier -> _classHpModifier
    float _classCpAdd -> _classCpAdd
    float _classCpBase -> _classCpBase
    float _classCpModifier -> _classCpModifier
    float _classMpAdd -> _classMpAdd
    float _classMpBase -> _classMpBase
    float _classMpModifier -> _classMpModifier
    void <init>() -> <init>
    float getClassHpAdd() -> getClassHpAdd
    void setClassHpAdd(float) -> setClassHpAdd
    float getClassHpBase() -> getClassHpBase
    void setClassHpBase(float) -> setClassHpBase
    float getClassHpModifier() -> getClassHpModifier
    void setClassHpModifier(float) -> setClassHpModifier
    float getClassCpAdd() -> getClassCpAdd
    void setClassCpAdd(float) -> setClassCpAdd
    float getClassCpBase() -> getClassCpBase
    void setClassCpBase(float) -> setClassCpBase
    float getClassCpModifier() -> getClassCpModifier
    void setClassCpModifier(float) -> setClassCpModifier
    int getClassid() -> getClassid
    void setClassid(int) -> setClassid
    int getClassLvl() -> getClassLvl
    void setClassLvl(int) -> setClassLvl
    float getClassMpAdd() -> getClassMpAdd
    void setClassMpAdd(float) -> setClassMpAdd
    float getClassMpBase() -> getClassMpBase
    void setClassMpBase(float) -> setClassMpBase
    float getClassMpModifier() -> getClassMpModifier
    void setClassMpModifier(float) -> setClassMpModifier
com.l2jfrozen.gameserver.model.L2Macro -> com.l2jfrozen.gameserver.model.L2Macro:
    int CMD_TYPE_SKILL -> CMD_TYPE_SKILL
    int CMD_TYPE_ACTION -> CMD_TYPE_ACTION
    int CMD_TYPE_SHORTCUT -> CMD_TYPE_SHORTCUT
    int id -> id
    int icon -> icon
    java.lang.String name -> name
    java.lang.String descr -> descr
    java.lang.String acronym -> acronym
    com.l2jfrozen.gameserver.model.L2Macro$L2MacroCmd[] commands -> commands
    void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,com.l2jfrozen.gameserver.model.L2Macro$L2MacroCmd[]) -> <init>
com.l2jfrozen.gameserver.model.L2Macro$L2MacroCmd -> com.l2jfrozen.gameserver.model.L2Macro$L2MacroCmd:
    int entry -> entry
    int type -> type
    int d1 -> d1
    int d2 -> d2
    java.lang.String cmd -> cmd
    void <init>(int,int,int,int,java.lang.String) -> <init>
com.l2jfrozen.gameserver.model.L2Manor -> com.l2jfrozen.gameserver.model.L2Manor:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.L2Manor _instance -> _instance
    javolution.util.FastMap _seeds -> _seeds
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.L2Manor getInstance() -> getInstance
    javolution.util.FastList getAllCrops() -> getAllCrops
    int getSeedBasicPrice(int) -> getSeedBasicPrice
    int getSeedBasicPriceByCrop(int) -> getSeedBasicPriceByCrop
    int getCropBasicPrice(int) -> getCropBasicPrice
    int getMatureCrop(int) -> getMatureCrop
    int getSeedBuyPrice(int) -> getSeedBuyPrice
    int getSeedMinLevel(int) -> getSeedMinLevel
    int getSeedMaxLevel(int) -> getSeedMaxLevel
    int getSeedLevelByCrop(int) -> getSeedLevelByCrop
    int getSeedLevel(int) -> getSeedLevel
    boolean isAlternative(int) -> isAlternative
    int getCropType(int) -> getCropType
    int getRewardItem(int,int) -> getRewardItem
    int getRewardItemBySeed(int,int) -> getRewardItemBySeed
    javolution.util.FastList getCropsForCastle(int) -> getCropsForCastle
    javolution.util.FastList getSeedsForCastle(int) -> getSeedsForCastle
    int getCastleIdForSeed(int) -> getCastleIdForSeed
    int getSeedSaleLimit(int) -> getSeedSaleLimit
    int getCropPuchaseLimit(int) -> getCropPuchaseLimit
    void parseData() -> parseData
    com.l2jfrozen.gameserver.model.L2Manor$SeedData parseList(java.lang.String) -> parseList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Manor$SeedData -> com.l2jfrozen.gameserver.model.L2Manor$SeedData:
    int _id -> _id
    int _level -> _level
    int _crop -> _crop
    int _mature -> _mature
    int _type1 -> _type1
    int _type2 -> _type2
    int _manorId -> _manorId
    int _isAlternative -> _isAlternative
    int _limitSeeds -> _limitSeeds
    int _limitCrops -> _limitCrops
    com.l2jfrozen.gameserver.model.L2Manor this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Manor,int,int,int) -> <init>
    void setData(int,int,int,int,int,int,int) -> setData
    int getManorId() -> getManorId
    int getId() -> getId
    int getCrop() -> getCrop
    int getMature() -> getMature
    int getReward(int) -> getReward
    int getLevel() -> getLevel
    boolean isAlternative() -> isAlternative
    int getSeedLimit() -> getSeedLimit
    int getCropLimit() -> getCropLimit
com.l2jfrozen.gameserver.model.L2ManufactureItem -> com.l2jfrozen.gameserver.model.L2ManufactureItem:
    int _recipeId -> _recipeId
    int _cost -> _cost
    boolean _isDwarven -> _isDwarven
    void <init>(int,int) -> <init>
    int getRecipeId() -> getRecipeId
    int getCost() -> getCost
    boolean isDwarven() -> isDwarven
com.l2jfrozen.gameserver.model.L2ManufactureList -> com.l2jfrozen.gameserver.model.L2ManufactureList:
    java.util.List _list -> _list
    boolean _confirmed -> _confirmed
    java.lang.String _manufactureStoreName -> _manufactureStoreName
    void <init>() -> <init>
    int size() -> size
    void setConfirmedTrade(boolean) -> setConfirmedTrade
    boolean hasConfirmed() -> hasConfirmed
    void setStoreName(java.lang.String) -> setStoreName
    java.lang.String getStoreName() -> getStoreName
    void add(com.l2jfrozen.gameserver.model.L2ManufactureItem) -> add
    java.util.List getList() -> getList
    void setList(java.util.List) -> setList
com.l2jfrozen.gameserver.model.L2MinionData -> com.l2jfrozen.gameserver.model.L2MinionData:
    int _minionId -> _minionId
    int _minionAmount -> _minionAmount
    int _minionAmountMin -> _minionAmountMin
    int _minionAmountMax -> _minionAmountMax
    void <init>() -> <init>
    void setMinionId(int) -> setMinionId
    int getMinionId() -> getMinionId
    void setAmountMin(int) -> setAmountMin
    void setAmountMax(int) -> setAmountMax
    void setAmount(int) -> setAmount
    int getAmount() -> getAmount
com.l2jfrozen.gameserver.model.L2NpcWalkerNode -> com.l2jfrozen.gameserver.model.L2NpcWalkerNode:
    int _routeId -> _routeId
    int _npcId -> _npcId
    java.lang.String _movePoint -> _movePoint
    java.lang.String _chatText -> _chatText
    int _moveX -> _moveX
    int _moveY -> _moveY
    int _moveZ -> _moveZ
    int _delay -> _delay
    boolean _running -> _running
    void setRunning(boolean) -> setRunning
    void setRouteId(int) -> setRouteId
    void setNpcId(int) -> setNpcId
    void setMovePoint(java.lang.String) -> setMovePoint
    void setChatText(java.lang.String) -> setChatText
    void setMoveX(int) -> setMoveX
    void setMoveY(int) -> setMoveY
    void setMoveZ(int) -> setMoveZ
    void setDelay(int) -> setDelay
    int getRouteId() -> getRouteId
    int getNpcId() -> getNpcId
    java.lang.String getMovePoint() -> getMovePoint
    java.lang.String getChatText() -> getChatText
    int getMoveX() -> getMoveX
    int getMoveY() -> getMoveY
    int getMoveZ() -> getMoveZ
    int getDelay() -> getDelay
    boolean getRunning() -> getRunning
    void <init>() -> <init>
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
com.l2jfrozen.gameserver.model.L2Object -> com.l2jfrozen.gameserver.model.L2Object:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean _isVisible -> _isVisible
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList _knownList -> _knownList
    java.lang.String _name -> _name
    int _objectId -> _objectId
    com.l2jfrozen.gameserver.model.actor.poly.ObjectPoly _poly -> _poly
    com.l2jfrozen.gameserver.model.actor.position.ObjectPosition _position -> _position
    int _instanceId -> _instanceId
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(int) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onActionShift(com.l2jfrozen.gameserver.network.L2GameClient) -> onActionShift
    void onActionShift(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onActionShift
    void onForcedAttack(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onForcedAttack
    void onSpawn() -> onSpawn
    void setXYZ(int,int,int) -> setXYZ
    void setXYZInvisible(int,int,int) -> setXYZInvisible
    int getX() -> getX
    int getY() -> getY
    int getZ() -> getZ
    void decayMe() -> decayMe
    void pickupMe(com.l2jfrozen.gameserver.model.L2Character) -> pickupMe
    void refreshID() -> refreshID
    void spawnMe() -> spawnMe
    void spawnMe(int,int,int) -> spawnMe
    void toggleVisible() -> toggleVisible
    boolean isAttackable() -> isAttackable
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    boolean isMarker() -> isMarker
    boolean isVisible() -> isVisible
    void setIsVisible(boolean) -> setIsVisible
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
    void setKnownList(com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList) -> setKnownList
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getObjectId() -> getObjectId
    com.l2jfrozen.gameserver.model.actor.poly.ObjectPoly getPoly() -> getPoly
    com.l2jfrozen.gameserver.model.actor.position.ObjectPosition getPosition() -> getPosition
    com.l2jfrozen.gameserver.model.L2WorldRegion getWorldRegion() -> getWorldRegion
    int getInstanceId() -> getInstanceId
    void setInstanceId(int) -> setInstanceId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActingPlayer() -> getActingPlayer
    java.lang.String toString() -> toString
    boolean isCharacter() -> isCharacter
    boolean isPlayable() -> isPlayable
    boolean isPlayer() -> isPlayer
    boolean isPet() -> isPet
    boolean isSummon() -> isSummon
    boolean isNpc() -> isNpc
    boolean isMonster() -> isMonster
    boolean isItem() -> isItem
    boolean isRaid() -> isRaid
    boolean isBoss() -> isBoss
    boolean isTrap() -> isTrap
    boolean isDoor() -> isDoor
    boolean isArtefact() -> isArtefact
    boolean isSiegeGuard() -> isSiegeGuard
    boolean isBoat() -> isBoat
    boolean isVehicle() -> isVehicle
    boolean isMinion() -> isMinion
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Party -> com.l2jfrozen.gameserver.model.L2Party:
    double[] BONUS_EXP_SP -> BONUS_EXP_SP
    int PARTY_POSITION_BROADCAST -> PARTY_POSITION_BROADCAST
    int ITEM_LOOTER -> ITEM_LOOTER
    int ITEM_RANDOM -> ITEM_RANDOM
    int ITEM_RANDOM_SPOIL -> ITEM_RANDOM_SPOIL
    int ITEM_ORDER -> ITEM_ORDER
    int ITEM_ORDER_SPOIL -> ITEM_ORDER_SPOIL
    javolution.util.FastList _members -> _members
    boolean _pendingInvitation -> _pendingInvitation
    long _pendingInviteTimeout -> _pendingInviteTimeout
    int _partyLvl -> _partyLvl
    int _itemDistribution -> _itemDistribution
    int _itemLastLoot -> _itemLastLoot
    com.l2jfrozen.gameserver.model.L2CommandChannel _commandChannel -> _commandChannel
    com.l2jfrozen.gameserver.model.entity.DimensionalRift _dr -> _dr
    java.util.concurrent.Future _positionBroadcastTask -> _positionBroadcastTask
    com.l2jfrozen.gameserver.network.serverpackets.PartyMemberPosition _positionPacket -> _positionPacket
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> <init>
    int getMemberCount() -> getMemberCount
    boolean getPendingInvitation() -> getPendingInvitation
    void setPendingInvitation(boolean) -> setPendingInvitation
    boolean isInvitationRequestExpired() -> isInvitationRequestExpired
    javolution.util.FastList getPartyMembers() -> getPartyMembers
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getCheckedRandomMember(int,com.l2jfrozen.gameserver.model.L2Character) -> getCheckedRandomMember
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getCheckedNextLooter(int,com.l2jfrozen.gameserver.model.L2Character) -> getCheckedNextLooter
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActualLooter(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean,com.l2jfrozen.gameserver.model.L2Character) -> getActualLooter
    boolean isLeader(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isLeader
    int getPartyLeaderOID() -> getPartyLeaderOID
    void broadcastToPartyMembers(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastToPartyMembers
    void broadcastToPartyMembersNewLeader() -> broadcastToPartyMembersNewLeader
    void broadcastCSToPartyMembers(com.l2jfrozen.gameserver.network.serverpackets.CreatureSay,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> broadcastCSToPartyMembers
    void broadcastToPartyMembers(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastToPartyMembers
    void addPartyMember(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addPartyMember
    void removePartyMember(java.lang.String) -> removePartyMember
    void removePartyMember(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removePartyMember
    void removePartyMember(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> removePartyMember
    void changePartyLeader(java.lang.String) -> changePartyLeader
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayerByName(java.lang.String) -> getPlayerByName
    void distributeItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> distributeItem
    void distributeItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Attackable$RewardItem,boolean,com.l2jfrozen.gameserver.model.L2Attackable) -> distributeItem
    void distributeAdena(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,com.l2jfrozen.gameserver.model.L2Character) -> distributeAdena
    void distributeXpAndSp(long,int,java.util.List,int) -> distributeXpAndSp
    void recalculatePartyLevel() -> recalculatePartyLevel
    java.util.List getValidMembers(java.util.List,int) -> getValidMembers
    double getBaseExpSpBonus(int) -> getBaseExpSpBonus
    double getExpBonus(int) -> getExpBonus
    double getSpBonus(int) -> getSpBonus
    int getLevel() -> getLevel
    int getLootDistribution() -> getLootDistribution
    boolean isInCommandChannel() -> isInCommandChannel
    com.l2jfrozen.gameserver.model.L2CommandChannel getCommandChannel() -> getCommandChannel
    void setCommandChannel(com.l2jfrozen.gameserver.model.L2CommandChannel) -> setCommandChannel
    boolean isInDimensionalRift() -> isInDimensionalRift
    void setDimensionalRift(com.l2jfrozen.gameserver.model.entity.DimensionalRift) -> setDimensionalRift
    com.l2jfrozen.gameserver.model.entity.DimensionalRift getDimensionalRift() -> getDimensionalRift
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getLeader() -> getLeader
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Party$PositionBroadcast -> com.l2jfrozen.gameserver.model.L2Party$PositionBroadcast:
    com.l2jfrozen.gameserver.model.L2Party this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Party) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2PetData -> com.l2jfrozen.gameserver.model.L2PetData:
    java.lang.String PET_TYPE -> PET_TYPE
    java.lang.String PET_LEVEL -> PET_LEVEL
    java.lang.String PET_MAX_EXP -> PET_MAX_EXP
    java.lang.String PET_MAX_HP -> PET_MAX_HP
    java.lang.String PET_MAX_MP -> PET_MAX_MP
    java.lang.String PET_PATK -> PET_PATK
    java.lang.String PET_PDEF -> PET_PDEF
    java.lang.String PET_MATK -> PET_MATK
    java.lang.String PET_MDEF -> PET_MDEF
    java.lang.String PET_ACCURACY -> PET_ACCURACY
    java.lang.String PET_EVASION -> PET_EVASION
    java.lang.String PET_CRITICAL -> PET_CRITICAL
    java.lang.String PET_SPEED -> PET_SPEED
    java.lang.String PET_ATK_SPEED -> PET_ATK_SPEED
    java.lang.String PET_CAST_SPEED -> PET_CAST_SPEED
    java.lang.String PET_MAX_FEED -> PET_MAX_FEED
    java.lang.String PET_FEED_BATTLE -> PET_FEED_BATTLE
    java.lang.String PET_FEED_NORMAL -> PET_FEED_NORMAL
    java.lang.String PET_MAX_LOAD -> PET_MAX_LOAD
    java.lang.String PET_REGEN_HP -> PET_REGEN_HP
    java.lang.String PET_REGEN_MP -> PET_REGEN_MP
    java.lang.String OWNER_EXP_TAKEN -> OWNER_EXP_TAKEN
    int _petId -> _petId
    int _petLevel -> _petLevel
    float _ownerExpTaken -> _ownerExpTaken
    long _petMaxExp -> _petMaxExp
    int _petMaxHP -> _petMaxHP
    int _petMaxMP -> _petMaxMP
    int _petPAtk -> _petPAtk
    int _petPDef -> _petPDef
    int _petMAtk -> _petMAtk
    int _petMDef -> _petMDef
    int _petAccuracy -> _petAccuracy
    int _petEvasion -> _petEvasion
    int _petCritical -> _petCritical
    int _petSpeed -> _petSpeed
    int _petAtkSpeed -> _petAtkSpeed
    int _petCastSpeed -> _petCastSpeed
    int _petMaxFeed -> _petMaxFeed
    int _petFeedBattle -> _petFeedBattle
    int _petFeedNormal -> _petFeedNormal
    int _petMaxLoad -> _petMaxLoad
    int _petRegenHP -> _petRegenHP
    int _petRegenMP -> _petRegenMP
    void <init>() -> <init>
    void setStat(java.lang.String,int) -> setStat
    void setStat(java.lang.String,long) -> setStat
    void setStat(java.lang.String,float) -> setStat
    int getPetID() -> getPetID
    void setPetID(int) -> setPetID
    int getPetLevel() -> getPetLevel
    void setPetLevel(int) -> setPetLevel
    long getPetMaxExp() -> getPetMaxExp
    void setPetMaxExp(long) -> setPetMaxExp
    float getOwnerExpTaken() -> getOwnerExpTaken
    void setOwnerExpTaken(float) -> setOwnerExpTaken
    int getPetMaxHP() -> getPetMaxHP
    void setPetMaxHP(int) -> setPetMaxHP
    int getPetMaxMP() -> getPetMaxMP
    void setPetMaxMP(int) -> setPetMaxMP
    int getPetPAtk() -> getPetPAtk
    void setPetPAtk(int) -> setPetPAtk
    int getPetPDef() -> getPetPDef
    void setPetPDef(int) -> setPetPDef
    int getPetMAtk() -> getPetMAtk
    void setPetMAtk(int) -> setPetMAtk
    int getPetMDef() -> getPetMDef
    void setPetMDef(int) -> setPetMDef
    int getPetAccuracy() -> getPetAccuracy
    void setPetAccuracy(int) -> setPetAccuracy
    int getPetEvasion() -> getPetEvasion
    void setPetEvasion(int) -> setPetEvasion
    int getPetCritical() -> getPetCritical
    void setPetCritical(int) -> setPetCritical
    int getPetSpeed() -> getPetSpeed
    void setPetSpeed(int) -> setPetSpeed
    int getPetAtkSpeed() -> getPetAtkSpeed
    void setPetAtkSpeed(int) -> setPetAtkSpeed
    int getPetCastSpeed() -> getPetCastSpeed
    void setPetCastSpeed(int) -> setPetCastSpeed
    int getPetMaxFeed() -> getPetMaxFeed
    void setPetMaxFeed(int) -> setPetMaxFeed
    int getPetFeedNormal() -> getPetFeedNormal
    void setPetFeedNormal(int) -> setPetFeedNormal
    int getPetFeedBattle() -> getPetFeedBattle
    void setPetFeedBattle(int) -> setPetFeedBattle
    int getPetMaxLoad() -> getPetMaxLoad
    void setPetMaxLoad(int) -> setPetMaxLoad
    int getPetRegenHP() -> getPetRegenHP
    void setPetRegenHP(int) -> setPetRegenHP
    int getPetRegenMP() -> getPetRegenMP
    void setPetRegenMP(int) -> setPetRegenMP
    java.lang.String toString() -> toString
com.l2jfrozen.gameserver.model.L2PledgeSkillLearn -> com.l2jfrozen.gameserver.model.L2PledgeSkillLearn:
    int _id -> _id
    int _level -> _level
    java.lang.String _name -> _name
    int _repCost -> _repCost
    int _baseLvl -> _baseLvl
    int _itemId -> _itemId
    void <init>(int,int,int,java.lang.String,int,int) -> <init>
    int getId() -> getId
    int getLevel() -> getLevel
    int getBaseLevel() -> getBaseLevel
    java.lang.String getName() -> getName
    int getRepCost() -> getRepCost
    int getItemId() -> getItemId
com.l2jfrozen.gameserver.model.L2Potion -> com.l2jfrozen.gameserver.model.L2Potion:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.concurrent.Future _potionhpRegTask -> _potionhpRegTask
    java.util.concurrent.Future _potionmpRegTask -> _potionmpRegTask
    int _milliseconds -> _milliseconds
    double _effect -> _effect
    int _duration -> _duration
    int _potion -> _potion
    java.lang.Object _mpLock -> _mpLock
    java.lang.Object _hpLock -> _hpLock
    void <init>(int) -> <init>
    void stopPotionHpRegeneration() -> stopPotionHpRegeneration
    void setCurrentHpPotion2() -> setCurrentHpPotion2
    void setCurrentHpPotion1(com.l2jfrozen.gameserver.model.L2Character,int) -> setCurrentHpPotion1
    void startPotionMpRegeneration(com.l2jfrozen.gameserver.model.L2Character) -> startPotionMpRegeneration
    void stopPotionMpRegeneration() -> stopPotionMpRegeneration
    void setCurrentMpPotion2() -> setCurrentMpPotion2
    void setCurrentMpPotion1(com.l2jfrozen.gameserver.model.L2Character,int) -> setCurrentMpPotion1
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Potion$PotionHpHealing -> com.l2jfrozen.gameserver.model.L2Potion$PotionHpHealing:
    com.l2jfrozen.gameserver.model.L2Character _instance -> _instance
    com.l2jfrozen.gameserver.model.L2Potion this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Potion,com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Potion$PotionMpHealing -> com.l2jfrozen.gameserver.model.L2Potion$PotionMpHealing:
    com.l2jfrozen.gameserver.model.L2Character _instance -> _instance
    com.l2jfrozen.gameserver.model.L2Potion this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Potion,com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2Radar -> com.l2jfrozen.gameserver.model.L2Radar:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    java.util.Vector _markers -> _markers
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void addMarker(int,int,int) -> addMarker
    void removeMarker(int,int,int) -> removeMarker
    void removeAllMarkers() -> removeAllMarkers
    void loadMarkers() -> loadMarkers
com.l2jfrozen.gameserver.model.L2Radar$RadarMarker -> com.l2jfrozen.gameserver.model.L2Radar$RadarMarker:
    int _type -> _type
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(int,int,int) -> <init>
    boolean equals(java.lang.Object) -> equals
com.l2jfrozen.gameserver.model.L2Radar$RadarOnPlayer -> com.l2jfrozen.gameserver.model.L2Radar$RadarOnPlayer:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _myTarget -> _myTarget
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _me -> _me
    com.l2jfrozen.gameserver.model.L2Radar this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Radar,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2RecipeList -> com.l2jfrozen.gameserver.model.L2RecipeList:
    com.l2jfrozen.gameserver.model.actor.instance.L2RecipeInstance[] _recipes -> _recipes
    int _id -> _id
    int _level -> _level
    int _recipeId -> _recipeId
    java.lang.String _recipeName -> _recipeName
    int _successRate -> _successRate
    int _mpCost -> _mpCost
    int _itemId -> _itemId
    int _count -> _count
    boolean _isDwarvenRecipe -> _isDwarvenRecipe
    void <init>(int,int,int,java.lang.String,int,int,int,int,boolean) -> <init>
    void addRecipe(com.l2jfrozen.gameserver.model.actor.instance.L2RecipeInstance) -> addRecipe
    int getId() -> getId
    int getLevel() -> getLevel
    int getRecipeId() -> getRecipeId
    java.lang.String getRecipeName() -> getRecipeName
    int getSuccessRate() -> getSuccessRate
    int getMpCost() -> getMpCost
    boolean isConsumable() -> isConsumable
    int getItemId() -> getItemId
    int getCount() -> getCount
    boolean isDwarvenRecipe() -> isDwarvenRecipe
    com.l2jfrozen.gameserver.model.actor.instance.L2RecipeInstance[] getRecipes() -> getRecipes
com.l2jfrozen.gameserver.model.L2Request -> com.l2jfrozen.gameserver.model.L2Request:
    int REQUEST_TIMEOUT -> REQUEST_TIMEOUT
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _partner -> _partner
    boolean _isRequestor -> _isRequestor
    boolean _isAnswerer -> _isAnswerer
    com.l2jfrozen.gameserver.network.clientpackets.L2GameClientPacket _requestPacket -> _requestPacket
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void clear() -> clear
    void setPartner(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setPartner
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPartner() -> getPartner
    void setRequestPacket(com.l2jfrozen.gameserver.network.clientpackets.L2GameClientPacket) -> setRequestPacket
    com.l2jfrozen.gameserver.network.clientpackets.L2GameClientPacket getRequestPacket() -> getRequestPacket
    boolean setRequest(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.network.clientpackets.L2GameClientPacket) -> setRequest
    void setOnRequestTimer(boolean) -> setOnRequestTimer
    void onRequestResponse() -> onRequestResponse
    boolean isProcessingRequest() -> isProcessingRequest
com.l2jfrozen.gameserver.model.L2Request$1 -> com.l2jfrozen.gameserver.model.L2Request$1:
    com.l2jfrozen.gameserver.model.L2Request this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Request) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.L2ShortCut -> com.l2jfrozen.gameserver.model.L2ShortCut:
    int TYPE_ITEM -> TYPE_ITEM
    int TYPE_SKILL -> TYPE_SKILL
    int TYPE_ACTION -> TYPE_ACTION
    int TYPE_MACRO -> TYPE_MACRO
    int TYPE_RECIPE -> TYPE_RECIPE
    int _slot -> _slot
    int _page -> _page
    int _type -> _type
    int _id -> _id
    int _level -> _level
    void <init>(int,int,int,int,int,int) -> <init>
    int getId() -> getId
    int getLevel() -> getLevel
    int getPage() -> getPage
    int getSlot() -> getSlot
    int getType() -> getType
com.l2jfrozen.gameserver.model.L2SiegeClan -> com.l2jfrozen.gameserver.model.L2SiegeClan:
    int _clanId -> _clanId
    java.util.List _flag -> _flag
    int _numFlagsAdded -> _numFlagsAdded
    com.l2jfrozen.gameserver.model.SiegeClanType _type -> _type
    void <init>(int,com.l2jfrozen.gameserver.model.SiegeClanType) -> <init>
    int getNumFlags() -> getNumFlags
    void addFlag(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> addFlag
    boolean removeFlag(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> removeFlag
    void removeFlags() -> removeFlags
    int getClanId() -> getClanId
    java.util.List getFlag() -> getFlag
    com.l2jfrozen.gameserver.model.SiegeClanType getType() -> getType
    void setType(com.l2jfrozen.gameserver.model.SiegeClanType) -> setType
com.l2jfrozen.gameserver.model.L2Skill -> com.l2jfrozen.gameserver.model.L2Skill:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int SKILL_CUBIC_MASTERY -> SKILL_CUBIC_MASTERY
    int SKILL_LUCKY -> SKILL_LUCKY
    int SKILL_CREATE_COMMON -> SKILL_CREATE_COMMON
    int SKILL_CREATE_DWARVEN -> SKILL_CREATE_DWARVEN
    int SKILL_CRYSTALLIZE -> SKILL_CRYSTALLIZE
    int SKILL_DIVINE_INSPIRATION -> SKILL_DIVINE_INSPIRATION
    int SKILL_FAKE_INT -> SKILL_FAKE_INT
    int SKILL_FAKE_WIT -> SKILL_FAKE_WIT
    int SKILL_FAKE_MEN -> SKILL_FAKE_MEN
    int SKILL_FAKE_CON -> SKILL_FAKE_CON
    int SKILL_FAKE_DEX -> SKILL_FAKE_DEX
    int SKILL_FAKE_STR -> SKILL_FAKE_STR
    int _targetConsumeId -> _targetConsumeId
    int _targetConsume -> _targetConsume
    com.l2jfrozen.gameserver.model.ChanceCondition _chanceCondition -> _chanceCondition
    int ELEMENT_WIND -> ELEMENT_WIND
    int ELEMENT_FIRE -> ELEMENT_FIRE
    int ELEMENT_WATER -> ELEMENT_WATER
    int ELEMENT_EARTH -> ELEMENT_EARTH
    int ELEMENT_HOLY -> ELEMENT_HOLY
    int ELEMENT_DARK -> ELEMENT_DARK
    int STAT_PATK -> STAT_PATK
    int STAT_PDEF -> STAT_PDEF
    int STAT_MATK -> STAT_MATK
    int STAT_MDEF -> STAT_MDEF
    int STAT_MAXHP -> STAT_MAXHP
    int STAT_MAXMP -> STAT_MAXMP
    int STAT_CURHP -> STAT_CURHP
    int STAT_CURMP -> STAT_CURMP
    int STAT_HPREGEN -> STAT_HPREGEN
    int STAT_MPREGEN -> STAT_MPREGEN
    int STAT_CASTINGSPEED -> STAT_CASTINGSPEED
    int STAT_ATKSPD -> STAT_ATKSPD
    int STAT_CRITDAM -> STAT_CRITDAM
    int STAT_CRITRATE -> STAT_CRITRATE
    int STAT_FIRERES -> STAT_FIRERES
    int STAT_WINDRES -> STAT_WINDRES
    int STAT_WATERRES -> STAT_WATERRES
    int STAT_EARTHRES -> STAT_EARTHRES
    int STAT_HOLYRES -> STAT_HOLYRES
    int STAT_DARKRES -> STAT_DARKRES
    int STAT_ROOTRES -> STAT_ROOTRES
    int STAT_SLEEPRES -> STAT_SLEEPRES
    int STAT_CONFUSIONRES -> STAT_CONFUSIONRES
    int STAT_BREATH -> STAT_BREATH
    int STAT_AGGRESSION -> STAT_AGGRESSION
    int STAT_BLEED -> STAT_BLEED
    int STAT_POISON -> STAT_POISON
    int STAT_STUN -> STAT_STUN
    int STAT_ROOT -> STAT_ROOT
    int STAT_MOVEMENT -> STAT_MOVEMENT
    int STAT_EVASION -> STAT_EVASION
    int STAT_ACCURACY -> STAT_ACCURACY
    int STAT_COMBAT_STRENGTH -> STAT_COMBAT_STRENGTH
    int STAT_COMBAT_WEAKNESS -> STAT_COMBAT_WEAKNESS
    int STAT_ATTACK_RANGE -> STAT_ATTACK_RANGE
    int STAT_NOAGG -> STAT_NOAGG
    int STAT_SHIELDDEF -> STAT_SHIELDDEF
    int STAT_MP_CONSUME_RATE -> STAT_MP_CONSUME_RATE
    int STAT_HP_CONSUME_RATE -> STAT_HP_CONSUME_RATE
    int STAT_MCRITRATE -> STAT_MCRITRATE
    int COMBAT_MOD_ANIMAL -> COMBAT_MOD_ANIMAL
    int COMBAT_MOD_BEAST -> COMBAT_MOD_BEAST
    int COMBAT_MOD_BUG -> COMBAT_MOD_BUG
    int COMBAT_MOD_DRAGON -> COMBAT_MOD_DRAGON
    int COMBAT_MOD_MONSTER -> COMBAT_MOD_MONSTER
    int COMBAT_MOD_PLANT -> COMBAT_MOD_PLANT
    int COMBAT_MOD_HOLY -> COMBAT_MOD_HOLY
    int COMBAT_MOD_UNHOLY -> COMBAT_MOD_UNHOLY
    int COMBAT_MOD_BOW -> COMBAT_MOD_BOW
    int COMBAT_MOD_BLUNT -> COMBAT_MOD_BLUNT
    int COMBAT_MOD_DAGGER -> COMBAT_MOD_DAGGER
    int COMBAT_MOD_FIST -> COMBAT_MOD_FIST
    int COMBAT_MOD_DUAL -> COMBAT_MOD_DUAL
    int COMBAT_MOD_SWORD -> COMBAT_MOD_SWORD
    int COMBAT_MOD_POISON -> COMBAT_MOD_POISON
    int COMBAT_MOD_BLEED -> COMBAT_MOD_BLEED
    int COMBAT_MOD_FIRE -> COMBAT_MOD_FIRE
    int COMBAT_MOD_WATER -> COMBAT_MOD_WATER
    int COMBAT_MOD_EARTH -> COMBAT_MOD_EARTH
    int COMBAT_MOD_WIND -> COMBAT_MOD_WIND
    int COMBAT_MOD_ROOT -> COMBAT_MOD_ROOT
    int COMBAT_MOD_STUN -> COMBAT_MOD_STUN
    int COMBAT_MOD_CONFUSION -> COMBAT_MOD_CONFUSION
    int COMBAT_MOD_DARK -> COMBAT_MOD_DARK
    int COND_RUNNING -> COND_RUNNING
    int COND_WALKING -> COND_WALKING
    int COND_SIT -> COND_SIT
    int COND_BEHIND -> COND_BEHIND
    int COND_CRIT -> COND_CRIT
    int COND_LOWHP -> COND_LOWHP
    int COND_ROBES -> COND_ROBES
    int COND_CHARGES -> COND_CHARGES
    int COND_SHIELD -> COND_SHIELD
    int COND_GRADEA -> COND_GRADEA
    int COND_GRADEB -> COND_GRADEB
    int COND_GRADEC -> COND_GRADEC
    int COND_GRADED -> COND_GRADED
    int COND_GRADES -> COND_GRADES
    com.l2jfrozen.gameserver.skills.funcs.Func[] _emptyFunctionSet -> _emptyFunctionSet
    com.l2jfrozen.gameserver.model.L2Effect[] _emptyEffectSet -> _emptyEffectSet
    int _id -> _id
    int _level -> _level
    int _displayId -> _displayId
    java.lang.String _name -> _name
    com.l2jfrozen.gameserver.model.SkillOpType _operateType -> _operateType
    boolean _magic -> _magic
    boolean _staticReuse -> _staticReuse
    boolean _staticHitTime -> _staticHitTime
    int _mpConsume -> _mpConsume
    int _mpInitialConsume -> _mpInitialConsume
    int _hpConsume -> _hpConsume
    int _itemConsume -> _itemConsume
    int _itemConsumeId -> _itemConsumeId
    int _itemConsumeOT -> _itemConsumeOT
    int _itemConsumeIdOT -> _itemConsumeIdOT
    int _itemConsumeSteps -> _itemConsumeSteps
    int _summonTotalLifeTime -> _summonTotalLifeTime
    int _summonTimeLostIdle -> _summonTimeLostIdle
    int _summonTimeLostActive -> _summonTimeLostActive
    int _itemConsumeTime -> _itemConsumeTime
    int _castRange -> _castRange
    int _effectRange -> _effectRange
    int _hitTime -> _hitTime
    int _coolTime -> _coolTime
    int _reuseDelay -> _reuseDelay
    int _buffDuration -> _buffDuration
    int _reuseHashCode -> _reuseHashCode
    com.l2jfrozen.gameserver.model.SkillTargetType _targetType -> _targetType
    double _power -> _power
    int _effectPoints -> _effectPoints
    int _magicLevel -> _magicLevel
    java.lang.String[] _negateSkillTypes -> _negateSkillTypes
    java.lang.String[] _negateEffectTypes -> _negateEffectTypes
    float _negatePower -> _negatePower
    int _negateId -> _negateId
    int _levelDepend -> _levelDepend
    int _skillRadius -> _skillRadius
    com.l2jfrozen.gameserver.model.SkillType _skillType -> _skillType
    com.l2jfrozen.gameserver.model.SkillType _effectType -> _effectType
    int _effectPower -> _effectPower
    int _effectId -> _effectId
    int _effectLvl -> _effectLvl
    boolean _ispotion -> _ispotion
    int _element -> _element
    com.l2jfrozen.gameserver.skills.BaseStats _saveVs -> _saveVs
    boolean _isSuicideAttack -> _isSuicideAttack
    com.l2jfrozen.gameserver.skills.Stats _stat -> _stat
    int _condition -> _condition
    int _conditionValue -> _conditionValue
    boolean _overhit -> _overhit
    int _weaponsAllowed -> _weaponsAllowed
    int _armorsAllowed -> _armorsAllowed
    int _addCrossLearn -> _addCrossLearn
    float _mulCrossLearn -> _mulCrossLearn
    float _mulCrossLearnRace -> _mulCrossLearnRace
    float _mulCrossLearnProf -> _mulCrossLearnProf
    java.util.List _canLearn -> _canLearn
    java.util.List _teachers -> _teachers
    int _minPledgeClass -> _minPledgeClass
    boolean _isOffensive -> _isOffensive
    int _numCharges -> _numCharges
    int _triggeredId -> _triggeredId
    int _triggeredLevel -> _triggeredLevel
    boolean _bestowed -> _bestowed
    boolean _isHeroSkill -> _isHeroSkill
    int _baseCritRate -> _baseCritRate
    int _lethalEffect1 -> _lethalEffect1
    int _lethalEffect2 -> _lethalEffect2
    boolean _directHpDmg -> _directHpDmg
    boolean _isDance -> _isDance
    int _nextDanceCost -> _nextDanceCost
    float _sSBoost -> _sSBoost
    int _aggroPoints -> _aggroPoints
    float _pvpMulti -> _pvpMulti
    com.l2jfrozen.gameserver.skills.conditions.Condition _preCondition -> _preCondition
    com.l2jfrozen.gameserver.skills.conditions.Condition _itemPreCondition -> _itemPreCondition
    com.l2jfrozen.gameserver.skills.funcs.FuncTemplate[] _funcTemplates -> _funcTemplates
    com.l2jfrozen.gameserver.skills.effects.EffectTemplate[] _effectTemplates -> _effectTemplates
    com.l2jfrozen.gameserver.skills.effects.EffectTemplate[] _effectTemplatesSelf -> _effectTemplatesSelf
    boolean _nextActionIsAttack -> _nextActionIsAttack
    int _minChance -> _minChance
    int _maxChance -> _maxChance
    boolean _singleEffect -> _singleEffect
    boolean _isDebuff -> _isDebuff
    boolean _advancedFlag -> _advancedFlag
    int _advancedMultiplier -> _advancedMultiplier
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    boolean is_singleEffect() -> is_singleEffect
    boolean is_Debuff() -> is_Debuff
    boolean nextActionIsAttack() -> nextActionIsAttack
    boolean isPotion() -> isPotion
    int getArmorsAllowed() -> getArmorsAllowed
    int getConditionValue() -> getConditionValue
    com.l2jfrozen.gameserver.model.SkillType getSkillType() -> getSkillType
    boolean hasEffectWhileCasting() -> hasEffectWhileCasting
    com.l2jfrozen.gameserver.skills.BaseStats getSavevs() -> getSavevs
    int getElement() -> getElement
    com.l2jfrozen.gameserver.model.SkillTargetType getTargetType() -> getTargetType
    int getCondition() -> getCondition
    boolean isOverhit() -> isOverhit
    boolean isSuicideAttack() -> isSuicideAttack
    double getPower(com.l2jfrozen.gameserver.model.L2Character) -> getPower
    double getPower() -> getPower
    int getEffectPoints() -> getEffectPoints
    java.lang.String[] getNegateSkillTypes() -> getNegateSkillTypes
    java.lang.String[] getNegateEffectTypes() -> getNegateEffectTypes
    float getNegatePower() -> getNegatePower
    int getNegateId() -> getNegateId
    int getMagicLevel() -> getMagicLevel
    boolean isStaticReuse() -> isStaticReuse
    boolean isStaticHitTime() -> isStaticHitTime
    int getLevelDepend() -> getLevelDepend
    int getEffectPower() -> getEffectPower
    int getEffectId() -> getEffectId
    int getEffectLvl() -> getEffectLvl
    com.l2jfrozen.gameserver.model.SkillType getEffectType() -> getEffectType
    int getBuffDuration() -> getBuffDuration
    int getCastRange() -> getCastRange
    int getEffectRange() -> getEffectRange
    int getHpConsume() -> getHpConsume
    int getId() -> getId
    int getDisplayId() -> getDisplayId
    void setDisplayId(int) -> setDisplayId
    int getTriggeredId() -> getTriggeredId
    int getTriggeredLevel() -> getTriggeredLevel
    com.l2jfrozen.gameserver.skills.Stats getStat() -> getStat
    int getItemConsume() -> getItemConsume
    int getItemConsumeId() -> getItemConsumeId
    int getItemConsumeOT() -> getItemConsumeOT
    int getItemConsumeIdOT() -> getItemConsumeIdOT
    int getItemConsumeSteps() -> getItemConsumeSteps
    int getTotalLifeTime() -> getTotalLifeTime
    int getTimeLostIdle() -> getTimeLostIdle
    int getTimeLostActive() -> getTimeLostActive
    int getItemConsumeTime() -> getItemConsumeTime
    int getLevel() -> getLevel
    boolean isMagic() -> isMagic
    int getMpConsume() -> getMpConsume
    int getMpInitialConsume() -> getMpInitialConsume
    java.lang.String getName() -> getName
    int getReuseDelay() -> getReuseDelay
    int getSkillTime() -> getSkillTime
    int getHitTime() -> getHitTime
    int getCoolTime() -> getCoolTime
    int getSkillRadius() -> getSkillRadius
    boolean isActive() -> isActive
    boolean isPassive() -> isPassive
    boolean isToggle() -> isToggle
    boolean isChance() -> isChance
    com.l2jfrozen.gameserver.model.ChanceCondition getChanceCondition() -> getChanceCondition
    boolean isDance() -> isDance
    int getNextDanceMpCost() -> getNextDanceMpCost
    float getSSBoost() -> getSSBoost
    int getAggroPoints() -> getAggroPoints
    float getPvpMulti() -> getPvpMulti
    boolean useSoulShot() -> useSoulShot
    boolean useSpiritShot() -> useSpiritShot
    boolean useFishShot() -> useFishShot
    int getWeaponsAllowed() -> getWeaponsAllowed
    int getCrossLearnAdd() -> getCrossLearnAdd
    float getCrossLearnMul() -> getCrossLearnMul
    float getCrossLearnRace() -> getCrossLearnRace
    float getCrossLearnProf() -> getCrossLearnProf
    boolean getCanLearn(com.l2jfrozen.gameserver.model.base.ClassId) -> getCanLearn
    boolean canTeachBy(int) -> canTeachBy
    int getMinPledgeClass() -> getMinPledgeClass
    boolean isPvpSkill() -> isPvpSkill
    boolean isOffensive() -> isOffensive
    boolean isHeroSkill() -> isHeroSkill
    int getNumCharges() -> getNumCharges
    int getBaseCritRate() -> getBaseCritRate
    int getLethalChance1() -> getLethalChance1
    int getLethalChance2() -> getLethalChance2
    boolean getDmgDirectlyToHP() -> getDmgDirectlyToHP
    boolean bestowed() -> bestowed
    boolean triggerAnotherSkill() -> triggerAnotherSkill
    boolean isSkillTypeOffensive() -> isSkillTypeOffensive
    boolean getWeaponDependancy(com.l2jfrozen.gameserver.model.L2Character) -> getWeaponDependancy
    boolean getWeaponDependancy(com.l2jfrozen.gameserver.model.L2Character,boolean) -> getWeaponDependancy
    boolean checkCondition(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object,boolean) -> checkCondition
    com.l2jfrozen.gameserver.model.L2Object[] getTargetList(com.l2jfrozen.gameserver.model.L2Character,boolean) -> getTargetList
    com.l2jfrozen.gameserver.model.L2Object[] getTargetList(com.l2jfrozen.gameserver.model.L2Character,boolean,com.l2jfrozen.gameserver.model.L2Character) -> getTargetList
    com.l2jfrozen.gameserver.model.L2Object[] getTargetList(com.l2jfrozen.gameserver.model.L2Character) -> getTargetList
    com.l2jfrozen.gameserver.model.L2Object getFirstOfTargetList(com.l2jfrozen.gameserver.model.L2Character) -> getFirstOfTargetList
    com.l2jfrozen.gameserver.skills.funcs.Func[] getStatFuncs(com.l2jfrozen.gameserver.model.L2Effect,com.l2jfrozen.gameserver.model.L2Character) -> getStatFuncs
    boolean hasEffects() -> hasEffects
    com.l2jfrozen.gameserver.model.L2Effect[] getEffects(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character) -> getEffects
    com.l2jfrozen.gameserver.model.L2Effect[] getEffects(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,boolean,boolean,boolean) -> getEffects
    com.l2jfrozen.gameserver.model.L2Effect[] getEffectsSelf(com.l2jfrozen.gameserver.model.L2Character) -> getEffectsSelf
    void attach(com.l2jfrozen.gameserver.skills.funcs.FuncTemplate) -> attach
    void attach(com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> attach
    void attachSelf(com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> attachSelf
    boolean isAbnormalEffectByName(int) -> isAbnormalEffectByName
    void attach(com.l2jfrozen.gameserver.skills.conditions.Condition,boolean) -> attach
    boolean checkPartyClan(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object) -> checkPartyClan
    java.lang.String toString() -> toString
    int getTargetConsumeId() -> getTargetConsumeId
    int getTargetConsume() -> getTargetConsume
    boolean hasSelfEffects() -> hasSelfEffects
    int getMinChance() -> getMinChance
    int getMaxChance() -> getMaxChance
    boolean is_advancedFlag() -> is_advancedFlag
    int get_advancedMultiplier() -> get_advancedMultiplier
    int getReuseHashCode() -> getReuseHashCode
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Skill$1 -> com.l2jfrozen.gameserver.model.L2Skill$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillType
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillTargetType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillTargetType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2SkillLearn -> com.l2jfrozen.gameserver.model.L2SkillLearn:
    int _id -> _id
    int _level -> _level
    java.lang.String _name -> _name
    int _spCost -> _spCost
    int _minLevel -> _minLevel
    int _costid -> _costid
    int _costcount -> _costcount
    void <init>(int,int,int,java.lang.String,int,int,int) -> <init>
    int getId() -> getId
    int getLevel() -> getLevel
    int getMinLevel() -> getMinLevel
    java.lang.String getName() -> getName
    int getSpCost() -> getSpCost
    int getIdCost() -> getIdCost
    int getCostCount() -> getCostCount
com.l2jfrozen.gameserver.model.L2Summon -> com.l2jfrozen.gameserver.model.L2Summon:
    int _pkKills -> _pkKills
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    int _attackRange -> _attackRange
    boolean _follow -> _follow
    boolean _previousFollowStatus -> _previousFollowStatus
    int _maxLoad -> _maxLoad
    int _chargedSoulShot -> _chargedSoulShot
    int _chargedSpiritShot -> _chargedSpiritShot
    int _soulShotsPerHit -> _soulShotsPerHit
    int _spiritShotsPerHit -> _spiritShotsPerHit
    boolean _showSummonAnimation -> _showSummonAnimation
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.SummonKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.stat.SummonStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.status.SummonStatus getStatus() -> getStatus
    com.l2jfrozen.gameserver.ai.L2CharacterAI getAI() -> getAI
    com.l2jfrozen.gameserver.templates.L2NpcTemplate getTemplate() -> getTemplate
    int getSummonType() -> getSummonType
    void updateAbnormalEffect() -> updateAbnormalEffect
    boolean isMountable() -> isMountable
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    long getExpForThisLevel() -> getExpForThisLevel
    long getExpForNextLevel() -> getExpForNextLevel
    int getKarma() -> getKarma
    byte getPvpFlag() -> getPvpFlag
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getOwner() -> getOwner
    int getNpcId() -> getNpcId
    void doAttack(com.l2jfrozen.gameserver.model.L2Character) -> doAttack
    void setPkKills(int) -> setPkKills
    int getPkKills() -> getPkKills
    int getMaxLoad() -> getMaxLoad
    int getSoulShotsPerHit() -> getSoulShotsPerHit
    int getSpiritShotsPerHit() -> getSpiritShotsPerHit
    void setMaxLoad(int) -> setMaxLoad
    void setChargedSoulShot(int) -> setChargedSoulShot
    void setChargedSpiritShot(int) -> setChargedSpiritShot
    void followOwner() -> followOwner
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character,boolean) -> doDie
    void stopDecay() -> stopDecay
    void onDecay() -> onDecay
    void broadcastStatusUpdate() -> broadcastStatusUpdate
    void deleteMe(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> deleteMe
    void unSummon(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> unSummon
    int getAttackRange() -> getAttackRange
    void setAttackRange(int) -> setAttackRange
    void setFollowStatus(boolean) -> setFollowStatus
    boolean getFollowStatus() -> getFollowStatus
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    int getChargedSoulShot() -> getChargedSoulShot
    int getChargedSpiritShot() -> getChargedSpiritShot
    int getControlItemId() -> getControlItemId
    com.l2jfrozen.gameserver.templates.L2Weapon getActiveWeapon() -> getActiveWeapon
    com.l2jfrozen.gameserver.model.PetInventory getInventory() -> getInventory
    void doPickupItem(com.l2jfrozen.gameserver.model.L2Object) -> doPickupItem
    void giveAllToOwner() -> giveAllToOwner
    void store() -> store
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getActiveWeaponInstance() -> getActiveWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getActiveWeaponItem() -> getActiveWeaponItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getSecondaryWeaponInstance() -> getSecondaryWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getSecondaryWeaponItem() -> getSecondaryWeaponItem
    com.l2jfrozen.gameserver.model.L2Party getParty() -> getParty
    boolean isInParty() -> isInParty
    void useMagic(com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean) -> useMagic
    void setIsImobilised(boolean) -> setIsImobilised
    void setOwner(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setOwner
    boolean isShowSummonAnimation() -> isShowSummonAnimation
    void setShowSummonAnimation(boolean) -> setShowSummonAnimation
    boolean isInCombat() -> isInCombat
    void doCast(com.l2jfrozen.gameserver.model.L2Skill) -> doCast
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActingPlayer() -> getActingPlayer
    com.l2jfrozen.gameserver.model.actor.status.PlayableStatus getStatus() -> getStatus
    com.l2jfrozen.gameserver.model.actor.stat.PlayableStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.knownlist.PlayableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.templates.L2CharTemplate getTemplate() -> getTemplate
    com.l2jfrozen.gameserver.model.actor.status.CharStatus getStatus() -> getStatus
    com.l2jfrozen.gameserver.model.actor.stat.CharStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
com.l2jfrozen.gameserver.model.L2Summon$1 -> com.l2jfrozen.gameserver.model.L2Summon$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillTargetType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillTargetType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Summon$AIAccessor -> com.l2jfrozen.gameserver.model.L2Summon$AIAccessor:
    com.l2jfrozen.gameserver.model.L2Summon this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Summon) -> <init>
    com.l2jfrozen.gameserver.model.L2Summon getSummon() -> getSummon
    boolean isAutoFollow() -> isAutoFollow
    void doPickupItem(com.l2jfrozen.gameserver.model.L2Object) -> doPickupItem
com.l2jfrozen.gameserver.model.L2SummonItem -> com.l2jfrozen.gameserver.model.L2SummonItem:
    int _itemId -> _itemId
    int _npcId -> _npcId
    byte _type -> _type
    void <init>(int,int,byte) -> <init>
    int getItemId() -> getItemId
    int getNpcId() -> getNpcId
    byte getType() -> getType
    boolean isPetSummon() -> isPetSummon
com.l2jfrozen.gameserver.model.L2TeleportLocation -> com.l2jfrozen.gameserver.model.L2TeleportLocation:
    int _teleId -> _teleId
    int _locX -> _locX
    int _locY -> _locY
    int _locZ -> _locZ
    int _price -> _price
    boolean _forNoble -> _forNoble
    void <init>() -> <init>
    void setTeleId(int) -> setTeleId
    void setLocX(int) -> setLocX
    void setLocY(int) -> setLocY
    void setLocZ(int) -> setLocZ
    void setPrice(int) -> setPrice
    void setIsForNoble(boolean) -> setIsForNoble
    int getTeleId() -> getTeleId
    int getLocX() -> getLocX
    int getLocY() -> getLocY
    int getLocZ() -> getLocZ
    int getPrice() -> getPrice
    boolean getIsForNoble() -> getIsForNoble
com.l2jfrozen.gameserver.model.L2Territory -> com.l2jfrozen.gameserver.model.L2Territory:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.L2Territory$Point[] _points -> _points
    int _xMin -> _xMin
    int _xMax -> _xMax
    int _yMin -> _yMin
    int _yMax -> _yMax
    int _zMin -> _zMin
    int _zMax -> _zMax
    int _procMax -> _procMax
    java.awt.Polygon poly -> poly
    void <init>() -> <init>
    void add(int,int,int,int,int) -> add
    void print() -> print
    boolean isIntersect(int,int,com.l2jfrozen.gameserver.model.L2Territory$Point,com.l2jfrozen.gameserver.model.L2Territory$Point) -> isIntersect
    boolean isInside(int,int) -> isInside
    int[] getRandomPoint() -> getRandomPoint
    int getProcMax() -> getProcMax
    int getYmin() -> getYmin
    int getXmax() -> getXmax
    int getXmin() -> getXmin
    int getYmax() -> getYmax
    int getZmin() -> getZmin
    int getZmax() -> getZmax
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2Territory$Point -> com.l2jfrozen.gameserver.model.L2Territory$Point:
    int _x -> _x
    int _y -> _y
    int _zmin -> _zmin
    int _zmax -> _zmax
    int _proc -> _proc
    com.l2jfrozen.gameserver.model.L2Territory this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2Territory,int,int,int,int,int) -> <init>
com.l2jfrozen.gameserver.model.L2TradeList -> com.l2jfrozen.gameserver.model.L2TradeList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _items -> _items
    int _listId -> _listId
    boolean _confirmed -> _confirmed
    boolean _gm -> _gm
    java.lang.String _buystorename -> _buystorename
    java.lang.String _sellstorename -> _sellstorename
    java.lang.String _npcId -> _npcId
    void <init>(int) -> <init>
    void setNpcId(java.lang.String) -> setNpcId
    java.lang.String getNpcId() -> getNpcId
    void addItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addItem
    void replaceItem(int,int) -> replaceItem
    boolean decreaseCount(int,int) -> decreaseCount
    void restoreCount(int) -> restoreCount
    void removeItem(int) -> removeItem
    int getListId() -> getListId
    void setSellStoreName(java.lang.String) -> setSellStoreName
    java.lang.String getSellStoreName() -> getSellStoreName
    void setBuyStoreName(java.lang.String) -> setBuyStoreName
    java.lang.String getBuyStoreName() -> getBuyStoreName
    java.util.List getItems() -> getItems
    java.util.List getItems(int,int) -> getItems
    int getPriceForItemId(int) -> getPriceForItemId
    boolean countDecrease(int) -> countDecrease
    boolean containsItemId(int) -> containsItemId
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getItem(int) -> getItem
    void setConfirmedTrade(boolean) -> setConfirmedTrade
    boolean hasConfirmed() -> hasConfirmed
    void removeItem(int,int) -> removeItem
    boolean contains(int) -> contains
    void updateBuyList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.util.List) -> updateBuyList
    void updateSellList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.util.List) -> updateSellList
    boolean isGm() -> isGm
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2World -> com.l2jfrozen.gameserver.model.L2World:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int SHIFT_BY -> SHIFT_BY
    int MAP_MIN_X -> MAP_MIN_X
    int MAP_MAX_X -> MAP_MAX_X
    int MAP_MIN_Y -> MAP_MIN_Y
    int MAP_MAX_Y -> MAP_MAX_Y
    int OFFSET_X -> OFFSET_X
    int OFFSET_Y -> OFFSET_Y
    int REGIONS_X -> REGIONS_X
    int REGIONS_Y -> REGIONS_Y
    java.util.Map _allPlayers -> _allPlayers
    com.l2jfrozen.gameserver.util.object.L2ObjectMap _allObjects -> _allObjects
    javolution.util.FastMap _petsInstance -> _petsInstance
    com.l2jfrozen.gameserver.model.L2World _instance -> _instance
    com.l2jfrozen.gameserver.model.L2WorldRegion[][] _worldRegions -> _worldRegions
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.L2World getInstance() -> getInstance
    void storeObject(com.l2jfrozen.gameserver.model.L2Object) -> storeObject
    long timeStoreObject(com.l2jfrozen.gameserver.model.L2Object) -> timeStoreObject
    void removeObject(com.l2jfrozen.gameserver.model.L2Object) -> removeObject
    void removeObjects(java.util.List) -> removeObjects
    void removeObjects(com.l2jfrozen.gameserver.model.L2Object[]) -> removeObjects
    long timeRemoveObject(com.l2jfrozen.gameserver.model.L2Object) -> timeRemoveObject
    com.l2jfrozen.gameserver.model.L2Object findObject(int) -> findObject
    long timeFindObject(int) -> timeFindObject
    com.l2jfrozen.gameserver.util.object.L2ObjectMap getAllVisibleObjects() -> getAllVisibleObjects
    int getAllVisibleObjectsCount() -> getAllVisibleObjectsCount
    javolution.util.FastList getAllGMs() -> getAllGMs
    java.util.Collection getAllPlayers() -> getAllPlayers
    java.lang.Integer getAllPlayersCount() -> getAllPlayersCount
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayer(java.lang.String) -> getPlayer
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayer(int) -> getPlayer
    java.util.Collection getAllPets() -> getAllPets
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance getPet(int) -> getPet
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance addPet(int,com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance) -> addPet
    void removePet(int) -> removePet
    void removePet(com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance) -> removePet
    void addVisibleObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2WorldRegion,com.l2jfrozen.gameserver.model.L2Character) -> addVisibleObject
    void addToAllPlayers(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addToAllPlayers
    void removeFromAllPlayers(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeFromAllPlayers
    void removeVisibleObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2WorldRegion) -> removeVisibleObject
    javolution.util.FastList getVisibleObjects(com.l2jfrozen.gameserver.model.L2Object) -> getVisibleObjects
    javolution.util.FastList getVisibleObjects(com.l2jfrozen.gameserver.model.L2Object,int) -> getVisibleObjects
    javolution.util.FastList getVisibleObjects3D(com.l2jfrozen.gameserver.model.L2Object,int) -> getVisibleObjects3D
    javolution.util.FastList getVisiblePlayable(com.l2jfrozen.gameserver.model.L2Object) -> getVisiblePlayable
    com.l2jfrozen.gameserver.model.L2WorldRegion getRegion(com.l2jfrozen.common.util.Point3D) -> getRegion
    com.l2jfrozen.gameserver.model.L2WorldRegion getRegion(int,int) -> getRegion
    com.l2jfrozen.gameserver.model.L2WorldRegion[][] getAllWorldRegions() -> getAllWorldRegions
    boolean validRegion(int,int) -> validRegion
    void initRegions() -> initRegions
    void deleteVisibleNpcSpawns() -> deleteVisibleNpcSpawns
    javolution.util.FastList getAccountPlayers(java.lang.String) -> getAccountPlayers
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2WorldRegion -> com.l2jfrozen.gameserver.model.L2WorldRegion:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.util.object.L2ObjectSet _allPlayable -> _allPlayable
    com.l2jfrozen.gameserver.util.object.L2ObjectSet _visibleObjects -> _visibleObjects
    javolution.util.FastList _surroundingRegions -> _surroundingRegions
    int _tileX -> _tileX
    int _tileY -> _tileY
    java.lang.Boolean _active -> _active
    java.util.concurrent.ScheduledFuture _neighborsTask -> _neighborsTask
    com.l2jfrozen.gameserver.model.zone.L2ZoneManager _zoneManager -> _zoneManager
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(int,int) -> <init>
    void addZone(com.l2jfrozen.gameserver.model.zone.L2ZoneType) -> addZone
    void removeZone(com.l2jfrozen.gameserver.model.zone.L2ZoneType) -> removeZone
    void revalidateZones(com.l2jfrozen.gameserver.model.L2Character) -> revalidateZones
    void removeFromZones(com.l2jfrozen.gameserver.model.L2Character) -> removeFromZones
    void onDeath(com.l2jfrozen.gameserver.model.L2Character) -> onDeath
    void onRevive(com.l2jfrozen.gameserver.model.L2Character) -> onRevive
    void switchAI(java.lang.Boolean) -> switchAI
    java.lang.Boolean isActive() -> isActive
    java.lang.Boolean areNeighborsEmpty() -> areNeighborsEmpty
    void setActive(boolean) -> setActive
    void startActivation() -> startActivation
    void startDeactivation() -> startDeactivation
    void addVisibleObject(com.l2jfrozen.gameserver.model.L2Object) -> addVisibleObject
    void removeVisibleObject(com.l2jfrozen.gameserver.model.L2Object) -> removeVisibleObject
    void addSurroundingRegion(com.l2jfrozen.gameserver.model.L2WorldRegion) -> addSurroundingRegion
    javolution.util.FastList getSurroundingRegions() -> getSurroundingRegions
    java.util.Iterator iterateAllPlayers() -> iterateAllPlayers
    com.l2jfrozen.gameserver.util.object.L2ObjectSet getVisibleObjects() -> getVisibleObjects
    java.lang.String getName() -> getName
    void deleteVisibleNpcSpawns() -> deleteVisibleNpcSpawns
    boolean checkEffectRangeInsidePeaceZone(com.l2jfrozen.gameserver.model.L2Skill,int,int,int) -> checkEffectRangeInsidePeaceZone
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.L2WorldRegion$NeighborsTask -> com.l2jfrozen.gameserver.model.L2WorldRegion$NeighborsTask:
    boolean _isActivating -> _isActivating
    com.l2jfrozen.gameserver.model.L2WorldRegion this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.L2WorldRegion,boolean) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.Location -> com.l2jfrozen.gameserver.model.Location:
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    void <init>(int,int,int) -> <init>
    void <init>(int,int,int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2Object) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    int getX() -> getX
    int getY() -> getY
    int getZ() -> getZ
    int getHeading() -> getHeading
    void setX(int) -> setX
    void setY(int) -> setY
    void setZ(int) -> setZ
    void setHeading(int) -> setHeading
    void setXYZ(int,int,int) -> setXYZ
    boolean equals(int,int,int) -> equals
com.l2jfrozen.gameserver.model.MacroList -> com.l2jfrozen.gameserver.model.MacroList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    int _revision -> _revision
    int _macroId -> _macroId
    java.util.Map _macroses -> _macroses
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    int getRevision() -> getRevision
    com.l2jfrozen.gameserver.model.L2Macro[] getAllMacroses() -> getAllMacroses
    com.l2jfrozen.gameserver.model.L2Macro getMacro(int) -> getMacro
    void registerMacro(com.l2jfrozen.gameserver.model.L2Macro) -> registerMacro
    void deleteMacro(int) -> deleteMacro
    void sendUpdate() -> sendUpdate
    void registerMacroInDb(com.l2jfrozen.gameserver.model.L2Macro) -> registerMacroInDb
    void deleteMacroFromDb(com.l2jfrozen.gameserver.model.L2Macro) -> deleteMacroFromDb
    void restore() -> restore
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.MobGroup -> com.l2jfrozen.gameserver.model.MobGroup:
    com.l2jfrozen.gameserver.templates.L2NpcTemplate _npcTemplate -> _npcTemplate
    int _groupId -> _groupId
    int _maxMobCount -> _maxMobCount
    java.util.List _mobs -> _mobs
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate,int) -> <init>
    int getActiveMobCount() -> getActiveMobCount
    int getGroupId() -> getGroupId
    int getMaxMobCount() -> getMaxMobCount
    java.util.List getMobs() -> getMobs
    java.lang.String getStatus() -> getStatus
    com.l2jfrozen.gameserver.templates.L2NpcTemplate getTemplate() -> getTemplate
    boolean isGroupMember(com.l2jfrozen.gameserver.model.actor.instance.L2ControllableMobInstance) -> isGroupMember
    void spawnGroup(int,int,int) -> spawnGroup
    void spawnGroup(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> spawnGroup
    void teleportGroup(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> teleportGroup
    com.l2jfrozen.gameserver.model.actor.instance.L2ControllableMobInstance getRandomMob() -> getRandomMob
    void unspawnGroup() -> unspawnGroup
    void killGroup(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> killGroup
    void setAttackRandom() -> setAttackRandom
    void setAttackTarget(com.l2jfrozen.gameserver.model.L2Character) -> setAttackTarget
    void setIdleMode() -> setIdleMode
    void returnGroup(com.l2jfrozen.gameserver.model.L2Character) -> returnGroup
    void setFollowMode(com.l2jfrozen.gameserver.model.L2Character) -> setFollowMode
    void setCastMode() -> setCastMode
    void setNoMoveMode(boolean) -> setNoMoveMode
    void removeDead() -> removeDead
    void setInvul(boolean) -> setInvul
    void setAttackGroup(com.l2jfrozen.gameserver.model.MobGroup) -> setAttackGroup
com.l2jfrozen.gameserver.model.PartyMatchRoom -> com.l2jfrozen.gameserver.model.PartyMatchRoom:
    int _id -> _id
    java.lang.String _title -> _title
    int _loot -> _loot
    int _location -> _location
    int _minlvl -> _minlvl
    int _maxlvl -> _maxlvl
    int _maxmem -> _maxmem
    java.util.List _members -> _members
    void <init>(int,java.lang.String,int,int,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    java.util.List getPartyMembers() -> getPartyMembers
    void addMember(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addMember
    void deleteMember(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> deleteMember
    void notifyMembersAboutExit(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> notifyMembersAboutExit
    void changeLeader(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> changeLeader
    int getId() -> getId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getOwner() -> getOwner
    int getMembers() -> getMembers
    int getLootType() -> getLootType
    void setLootType(int) -> setLootType
    int getMinLvl() -> getMinLvl
    void setMinLvl(int) -> setMinLvl
    int getMaxLvl() -> getMaxLvl
    void setMaxLvl(int) -> setMaxLvl
    int getLocation() -> getLocation
    void setLocation(int) -> setLocation
    int getMaxMembers() -> getMaxMembers
    void setMaxMembers(int) -> setMaxMembers
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
com.l2jfrozen.gameserver.model.PartyMatchRoomList -> com.l2jfrozen.gameserver.model.PartyMatchRoomList:
    int _maxid -> _maxid
    java.util.Map _rooms -> _rooms
    void <init>() -> <init>
    void addPartyMatchRoom(int,com.l2jfrozen.gameserver.model.PartyMatchRoom) -> addPartyMatchRoom
    void deleteRoom(int) -> deleteRoom
    com.l2jfrozen.gameserver.model.PartyMatchRoom getRoom(int) -> getRoom
    com.l2jfrozen.gameserver.model.PartyMatchRoom[] getRooms() -> getRooms
    int getPartyMatchRoomCount() -> getPartyMatchRoomCount
    int getMaxId() -> getMaxId
    com.l2jfrozen.gameserver.model.PartyMatchRoom getPlayerRoom(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPlayerRoom
    int getPlayerRoomId(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPlayerRoomId
    com.l2jfrozen.gameserver.model.PartyMatchRoomList getInstance() -> getInstance
    void <init>(com.l2jfrozen.gameserver.model.PartyMatchRoomList$1) -> <init>
com.l2jfrozen.gameserver.model.PartyMatchRoomList$1 -> com.l2jfrozen.gameserver.model.PartyMatchRoomList$1:
com.l2jfrozen.gameserver.model.PartyMatchRoomList$SingletonHolder -> com.l2jfrozen.gameserver.model.PartyMatchRoomList$SingletonHolder:
    com.l2jfrozen.gameserver.model.PartyMatchRoomList _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.PartyMatchWaitingList -> com.l2jfrozen.gameserver.model.PartyMatchWaitingList:
    java.util.List _members -> _members
    void <init>() -> <init>
    void addPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addPlayer
    void removePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removePlayer
    java.util.List getPlayers() -> getPlayers
    com.l2jfrozen.gameserver.model.PartyMatchWaitingList getInstance() -> getInstance
    void <init>(com.l2jfrozen.gameserver.model.PartyMatchWaitingList$1) -> <init>
com.l2jfrozen.gameserver.model.PartyMatchWaitingList$1 -> com.l2jfrozen.gameserver.model.PartyMatchWaitingList$1:
com.l2jfrozen.gameserver.model.PartyMatchWaitingList$SingletonHolder -> com.l2jfrozen.gameserver.model.PartyMatchWaitingList$SingletonHolder:
    com.l2jfrozen.gameserver.model.PartyMatchWaitingList _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.PcFreight -> com.l2jfrozen.gameserver.model.PcFreight:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    int _activeLocationId -> _activeLocationId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getOwner() -> getOwner
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation getBaseLocation() -> getBaseLocation
    void setActiveLocation(int) -> setActiveLocation
    int getactiveLocation() -> getactiveLocation
    int getSize() -> getSize
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getItems() -> getItems
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getItemByItemId(int) -> getItemByItemId
    void addItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addItem
    void restore() -> restore
    boolean validateCapacity(int) -> validateCapacity
    com.l2jfrozen.gameserver.model.L2Character getOwner() -> getOwner
com.l2jfrozen.gameserver.model.PcInventory -> com.l2jfrozen.gameserver.model.PcInventory:
    int ADENA_ID -> ADENA_ID
    int ANCIENT_ADENA_ID -> ANCIENT_ADENA_ID
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _adena -> _adena
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _ancientAdena -> _ancientAdena
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getOwner() -> getOwner
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation getBaseLocation() -> getBaseLocation
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation getEquipLocation() -> getEquipLocation
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getAdenaInstance() -> getAdenaInstance
    int getAdena() -> getAdena
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getAncientAdenaInstance() -> getAncientAdenaInstance
    int getAncientAdena() -> getAncientAdena
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getUniqueItems(boolean,boolean,boolean) -> getUniqueItems
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getUniqueItems(boolean,boolean,boolean,boolean) -> getUniqueItems
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getUniqueItemsByEnchantLevel(boolean,boolean,boolean) -> getUniqueItemsByEnchantLevel
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getUniqueItemsByEnchantLevel(boolean,boolean,boolean,boolean) -> getUniqueItemsByEnchantLevel
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getAllItemsByItemId(int) -> getAllItemsByItemId
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getAllItemsByItemId(int,int) -> getAllItemsByItemId
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getAvailableItems(boolean) -> getAvailableItems
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] getAugmentedItems() -> getAugmentedItems
    com.l2jfrozen.gameserver.model.TradeList$TradeItem[] getAvailableItems(com.l2jfrozen.gameserver.model.TradeList) -> getAvailableItems
    com.l2jfrozen.gameserver.model.TradeList$TradeItem adjustAvailableItem(com.l2jfrozen.gameserver.model.TradeList$TradeItem,java.util.List) -> adjustAvailableItem
    void addAdena(java.lang.String,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> addAdena
    void reduceAdena(java.lang.String,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> reduceAdena
    void addAncientAdena(java.lang.String,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> addAncientAdena
    void reduceAncientAdena(java.lang.String,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> reduceAncientAdena
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance addItem(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> addItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance addItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> addItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance transferItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.ItemContainer,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> transferItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance destroyItem(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> destroyItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance destroyItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> destroyItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance destroyItemByItemId(java.lang.String,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> destroyItemByItemId
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance dropItem(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> dropItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance dropItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> dropItem
    void removeItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> removeItem
    void refreshWeight() -> refreshWeight
    void restore() -> restore
    int[][] restoreVisibleInventory(int) -> restoreVisibleInventory
    boolean validateCapacity(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> validateCapacity
    boolean validateCapacity(java.util.List) -> validateCapacity
    boolean validateCapacityByItemId(int) -> validateCapacityByItemId
    boolean validateCapacity(int) -> validateCapacity
    boolean validateWeight(int) -> validateWeight
    boolean validateCapacity(com.l2jfrozen.gameserver.templates.L2Item) -> validateCapacity
    boolean checkIfEquipped(int) -> checkIfEquipped
    int checkHowManyEquipped(int) -> checkHowManyEquipped
    com.l2jfrozen.gameserver.model.L2Character getOwner() -> getOwner
com.l2jfrozen.gameserver.model.PcWarehouse -> com.l2jfrozen.gameserver.model.PcWarehouse:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getOwner() -> getOwner
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation getBaseLocation() -> getBaseLocation
    java.lang.String getLocationId() -> getLocationId
    int getLocationId(boolean) -> getLocationId
    void setLocationId(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setLocationId
    boolean validateCapacity(int) -> validateCapacity
    com.l2jfrozen.gameserver.model.L2Character getOwner() -> getOwner
com.l2jfrozen.gameserver.model.PetInventory -> com.l2jfrozen.gameserver.model.PetInventory:
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance _owner -> _owner
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance getOwner() -> getOwner
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation getBaseLocation() -> getBaseLocation
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation getEquipLocation() -> getEquipLocation
    com.l2jfrozen.gameserver.model.L2Character getOwner() -> getOwner
com.l2jfrozen.gameserver.model.PlayerStatus -> com.l2jfrozen.gameserver.model.PlayerStatus:
    int level -> level
    int EXP -> EXP
    int STR -> STR
    int DEX -> DEX
    int CON -> CON
    int INT -> INT
    int WIT -> WIT
    int MEN -> MEN
    int CUR_HP -> CUR_HP
    int MAX_HP -> MAX_HP
    int CUR_MP -> CUR_MP
    int MAX_MP -> MAX_MP
    int SP -> SP
    int CUR_LOAD -> CUR_LOAD
    int MAX_LOAD -> MAX_LOAD
    int P_ATK -> P_ATK
    int ATK_SPD -> ATK_SPD
    int P_DEF -> P_DEF
    int EVASION -> EVASION
    int ACCURACY -> ACCURACY
    int CRITICAL -> CRITICAL
    int M_ATK -> M_ATK
    int CAST_SPD -> CAST_SPD
    int M_DEF -> M_DEF
    int PVP_FLAG -> PVP_FLAG
    int KARMA -> KARMA
    int CUR_CP -> CUR_CP
    int MAX_CP -> MAX_CP
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
com.l2jfrozen.gameserver.model.ShortCuts -> com.l2jfrozen.gameserver.model.ShortCuts:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    java.util.Map _shortCuts -> _shortCuts
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    com.l2jfrozen.gameserver.model.L2ShortCut[] getAllShortCuts() -> getAllShortCuts
    com.l2jfrozen.gameserver.model.L2ShortCut getShortCut(int,int) -> getShortCut
    void registerShortCut(com.l2jfrozen.gameserver.model.L2ShortCut) -> registerShortCut
    void registerShortCutInDb(com.l2jfrozen.gameserver.model.L2ShortCut,com.l2jfrozen.gameserver.model.L2ShortCut) -> registerShortCutInDb
    void deleteShortCut(int,int) -> deleteShortCut
    void deleteShortCutByObjectId(int) -> deleteShortCutByObjectId
    void deleteShortCutFromDb(com.l2jfrozen.gameserver.model.L2ShortCut) -> deleteShortCutFromDb
    void restore() -> restore
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.SiegeClanType -> com.l2jfrozen.gameserver.model.SiegeClanType:
    com.l2jfrozen.gameserver.model.SiegeClanType OWNER -> OWNER
    com.l2jfrozen.gameserver.model.SiegeClanType DEFENDER -> DEFENDER
    com.l2jfrozen.gameserver.model.SiegeClanType ATTACKER -> ATTACKER
    com.l2jfrozen.gameserver.model.SiegeClanType DEFENDER_PENDING -> DEFENDER_PENDING
    com.l2jfrozen.gameserver.model.SiegeClanType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.SiegeClanType[] values() -> values
    com.l2jfrozen.gameserver.model.SiegeClanType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.SkillOpType -> com.l2jfrozen.gameserver.model.SkillOpType:
    com.l2jfrozen.gameserver.model.SkillOpType OP_PASSIVE -> OP_PASSIVE
    com.l2jfrozen.gameserver.model.SkillOpType OP_ACTIVE -> OP_ACTIVE
    com.l2jfrozen.gameserver.model.SkillOpType OP_TOGGLE -> OP_TOGGLE
    com.l2jfrozen.gameserver.model.SkillOpType OP_CHANCE -> OP_CHANCE
    com.l2jfrozen.gameserver.model.SkillOpType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.SkillOpType[] values() -> values
    com.l2jfrozen.gameserver.model.SkillOpType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.SkillTargetType -> com.l2jfrozen.gameserver.model.SkillTargetType:
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_NONE -> TARGET_NONE
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_SELF -> TARGET_SELF
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_ONE -> TARGET_ONE
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_PARTY -> TARGET_PARTY
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_ALLY -> TARGET_ALLY
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_CLAN -> TARGET_CLAN
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_PET -> TARGET_PET
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_AREA -> TARGET_AREA
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_AURA -> TARGET_AURA
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_CORPSE -> TARGET_CORPSE
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_UNDEAD -> TARGET_UNDEAD
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_AREA_UNDEAD -> TARGET_AREA_UNDEAD
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_MULTIFACE -> TARGET_MULTIFACE
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_CORPSE_ALLY -> TARGET_CORPSE_ALLY
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_CORPSE_CLAN -> TARGET_CORPSE_CLAN
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_CORPSE_PLAYER -> TARGET_CORPSE_PLAYER
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_CORPSE_PET -> TARGET_CORPSE_PET
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_ITEM -> TARGET_ITEM
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_AREA_CORPSE_MOB -> TARGET_AREA_CORPSE_MOB
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_CORPSE_MOB -> TARGET_CORPSE_MOB
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_UNLOCKABLE -> TARGET_UNLOCKABLE
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_HOLY -> TARGET_HOLY
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_PARTY_MEMBER -> TARGET_PARTY_MEMBER
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_PARTY_OTHER -> TARGET_PARTY_OTHER
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_ENEMY_SUMMON -> TARGET_ENEMY_SUMMON
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_OWNER_PET -> TARGET_OWNER_PET
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_GROUND -> TARGET_GROUND
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_SIEGE -> TARGET_SIEGE
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_TYRANNOSAURUS -> TARGET_TYRANNOSAURUS
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_AREA_AIM_CORPSE -> TARGET_AREA_AIM_CORPSE
    com.l2jfrozen.gameserver.model.SkillTargetType TARGET_CLAN_MEMBER -> TARGET_CLAN_MEMBER
    com.l2jfrozen.gameserver.model.SkillTargetType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.SkillTargetType[] values() -> values
    com.l2jfrozen.gameserver.model.SkillTargetType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.SkillType -> com.l2jfrozen.gameserver.model.SkillType:
    com.l2jfrozen.gameserver.model.SkillType PDAM -> PDAM
    com.l2jfrozen.gameserver.model.SkillType MDAM -> MDAM
    com.l2jfrozen.gameserver.model.SkillType CPDAM -> CPDAM
    com.l2jfrozen.gameserver.model.SkillType MANADAM -> MANADAM
    com.l2jfrozen.gameserver.model.SkillType DOT -> DOT
    com.l2jfrozen.gameserver.model.SkillType MDOT -> MDOT
    com.l2jfrozen.gameserver.model.SkillType DRAIN_SOUL -> DRAIN_SOUL
    com.l2jfrozen.gameserver.model.SkillType DRAIN -> DRAIN
    com.l2jfrozen.gameserver.model.SkillType DEATHLINK -> DEATHLINK
    com.l2jfrozen.gameserver.model.SkillType FATALCOUNTER -> FATALCOUNTER
    com.l2jfrozen.gameserver.model.SkillType BLOW -> BLOW
    com.l2jfrozen.gameserver.model.SkillType BLEED -> BLEED
    com.l2jfrozen.gameserver.model.SkillType POISON -> POISON
    com.l2jfrozen.gameserver.model.SkillType STUN -> STUN
    com.l2jfrozen.gameserver.model.SkillType ROOT -> ROOT
    com.l2jfrozen.gameserver.model.SkillType CONFUSION -> CONFUSION
    com.l2jfrozen.gameserver.model.SkillType FEAR -> FEAR
    com.l2jfrozen.gameserver.model.SkillType SLEEP -> SLEEP
    com.l2jfrozen.gameserver.model.SkillType CONFUSE_MOB_ONLY -> CONFUSE_MOB_ONLY
    com.l2jfrozen.gameserver.model.SkillType MUTE -> MUTE
    com.l2jfrozen.gameserver.model.SkillType PARALYZE -> PARALYZE
    com.l2jfrozen.gameserver.model.SkillType WEAKNESS -> WEAKNESS
    com.l2jfrozen.gameserver.model.SkillType HEAL -> HEAL
    com.l2jfrozen.gameserver.model.SkillType HOT -> HOT
    com.l2jfrozen.gameserver.model.SkillType BALANCE_LIFE -> BALANCE_LIFE
    com.l2jfrozen.gameserver.model.SkillType HEAL_PERCENT -> HEAL_PERCENT
    com.l2jfrozen.gameserver.model.SkillType HEAL_STATIC -> HEAL_STATIC
    com.l2jfrozen.gameserver.model.SkillType COMBATPOINTHEAL -> COMBATPOINTHEAL
    com.l2jfrozen.gameserver.model.SkillType COMBATPOINTPERCENTHEAL -> COMBATPOINTPERCENTHEAL
    com.l2jfrozen.gameserver.model.SkillType CPHOT -> CPHOT
    com.l2jfrozen.gameserver.model.SkillType MANAHEAL -> MANAHEAL
    com.l2jfrozen.gameserver.model.SkillType MANA_BY_LEVEL -> MANA_BY_LEVEL
    com.l2jfrozen.gameserver.model.SkillType MANAHEAL_PERCENT -> MANAHEAL_PERCENT
    com.l2jfrozen.gameserver.model.SkillType MANARECHARGE -> MANARECHARGE
    com.l2jfrozen.gameserver.model.SkillType MPHOT -> MPHOT
    com.l2jfrozen.gameserver.model.SkillType AGGDAMAGE -> AGGDAMAGE
    com.l2jfrozen.gameserver.model.SkillType AGGREDUCE -> AGGREDUCE
    com.l2jfrozen.gameserver.model.SkillType AGGREMOVE -> AGGREMOVE
    com.l2jfrozen.gameserver.model.SkillType AGGREDUCE_CHAR -> AGGREDUCE_CHAR
    com.l2jfrozen.gameserver.model.SkillType AGGDEBUFF -> AGGDEBUFF
    com.l2jfrozen.gameserver.model.SkillType FISHING -> FISHING
    com.l2jfrozen.gameserver.model.SkillType PUMPING -> PUMPING
    com.l2jfrozen.gameserver.model.SkillType REELING -> REELING
    com.l2jfrozen.gameserver.model.SkillType UNLOCK -> UNLOCK
    com.l2jfrozen.gameserver.model.SkillType ENCHANT_ARMOR -> ENCHANT_ARMOR
    com.l2jfrozen.gameserver.model.SkillType ENCHANT_WEAPON -> ENCHANT_WEAPON
    com.l2jfrozen.gameserver.model.SkillType SOULSHOT -> SOULSHOT
    com.l2jfrozen.gameserver.model.SkillType SPIRITSHOT -> SPIRITSHOT
    com.l2jfrozen.gameserver.model.SkillType SIEGEFLAG -> SIEGEFLAG
    com.l2jfrozen.gameserver.model.SkillType TAKECASTLE -> TAKECASTLE
    com.l2jfrozen.gameserver.model.SkillType DELUXE_KEY_UNLOCK -> DELUXE_KEY_UNLOCK
    com.l2jfrozen.gameserver.model.SkillType SOW -> SOW
    com.l2jfrozen.gameserver.model.SkillType HARVEST -> HARVEST
    com.l2jfrozen.gameserver.model.SkillType GET_PLAYER -> GET_PLAYER
    com.l2jfrozen.gameserver.model.SkillType COMMON_CRAFT -> COMMON_CRAFT
    com.l2jfrozen.gameserver.model.SkillType DWARVEN_CRAFT -> DWARVEN_CRAFT
    com.l2jfrozen.gameserver.model.SkillType CREATE_ITEM -> CREATE_ITEM
    com.l2jfrozen.gameserver.model.SkillType SUMMON_TREASURE_KEY -> SUMMON_TREASURE_KEY
    com.l2jfrozen.gameserver.model.SkillType SUMMON -> SUMMON
    com.l2jfrozen.gameserver.model.SkillType FEED_PET -> FEED_PET
    com.l2jfrozen.gameserver.model.SkillType DEATHLINK_PET -> DEATHLINK_PET
    com.l2jfrozen.gameserver.model.SkillType STRSIEGEASSAULT -> STRSIEGEASSAULT
    com.l2jfrozen.gameserver.model.SkillType ERASE -> ERASE
    com.l2jfrozen.gameserver.model.SkillType BETRAY -> BETRAY
    com.l2jfrozen.gameserver.model.SkillType CANCEL -> CANCEL
    com.l2jfrozen.gameserver.model.SkillType MAGE_BANE -> MAGE_BANE
    com.l2jfrozen.gameserver.model.SkillType WARRIOR_BANE -> WARRIOR_BANE
    com.l2jfrozen.gameserver.model.SkillType NEGATE -> NEGATE
    com.l2jfrozen.gameserver.model.SkillType BUFF -> BUFF
    com.l2jfrozen.gameserver.model.SkillType DEBUFF -> DEBUFF
    com.l2jfrozen.gameserver.model.SkillType PASSIVE -> PASSIVE
    com.l2jfrozen.gameserver.model.SkillType CONT -> CONT
    com.l2jfrozen.gameserver.model.SkillType SIGNET -> SIGNET
    com.l2jfrozen.gameserver.model.SkillType SIGNET_CASTTIME -> SIGNET_CASTTIME
    com.l2jfrozen.gameserver.model.SkillType RESURRECT -> RESURRECT
    com.l2jfrozen.gameserver.model.SkillType CHARGE -> CHARGE
    com.l2jfrozen.gameserver.model.SkillType CHARGE_EFFECT -> CHARGE_EFFECT
    com.l2jfrozen.gameserver.model.SkillType CHARGEDAM -> CHARGEDAM
    com.l2jfrozen.gameserver.model.SkillType MHOT -> MHOT
    com.l2jfrozen.gameserver.model.SkillType DETECT_WEAKNESS -> DETECT_WEAKNESS
    com.l2jfrozen.gameserver.model.SkillType LUCK -> LUCK
    com.l2jfrozen.gameserver.model.SkillType RECALL -> RECALL
    com.l2jfrozen.gameserver.model.SkillType SUMMON_FRIEND -> SUMMON_FRIEND
    com.l2jfrozen.gameserver.model.SkillType REFLECT -> REFLECT
    com.l2jfrozen.gameserver.model.SkillType SPOIL -> SPOIL
    com.l2jfrozen.gameserver.model.SkillType SWEEP -> SWEEP
    com.l2jfrozen.gameserver.model.SkillType FAKE_DEATH -> FAKE_DEATH
    com.l2jfrozen.gameserver.model.SkillType UNBLEED -> UNBLEED
    com.l2jfrozen.gameserver.model.SkillType UNPOISON -> UNPOISON
    com.l2jfrozen.gameserver.model.SkillType UNDEAD_DEFENSE -> UNDEAD_DEFENSE
    com.l2jfrozen.gameserver.model.SkillType SEED -> SEED
    com.l2jfrozen.gameserver.model.SkillType BEAST_FEED -> BEAST_FEED
    com.l2jfrozen.gameserver.model.SkillType FORCE_BUFF -> FORCE_BUFF
    com.l2jfrozen.gameserver.model.SkillType CLAN_GATE -> CLAN_GATE
    com.l2jfrozen.gameserver.model.SkillType GIVE_SP -> GIVE_SP
    com.l2jfrozen.gameserver.model.SkillType COREDONE -> COREDONE
    com.l2jfrozen.gameserver.model.SkillType ZAKENPLAYER -> ZAKENPLAYER
    com.l2jfrozen.gameserver.model.SkillType ZAKENSELF -> ZAKENSELF
    com.l2jfrozen.gameserver.model.SkillType NOTDONE -> NOTDONE
    java.lang.Class _class -> _class
    com.l2jfrozen.gameserver.model.SkillType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.SkillType[] values() -> values
    com.l2jfrozen.gameserver.model.SkillType valueOf(java.lang.String) -> valueOf
    com.l2jfrozen.gameserver.model.L2Skill makeSkill(com.l2jfrozen.gameserver.templates.StatsSet) -> makeSkill
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,java.lang.Class) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.TradeItem -> com.l2jfrozen.gameserver.model.TradeItem:
    int _objectId -> _objectId
    int _itemId -> _itemId
    int _price -> _price
    int _storePrice -> _storePrice
    int _count -> _count
    int _enchantLevel -> _enchantLevel
    void <init>() -> <init>
    void setObjectId(int) -> setObjectId
    int getObjectId() -> getObjectId
    void setItemId(int) -> setItemId
    int getItemId() -> getItemId
    void setOwnersPrice(int) -> setOwnersPrice
    int getOwnersPrice() -> getOwnersPrice
    void setstorePrice(int) -> setstorePrice
    int getStorePrice() -> getStorePrice
    void setCount(int) -> setCount
    int getCount() -> getCount
    void setEnchantLevel(int) -> setEnchantLevel
    int getEnchantLevel() -> getEnchantLevel
com.l2jfrozen.gameserver.model.TradeList -> com.l2jfrozen.gameserver.model.TradeList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _partner -> _partner
    java.util.List _items -> _items
    java.lang.String _title -> _title
    boolean _packaged -> _packaged
    boolean _confirmed -> _confirmed
    boolean _locked -> _locked
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getOwner() -> getOwner
    void setPartner(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setPartner
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPartner() -> getPartner
    void setTitle(java.lang.String) -> setTitle
    java.lang.String getTitle() -> getTitle
    boolean isLocked() -> isLocked
    boolean isConfirmed() -> isConfirmed
    boolean isPackaged() -> isPackaged
    void setPackaged(boolean) -> setPackaged
    com.l2jfrozen.gameserver.model.TradeList$TradeItem[] getItems() -> getItems
    com.l2jfrozen.gameserver.model.TradeList$TradeItem[] getAvailableItems(com.l2jfrozen.gameserver.model.PcInventory) -> getAvailableItems
    int getItemCount() -> getItemCount
    com.l2jfrozen.gameserver.model.TradeList$TradeItem adjustAvailableItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> adjustAvailableItem
    void adjustItemRequest(com.l2jfrozen.gameserver.model.ItemRequest) -> adjustItemRequest
    void adjustItemRequestByItemId(com.l2jfrozen.gameserver.model.ItemRequest) -> adjustItemRequestByItemId
    com.l2jfrozen.gameserver.model.TradeList$TradeItem addItem(int,int) -> addItem
    com.l2jfrozen.gameserver.model.TradeList$TradeItem addItem(int,int,int) -> addItem
    com.l2jfrozen.gameserver.model.TradeList$TradeItem addItemByItemId(int,int,int,int) -> addItemByItemId
    com.l2jfrozen.gameserver.model.TradeList$TradeItem removeItem(int,int,int) -> removeItem
    void updateItems() -> updateItems
    void lock() -> lock
    void clear() -> clear
    boolean confirm() -> confirm
    void invalidateConfirmation() -> invalidateConfirmation
    boolean validate() -> validate
    boolean TransferItems(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.network.serverpackets.InventoryUpdate,com.l2jfrozen.gameserver.network.serverpackets.InventoryUpdate) -> TransferItems
    int countItemsSlots(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> countItemsSlots
    int calcItemsWeight() -> calcItemsWeight
    void doExchange(com.l2jfrozen.gameserver.model.TradeList) -> doExchange
    boolean PrivateStoreBuy(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.ItemRequest[],int) -> PrivateStoreBuy
    boolean PrivateStoreSell(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.ItemRequest[],int) -> PrivateStoreSell
    com.l2jfrozen.gameserver.model.TradeList$TradeItem getItem(int) -> getItem
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.TradeList$TradeItem -> com.l2jfrozen.gameserver.model.TradeList$TradeItem:
    int _objectId -> _objectId
    com.l2jfrozen.gameserver.templates.L2Item _item -> _item
    int _enchant -> _enchant
    int _count -> _count
    int _price -> _price
    int _curcount -> _curcount
    com.l2jfrozen.gameserver.model.L2Augmentation _augmentation -> _augmentation
    com.l2jfrozen.gameserver.model.TradeList this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.TradeList,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.TradeList,com.l2jfrozen.gameserver.templates.L2Item,int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.TradeList,com.l2jfrozen.gameserver.model.TradeList$TradeItem,int,int) -> <init>
    void setObjectId(int) -> setObjectId
    int getObjectId() -> getObjectId
    com.l2jfrozen.gameserver.templates.L2Item getItem() -> getItem
    void setEnchant(int) -> setEnchant
    int getEnchant() -> getEnchant
    void setCount(int) -> setCount
    int getCount() -> getCount
    void setPrice(int) -> setPrice
    int getPrice() -> getPrice
    void setCurCount(int) -> setCurCount
    int getCurCount() -> getCurCount
    boolean isAugmented() -> isAugmented
com.l2jfrozen.gameserver.model.TriggerType -> com.l2jfrozen.gameserver.model.TriggerType:
    com.l2jfrozen.gameserver.model.TriggerType ON_HIT -> ON_HIT
    com.l2jfrozen.gameserver.model.TriggerType ON_CRIT -> ON_CRIT
    com.l2jfrozen.gameserver.model.TriggerType ON_CAST -> ON_CAST
    com.l2jfrozen.gameserver.model.TriggerType ON_PHYSICAL -> ON_PHYSICAL
    com.l2jfrozen.gameserver.model.TriggerType ON_MAGIC -> ON_MAGIC
    com.l2jfrozen.gameserver.model.TriggerType ON_MAGIC_GOOD -> ON_MAGIC_GOOD
    com.l2jfrozen.gameserver.model.TriggerType ON_MAGIC_OFFENSIVE -> ON_MAGIC_OFFENSIVE
    com.l2jfrozen.gameserver.model.TriggerType ON_ATTACKED -> ON_ATTACKED
    com.l2jfrozen.gameserver.model.TriggerType ON_ATTACKED_HIT -> ON_ATTACKED_HIT
    com.l2jfrozen.gameserver.model.TriggerType ON_ATTACKED_CRIT -> ON_ATTACKED_CRIT
    com.l2jfrozen.gameserver.model.TriggerType ON_HIT_BY_SKILL -> ON_HIT_BY_SKILL
    com.l2jfrozen.gameserver.model.TriggerType ON_HIT_BY_OFFENSIVE_SKILL -> ON_HIT_BY_OFFENSIVE_SKILL
    com.l2jfrozen.gameserver.model.TriggerType ON_HIT_BY_GOOD_MAGIC -> ON_HIT_BY_GOOD_MAGIC
    int _mask -> _mask
    com.l2jfrozen.gameserver.model.TriggerType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.TriggerType[] values() -> values
    com.l2jfrozen.gameserver.model.TriggerType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    boolean check(int) -> check
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.Warehouse -> com.l2jfrozen.gameserver.model.Warehouse:
    void <init>() -> <init>
com.l2jfrozen.gameserver.model.actor.appearance.PcAppearance -> com.l2jfrozen.gameserver.model.actor.appearance.PcAppearance:
    byte _face -> _face
    byte _hairColor -> _hairColor
    byte _hairStyle -> _hairStyle
    boolean _sex -> _sex
    boolean _invisible -> _invisible
    int _nameColor -> _nameColor
    int _titleColor -> _titleColor
    void <init>(byte,byte,byte,boolean) -> <init>
    byte getFace() -> getFace
    void setFace(int) -> setFace
    byte getHairColor() -> getHairColor
    void setHairColor(int) -> setHairColor
    byte getHairStyle() -> getHairStyle
    void setHairStyle(int) -> setHairStyle
    boolean getSex() -> getSex
    void setSex(boolean) -> setSex
    void setInvisible() -> setInvisible
    void setVisible() -> setVisible
    boolean getInvisible() -> getInvisible
    int getNameColor() -> getNameColor
    void setNameColor(int) -> setNameColor
    void setNameColor(int,int,int) -> setNameColor
    int getTitleColor() -> getTitleColor
    void setTitleColor(int) -> setTitleColor
    void setTitleColor(int,int,int) -> setTitleColor
com.l2jfrozen.gameserver.model.actor.instance.ItemLocation -> com.l2jfrozen.gameserver.model.actor.instance.ItemLocation:
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation VOID -> VOID
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation INVENTORY -> INVENTORY
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation PAPERDOLL -> PAPERDOLL
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation WAREHOUSE -> WAREHOUSE
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation CLANWH -> CLANWH
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation PET -> PET
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation PET_EQUIP -> PET_EQUIP
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation LEASE -> LEASE
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation FREIGHT -> FREIGHT
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation[] values() -> values
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2AdventurerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2AdventurerInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,java.lang.String) -> showChatWindow
com.l2jfrozen.gameserver.model.actor.instance.L2AdventurerInstance$1 -> com.l2jfrozen.gameserver.model.actor.instance.L2AdventurerInstance$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$managers$StatusEnum -> $SwitchMap$com$l2jfrozen$gameserver$managers$StatusEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2ArtefactInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ArtefactInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    boolean isAttackable() -> isAttackable
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character) -> reduceCurrentHp
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceCurrentHp
    void onForcedAttack(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onForcedAttack
com.l2jfrozen.gameserver.model.actor.instance.L2AuctioneerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2AuctioneerInstance:
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_REGULAR -> COND_REGULAR
    java.util.Map _pendingAuctions -> _pendingAuctions
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMessageWindow
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
    java.lang.String getPictureName(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPictureName
com.l2jfrozen.gameserver.model.actor.instance.L2BabyPetInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2BabyPetInstance:
    com.l2jfrozen.gameserver.model.L2Skill _weakHeal -> _weakHeal
    com.l2jfrozen.gameserver.model.L2Skill _strongHeal -> _strongHeal
    java.util.concurrent.Future _healingTask -> _healingTask
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> <init>
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void unSummon(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> unSummon
    void doRevive() -> doRevive
com.l2jfrozen.gameserver.model.actor.instance.L2BabyPetInstance$Heal -> com.l2jfrozen.gameserver.model.actor.instance.L2BabyPetInstance$Heal:
    com.l2jfrozen.gameserver.model.actor.instance.L2BabyPetInstance _baby -> _baby
    com.l2jfrozen.gameserver.model.actor.instance.L2BabyPetInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2BabyPetInstance,com.l2jfrozen.gameserver.model.actor.instance.L2BabyPetInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2BlacksmithInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2BlacksmithInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    float boatSpeed -> boatSpeed
    java.lang.String _name -> _name
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$L2BoatTrajet _t1 -> _t1
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$L2BoatTrajet _t2 -> _t2
    int _cycle -> _cycle
    com.l2jfrozen.gameserver.network.serverpackets.VehicleDeparture _vd -> _vd
    java.util.Map _inboat -> _inboat
    int _runstate -> _runstate
    int lastx -> lastx
    int lasty -> lasty
    boolean needOnVehicleCheckLocation -> needOnVehicleCheckLocation
    boolean _inCycle -> _inCycle
    int _id -> _id
    void <init>(int,com.l2jfrozen.gameserver.templates.L2CharTemplate,java.lang.String) -> <init>
    void moveToLocation(int,int,int,float) -> moveToLocation
    void evtArrived() -> evtArrived
    void sendVehicleDeparture(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendVehicleDeparture
    com.l2jfrozen.gameserver.network.serverpackets.VehicleDeparture getVehicleDeparture() -> getVehicleDeparture
    void beginCycle() -> beginCycle
    void updatePeopleInTheBoat(int,int,int) -> updatePeopleInTheBoat
    void begin() -> begin
    void say(int) -> say
    void spawn() -> spawn
    void setTrajet1(int,int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> setTrajet1
    void setTrajet2(int,int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> setTrajet2
    void updateAbnormalEffect() -> updateAbnormalEffect
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getActiveWeaponInstance() -> getActiveWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getActiveWeaponItem() -> getActiveWeaponItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getSecondaryWeaponInstance() -> getSecondaryWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getSecondaryWeaponItem() -> getSecondaryWeaponItem
    int getLevel() -> getLevel
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    boolean isInCycle() -> isInCycle
    void stopCycle() -> stopCycle
    void startCycle() -> startCycle
    void reloadPath() -> reloadPath
    java.lang.String getBoatName() -> getBoatName
    int getSizeInside() -> getSizeInside
    int getCycle() -> getCycle
    int getId() -> getId
    void setId(int) -> setId
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$BoatCaptain -> com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$BoatCaptain:
    int _state -> _state
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance _boat -> _boat
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance,int,com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$Boatrun -> com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$Boatrun:
    int _state -> _state
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance _boat -> _boat
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance,int,com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$L2BoatTrajet -> com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$L2BoatTrajet:
    java.util.Map _path -> _path
    int idWaypoint1 -> idWaypoint1
    int idWTicket1 -> idWTicket1
    int ntx1 -> ntx1
    int nty1 -> nty1
    int ntz1 -> ntz1
    int max -> max
    java.lang.String boatName -> boatName
    java.lang.String npc1 -> npc1
    java.lang.String sysmess10_1 -> sysmess10_1
    java.lang.String sysmess5_1 -> sysmess5_1
    java.lang.String sysmess1_1 -> sysmess1_1
    java.lang.String sysmessb_1 -> sysmessb_1
    java.lang.String sysmess0_1 -> sysmess0_1
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance,int,int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void parseLine(java.lang.String) -> parseLine
    void loadBoatPath() -> loadBoatPath
    int state(int,com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance) -> state
com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$L2BoatTrajet$L2BoatPoint -> com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$L2BoatTrajet$L2BoatPoint:
    int speed1 -> speed1
    int speed2 -> speed2
    int x -> x
    int y -> y
    int z -> z
    int time -> time
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$L2BoatTrajet this$1 -> this$1
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance$L2BoatTrajet) -> <init>
com.l2jfrozen.gameserver.model.actor.instance.L2BoxInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2BoxInstance:
    int MAX_ITEMS_PER_PAGE -> MAX_ITEMS_PER_PAGE
    java.lang.String INSERT_GRANT -> INSERT_GRANT
    java.lang.String DELETE_GRANT -> DELETE_GRANT
    java.lang.String LIST_GRANT -> LIST_GRANT
    java.lang.String VARIABLE_PREFIX -> VARIABLE_PREFIX
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    boolean hasRandomAnimation() -> hasRandomAnimation
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    boolean hasAccess(java.lang.String) -> hasAccess
    java.util.List getAccess() -> getAccess
    boolean grantAccess(java.lang.String,boolean) -> grantAccess
    void showWithdrawWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showWithdrawWindow
    void showDepositWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showDepositWindow
    java.util.Set getItems(java.lang.String) -> getItems
    void putInBox(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> putInBox
    void takeOutBox(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> takeOutBox
com.l2jfrozen.gameserver.model.actor.instance.L2BoxInstance$L2BoxItem -> com.l2jfrozen.gameserver.model.actor.instance.L2BoxInstance$L2BoxItem:
    int itemid -> itemid
    int id -> id
    int count -> count
    java.lang.String name -> name
    com.l2jfrozen.gameserver.model.actor.instance.L2BoxInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2BoxInstance,int,int,java.lang.String,int) -> <init>
    int compareTo(java.lang.Object) -> compareTo
com.l2jfrozen.gameserver.model.actor.instance.L2BugReportInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2BugReportInstance:
    java.lang.String _type -> _type
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void sendReport(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> sendReport
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void showHtmlWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showHtmlWindow
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2CabaleBufferInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2CabaleBufferInstance:
    java.util.concurrent.ScheduledFuture _aiTask -> _aiTask
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void deleteMe() -> deleteMe
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
com.l2jfrozen.gameserver.model.actor.instance.L2CabaleBufferInstance$CabalaAI -> com.l2jfrozen.gameserver.model.actor.instance.L2CabaleBufferInstance$CabalaAI:
    com.l2jfrozen.gameserver.model.actor.instance.L2CabaleBufferInstance _caster -> _caster
    com.l2jfrozen.gameserver.model.actor.instance.L2CabaleBufferInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2CabaleBufferInstance,com.l2jfrozen.gameserver.model.actor.instance.L2CabaleBufferInstance) -> <init>
    void run() -> run
    boolean handleCast(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> handleCast
com.l2jfrozen.gameserver.model.actor.instance.L2CastleBlacksmithInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2CastleBlacksmithInstance:
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_OWNER -> COND_OWNER
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showMessageWindow
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2CastleChamberlainInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2CastleChamberlainInstance:
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_OWNER -> COND_OWNER
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void sendHtmlMessage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> sendHtmlMessage
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMessageWindow
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2CastleMagicianInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2CastleMagicianInstance:
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_OWNER -> COND_OWNER
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showChatWindow
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
    boolean validateGateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateGateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2CastleTeleporterInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2CastleTeleporterInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean _currentTask -> _currentTask
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showChatWindow
    void oustAllPlayers() -> oustAllPlayers
    boolean getTask() -> getTask
    void setTask(boolean) -> setTask
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2CastleTeleporterInstance$oustAllPlayers -> com.l2jfrozen.gameserver.model.actor.instance.L2CastleTeleporterInstance$oustAllPlayers:
    com.l2jfrozen.gameserver.model.actor.instance.L2CastleTeleporterInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2CastleTeleporterInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2CastleWarehouseInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2CastleWarehouseInstance:
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_OWNER -> COND_OWNER
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void showRetrieveWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showRetrieveWindow
    void showDepositWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showDepositWindow
    void showDepositWindowClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showDepositWindowClan
    void showWithdrawWindowClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showWithdrawWindowClan
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showChatWindow
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2ChestInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ChestInstance:
    boolean _isInteracted -> _isInteracted
    boolean _specialDrop -> _specialDrop
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onSpawn() -> onSpawn
    boolean isInteracted() -> isInteracted
    void setInteracted() -> setInteracted
    boolean isSpecialDrop() -> isSpecialDrop
    void setSpecialDrop() -> setSpecialDrop
    void doItemDrop(com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.L2Character) -> doItemDrop
    void chestTrap(com.l2jfrozen.gameserver.model.L2Character) -> chestTrap
    boolean handleCast(com.l2jfrozen.gameserver.model.L2Character,int) -> handleCast
    boolean isMovementDisabled() -> isMovementDisabled
    boolean hasRandomAnimation() -> hasRandomAnimation
com.l2jfrozen.gameserver.model.actor.instance.L2ClanHallManagerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ClanHallManagerInstance:
    int COND_OWNER_FALSE -> COND_OWNER_FALSE
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_OWNER -> COND_OWNER
    int _clanHallId -> _clanHallId
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void sendHtmlMessage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.network.serverpackets.NpcHtmlMessage) -> sendHtmlMessage
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMessageWindow
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
    com.l2jfrozen.gameserver.model.entity.ClanHall getClanHall() -> getClanHall
    void showVaultWindowDeposit(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showVaultWindowDeposit
    void showVaultWindowWithdraw(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showVaultWindowWithdraw
    void doTeleport(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> doTeleport
    void showBuyWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showBuyWindow
    void revalidateDeco(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> revalidateDeco
com.l2jfrozen.gameserver.model.actor.instance.L2ClanHallSiegeInfInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ClanHallSiegeInfInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showPlayersList(com.l2jfrozen.gameserver.model.L2Clan,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showPlayersList
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showMessageWindow
com.l2jfrozen.gameserver.model.actor.instance.L2ClassMasterInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ClassMasterInstance:
    com.l2jfrozen.gameserver.model.actor.instance.L2ClassMasterInstance _instance -> _instance
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2ClassMasterInstance getInstance() -> getInstance
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showChatWindowChooseClass(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showChatWindowChooseClass
    void showChatWindow1st(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showChatWindow1st
    void showChatWindow2nd(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showChatWindow2nd
    void showChatWindow3rd(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showChatWindow3rd
    void showChatWindowBase(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showChatWindowBase
    void changeClass(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> changeClass
com.l2jfrozen.gameserver.model.actor.instance.L2ClassMasterInstance$1 -> com.l2jfrozen.gameserver.model.actor.instance.L2ClassMasterInstance$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$base$ClassLevel -> $SwitchMap$com$l2jfrozen$gameserver$model$base$ClassLevel
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2CommanderInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2CommanderInstance:
    int _homeX -> _homeX
    int _homeY -> _homeY
    int _homeZ -> _homeZ
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    com.l2jfrozen.gameserver.model.actor.knownlist.CommanderKnownList getKnownList() -> getKnownList
    void addDamageHate(com.l2jfrozen.gameserver.model.L2Character,int,int) -> addDamageHate
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void getHomeLocation() -> getHomeLocation
    int getHomeX() -> getHomeX
    int getHomeY() -> getHomeY
    void returnHome() -> returnHome
    com.l2jfrozen.gameserver.model.actor.knownlist.AttackableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
com.l2jfrozen.gameserver.model.actor.instance.L2ControlTowerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ControlTowerInstance:
    java.util.List _guards -> _guards
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    boolean isAttackable() -> isAttackable
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    void onForcedAttack(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onForcedAttack
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onDeath() -> onDeath
    void registerGuard(com.l2jfrozen.gameserver.model.spawn.L2Spawn) -> registerGuard
    java.util.List getGuards() -> getGuards
com.l2jfrozen.gameserver.model.actor.instance.L2ControllableMobInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ControllableMobInstance:
    boolean _isInvul -> _isInvul
    com.l2jfrozen.gameserver.ai.L2ControllableMobAI _aiBackup -> _aiBackup
    boolean isAggressive() -> isAggressive
    int getAggroRange() -> getAggroRange
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.ai.L2CharacterAI getAI() -> getAI
    boolean isInvul() -> isInvul
    void setInvul(boolean) -> setInvul
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceCurrentHp
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void deleteMe() -> deleteMe
    void removeAI() -> removeAI
com.l2jfrozen.gameserver.model.actor.instance.L2ControllableMobInstance$ControllableAIAcessor -> com.l2jfrozen.gameserver.model.actor.instance.L2ControllableMobInstance$ControllableAIAcessor:
    com.l2jfrozen.gameserver.model.actor.instance.L2ControllableMobInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ControllableMobInstance) -> <init>
    void detachAI() -> detachAI
com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int STORM_CUBIC -> STORM_CUBIC
    int VAMPIRIC_CUBIC -> VAMPIRIC_CUBIC
    int LIFE_CUBIC -> LIFE_CUBIC
    int VIPER_CUBIC -> VIPER_CUBIC
    int POLTERGEIST_CUBIC -> POLTERGEIST_CUBIC
    int BINDING_CUBIC -> BINDING_CUBIC
    int AQUA_CUBIC -> AQUA_CUBIC
    int SPARK_CUBIC -> SPARK_CUBIC
    int ATTRACT_CUBIC -> ATTRACT_CUBIC
    int SMART_CUBIC_EVATEMPLAR -> SMART_CUBIC_EVATEMPLAR
    int SMART_CUBIC_SHILLIENTEMPLAR -> SMART_CUBIC_SHILLIENTEMPLAR
    int SMART_CUBIC_ARCANALORD -> SMART_CUBIC_ARCANALORD
    int SMART_CUBIC_ELEMENTALMASTER -> SMART_CUBIC_ELEMENTALMASTER
    int SMART_CUBIC_SPECTRALMASTER -> SMART_CUBIC_SPECTRALMASTER
    int MAX_MAGIC_RANGE -> MAX_MAGIC_RANGE
    int SKILL_CUBIC_HEAL -> SKILL_CUBIC_HEAL
    int SKILL_CUBIC_CURE -> SKILL_CUBIC_CURE
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    com.l2jfrozen.gameserver.model.L2Character _target -> _target
    int _id -> _id
    int _matk -> _matk
    int _activationtime -> _activationtime
    int _activationchance -> _activationchance
    boolean _active -> _active
    boolean _givenByOther -> _givenByOther
    java.util.List _skills -> _skills
    java.util.concurrent.Future _disappearTask -> _disappearTask
    java.util.concurrent.Future _actionTask -> _actionTask
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,int,int,int,boolean) -> <init>
    void doAction() -> doAction
    int getId() -> getId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getOwner() -> getOwner
    int getMCriticalHit(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMCriticalHit
    int getMAtk() -> getMAtk
    void stopAction() -> stopAction
    void cancelDisappear() -> cancelDisappear
    void getCubicTarget() -> getCubicTarget
    void useCubicContinuous(com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useCubicContinuous
    void useCubicMdam(com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useCubicMdam
    void useCubicDisabler(com.l2jfrozen.gameserver.model.SkillType,com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance,com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Object[]) -> useCubicDisabler
    boolean isInCubicRange(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character) -> isInCubicRange
    void cubicTargetForHeal() -> cubicTargetForHeal
    boolean givenByOther() -> givenByOther
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance$1 -> com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance$Action -> com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance$Action:
    int _chance -> _chance
    com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance$Disappear -> com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance$Disappear:
    com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance$Heal -> com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance$Heal:
    com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2CustomNpcInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2CustomNpcInstance:
    boolean _allowRandomWeapons -> _allowRandomWeapons
    boolean _allowRandomClass -> _allowRandomClass
    boolean _allowRandomAppearance -> _allowRandomAppearance
    java.lang.String _name -> _name
    java.lang.String _title -> _title
    int[] _int -> _int
    boolean[] _boolean -> _boolean
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _NpcInstance -> _NpcInstance
    com.l2jfrozen.gameserver.model.base.ClassId _classId -> _classId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void initialize() -> initialize
    java.lang.String getName() -> getName
    java.lang.String getTitle() -> getTitle
    int getKarma() -> getKarma
    int getClanId() -> getClanId
    int getAllyId() -> getAllyId
    int getClanCrestId() -> getClanCrestId
    int getAllyCrestId() -> getAllyCrestId
    int getRace() -> getRace
    int getClassId() -> getClassId
    int getEnchantWeapon() -> getEnchantWeapon
    int getPledgeClass() -> getPledgeClass
    int getCursedWeaponLevel() -> getCursedWeaponLevel
    int PAPERDOLL_RHAND() -> PAPERDOLL_RHAND
    int PAPERDOLL_LHAND() -> PAPERDOLL_LHAND
    int PAPERDOLL_GLOVES() -> PAPERDOLL_GLOVES
    int PAPERDOLL_CHEST() -> PAPERDOLL_CHEST
    int PAPERDOLL_LEGS() -> PAPERDOLL_LEGS
    int PAPERDOLL_FEET() -> PAPERDOLL_FEET
    int PAPERDOLL_HAIR() -> PAPERDOLL_HAIR
    int PAPERDOLL_HAIR2() -> PAPERDOLL_HAIR2
    int getHairStyle() -> getHairStyle
    int getHairColor() -> getHairColor
    int getFace() -> getFace
    int nameColor() -> nameColor
    int titleColor() -> titleColor
    boolean getPvpFlag() -> getPvpFlag
    int getHeading() -> getHeading
    boolean isNoble() -> isNoble
    boolean isHero() -> isHero
    boolean isFemaleSex() -> isFemaleSex
    void chooseRandomWeapon() -> chooseRandomWeapon
    void chooseRandomClass() -> chooseRandomClass
    void chooseRandomAppearance() -> chooseRandomAppearance
    void setPcInstanceData(com.l2jfrozen.gameserver.managers.CustomNpcInstanceManager$customInfo) -> setPcInstanceData
com.l2jfrozen.gameserver.model.actor.instance.L2DecoInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2DecoInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceCurrentHp
com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _castleIndex -> _castleIndex
    int _mapRegion -> _mapRegion
    int _fortIndex -> _fortIndex
    int _rangeXMin -> _rangeXMin
    int _rangeYMin -> _rangeYMin
    int _rangeZMin -> _rangeZMin
    int _rangeXMax -> _rangeXMax
    int _rangeYMax -> _rangeYMax
    int _rangeZMax -> _rangeZMax
    int _A -> _A
    int _B -> _B
    int _C -> _C
    int _D -> _D
    int _doorId -> _doorId
    java.lang.String _name -> _name
    boolean _open -> _open
    boolean _unlockable -> _unlockable
    com.l2jfrozen.gameserver.model.entity.ClanHall _clanHall -> _clanHall
    int _autoActionDelay -> _autoActionDelay
    java.util.concurrent.ScheduledFuture _autoActionTask -> _autoActionTask
    com.l2jfrozen.gameserver.model.L2Territory pos -> pos
    com.l2jfrozen.gameserver.ai.L2CharacterAI getAI() -> getAI
    boolean hasAI() -> hasAI
    void <init>(int,com.l2jfrozen.gameserver.templates.L2CharTemplate,int,java.lang.String,boolean) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.DoorKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.stat.DoorStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.status.DoorStatus getStatus() -> getStatus
    boolean isUnlockable() -> isUnlockable
    int getLevel() -> getLevel
    int getDoorId() -> getDoorId
    boolean getOpen() -> getOpen
    void setOpen(boolean) -> setOpen
    void setAutoActionDelay(int) -> setAutoActionDelay
    int getDamage() -> getDamage
    com.l2jfrozen.gameserver.model.entity.siege.Castle getCastle() -> getCastle
    com.l2jfrozen.gameserver.model.entity.siege.Fort getFort() -> getFort
    void setClanHall(com.l2jfrozen.gameserver.model.entity.ClanHall) -> setClanHall
    com.l2jfrozen.gameserver.model.entity.ClanHall getClanHall() -> getClanHall
    boolean isEnemyOf(com.l2jfrozen.gameserver.model.L2Character) -> isEnemyOf
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    boolean isAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAttackable
    void updateAbnormalEffect() -> updateAbnormalEffect
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getActiveWeaponInstance() -> getActiveWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getActiveWeaponItem() -> getActiveWeaponItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getSecondaryWeaponInstance() -> getSecondaryWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getSecondaryWeaponItem() -> getSecondaryWeaponItem
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onActionShift(com.l2jfrozen.gameserver.network.L2GameClient) -> onActionShift
    void broadcastStatusUpdate() -> broadcastStatusUpdate
    void onOpen() -> onOpen
    void onClose() -> onClose
    void closeMe() -> closeMe
    void openMe() -> openMe
    java.lang.String toString() -> toString
    java.lang.String getDoorName() -> getDoorName
    int getXMin() -> getXMin
    int getYMin() -> getYMin
    int getZMin() -> getZMin
    int getXMax() -> getXMax
    int getYMax() -> getYMax
    int getZMax() -> getZMax
    void setRange(int,int,int,int,int,int) -> setRange
    int getA() -> getA
    int getB() -> getB
    int getC() -> getC
    int getD() -> getD
    int getMapRegion() -> getMapRegion
    void setMapRegion(int) -> setMapRegion
    java.util.Collection getKnownSiegeGuards() -> getKnownSiegeGuards
    java.util.Collection getKnownFortSiegeGuards() -> getKnownFortSiegeGuards
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceCurrentHp
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    com.l2jfrozen.gameserver.model.actor.status.CharStatus getStatus() -> getStatus
    com.l2jfrozen.gameserver.model.actor.stat.CharStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance$AIAccessor -> com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance$AIAccessor:
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance getActor() -> getActor
    void moveTo(int,int,int,int) -> moveTo
    void moveTo(int,int,int) -> moveTo
    void stopMove(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> stopMove
    void doAttack(com.l2jfrozen.gameserver.model.L2Character) -> doAttack
    void doCast(com.l2jfrozen.gameserver.model.L2Skill) -> doCast
    com.l2jfrozen.gameserver.model.L2Character getActor() -> getActor
com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance$AutoOpenClose -> com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance$AutoOpenClose:
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance$CloseTask -> com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance$CloseTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2DoormenInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2DoormenInstance:
    com.l2jfrozen.gameserver.model.entity.ClanHall _clanHall -> _clanHall
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_CASTLE_OWNER -> COND_CASTLE_OWNER
    int COND_HALL_OWNER -> COND_HALL_OWNER
    int COND_FORT_OWNER -> COND_FORT_OWNER
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.entity.ClanHall getClanHall() -> getClanHall
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMessageWindow
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2EffectPointInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2EffectPointInstance:
    com.l2jfrozen.gameserver.model.L2Character _owner -> _owner
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.L2Character) -> <init>
    com.l2jfrozen.gameserver.model.L2Character getOwner() -> getOwner
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onActionShift(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onActionShift
com.l2jfrozen.gameserver.model.actor.instance.L2FeedableBeastInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2FeedableBeastInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
com.l2jfrozen.gameserver.model.actor.instance.L2FestivalGuideInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2FestivalGuideInstance:
    int _festivalType -> _festivalType
    int _festivalOracle -> _festivalOracle
    int _blueStonesNeeded -> _blueStonesNeeded
    int _greenStonesNeeded -> _greenStonesNeeded
    int _redStonesNeeded -> _redStonesNeeded
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,java.lang.String,boolean) -> showChatWindow
    java.lang.String getStatsTable() -> getStatsTable
    java.lang.String getBonusTable() -> getBonusTable
    java.lang.String calculateDate(java.lang.String) -> calculateDate
com.l2jfrozen.gameserver.model.actor.instance.L2FestivalMonsterInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2FestivalMonsterInstance:
    int _bonusMultiplier -> _bonusMultiplier
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void setOfferingBonus(int) -> setOfferingBonus
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    boolean isAggressive() -> isAggressive
    boolean hasRandomAnimation() -> hasRandomAnimation
    void doItemDrop(com.l2jfrozen.gameserver.model.L2Character) -> doItemDrop
com.l2jfrozen.gameserver.model.actor.instance.L2FishermanInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2FishermanInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void showBuyWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showBuyWindow
    void showSellWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showSellWindow
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showSkillList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showSkillList
com.l2jfrozen.gameserver.model.actor.instance.L2FolkInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2FolkInstance:
    com.l2jfrozen.gameserver.model.base.ClassId[] _classesToTeach -> _classesToTeach
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void showSkillList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.base.ClassId) -> showSkillList
    void showEnchantSkillList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.base.ClassId) -> showEnchantSkillList
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
com.l2jfrozen.gameserver.model.actor.instance.L2FortManagerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2FortManagerInstance:
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_OWNER -> COND_OWNER
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    boolean isWarehouse() -> isWarehouse
    void sendHtmlMessage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.network.serverpackets.NpcHtmlMessage) -> sendHtmlMessage
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMessageWindow
    void showVaultWindowDeposit(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showVaultWindowDeposit
    void showVaultWindowWithdraw(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showVaultWindowWithdraw
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2FortMerchantInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2FortMerchantInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMessageWindow
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showMessageWindow
    void showSiegeInfoWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showSiegeInfoWindow
    boolean validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2FortSiegeGuardInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2FortSiegeGuardInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.FortSiegeGuardKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.ai.L2CharacterAI getAI() -> getAI
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    boolean hasRandomAnimation() -> hasRandomAnimation
    void returnHome() -> returnHome
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void addDamageHate(com.l2jfrozen.gameserver.model.L2Character,int,int) -> addDamageHate
    com.l2jfrozen.gameserver.model.actor.knownlist.AttackableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
com.l2jfrozen.gameserver.model.actor.instance.L2FortWyvernManagerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2FortWyvernManagerInstance:
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_OWNER -> COND_OWNER
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMessageWindow
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2FriendlyMobInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2FriendlyMobInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.FriendlyMobKnownList getKnownList() -> getKnownList
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    boolean isAggressive() -> isAggressive
    com.l2jfrozen.gameserver.model.actor.knownlist.AttackableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
com.l2jfrozen.gameserver.model.actor.instance.L2GourdInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2GourdInstance:
    java.lang.String _name -> _name
    byte _nectar -> _nectar
    byte _good -> _good
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void setOwner(java.lang.String) -> setOwner
    java.lang.String getOwner() -> getOwner
    void addNectar() -> addNectar
    byte getNectar() -> getNectar
    void addGood() -> addGood
    byte getGood() -> getGood
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceCurrentHp
com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance:
    int BOSS_MAINTENANCE_INTERVAL -> BOSS_MAINTENANCE_INTERVAL
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    int getMaintenanceInterval() -> getMaintenanceInterval
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void onSpawn() -> onSpawn
    void manageMinions() -> manageMinions
    boolean isRaid() -> isRaid
    void healFull() -> healFull
com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance$1 -> com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance$1:
    com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2GrandBossInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2GuardInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2GuardInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _homeX -> _homeX
    int _homeY -> _homeY
    int _homeZ -> _homeZ
    int RETURN_INTERVAL -> RETURN_INTERVAL
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.GuardKnownList getKnownList() -> getKnownList
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    void getHomeLocation() -> getHomeLocation
    int getHomeX() -> getHomeX
    void returnHome() -> returnHome
    void onSpawn() -> onSpawn
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    com.l2jfrozen.gameserver.model.actor.knownlist.AttackableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2GuardInstance$ReturnTask -> com.l2jfrozen.gameserver.model.actor.instance.L2GuardInstance$ReturnTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2GuardInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2GuardInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2GuardNoHTMLInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2GuardNoHTMLInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _homeX -> _homeX
    int _homeY -> _homeY
    int _homeZ -> _homeZ
    int RETURN_INTERVAL -> RETURN_INTERVAL
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.GuardNoHTMLKnownList getKnownList() -> getKnownList
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    void getHomeLocation() -> getHomeLocation
    int getHomeX() -> getHomeX
    void returnHome() -> returnHome
    void onSpawn() -> onSpawn
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    com.l2jfrozen.gameserver.model.actor.knownlist.AttackableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2GuardNoHTMLInstance$ReturnTask -> com.l2jfrozen.gameserver.model.actor.instance.L2GuardNoHTMLInstance$ReturnTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2GuardNoHTMLInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2GuardNoHTMLInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance:
    com.l2jfrozen.gameserver.templates.L2Henna _template -> _template
    int _symbolId -> _symbolId
    int _itemIdDye -> _itemIdDye
    int _price -> _price
    int _statINT -> _statINT
    int _statSTR -> _statSTR
    int _statCON -> _statCON
    int _statMEM -> _statMEM
    int _statDEX -> _statDEX
    int _statWIT -> _statWIT
    int _amountDyeRequire -> _amountDyeRequire
    void <init>(com.l2jfrozen.gameserver.templates.L2Henna) -> <init>
    java.lang.String getName() -> getName
    com.l2jfrozen.gameserver.templates.L2Henna getTemplate() -> getTemplate
    int getSymbolId() -> getSymbolId
    void setSymbolId(int) -> setSymbolId
    int getItemIdDye() -> getItemIdDye
    void setItemIdDye(int) -> setItemIdDye
    int getAmountDyeRequire() -> getAmountDyeRequire
    void setAmountDyeRequire(int) -> setAmountDyeRequire
    int getPrice() -> getPrice
    void setPrice(int) -> setPrice
    int getStatINT() -> getStatINT
    void setStatINT(int) -> setStatINT
    int getStatSTR() -> getStatSTR
    void setStatSTR(int) -> setStatSTR
    int getStatCON() -> getStatCON
    void setStatCON(int) -> setStatCON
    int getStatMEM() -> getStatMEM
    void setStatMEM(int) -> setStatMEM
    int getStatDEX() -> getStatDEX
    void setStatDEX(int) -> setStatDEX
    int getStatWIT() -> getStatWIT
    void setStatWIT(int) -> setStatWIT
com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.logging.Logger _logItems -> _logItems
    com.l2jfrozen.gameserver.model.DropProtection _dropProtection -> _dropProtection
    int _ownerId -> _ownerId
    int _count -> _count
    int _initCount -> _initCount
    int _time -> _time
    boolean _decrease -> _decrease
    int _itemId -> _itemId
    com.l2jfrozen.gameserver.templates.L2Item _item -> _item
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation _loc -> _loc
    int _locData -> _locData
    int _enchantLevel -> _enchantLevel
    int _priceSell -> _priceSell
    int _priceBuy -> _priceBuy
    boolean _wear -> _wear
    com.l2jfrozen.gameserver.model.L2Augmentation _augmentation -> _augmentation
    int _mana -> _mana
    boolean _consumingMana -> _consumingMana
    int MANA_CONSUMPTION_RATE -> MANA_CONSUMPTION_RATE
    int _type1 -> _type1
    int _type2 -> _type2
    long _dropTime -> _dropTime
    int CHARGED_NONE -> CHARGED_NONE
    int CHARGED_SOULSHOT -> CHARGED_SOULSHOT
    int CHARGED_SPIRITSHOT -> CHARGED_SPIRITSHOT
    int CHARGED_BLESSED_SOULSHOT -> CHARGED_BLESSED_SOULSHOT
    int CHARGED_BLESSED_SPIRITSHOT -> CHARGED_BLESSED_SPIRITSHOT
    int _chargedSoulshot -> _chargedSoulshot
    int _chargedSpiritshot -> _chargedSpiritshot
    boolean _chargedFishtshot -> _chargedFishtshot
    boolean _protected -> _protected
    int UNCHANGED -> UNCHANGED
    int ADDED -> ADDED
    int REMOVED -> REMOVED
    int MODIFIED -> MODIFIED
    int _lastChange -> _lastChange
    boolean _existsInDb -> _existsInDb
    boolean _storedInDb -> _storedInDb
    java.util.concurrent.ScheduledFuture itemLootShedule -> itemLootShedule
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(int,int) -> <init>
    void <init>(int,com.l2jfrozen.gameserver.templates.L2Item) -> <init>
    void setOwnerId(java.lang.String,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> setOwnerId
    void setOwnerId(int) -> setOwnerId
    int getOwnerId() -> getOwnerId
    void setLocation(com.l2jfrozen.gameserver.model.actor.instance.ItemLocation) -> setLocation
    void setLocation(com.l2jfrozen.gameserver.model.actor.instance.ItemLocation,int) -> setLocation
    com.l2jfrozen.gameserver.model.actor.instance.ItemLocation getLocation() -> getLocation
    boolean isPotion() -> isPotion
    int getCount() -> getCount
    void changeCount(java.lang.String,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> changeCount
    void changeCountWithoutTrace(java.lang.String,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> changeCountWithoutTrace
    void setCount(int) -> setCount
    boolean isEquipable() -> isEquipable
    boolean isEquipped() -> isEquipped
    int getEquipSlot() -> getEquipSlot
    com.l2jfrozen.gameserver.templates.L2Item getItem() -> getItem
    int getCustomType1() -> getCustomType1
    int getCustomType2() -> getCustomType2
    void setCustomType1(int) -> setCustomType1
    void setCustomType2(int) -> setCustomType2
    void setDropTime(long) -> setDropTime
    long getDropTime() -> getDropTime
    boolean isCupidBow() -> isCupidBow
    boolean isWear() -> isWear
    void setWear(boolean) -> setWear
    java.lang.Enum getItemType() -> getItemType
    int getItemId() -> getItemId
    int getCrystalCount() -> getCrystalCount
    int getReferencePrice() -> getReferencePrice
    java.lang.String getItemName() -> getItemName
    int getPriceToSell() -> getPriceToSell
    void setPriceToSell(int) -> setPriceToSell
    int getLastChange() -> getLastChange
    void setLastChange(int) -> setLastChange
    boolean isStackable() -> isStackable
    boolean isDropable() -> isDropable
    boolean isDestroyable() -> isDestroyable
    boolean isTradeable() -> isTradeable
    boolean isConsumable() -> isConsumable
    boolean isAvailable(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean,boolean) -> isAvailable
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    int getEnchantLevel() -> getEnchantLevel
    void setEnchantLevel(int) -> setEnchantLevel
    int getPDef() -> getPDef
    boolean isAugmented() -> isAugmented
    com.l2jfrozen.gameserver.model.L2Augmentation getAugmentation() -> getAugmentation
    boolean setAugmentation(com.l2jfrozen.gameserver.model.L2Augmentation) -> setAugmentation
    void removeAugmentation() -> removeAugmentation
    boolean isShadowItem() -> isShadowItem
    void setMana(int) -> setMana
    int getMana() -> getMana
    void decreaseMana(boolean) -> decreaseMana
    void scheduleConsumeManaTask() -> scheduleConsumeManaTask
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    int getChargedSoulshot() -> getChargedSoulshot
    int getChargedSpiritshot() -> getChargedSpiritshot
    boolean getChargedFishshot() -> getChargedFishshot
    void setChargedSoulshot(int) -> setChargedSoulshot
    void setChargedSpiritshot(int) -> setChargedSpiritshot
    void setChargedFishshot(boolean) -> setChargedFishshot
    com.l2jfrozen.gameserver.skills.funcs.Func[] getStatFuncs(com.l2jfrozen.gameserver.model.L2Character) -> getStatFuncs
    void updateDatabase() -> updateDatabase
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance restoreFromDb(int) -> restoreFromDb
    void dropMe(com.l2jfrozen.gameserver.model.L2Character,int,int,int) -> dropMe
    void updateInDb() -> updateInDb
    void insertIntoDb() -> insertIntoDb
    void removeFromDb() -> removeFromDb
    java.lang.String toString() -> toString
    void resetOwnerTimer() -> resetOwnerTimer
    void setItemLootShedule(java.util.concurrent.ScheduledFuture) -> setItemLootShedule
    java.util.concurrent.ScheduledFuture getItemLootShedule() -> getItemLootShedule
    void setProtected(boolean) -> setProtected
    boolean isProtected() -> isProtected
    boolean isNightLure() -> isNightLure
    void setCountDecrease(boolean) -> setCountDecrease
    boolean getCountDecrease() -> getCountDecrease
    void setInitCount(int) -> setInitCount
    int getInitCount() -> getInitCount
    void restoreInitCount() -> restoreInitCount
    void setTime(int) -> setTime
    int getTime() -> getTime
    int getLocationSlot() -> getLocationSlot
    com.l2jfrozen.gameserver.model.DropProtection getDropProtection() -> getDropProtection
    boolean isVarkaKetraAllyQuestItem() -> isVarkaKetraAllyQuestItem
    boolean isOlyRestrictedItem() -> isOlyRestrictedItem
    boolean isHeroItem() -> isHeroItem
    boolean checkOlympCondition() -> checkOlympCondition
    boolean isWeapon() -> isWeapon
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance$ScheduleConsumeManaTask -> com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance$ScheduleConsumeManaTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _shadowItem -> _shadowItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2ManorManagerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ManorManagerInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void showBuyWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showBuyWindow
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    java.lang.String getHtmlPath() -> getHtmlPath
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showMessageWindow
com.l2jfrozen.gameserver.model.actor.instance.L2MercManagerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2MercManagerInstance:
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_OWNER -> COND_OWNER
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showBuyWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showBuyWindow
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMessageWindow
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2MerchantInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2MerchantInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void showWearWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showWearWindow
    void showBuyWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showBuyWindow
    void showSellWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showSellWindow
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showRentPetWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showRentPetWindow
    void tryRentPet(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> tryRentPet
    void onActionShift(com.l2jfrozen.gameserver.network.L2GameClient) -> onActionShift
com.l2jfrozen.gameserver.model.actor.instance.L2MinionInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2MinionInstance:
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance _master -> _master
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    boolean isRaid() -> isRaid
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance getLeader() -> getLeader
    void onSpawn() -> onSpawn
    void setLeader(com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance) -> setLeader
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance:
    com.l2jfrozen.gameserver.util.MinionList _minionList -> _minionList
    java.util.concurrent.ScheduledFuture _minionMaintainTask -> _minionMaintainTask
    int MONSTER_MAINTENANCE_INTERVAL -> MONSTER_MAINTENANCE_INTERVAL
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.MonsterKnownList getKnownList() -> getKnownList
    void returnHome() -> returnHome
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    boolean isAggressive() -> isAggressive
    void onSpawn() -> onSpawn
    int getMaintenanceInterval() -> getMaintenanceInterval
    void manageMinions() -> manageMinions
    void callMinions() -> callMinions
    void callMinionsToAssist(com.l2jfrozen.gameserver.model.L2Character) -> callMinionsToAssist
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    java.util.List getSpawnedMinions() -> getSpawnedMinions
    int getTotalSpawnedMinionsInstances() -> getTotalSpawnedMinionsInstances
    int getTotalSpawnedMinionsGroups() -> getTotalSpawnedMinionsGroups
    void notifyMinionDied(com.l2jfrozen.gameserver.model.actor.instance.L2MinionInstance) -> notifyMinionDied
    void notifyMinionSpawned(com.l2jfrozen.gameserver.model.actor.instance.L2MinionInstance) -> notifyMinionSpawned
    boolean hasMinions() -> hasMinions
    void addDamageHate(com.l2jfrozen.gameserver.model.L2Character,int,int) -> addDamageHate
    void deleteMe() -> deleteMe
    void deleteSpawnedMinions() -> deleteSpawnedMinions
    com.l2jfrozen.gameserver.model.actor.knownlist.AttackableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance$1 -> com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance$1:
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance$2 -> com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance$2:
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance:
    int INTERACTION_DISTANCE -> INTERACTION_DISTANCE
    com.l2jfrozen.gameserver.model.actor.instance.L2CustomNpcInstance _customNpcInstance -> _customNpcInstance
    com.l2jfrozen.gameserver.model.spawn.L2Spawn _spawn -> _spawn
    boolean _isBusy -> _isBusy
    java.lang.String _busyMessage -> _busyMessage
    boolean _isDecayed -> _isDecayed
    boolean _isSpoil -> _isSpoil
    int _castleIndex -> _castleIndex
    int _fortIndex -> _fortIndex
    boolean isEventMob -> isEventMob
    boolean _isEventMobTvT -> _isEventMobTvT
    boolean _isEventMobDM -> _isEventMobDM
    boolean _isEventMobCTF -> _isEventMobCTF
    boolean _isCTF_throneSpawn -> _isCTF_throneSpawn
    boolean _isCTF_Flag -> _isCTF_Flag
    boolean _isInTown -> _isInTown
    java.lang.String _CTF_FlagTeamName -> _CTF_FlagTeamName
    int _isSpoiledBy -> _isSpoiledBy
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance$RandomAnimationTask _rAniTask -> _rAniTask
    int _currentLHandId -> _currentLHandId
    int _currentRHandId -> _currentRHandId
    int _currentCollisionHeight -> _currentCollisionHeight
    int _currentCollisionRadius -> _currentCollisionRadius
    void onRandomAnimation() -> onRandomAnimation
    void startRandomAnimationTimer() -> startRandomAnimationTimer
    boolean hasRandomAnimation() -> hasRandomAnimation
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.stat.NpcStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.status.NpcStatus getStatus() -> getStatus
    com.l2jfrozen.gameserver.templates.L2NpcTemplate getTemplate() -> getTemplate
    int getNpcId() -> getNpcId
    boolean isAttackable() -> isAttackable
    java.lang.String getFactionId() -> getFactionId
    int getLevel() -> getLevel
    boolean isAggressive() -> isAggressive
    int getAggroRange() -> getAggroRange
    int getFactionRange() -> getFactionRange
    boolean isUndead() -> isUndead
    void updateAbnormalEffect() -> updateAbnormalEffect
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    int getLeftHandItem() -> getLeftHandItem
    int getRightHandItem() -> getRightHandItem
    boolean isSpoil() -> isSpoil
    void setSpoil(boolean) -> setSpoil
    int getIsSpoiledBy() -> getIsSpoiledBy
    void setIsSpoiledBy(int) -> setIsSpoiledBy
    boolean isBusy() -> isBusy
    void setBusy(boolean) -> setBusy
    java.lang.String getBusyMessage() -> getBusyMessage
    void setBusyMessage(java.lang.String) -> setBusyMessage
    boolean canTarget(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> canTarget
    boolean canInteract(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> canInteract
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onActionShift(com.l2jfrozen.gameserver.network.L2GameClient) -> onActionShift
    com.l2jfrozen.gameserver.model.entity.siege.Castle getCastle() -> getCastle
    com.l2jfrozen.gameserver.model.entity.siege.Fort getFort() -> getFort
    boolean getIsInTown() -> getIsInTown
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getActiveWeaponInstance() -> getActiveWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getActiveWeaponItem() -> getActiveWeaponItem
    void giveBlessingSupport(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> giveBlessingSupport
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getSecondaryWeaponInstance() -> getSecondaryWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getSecondaryWeaponItem() -> getSecondaryWeaponItem
    void insertObjectIdAndShowChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> insertObjectIdAndShowChatWindow
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void showQuestChooseWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.quest.Quest[]) -> showQuestChooseWindow
    void showQuestWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showQuestWindow
    void showQuestWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showQuestWindow
    void showLotoWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showLotoWindow
    void makeCPRecovery(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> makeCPRecovery
    void makeSupportMagic(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> makeSupportMagic
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showChatWindow
    boolean showPkDenyChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showPkDenyChatWindow
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showChatWindow
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showChatWindow
    int getExpReward() -> getExpReward
    int getSpReward() -> getSpReward
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void setSpawn(com.l2jfrozen.gameserver.model.spawn.L2Spawn) -> setSpawn
    void onDecay() -> onDecay
    void deleteMe() -> deleteMe
    com.l2jfrozen.gameserver.model.spawn.L2Spawn getSpawn() -> getSpawn
    java.lang.String toString() -> toString
    boolean isDecayed() -> isDecayed
    void setDecayed(boolean) -> setDecayed
    void endDecayTask() -> endDecayTask
    boolean isMob() -> isMob
    void setLHandId(int) -> setLHandId
    void setRHandId(int) -> setRHandId
    void setCollisionHeight(int) -> setCollisionHeight
    void setCollisionRadius(int) -> setCollisionRadius
    int getCollisionHeight() -> getCollisionHeight
    int getCollisionRadius() -> getCollisionRadius
    com.l2jfrozen.gameserver.model.actor.instance.L2CustomNpcInstance getCustomNpcInstance() -> getCustomNpcInstance
    void setCustomNpcInstance(com.l2jfrozen.gameserver.model.actor.instance.L2CustomNpcInstance) -> setCustomNpcInstance
    void makeBuffs(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> makeBuffs
    com.l2jfrozen.gameserver.templates.L2CharTemplate getTemplate() -> getTemplate
    com.l2jfrozen.gameserver.model.actor.status.CharStatus getStatus() -> getStatus
    com.l2jfrozen.gameserver.model.actor.stat.CharStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance$RandomAnimationTask -> com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance$RandomAnimationTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance$destroyTemporalNPC -> com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance$destroyTemporalNPC:
    com.l2jfrozen.gameserver.model.spawn.L2Spawn _oldSpawn -> _oldSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.spawn.L2Spawn) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance$destroyTemporalSummon -> com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance$destroyTemporalSummon:
    com.l2jfrozen.gameserver.model.L2Summon _summon -> _summon
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.L2Summon,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2NpcWalkerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2NpcWalkerInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void setAI(com.l2jfrozen.gameserver.ai.L2CharacterAI) -> setAI
    void onSpawn() -> onSpawn
    void broadcastChat(java.lang.String) -> broadcastChat
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceCurrentHp
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    com.l2jfrozen.gameserver.ai.L2CharacterAI getAI() -> getAI
com.l2jfrozen.gameserver.model.actor.instance.L2NpcWalkerInstance$L2NpcWalkerAIAccessor -> com.l2jfrozen.gameserver.model.actor.instance.L2NpcWalkerInstance$L2NpcWalkerAIAccessor:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcWalkerInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcWalkerInstance) -> <init>
    void detachAI() -> detachAI
com.l2jfrozen.gameserver.model.actor.instance.L2ObservationInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ObservationInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void doObserve(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> doObserve
com.l2jfrozen.gameserver.model.actor.instance.L2OlympiadManagerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2OlympiadManagerInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int GATE_PASS -> GATE_PASS
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,java.lang.String) -> showChatWindow
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance:
    java.lang.String RESTORE_SKILLS_FOR_CHAR -> RESTORE_SKILLS_FOR_CHAR
    java.lang.String ADD_NEW_SKILL -> ADD_NEW_SKILL
    java.lang.String UPDATE_CHARACTER_SKILL_LEVEL -> UPDATE_CHARACTER_SKILL_LEVEL
    java.lang.String DELETE_SKILL_FROM_CHAR -> DELETE_SKILL_FROM_CHAR
    java.lang.String DELETE_CHAR_SKILLS -> DELETE_CHAR_SKILLS
    java.lang.String ADD_SKILL_SAVE -> ADD_SKILL_SAVE
    java.lang.String RESTORE_SKILL_SAVE -> RESTORE_SKILL_SAVE
    java.lang.String DELETE_SKILL_SAVE -> DELETE_SKILL_SAVE
    long _voteTimestamp -> _voteTimestamp
    boolean _posticipateSit -> _posticipateSit
    boolean sittingTaskLaunched -> sittingTaskLaunched
    com.l2jfrozen.gameserver.model.PlayerStatus saved_status -> saved_status
    long _instanceLoginTime -> _instanceLoginTime
    long _lastTeleportAction -> _lastTeleportAction
    long TOGGLE_USE -> TOGGLE_USE
    int _active_boxes -> _active_boxes
    java.util.List active_boxes_characters -> active_boxes_characters
    java.lang.String UPDATE_CHARACTER -> UPDATE_CHARACTER
    java.lang.String RESTORE_CHARACTER -> RESTORE_CHARACTER
    java.lang.String STATUS_DATA_GET -> STATUS_DATA_GET
    java.lang.String RESTORE_SKILLS_FOR_CHAR_ALT_SUBCLASS -> RESTORE_SKILLS_FOR_CHAR_ALT_SUBCLASS
    java.lang.String RESTORE_CHAR_SUBCLASSES -> RESTORE_CHAR_SUBCLASSES
    java.lang.String ADD_CHAR_SUBCLASS -> ADD_CHAR_SUBCLASS
    java.lang.String UPDATE_CHAR_SUBCLASS -> UPDATE_CHAR_SUBCLASS
    java.lang.String DELETE_CHAR_SUBCLASS -> DELETE_CHAR_SUBCLASS
    java.lang.String RESTORE_CHAR_HENNAS -> RESTORE_CHAR_HENNAS
    java.lang.String ADD_CHAR_HENNA -> ADD_CHAR_HENNA
    java.lang.String DELETE_CHAR_HENNA -> DELETE_CHAR_HENNA
    java.lang.String DELETE_CHAR_HENNAS -> DELETE_CHAR_HENNAS
    java.lang.String DELETE_CHAR_SHORTCUTS -> DELETE_CHAR_SHORTCUTS
    java.lang.String RESTORE_CHAR_RECOMS -> RESTORE_CHAR_RECOMS
    java.lang.String ADD_CHAR_RECOM -> ADD_CHAR_RECOM
    java.lang.String DELETE_CHAR_RECOMS -> DELETE_CHAR_RECOMS
    int REQUEST_TIMEOUT -> REQUEST_TIMEOUT
    int STORE_PRIVATE_NONE -> STORE_PRIVATE_NONE
    int STORE_PRIVATE_SELL -> STORE_PRIVATE_SELL
    int STORE_PRIVATE_BUY -> STORE_PRIVATE_BUY
    int STORE_PRIVATE_MANUFACTURE -> STORE_PRIVATE_MANUFACTURE
    int STORE_PRIVATE_PACKAGE_SELL -> STORE_PRIVATE_PACKAGE_SELL
    java.text.SimpleDateFormat fmt -> fmt
    int[] EXPERTISE_LEVELS -> EXPERTISE_LEVELS
    int[] COMMON_CRAFT_LEVELS -> COMMON_CRAFT_LEVELS
    com.l2jfrozen.gameserver.network.L2GameClient _client -> _client
    java.lang.String _accountName -> _accountName
    long _deleteTimer -> _deleteTimer
    boolean _isOnline -> _isOnline
    long _onlineTime -> _onlineTime
    long _onlineBeginTime -> _onlineBeginTime
    long _lastAccess -> _lastAccess
    long _uptime -> _uptime
    int _baseClass -> _baseClass
    int _activeClass -> _activeClass
    int _classIndex -> _classIndex
    boolean _first_log -> _first_log
    int pcBangPoint -> pcBangPoint
    java.util.Map _subClasses -> _subClasses
    com.l2jfrozen.gameserver.model.actor.appearance.PcAppearance _appearance -> _appearance
    int _charId -> _charId
    long _expBeforeDeath -> _expBeforeDeath
    int _karma -> _karma
    int _pvpKills -> _pvpKills
    int _pkKills -> _pkKills
    int _lastKill -> _lastKill
    int count -> count
    byte _pvpFlag -> _pvpFlag
    byte _siegeState -> _siegeState
    int _curWeightPenalty -> _curWeightPenalty
    int _lastCompassZone -> _lastCompassZone
    byte _zoneValidateCounter -> _zoneValidateCounter
    boolean _isIn7sDungeon -> _isIn7sDungeon
    int heroConsecutiveKillCount -> heroConsecutiveKillCount
    boolean isPVPHero -> isPVPHero
    boolean _awaying -> _awaying
    boolean _isAway -> _isAway
    int _originalTitleColorAway -> _originalTitleColorAway
    java.lang.String _originalTitleAway -> _originalTitleAway
    boolean _isAio -> _isAio
    long _aio_endTime -> _aio_endTime
    int eventX -> eventX
    int eventY -> eventY
    int eventZ -> eventZ
    int eventKarma -> eventKarma
    int eventPvpKills -> eventPvpKills
    int eventPkKills -> eventPkKills
    java.lang.String eventTitle -> eventTitle
    java.util.List kills -> kills
    boolean eventSitForced -> eventSitForced
    boolean atEvent -> atEvent
    java.lang.String _teamNameTvT -> _teamNameTvT
    java.lang.String _originalTitleTvT -> _originalTitleTvT
    int _originalNameColorTvT -> _originalNameColorTvT
    int _countTvTkills -> _countTvTkills
    int _countTvTdies -> _countTvTdies
    int _originalKarmaTvT -> _originalKarmaTvT
    boolean _inEventTvT -> _inEventTvT
    java.lang.String _teamNameCTF -> _teamNameCTF
    java.lang.String _teamNameHaveFlagCTF -> _teamNameHaveFlagCTF
    java.lang.String _originalTitleCTF -> _originalTitleCTF
    int _originalNameColorCTF -> _originalNameColorCTF
    int _originalKarmaCTF -> _originalKarmaCTF
    int _countCTFflags -> _countCTFflags
    boolean _inEventCTF -> _inEventCTF
    boolean _haveFlagCTF -> _haveFlagCTF
    java.util.concurrent.Future _posCheckerCTF -> _posCheckerCTF
    java.lang.String _originalTitleDM -> _originalTitleDM
    int _originalNameColorDM -> _originalNameColorDM
    int _countDMkills -> _countDMkills
    int _originalKarmaDM -> _originalKarmaDM
    boolean _inEventDM -> _inEventDM
    int _correctWord -> _correctWord
    boolean _stopKickBotTask -> _stopKickBotTask
    int _originalNameColor -> _originalNameColor
    int _countKills -> _countKills
    int _originalKarma -> _originalKarma
    int _eventKills -> _eventKills
    boolean _inEvent -> _inEvent
    boolean _inOlympiadMode -> _inOlympiadMode
    boolean _OlympiadStart -> _OlympiadStart
    int[] _OlympiadPosition -> _OlympiadPosition
    int _olympiadGameId -> _olympiadGameId
    int _olympiadSide -> _olympiadSide
    boolean _isInDuel -> _isInDuel
    int _duelState -> _duelState
    int _duelId -> _duelId
    com.l2jfrozen.gameserver.network.SystemMessageId _noDuelReason -> _noDuelReason
    boolean _inBoat -> _inBoat
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance _boat -> _boat
    com.l2jfrozen.common.util.Point3D _inBoatPosition -> _inBoatPosition
    int _mountType -> _mountType
    int _mountObjectID -> _mountObjectID
    int _telemode -> _telemode
    int _isSilentMoving -> _isSilentMoving
    boolean _inCrystallize -> _inCrystallize
    boolean _inCraftMode -> _inCraftMode
    java.util.Map _dwarvenRecipeBook -> _dwarvenRecipeBook
    java.util.Map _commonRecipeBook -> _commonRecipeBook
    boolean _waitTypeSitting -> _waitTypeSitting
    boolean _relax -> _relax
    int _obsX -> _obsX
    int _obsY -> _obsY
    int _obsZ -> _obsZ
    boolean _observerMode -> _observerMode
    com.l2jfrozen.gameserver.model.Location _lastClientPosition -> _lastClientPosition
    com.l2jfrozen.gameserver.model.Location _lastServerPosition -> _lastServerPosition
    int _recomHave -> _recomHave
    int _recomLeft -> _recomLeft
    long _lastRecomUpdate -> _lastRecomUpdate
    java.util.List _recomChars -> _recomChars
    com.l2jfrozen.gameserver.model.PcInventory _inventory -> _inventory
    com.l2jfrozen.gameserver.model.PcWarehouse _warehouse -> _warehouse
    com.l2jfrozen.gameserver.model.PcFreight _freight -> _freight
    int _privatestore -> _privatestore
    com.l2jfrozen.gameserver.model.TradeList _activeTradeList -> _activeTradeList
    com.l2jfrozen.gameserver.model.ItemContainer _activeWarehouse -> _activeWarehouse
    com.l2jfrozen.gameserver.model.L2ManufactureList _createList -> _createList
    com.l2jfrozen.gameserver.model.TradeList _sellList -> _sellList
    com.l2jfrozen.gameserver.model.TradeList _buyList -> _buyList
    boolean _newbie -> _newbie
    boolean _noble -> _noble
    boolean _hero -> _hero
    boolean _donator -> _donator
    com.l2jfrozen.gameserver.model.actor.instance.L2FolkInstance _lastFolkNpc -> _lastFolkNpc
    int _questNpcObject -> _questNpcObject
    int _party_find -> _party_find
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SummonRequest _summonRequest -> _summonRequest
    java.util.Map _quests -> _quests
    com.l2jfrozen.gameserver.model.ShortCuts _shortCuts -> _shortCuts
    com.l2jfrozen.gameserver.model.MacroList _macroses -> _macroses
    java.util.List _snoopListener -> _snoopListener
    java.util.List _snoopedPlayer -> _snoopedPlayer
    com.l2jfrozen.gameserver.model.base.ClassId _skillLearningClassId -> _skillLearningClassId
    com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance[] _henna -> _henna
    int _hennaSTR -> _hennaSTR
    int _hennaINT -> _hennaINT
    int _hennaDEX -> _hennaDEX
    int _hennaMEN -> _hennaMEN
    int _hennaWIT -> _hennaWIT
    int _hennaCON -> _hennaCON
    com.l2jfrozen.gameserver.model.L2Summon _summon -> _summon
    com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance _tamedBeast -> _tamedBeast
    com.l2jfrozen.gameserver.model.L2Radar _radar -> _radar
    int _clanId -> _clanId
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    int _apprentice -> _apprentice
    int _sponsor -> _sponsor
    long _clanJoinExpiryTime -> _clanJoinExpiryTime
    long _clanCreateExpiryTime -> _clanCreateExpiryTime
    int _powerGrade -> _powerGrade
    int _clanPrivileges -> _clanPrivileges
    int _pledgeClass -> _pledgeClass
    int _pledgeType -> _pledgeType
    int _lvlJoinedAcademy -> _lvlJoinedAcademy
    int _wantsPeace -> _wantsPeace
    int _deathPenaltyBuffLevel -> _deathPenaltyBuffLevel
    com.l2jfrozen.gameserver.datatables.AccessLevel _accessLevel -> _accessLevel
    boolean _messageRefusal -> _messageRefusal
    boolean _dietMode -> _dietMode
    boolean _exchangeRefusal -> _exchangeRefusal
    com.l2jfrozen.gameserver.model.L2Party _party -> _party
    long _lastAttackPacket -> _lastAttackPacket
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeRequester -> _activeRequester
    long _requestExpireTime -> _requestExpireTime
    com.l2jfrozen.gameserver.model.L2Request _request -> _request
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _arrowItem -> _arrowItem
    long _protectEndTime -> _protectEndTime
    long _teleportProtectEndTime -> _teleportProtectEndTime
    long _recentFakeDeathEndTime -> _recentFakeDeathEndTime
    com.l2jfrozen.gameserver.templates.L2Weapon _fistsWeaponItem -> _fistsWeaponItem
    java.util.Map _chars -> _chars
    int _expertiseIndex -> _expertiseIndex
    int _expertisePenalty -> _expertisePenalty
    boolean _heavy_mastery -> _heavy_mastery
    boolean _light_mastery -> _light_mastery
    boolean _robe_mastery -> _robe_mastery
    int _masteryPenalty -> _masteryPenalty
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _activeEnchantItem -> _activeEnchantItem
    boolean _inventoryDisable -> _inventoryDisable
    java.util.Map _cubics -> _cubics
    java.util.Map _activeSoulShots -> _activeSoulShots
    java.util.concurrent.locks.ReentrantLock soulShotLock -> soulShotLock
    com.l2jfrozen.gameserver.model.quest.Quest dialog -> dialog
    int[] _loto -> _loto
    int[] _race -> _race
    com.l2jfrozen.gameserver.model.BlockList _blockList -> _blockList
    int _team -> _team
    int _alliedVarkaKetra -> _alliedVarkaKetra
    int _hasCoupon -> _hasCoupon
    com.l2jfrozen.gameserver.model.L2Fishing _fishCombat -> _fishCombat
    boolean _fishing -> _fishing
    int _fishx -> _fishx
    int _fishy -> _fishy
    int _fishz -> _fishz
    java.util.concurrent.ScheduledFuture _taskRentPet -> _taskRentPet
    java.util.concurrent.ScheduledFuture _taskWater -> _taskWater
    java.util.List _validBypass -> _validBypass
    java.util.List _validBypass2 -> _validBypass2
    java.util.List _validLink -> _validLink
    com.l2jfrozen.gameserver.communitybbs.BB.Forum _forumMail -> _forumMail
    com.l2jfrozen.gameserver.communitybbs.BB.Forum _forumMemo -> _forumMemo
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SkillDat _currentSkill -> _currentSkill
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SkillDat _currentPetSkill -> _currentPetSkill
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SkillDat _queuedSkill -> _queuedSkill
    boolean _IsWearingFormalWear -> _IsWearingFormalWear
    com.l2jfrozen.common.util.Point3D _currentSkillWorldPosition -> _currentSkillWorldPosition
    int _cursedWeaponEquipedId -> _cursedWeaponEquipedId
    int _reviveRequested -> _reviveRequested
    double _revivePower -> _revivePower
    boolean _revivePet -> _revivePet
    double _cpUpdateIncCheck -> _cpUpdateIncCheck
    double _cpUpdateDecCheck -> _cpUpdateDecCheck
    double _cpUpdateInterval -> _cpUpdateInterval
    double _mpUpdateIncCheck -> _mpUpdateIncCheck
    double _mpUpdateDecCheck -> _mpUpdateDecCheck
    double _mpUpdateInterval -> _mpUpdateInterval
    long timerToAttack -> timerToAttack
    boolean _isInOfflineMode -> _isInOfflineMode
    boolean _isTradeOff -> _isTradeOff
    long _offlineShopStart -> _offlineShopStart
    int _originalNameColorOffline -> _originalNameColorOffline
    int _herbstask -> _herbstask
    boolean _married -> _married
    int _marriedType -> _marriedType
    int _partnerId -> _partnerId
    int _coupleId -> _coupleId
    boolean _engagerequest -> _engagerequest
    int _engageid -> _engageid
    boolean _marryrequest -> _marryrequest
    boolean _marryaccepted -> _marryaccepted
    int quakeSystem -> quakeSystem
    boolean _isLocked -> _isLocked
    boolean _isStored -> _isStored
    boolean _kicked -> _kicked
    boolean _blunt_mastery -> _blunt_mastery
    boolean _pole_mastery -> _pole_mastery
    boolean _dagger_mastery -> _dagger_mastery
    boolean _sword_mastery -> _sword_mastery
    boolean _bow_mastery -> _bow_mastery
    boolean _fist_mastery -> _fist_mastery
    boolean _dual_mastery -> _dual_mastery
    boolean _2hands_mastery -> _2hands_mastery
    int _masteryWeapPenalty -> _masteryWeapPenalty
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$MoveOnAttack launchedMovingTask -> launchedMovingTask
    java.lang.Boolean _movingTaskDefined -> _movingTaskDefined
    boolean _learningSkill -> _learningSkill
    java.util.concurrent.ScheduledFuture _taskWarnUserTakeBreak -> _taskWarnUserTakeBreak
    java.util.concurrent.ScheduledFuture _taskBotChecker -> _taskBotChecker
    java.util.concurrent.ScheduledFuture _taskKickBot -> _taskKickBot
    java.util.concurrent.ScheduledFuture _taskforfish -> _taskforfish
    boolean _wasInvisible -> _wasInvisible
    java.util.concurrent.ScheduledFuture _shortBuffTask -> _shortBuffTask
    java.util.List _friendList -> _friendList
    com.l2jfrozen.gameserver.model.FishData _fish -> _fish
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _lure -> _lure
    boolean _charmOfCourage -> _charmOfCourage
    javolution.util.FastMap ReuseTimeStamps -> ReuseTimeStamps
    boolean _gmStatus -> _gmStatus
    com.l2jfrozen.gameserver.model.L2Object _saymode -> _saymode
    java.lang.String Dropzor -> Dropzor
    boolean isintwtown -> isintwtown
    int FALLING_VALIDATION_DELAY -> FALLING_VALIDATION_DELAY
    long _fallingTimestamp -> _fallingTimestamp
    com.l2jfrozen.common.util.Point3D _lastPartyPosition -> _lastPartyPosition
    com.l2jfrozen.gameserver.model.actor.instance.PunishLevel _punishLevel -> _punishLevel
    long _punishTimer -> _punishTimer
    java.util.concurrent.ScheduledFuture _punishTask -> _punishTask
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$GatesRequest _gatesRequest -> _gatesRequest
    java.util.HashMap confirmDlgRequests -> confirmDlgRequests
    int _currentMultiSellId -> _currentMultiSellId
    int _partyroom -> _partyroom
    boolean fakeplayer -> fakeplayer
    com.l2jfrozen.gameserver.model.PlayerStatus getActualStatus() -> getActualStatus
    com.l2jfrozen.gameserver.model.PlayerStatus getLastSavedStatus() -> getLastSavedStatus
    long getVoteTimestamp() -> getVoteTimestamp
    void setVoteTimestamp(long) -> setVoteTimestamp
    int getVotePoints() -> getVotePoints
    void setVotePoints(int) -> setVotePoints
    int getVoteTime() -> getVoteTime
    boolean isSpawnProtected() -> isSpawnProtected
    boolean isTeleportProtected() -> isTeleportProtected
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance create(int,com.l2jfrozen.gameserver.templates.L2PcTemplate,java.lang.String,java.lang.String,byte,byte,byte,boolean) -> create
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance createDummyPlayer(int,java.lang.String) -> createDummyPlayer
    java.lang.String getAccountName() -> getAccountName
    java.util.Map getAccountChars() -> getAccountChars
    int getRelation(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getRelation
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance load(int,boolean) -> load
    void initPcStatusUpdateValues() -> initPcStatusUpdateValues
    void <init>(int,com.l2jfrozen.gameserver.templates.L2PcTemplate,java.lang.String,com.l2jfrozen.gameserver.model.actor.appearance.PcAppearance) -> <init>
    void <init>(int) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.PcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.stat.PcStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.status.PcStatus getStatus() -> getStatus
    com.l2jfrozen.gameserver.model.actor.appearance.PcAppearance getAppearance() -> getAppearance
    com.l2jfrozen.gameserver.templates.L2PcTemplate getBaseTemplate() -> getBaseTemplate
    com.l2jfrozen.gameserver.templates.L2PcTemplate getTemplate() -> getTemplate
    void setTemplate(com.l2jfrozen.gameserver.model.base.ClassId) -> setTemplate
    void setTimerToAttack(long) -> setTimerToAttack
    long getTimerToAttack() -> getTimerToAttack
    com.l2jfrozen.gameserver.ai.L2CharacterAI getAI() -> getAI
    int getLevel() -> getLevel
    boolean isNewbie() -> isNewbie
    void setNewbie(boolean) -> setNewbie
    void setBaseClass(int) -> setBaseClass
    void setBaseClass(com.l2jfrozen.gameserver.model.base.ClassId) -> setBaseClass
    boolean isInStoreMode() -> isInStoreMode
    boolean isInCraftMode() -> isInCraftMode
    void isInCraftMode(boolean) -> isInCraftMode
    void logout(boolean) -> logout
    boolean isKicked() -> isKicked
    void setKicked(boolean) -> setKicked
    void logout() -> logout
    com.l2jfrozen.gameserver.model.L2RecipeList[] getCommonRecipeBook() -> getCommonRecipeBook
    com.l2jfrozen.gameserver.model.L2RecipeList[] getDwarvenRecipeBook() -> getDwarvenRecipeBook
    void registerCommonRecipeList(com.l2jfrozen.gameserver.model.L2RecipeList) -> registerCommonRecipeList
    void registerDwarvenRecipeList(com.l2jfrozen.gameserver.model.L2RecipeList) -> registerDwarvenRecipeList
    boolean hasRecipeList(int) -> hasRecipeList
    void unregisterRecipeList(int) -> unregisterRecipeList
    int getLastQuestNpcObject() -> getLastQuestNpcObject
    void setLastQuestNpcObject(int) -> setLastQuestNpcObject
    com.l2jfrozen.gameserver.model.quest.QuestState getQuestState(java.lang.String) -> getQuestState
    void setQuestState(com.l2jfrozen.gameserver.model.quest.QuestState) -> setQuestState
    void delQuestState(java.lang.String) -> delQuestState
    com.l2jfrozen.gameserver.model.quest.QuestState[] addToQuestStateArray(com.l2jfrozen.gameserver.model.quest.QuestState[],com.l2jfrozen.gameserver.model.quest.QuestState) -> addToQuestStateArray
    com.l2jfrozen.gameserver.model.quest.Quest[] getAllActiveQuests() -> getAllActiveQuests
    com.l2jfrozen.gameserver.model.quest.QuestState[] getQuestsForAttacks(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> getQuestsForAttacks
    com.l2jfrozen.gameserver.model.quest.QuestState[] getQuestsForKills(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> getQuestsForKills
    com.l2jfrozen.gameserver.model.quest.QuestState[] getQuestsForTalk(int) -> getQuestsForTalk
    com.l2jfrozen.gameserver.model.quest.QuestState processQuestEvent(java.lang.String,java.lang.String) -> processQuestEvent
    void showQuestWindow(java.lang.String,java.lang.String) -> showQuestWindow
    com.l2jfrozen.gameserver.model.L2ShortCut[] getAllShortCuts() -> getAllShortCuts
    com.l2jfrozen.gameserver.model.L2ShortCut getShortCut(int,int) -> getShortCut
    void registerShortCut(com.l2jfrozen.gameserver.model.L2ShortCut) -> registerShortCut
    void deleteShortCut(int,int) -> deleteShortCut
    void registerMacro(com.l2jfrozen.gameserver.model.L2Macro) -> registerMacro
    void deleteMacro(int) -> deleteMacro
    com.l2jfrozen.gameserver.model.MacroList getMacroses() -> getMacroses
    void setSiegeState(byte) -> setSiegeState
    byte getSiegeState() -> getSiegeState
    void setPvpFlag(int) -> setPvpFlag
    byte getPvpFlag() -> getPvpFlag
    void updatePvPFlag(int) -> updatePvPFlag
    void revalidateZone(boolean) -> revalidateZone
    boolean hasDwarvenCraft() -> hasDwarvenCraft
    int getDwarvenCraft() -> getDwarvenCraft
    boolean hasCommonCraft() -> hasCommonCraft
    int getCommonCraft() -> getCommonCraft
    int getPkKills() -> getPkKills
    void setPkKills(int) -> setPkKills
    long getDeleteTimer() -> getDeleteTimer
    void setDeleteTimer(long) -> setDeleteTimer
    int getCurrentLoad() -> getCurrentLoad
    long getLastRecomUpdate() -> getLastRecomUpdate
    void setLastRecomUpdate(long) -> setLastRecomUpdate
    int getRecomHave() -> getRecomHave
    void incRecomHave() -> incRecomHave
    void setRecomHave(int) -> setRecomHave
    int getRecomLeft() -> getRecomLeft
    void decRecomLeft() -> decRecomLeft
    void giveRecom(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> giveRecom
    boolean canRecom(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> canRecom
    void setExpBeforeDeath(long) -> setExpBeforeDeath
    long getExpBeforeDeath() -> getExpBeforeDeath
    int getKarma() -> getKarma
    void setKarma(int) -> setKarma
    int getMaxLoad() -> getMaxLoad
    int getExpertisePenalty() -> getExpertisePenalty
    int getMasteryPenalty() -> getMasteryPenalty
    int getMasteryWeapPenalty() -> getMasteryWeapPenalty
    int getWeightPenalty() -> getWeightPenalty
    void refreshOverloaded() -> refreshOverloaded
    void refreshMasteryPenality() -> refreshMasteryPenality
    boolean canInteract(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> canInteract
    void refreshMasteryWeapPenality() -> refreshMasteryWeapPenality
    void refreshExpertisePenalty() -> refreshExpertisePenalty
    void checkIfWeaponIsAllowed() -> checkIfWeaponIsAllowed
    void checkSSMatch(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> checkSSMatch
    int getPvpKills() -> getPvpKills
    void setPvpKills(int) -> setPvpKills
    com.l2jfrozen.gameserver.model.base.ClassId getClassId() -> getClassId
    void setClassId(int) -> setClassId
    long getExp() -> getExp
    void setActiveEnchantItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> setActiveEnchantItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getActiveEnchantItem() -> getActiveEnchantItem
    void setFistsWeaponItem(com.l2jfrozen.gameserver.templates.L2Weapon) -> setFistsWeaponItem
    com.l2jfrozen.gameserver.templates.L2Weapon getFistsWeaponItem() -> getFistsWeaponItem
    com.l2jfrozen.gameserver.templates.L2Weapon findFistsWeaponItem(int) -> findFistsWeaponItem
    void rewardSkills() -> rewardSkills
    void rewardSkills(boolean) -> rewardSkills
    void regiveTemporarySkills() -> regiveTemporarySkills
    void giveAvailableSkills() -> giveAvailableSkills
    void setExp(long) -> setExp
    com.l2jfrozen.gameserver.model.base.Race getRace() -> getRace
    com.l2jfrozen.gameserver.model.L2Radar getRadar() -> getRadar
    int getSp() -> getSp
    void setSp(int) -> setSp
    boolean isCastleLord(int) -> isCastleLord
    int getClanId() -> getClanId
    int getClanCrestId() -> getClanCrestId
    int getClanCrestLargeId() -> getClanCrestLargeId
    long getClanJoinExpiryTime() -> getClanJoinExpiryTime
    void setClanJoinExpiryTime(long) -> setClanJoinExpiryTime
    long getClanCreateExpiryTime() -> getClanCreateExpiryTime
    void setClanCreateExpiryTime(long) -> setClanCreateExpiryTime
    void setOnlineTime(long) -> setOnlineTime
    long getOnlineTime() -> getOnlineTime
    com.l2jfrozen.gameserver.model.PcInventory getInventory() -> getInventory
    void removeItemFromShortCut(int) -> removeItemFromShortCut
    boolean isMovingTaskDefined() -> isMovingTaskDefined
    void setMovingTaskDefined(boolean) -> setMovingTaskDefined
    void defineNewMovingTask(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> defineNewMovingTask
    void modifyMovingTask(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> modifyMovingTask
    void startMovingTask() -> startMovingTask
    boolean isSitting() -> isSitting
    boolean isSittingTaskLaunched() -> isSittingTaskLaunched
    void setIsSitting(boolean) -> setIsSitting
    void setPosticipateSit(boolean) -> setPosticipateSit
    boolean getPosticipateSit() -> getPosticipateSit
    void sitDown() -> sitDown
    void standUp() -> standUp
    void setRelax(boolean) -> setRelax
    com.l2jfrozen.gameserver.model.PcWarehouse getWarehouse() -> getWarehouse
    void clearWarehouse() -> clearWarehouse
    com.l2jfrozen.gameserver.model.PcFreight getFreight() -> getFreight
    int getCharId() -> getCharId
    void setCharId(int) -> setCharId
    int getAdena() -> getAdena
    int getItemCount(int,int) -> getItemCount
    int getAncientAdena() -> getAncientAdena
    void addAdena(java.lang.String,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> addAdena
    boolean reduceAdena(java.lang.String,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> reduceAdena
    void addAncientAdena(java.lang.String,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> addAncientAdena
    boolean reduceAncientAdena(java.lang.String,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> reduceAncientAdena
    void addItem(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.L2Object,boolean) -> addItem
    void addItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> addItem
    boolean destroyItem(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyItem
    boolean destroyItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyItem
    boolean destroyItemWithoutTrace(java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyItemWithoutTrace
    boolean destroyItemByItemId(java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyItemByItemId
    void destroyWearedItems(java.lang.String,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyWearedItems
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance transferItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.Inventory,com.l2jfrozen.gameserver.model.L2Object) -> transferItem
    boolean dropItem(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.L2Object,boolean,boolean) -> dropItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance dropItem(java.lang.String,int,int,int,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean,boolean) -> dropItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance checkItemManipulation(int,int,java.lang.String) -> checkItemManipulation
    void setProtection(boolean) -> setProtection
    void setTeleportProtection(boolean) -> setTeleportProtection
    void setRecentFakeDeath(boolean) -> setRecentFakeDeath
    boolean isRecentFakeDeath() -> isRecentFakeDeath
    com.l2jfrozen.gameserver.network.L2GameClient getClient() -> getClient
    void setClient(com.l2jfrozen.gameserver.network.L2GameClient) -> setClient
    void closeNetConnection() -> closeNetConnection
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onActionShift(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onActionShift
    boolean isInFunEvent() -> isInFunEvent
    boolean isInStartedTVTEvent() -> isInStartedTVTEvent
    boolean isRegisteredInTVTEvent() -> isRegisteredInTVTEvent
    boolean isInStartedDMEvent() -> isInStartedDMEvent
    boolean isRegisteredInDMEvent() -> isRegisteredInDMEvent
    boolean isInStartedCTFEvent() -> isInStartedCTFEvent
    boolean isRegisteredInCTFEvent() -> isRegisteredInCTFEvent
    boolean isRegisteredInFunEvent() -> isRegisteredInFunEvent
    boolean arePlayerOffensiveSkillsLocked() -> arePlayerOffensiveSkillsLocked
    boolean needCpUpdate(int) -> needCpUpdate
    boolean needMpUpdate(int) -> needMpUpdate
    void broadcastStatusUpdate() -> broadcastStatusUpdate
    void updatePvPColor(int) -> updatePvPColor
    void updatePkColor(int) -> updatePkColor
    void broadcastUserInfo() -> broadcastUserInfo
    void broadcastTitleInfo() -> broadcastTitleInfo
    int getAllyId() -> getAllyId
    int getAllyCrestId() -> getAllyCrestId
    void doInteract(com.l2jfrozen.gameserver.model.L2Character) -> doInteract
    void doAutoLoot(com.l2jfrozen.gameserver.model.L2Attackable,com.l2jfrozen.gameserver.model.L2Attackable$RewardItem) -> doAutoLoot
    void doPickupItem(com.l2jfrozen.gameserver.model.L2Object) -> doPickupItem
    void setTarget(com.l2jfrozen.gameserver.model.L2Object) -> setTarget
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getActiveWeaponInstance() -> getActiveWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getActiveWeaponItem() -> getActiveWeaponItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getChestArmorInstance() -> getChestArmorInstance
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getLegsArmorInstance() -> getLegsArmorInstance
    com.l2jfrozen.gameserver.templates.L2Armor getActiveChestArmorItem() -> getActiveChestArmorItem
    com.l2jfrozen.gameserver.templates.L2Armor getActiveLegsArmorItem() -> getActiveLegsArmorItem
    boolean isWearingHeavyArmor() -> isWearingHeavyArmor
    boolean isWearingLightArmor() -> isWearingLightArmor
    boolean isWearingMagicArmor() -> isWearingMagicArmor
    boolean isWearingFormalWear() -> isWearingFormalWear
    void setIsWearingFormalWear(boolean) -> setIsWearingFormalWear
    boolean isMarried() -> isMarried
    void setMarried(boolean) -> setMarried
    int marriedType() -> marriedType
    void setmarriedType(int) -> setmarriedType
    boolean isEngageRequest() -> isEngageRequest
    void setEngageRequest(boolean,int) -> setEngageRequest
    void setMaryRequest(boolean) -> setMaryRequest
    boolean isMaryRequest() -> isMaryRequest
    void setMarryAccepted(boolean) -> setMarryAccepted
    boolean isMarryAccepted() -> isMarryAccepted
    int getEngageId() -> getEngageId
    int getPartnerId() -> getPartnerId
    void setPartnerId(int) -> setPartnerId
    int getCoupleId() -> getCoupleId
    void setCoupleId(int) -> setCoupleId
    void EngageAnswer(int) -> EngageAnswer
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getSecondaryWeaponInstance() -> getSecondaryWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getSecondaryWeaponItem() -> getSecondaryWeaponItem
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void removeCTFFlagOnDie() -> removeCTFFlagOnDie
    void onDieDropItem(com.l2jfrozen.gameserver.model.L2Character) -> onDieDropItem
    void onDieUpdateKarma() -> onDieUpdateKarma
    void onKillUpdatePvPKarma(com.l2jfrozen.gameserver.model.L2Character) -> onKillUpdatePvPKarma
    boolean checkAntiFarm(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkAntiFarm
    void addItemReward(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addItemReward
    void increasePvpKills() -> increasePvpKills
    void QuakeSystem() -> QuakeSystem
    void doPkInfo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> doPkInfo
    void increasePkKillsAndKarma(int) -> increasePkKillsAndKarma
    int calculateKarmaLost(long) -> calculateKarmaLost
    void updatePvPStatus() -> updatePvPStatus
    void updatePvPStatus(com.l2jfrozen.gameserver.model.L2Character) -> updatePvPStatus
    void restoreExp(double) -> restoreExp
    void deathPenalty(boolean) -> deathPenalty
    void increaseLevel() -> increaseLevel
    void stopAllTimers() -> stopAllTimers
    com.l2jfrozen.gameserver.model.L2Summon getPet() -> getPet
    void setPet(com.l2jfrozen.gameserver.model.L2Summon) -> setPet
    com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance getTrainedBeast() -> getTrainedBeast
    void setTrainedBeast(com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance) -> setTrainedBeast
    com.l2jfrozen.gameserver.model.L2Request getRequest() -> getRequest
    void setActiveRequester(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setActiveRequester
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActiveRequester() -> getActiveRequester
    boolean isProcessingRequest() -> isProcessingRequest
    boolean isProcessingTransaction() -> isProcessingTransaction
    void onTransactionRequest(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onTransactionRequest
    void onTransactionResponse() -> onTransactionResponse
    void setActiveWarehouse(com.l2jfrozen.gameserver.model.ItemContainer) -> setActiveWarehouse
    com.l2jfrozen.gameserver.model.ItemContainer getActiveWarehouse() -> getActiveWarehouse
    void setActiveTradeList(com.l2jfrozen.gameserver.model.TradeList) -> setActiveTradeList
    com.l2jfrozen.gameserver.model.TradeList getActiveTradeList() -> getActiveTradeList
    void onTradeStart(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onTradeStart
    void onTradeConfirm(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onTradeConfirm
    void onTradeCancel(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onTradeCancel
    void onTradeFinish(boolean) -> onTradeFinish
    void startTrade(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> startTrade
    void cancelActiveTrade() -> cancelActiveTrade
    com.l2jfrozen.gameserver.model.L2ManufactureList getCreateList() -> getCreateList
    void setCreateList(com.l2jfrozen.gameserver.model.L2ManufactureList) -> setCreateList
    com.l2jfrozen.gameserver.model.TradeList getSellList() -> getSellList
    com.l2jfrozen.gameserver.model.TradeList getBuyList() -> getBuyList
    void setPrivateStoreType(int) -> setPrivateStoreType
    int getPrivateStoreType() -> getPrivateStoreType
    void setSkillLearningClassId(com.l2jfrozen.gameserver.model.base.ClassId) -> setSkillLearningClassId
    com.l2jfrozen.gameserver.model.base.ClassId getSkillLearningClassId() -> getSkillLearningClassId
    void setClan(com.l2jfrozen.gameserver.model.L2Clan) -> setClan
    com.l2jfrozen.gameserver.model.L2Clan getClan() -> getClan
    boolean isClanLeader() -> isClanLeader
    void reduceArrowCount() -> reduceArrowCount
    boolean checkAndEquipArrows() -> checkAndEquipArrows
    boolean disarmWeapons() -> disarmWeapons
    boolean isUsingDualWeapon() -> isUsingDualWeapon
    void setUptime(long) -> setUptime
    long getUptime() -> getUptime
    boolean isInvul() -> isInvul
    boolean isInParty() -> isInParty
    void setParty(com.l2jfrozen.gameserver.model.L2Party) -> setParty
    void joinParty(com.l2jfrozen.gameserver.model.L2Party) -> joinParty
    boolean isGM() -> isGM
    boolean isAdministrator() -> isAdministrator
    boolean isUser() -> isUser
    boolean isNormalGm() -> isNormalGm
    void leaveParty() -> leaveParty
    com.l2jfrozen.gameserver.model.L2Party getParty() -> getParty
    void setFirstLog(int) -> setFirstLog
    void setFirstLog(boolean) -> setFirstLog
    boolean getFirstLog() -> getFirstLog
    void cancelCastMagic() -> cancelCastMagic
    void setAccessLevel(int) -> setAccessLevel
    void setAccountAccesslevel(int) -> setAccountAccesslevel
    com.l2jfrozen.gameserver.datatables.AccessLevel getAccessLevel() -> getAccessLevel
    double getLevelMod() -> getLevelMod
    void updateAndBroadcastStatus(int) -> updateAndBroadcastStatus
    void setKarmaFlag(int) -> setKarmaFlag
    void broadcastKarma() -> broadcastKarma
    void setOnlineStatus(boolean) -> setOnlineStatus
    void setIsIn7sDungeon(boolean) -> setIsIn7sDungeon
    void updateOnlineStatus() -> updateOnlineStatus
    void updateIsIn7sDungeonStatus() -> updateIsIn7sDungeonStatus
    void updateFirstLog() -> updateFirstLog
    boolean createDb() -> createDb
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance restore(int,boolean) -> restore
    com.l2jfrozen.gameserver.communitybbs.BB.Forum getMail() -> getMail
    void setMail(com.l2jfrozen.gameserver.communitybbs.BB.Forum) -> setMail
    com.l2jfrozen.gameserver.communitybbs.BB.Forum getMemo() -> getMemo
    void setMemo(com.l2jfrozen.gameserver.communitybbs.BB.Forum) -> setMemo
    boolean restoreSubClassData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> restoreSubClassData
    void restoreCharData() -> restoreCharData
    void storeRecipeBook() -> storeRecipeBook
    void restoreRecipeBook() -> restoreRecipeBook
    void store(boolean) -> store
    void store() -> store
    void storeCharBase() -> storeCharBase
    void storeCharSub() -> storeCharSub
    void storeEffect() -> storeEffect
    int isOnline() -> isOnline
    boolean isIn7sDungeon() -> isIn7sDungeon
    com.l2jfrozen.gameserver.model.L2Skill addSkill(com.l2jfrozen.gameserver.model.L2Skill,boolean) -> addSkill
    boolean isLearningSkill() -> isLearningSkill
    com.l2jfrozen.gameserver.model.L2Skill removeSkill(com.l2jfrozen.gameserver.model.L2Skill,boolean) -> removeSkill
    com.l2jfrozen.gameserver.model.L2Skill removeSkill(com.l2jfrozen.gameserver.model.L2Skill) -> removeSkill
    void storeSkill(com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Skill,int) -> storeSkill
    void checkAllowedSkills() -> checkAllowedSkills
    void restoreSkills() -> restoreSkills
    void restoreEffects() -> restoreEffects
    void restoreEffects(boolean) -> restoreEffects
    void restoreHenna() -> restoreHenna
    void restoreRecom() -> restoreRecom
    int getHennaEmptySlots() -> getHennaEmptySlots
    boolean removeHenna(int) -> removeHenna
    boolean addHenna(com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance) -> addHenna
    void recalcHennaStats() -> recalcHennaStats
    com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance getHennas(int) -> getHennas
    int getHennaStatINT() -> getHennaStatINT
    int getHennaStatSTR() -> getHennaStatSTR
    int getHennaStatCON() -> getHennaStatCON
    int getHennaStatMEN() -> getHennaStatMEN
    int getHennaStatWIT() -> getHennaStatWIT
    int getHennaStatDEX() -> getHennaStatDEX
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    void useMagic(com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean) -> useMagic
    boolean isInLooterParty(int) -> isInLooterParty
    boolean checkPvpSkill(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Skill) -> checkPvpSkill
    boolean checkPvpSkill(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Skill,boolean) -> checkPvpSkill
    void consumeItem(int,int) -> consumeItem
    boolean isMageClass() -> isMageClass
    boolean isMounted() -> isMounted
    boolean checkLandingState() -> checkLandingState
    boolean setMountType(int) -> setMountType
    int getMountType() -> getMountType
    void updateAbnormalEffect() -> updateAbnormalEffect
    void tempInvetoryDisable() -> tempInvetoryDisable
    boolean isInvetoryDisabled() -> isInvetoryDisabled
    java.util.Map getCubics() -> getCubics
    void addCubic(int,int,double,int,int,int,boolean) -> addCubic
    void delCubic(int) -> delCubic
    com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance getCubic(int) -> getCubic
    void unsummonAllCubics() -> unsummonAllCubics
    java.lang.String toString() -> toString
    int getEnchantEffect() -> getEnchantEffect
    void setLastFolkNPC(com.l2jfrozen.gameserver.model.actor.instance.L2FolkInstance) -> setLastFolkNPC
    com.l2jfrozen.gameserver.model.actor.instance.L2FolkInstance getLastFolkNPC() -> getLastFolkNPC
    void setSilentMoving(boolean) -> setSilentMoving
    boolean isSilentMoving() -> isSilentMoving
    boolean isFestivalParticipant() -> isFestivalParticipant
    void addAutoSoulShot(int) -> addAutoSoulShot
    void removeAutoSoulShot(int) -> removeAutoSoulShot
    java.util.Map getAutoSoulShot() -> getAutoSoulShot
    void rechargeAutoSoulShot(boolean,boolean,boolean) -> rechargeAutoSoulShot
    void rechargeAutoSoulShot(boolean,boolean,boolean,int) -> rechargeAutoSoulShot
    int getClanPrivileges() -> getClanPrivileges
    void setClanPrivileges(int) -> setClanPrivileges
    void setPledgeClass(int) -> setPledgeClass
    int getPledgeClass() -> getPledgeClass
    void setPledgeType(int) -> setPledgeType
    int getPledgeType() -> getPledgeType
    int getApprentice() -> getApprentice
    void setApprentice(int) -> setApprentice
    int getSponsor() -> getSponsor
    void setSponsor(int) -> setSponsor
    void sendMessage(java.lang.String) -> sendMessage
    void enterObserverMode(int,int,int) -> enterObserverMode
    void enterOlympiadObserverMode(int,int,int,int) -> enterOlympiadObserverMode
    void leaveObserverMode() -> leaveObserverMode
    void updateNameTitleColor() -> updateNameTitleColor
    void updateGmNameTitleColor() -> updateGmNameTitleColor
    void setOlympiadSide(int) -> setOlympiadSide
    int getOlympiadSide() -> getOlympiadSide
    void setOlympiadGameId(int) -> setOlympiadGameId
    int getOlympiadGameId() -> getOlympiadGameId
    int getObsX() -> getObsX
    int getObsY() -> getObsY
    int getObsZ() -> getObsZ
    boolean inObserverMode() -> inObserverMode
    void setObserverMode(boolean) -> setObserverMode
    int getTeleMode() -> getTeleMode
    void setTeleMode(int) -> setTeleMode
    void setLoto(int,int) -> setLoto
    int getLoto(int) -> getLoto
    void setRace(int,int) -> setRace
    int getRace(int) -> getRace
    void sendPacket(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> sendPacket
    void sendPacket(com.l2jfrozen.gameserver.network.SystemMessageId) -> sendPacket
    boolean getMessageRefusal() -> getMessageRefusal
    void setMessageRefusal(boolean) -> setMessageRefusal
    void setDietMode(boolean) -> setDietMode
    boolean getDietMode() -> getDietMode
    void setExchangeRefusal(boolean) -> setExchangeRefusal
    boolean getExchangeRefusal() -> getExchangeRefusal
    com.l2jfrozen.gameserver.model.BlockList getBlockList() -> getBlockList
    void setHeroAura(boolean) -> setHeroAura
    boolean getIsPVPHero() -> getIsPVPHero
    int getCount() -> getCount
    void reloadPVPHeroAura() -> reloadPVPHeroAura
    void setDonator(boolean) -> setDonator
    boolean isDonator() -> isDonator
    boolean isAway() -> isAway
    void setIsAway(boolean) -> setIsAway
    void setIsInOlympiadMode(boolean) -> setIsInOlympiadMode
    void setIsOlympiadStart(boolean) -> setIsOlympiadStart
    boolean isOlympiadStart() -> isOlympiadStart
    void setOlympiadPosition(int[]) -> setOlympiadPosition
    int[] getOlympiadPosition() -> getOlympiadPosition
    boolean isHero() -> isHero
    boolean isInOlympiadMode() -> isInOlympiadMode
    boolean isInDuel() -> isInDuel
    int getDuelId() -> getDuelId
    void setDuelState(int) -> setDuelState
    int getDuelState() -> getDuelState
    void setCoupon(int) -> setCoupon
    void addCoupon(int) -> addCoupon
    boolean getCoupon(int) -> getCoupon
    void setIsInDuel(int) -> setIsInDuel
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage getNoDuelReason() -> getNoDuelReason
    boolean canDuel() -> canDuel
    boolean isNoble() -> isNoble
    void setNoble(boolean) -> setNoble
    void addClanLeaderSkills(boolean) -> addClanLeaderSkills
    void setLvlJoinedAcademy(int) -> setLvlJoinedAcademy
    int getLvlJoinedAcademy() -> getLvlJoinedAcademy
    boolean isAcademyMember() -> isAcademyMember
    void setTeam(int) -> setTeam
    int getTeam() -> getTeam
    void setWantsPeace(int) -> setWantsPeace
    int getWantsPeace() -> getWantsPeace
    boolean isFishing() -> isFishing
    void setFishing(boolean) -> setFishing
    void setAllianceWithVarkaKetra(int) -> setAllianceWithVarkaKetra
    int getAllianceWithVarkaKetra() -> getAllianceWithVarkaKetra
    boolean isAlliedWithVarka() -> isAlliedWithVarka
    boolean isAlliedWithKetra() -> isAlliedWithKetra
    void sendSkillList() -> sendSkillList
    void sendSkillList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendSkillList
    boolean addSubClass(int,int) -> addSubClass
    boolean modifySubClass(int,int) -> modifySubClass
    boolean isSubClassActive() -> isSubClassActive
    java.util.Map getSubClasses() -> getSubClasses
    int getTotalSubClasses() -> getTotalSubClasses
    int getBaseClass() -> getBaseClass
    int getActiveClass() -> getActiveClass
    int getClassIndex() -> getClassIndex
    void setClassTemplate(int) -> setClassTemplate
    boolean setActiveClass(int) -> setActiveClass
    void broadcastClassIcon() -> broadcastClassIcon
    void stopWarnUserTakeBreak() -> stopWarnUserTakeBreak
    void startWarnUserTakeBreak() -> startWarnUserTakeBreak
    void startBotChecker() -> startBotChecker
    void stopBotChecker() -> stopBotChecker
    void checkAnswer(int) -> checkAnswer
    void stopRentPet() -> stopRentPet
    void startRentPet(int) -> startRentPet
    boolean isRentedPet() -> isRentedPet
    void stopWaterTask() -> stopWaterTask
    void startWaterTask() -> startWaterTask
    boolean isInWater() -> isInWater
    void checkWaterState() -> checkWaterState
    void onPlayerEnter() -> onPlayerEnter
    long getLastAccess() -> getLastAccess
    void checkRecom(int,int) -> checkRecom
    void restartRecom() -> restartRecom
    void doRevive() -> doRevive
    void doRevive(double) -> doRevive
    void reviveRequest(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill,boolean) -> reviveRequest
    void reviveAnswer(int) -> reviveAnswer
    boolean isReviveRequested() -> isReviveRequested
    boolean isRevivingPet() -> isRevivingPet
    void removeReviving() -> removeReviving
    void onActionRequest() -> onActionRequest
    void setExpertiseIndex(int) -> setExpertiseIndex
    int getExpertiseIndex() -> getExpertiseIndex
    void onTeleported() -> onTeleported
    boolean updatePosition(int) -> updatePosition
    void setLastClientPosition(int,int,int) -> setLastClientPosition
    void setLastClientPosition(com.l2jfrozen.gameserver.model.Location) -> setLastClientPosition
    boolean checkLastClientPosition(int,int,int) -> checkLastClientPosition
    int getLastClientDistance(int,int,int) -> getLastClientDistance
    void setLastServerPosition(int,int,int) -> setLastServerPosition
    void setLastServerPosition(com.l2jfrozen.gameserver.model.Location) -> setLastServerPosition
    boolean checkLastServerPosition(int,int,int) -> checkLastServerPosition
    int getLastServerDistance(int,int,int) -> getLastServerDistance
    void addExpAndSp(long,int) -> addExpAndSp
    void removeExpAndSp(long,int) -> removeExpAndSp
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character) -> reduceCurrentHp
    boolean teleportRequest(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> teleportRequest
    void teleportAnswer(int,int) -> teleportAnswer
    void teleToTarget(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> teleToTarget
    boolean checkSummonerStatus(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkSummonerStatus
    boolean checkSummonTargetStatus(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkSummonTargetStatus
    void reduceCurrentHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceCurrentHp
    void broadcastSnoop(int,java.lang.String,java.lang.String,com.l2jfrozen.gameserver.network.serverpackets.CreatureSay) -> broadcastSnoop
    void addSnooper(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addSnooper
    void removeSnooper(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeSnooper
    void addSnooped(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addSnooped
    void removeSnooped(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeSnooped
    void addBypass(java.lang.String) -> addBypass
    void addBypass2(java.lang.String) -> addBypass2
    boolean validateBypass(java.lang.String) -> validateBypass
    boolean validateItemManipulationByItemId(int,java.lang.String) -> validateItemManipulationByItemId
    boolean validateItemManipulation(int,java.lang.String) -> validateItemManipulation
    void clearBypass() -> clearBypass
    boolean validateLink(java.lang.String) -> validateLink
    void clearLinks() -> clearLinks
    void addLink(java.lang.String) -> addLink
    boolean isInBoat() -> isInBoat
    void setInBoat(boolean) -> setInBoat
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance getBoat() -> getBoat
    void setBoat(com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance) -> setBoat
    void setInCrystallize(boolean) -> setInCrystallize
    boolean isInCrystallize() -> isInCrystallize
    com.l2jfrozen.common.util.Point3D getInBoatPosition() -> getInBoatPosition
    void setInBoatPosition(com.l2jfrozen.common.util.Point3D) -> setInBoatPosition
    void deleteMe(boolean) -> deleteMe
    void shortBuffStatusUpdate(int,int,int) -> shortBuffStatusUpdate
    java.util.List getFriendList() -> getFriendList
    void restoreFriendList() -> restoreFriendList
    void notifyFriends(boolean) -> notifyFriends
    void startFishing(int,int,int) -> startFishing
    void stopLookingForFishTask() -> stopLookingForFishTask
    void StartLookingForFishTask() -> StartLookingForFishTask
    int GetRandomGroup() -> GetRandomGroup
    int GetRandomFishType(int) -> GetRandomFishType
    int GetRandomFishLvl() -> GetRandomFishLvl
    void StartFishCombat(boolean,boolean) -> StartFishCombat
    void EndFishing(boolean) -> EndFishing
    com.l2jfrozen.gameserver.model.L2Fishing GetFishCombat() -> GetFishCombat
    int GetFishx() -> GetFishx
    int GetFishy() -> GetFishy
    int GetFishz() -> GetFishz
    void SetPartyFind(int) -> SetPartyFind
    int GetPartyFind() -> GetPartyFind
    void SetLure(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> SetLure
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance GetLure() -> GetLure
    int getInventoryLimit() -> getInventoryLimit
    int GetWareHouseLimit() -> GetWareHouseLimit
    int GetPrivateSellStoreLimit() -> GetPrivateSellStoreLimit
    int GetPrivateBuyStoreLimit() -> GetPrivateBuyStoreLimit
    int GetFreightLimit() -> GetFreightLimit
    int GetDwarfRecipeLimit() -> GetDwarfRecipeLimit
    int GetCommonRecipeLimit() -> GetCommonRecipeLimit
    void setMountObjectID(int) -> setMountObjectID
    int getMountObjectID() -> getMountObjectID
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SkillDat getCurrentSkill() -> getCurrentSkill
    void setCurrentSkill(com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean) -> setCurrentSkill
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SkillDat getQueuedSkill() -> getQueuedSkill
    void setQueuedSkill(com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean) -> setQueuedSkill
    int getPowerGrade() -> getPowerGrade
    void setPowerGrade(int) -> setPowerGrade
    boolean isCursedWeaponEquiped() -> isCursedWeaponEquiped
    void setCursedWeaponEquipedId(int) -> setCursedWeaponEquipedId
    int getCursedWeaponEquipedId() -> getCursedWeaponEquipedId
    boolean getCharmOfCourage() -> getCharmOfCourage
    void setCharmOfCourage(boolean) -> setCharmOfCourage
    int getDeathPenaltyBuffLevel() -> getDeathPenaltyBuffLevel
    void setDeathPenaltyBuffLevel(int) -> setDeathPenaltyBuffLevel
    void calculateDeathPenaltyBuffLevel(com.l2jfrozen.gameserver.model.L2Character) -> calculateDeathPenaltyBuffLevel
    void increaseDeathPenaltyBuffLevel() -> increaseDeathPenaltyBuffLevel
    void reduceDeathPenaltyBuffLevel() -> reduceDeathPenaltyBuffLevel
    void restoreCustomStatus() -> restoreCustomStatus
    void restoreDeathPenaltyBuffLevel() -> restoreDeathPenaltyBuffLevel
    void addTimeStamp(com.l2jfrozen.gameserver.model.L2Skill,int) -> addTimeStamp
    void addTimeStamp(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$TimeStamp) -> addTimeStamp
    void removeTimeStamp(com.l2jfrozen.gameserver.model.L2Skill) -> removeTimeStamp
    java.util.Collection getReuseTimeStamps() -> getReuseTimeStamps
    void resetSkillTime(boolean) -> resetSkillTime
    void sendDamageMessage(com.l2jfrozen.gameserver.model.L2Character,int,boolean,boolean,boolean) -> sendDamageMessage
    void updateTitle() -> updateTitle
    boolean isRequestExpired() -> isRequestExpired
    void setGmStatusActive(boolean) -> setGmStatusActive
    boolean hasGmStatusActive() -> hasGmStatusActive
    com.l2jfrozen.gameserver.model.L2Object getSayMode() -> getSayMode
    void setSayMode(com.l2jfrozen.gameserver.model.L2Object) -> setSayMode
    void saveEventStats() -> saveEventStats
    void restoreEventStats() -> restoreEventStats
    com.l2jfrozen.common.util.Point3D getCurrentSkillWorldPosition() -> getCurrentSkillWorldPosition
    void setCurrentSkillWorldPosition(com.l2jfrozen.common.util.Point3D) -> setCurrentSkillWorldPosition
    boolean isCursedWeaponEquipped() -> isCursedWeaponEquipped
    boolean dismount() -> dismount
    int getPcBangScore() -> getPcBangScore
    void reducePcBangScore(int) -> reducePcBangScore
    void addPcBangScore(int) -> addPcBangScore
    void updatePcBangWnd(int,boolean,boolean) -> updatePcBangWnd
    void showPcBangWindow() -> showPcBangWindow
    java.lang.String StringToHex(java.lang.String) -> StringToHex
    boolean isInOfflineMode() -> isInOfflineMode
    void setOfflineMode(boolean) -> setOfflineMode
    boolean isTradeDisabled() -> isTradeDisabled
    void setTradeDisabled(boolean) -> setTradeDisabled
    void showTeleportHtml() -> showTeleportHtml
    void showRaidbossInfoLevel40() -> showRaidbossInfoLevel40
    void showRaidbossInfoLevel45() -> showRaidbossInfoLevel45
    void showRaidbossInfoLevel50() -> showRaidbossInfoLevel50
    void showRaidbossInfoLevel55() -> showRaidbossInfoLevel55
    void showRaidbossInfoLevel60() -> showRaidbossInfoLevel60
    void showRaidbossInfoLevel65() -> showRaidbossInfoLevel65
    void showRaidbossInfoLevel70() -> showRaidbossInfoLevel70
    boolean isInsideTWTown() -> isInsideTWTown
    void setInsideTWTown(boolean) -> setInsideTWTown
    boolean checkMultiBox() -> checkMultiBox
    void refreshOtherBoxes() -> refreshOtherBoxes
    void decreaseBoxes() -> decreaseBoxes
    boolean isAio() -> isAio
    void setAio(boolean) -> setAio
    void rewardAioSkills() -> rewardAioSkills
    void lostAioSkills() -> lostAioSkills
    void setAioEndTime(long) -> setAioEndTime
    void setEndTime(java.lang.String,int) -> setEndTime
    long getAioEndTime() -> getAioEndTime
    long getOfflineStartTime() -> getOfflineStartTime
    void setOfflineStartTime(long) -> setOfflineStartTime
    boolean isFalling(int) -> isFalling
    void setFalling() -> setFalling
    void setLastPartyPosition(int,int,int) -> setLastPartyPosition
    int getLastPartyPositionDistance(int,int,int) -> getLastPartyPositionDistance
    boolean isAwaying() -> isAwaying
    void set_awaying(boolean) -> set_awaying
    boolean isLocked() -> isLocked
    void setLocked(boolean) -> setLocked
    boolean isStored() -> isStored
    void setStored(boolean) -> setStored
    void gatesRequest(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance) -> gatesRequest
    void gatesAnswer(int,int) -> gatesAnswer
    com.l2jfrozen.gameserver.model.actor.instance.PunishLevel getPunishLevel() -> getPunishLevel
    boolean isInJail() -> isInJail
    boolean isChatBanned() -> isChatBanned
    void setPunishLevel(int) -> setPunishLevel
    void setPunishLevel(com.l2jfrozen.gameserver.model.actor.instance.PunishLevel,int) -> setPunishLevel
    void setPunishLevel(com.l2jfrozen.gameserver.model.actor.instance.PunishLevel,long) -> setPunishLevel
    long getPunishTimer() -> getPunishTimer
    void setPunishTimer(long) -> setPunishTimer
    void updatePunishState() -> updatePunishState
    void stopPunishTask(boolean) -> stopPunishTask
    void addConfirmDlgRequestTime(int,int) -> addConfirmDlgRequestTime
    java.lang.Long getConfirmDlgRequestTime(int) -> getConfirmDlgRequestTime
    void removeConfirmDlgRequestTime(int) -> removeConfirmDlgRequestTime
    com.l2jfrozen.gameserver.util.FloodProtectors getFloodProtectors() -> getFloodProtectors
    boolean isInventoryUnder80() -> isInventoryUnder80
    int getMultiSellId() -> getMultiSellId
    void setMultiSellId(int) -> setMultiSellId
    boolean isPartyWaiting() -> isPartyWaiting
    void setPartyRoom(int) -> setPartyRoom
    int getPartyRoom() -> getPartyRoom
    boolean isInPartyMatchRoom() -> isInPartyMatchRoom
    boolean isItemEquippedByItemId(int) -> isItemEquippedByItemId
    long get_instanceLoginTime() -> get_instanceLoginTime
    void setSexDB(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> setSexDB
    boolean checkTeleportOverTime() -> checkTeleportOverTime
    void setIsTeleporting(boolean) -> setIsTeleporting
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActingPlayer() -> getActingPlayer
    void sendBlockList() -> sendBlockList
    long getLastAttackPacket() -> getLastAttackPacket
    void setLastAttackPacket() -> setLastAttackPacket
    void checkItemRestriction() -> checkItemRestriction
    void enterOlympiadObserverMode(int,int,int,int,boolean) -> enterOlympiadObserverMode
    void leaveOlympiadObserverMode(boolean) -> leaveOlympiadObserverMode
    void setHero(boolean) -> setHero
    void giveHeroSkills() -> giveHeroSkills
    void removeHeroSkills() -> removeHeroSkills
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SkillDat getCurrentPetSkill() -> getCurrentPetSkill
    void setCurrentPetSkill(com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean) -> setCurrentPetSkill
    boolean isFakeOfflinePlayer() -> isFakeOfflinePlayer
    void setfakeplayer(boolean) -> setfakeplayer
    void setLastCords(int,int,int) -> setLastCords
    com.l2jfrozen.gameserver.model.actor.status.PlayableStatus getStatus() -> getStatus
    com.l2jfrozen.gameserver.model.actor.stat.PlayableStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.knownlist.PlayableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.templates.L2CharTemplate getTemplate() -> getTemplate
    com.l2jfrozen.gameserver.model.actor.status.CharStatus getStatus() -> getStatus
    com.l2jfrozen.gameserver.model.actor.stat.CharStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$1 -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$1:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$2 -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$2:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$3 -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$3:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$4 -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$4:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$5 -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$5:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$6 -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$6:
    boolean val$physical -> val$physical
    boolean val$magic -> val$magic
    boolean val$summon -> val$summon
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean,boolean,boolean) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$7 -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$7:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillTargetType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillTargetType
    int[] $SwitchMap$com$l2jfrozen$gameserver$templates$L2ArmorType -> $SwitchMap$com$l2jfrozen$gameserver$templates$L2ArmorType
    int[] $SwitchMap$com$l2jfrozen$gameserver$templates$L2WeaponType -> $SwitchMap$com$l2jfrozen$gameserver$templates$L2WeaponType
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$actor$instance$PunishLevel -> $SwitchMap$com$l2jfrozen$gameserver$model$actor$instance$PunishLevel
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$AIAccessor -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$AIAccessor:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayer() -> getPlayer
    void doPickupItem(com.l2jfrozen.gameserver.model.L2Object) -> doPickupItem
    void doInteract(com.l2jfrozen.gameserver.model.L2Character) -> doInteract
    void doAttack(com.l2jfrozen.gameserver.model.L2Character) -> doAttack
    void doCast(com.l2jfrozen.gameserver.model.L2Skill) -> doCast
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$GatesRequest -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$GatesRequest:
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance _target -> _target
    void <init>() -> <init>
    void setTarget(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance) -> setTarget
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance getDoor() -> getDoor
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$1) -> <init>
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$HerbTask -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$HerbTask:
    java.lang.String _process -> _process
    int _itemId -> _itemId
    int _count -> _count
    com.l2jfrozen.gameserver.model.L2Object _reference -> _reference
    boolean _sendMessage -> _sendMessage
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$InventoryEnable -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$InventoryEnable:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$LookingForFishTask -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$LookingForFishTask:
    boolean _isNoob -> _isNoob
    boolean _isUpperGrade -> _isUpperGrade
    int _fishType -> _fishType
    int _fishGutsCheck -> _fishGutsCheck
    int _gutsCheckTime -> _gutsCheckTime
    long _endTaskTime -> _endTaskTime
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,boolean,boolean) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$MoveOnAttack -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$MoveOnAttack:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.actor.position.L2CharPosition _pos -> _pos
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> <init>
    void run() -> run
    void setNewPosition(com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> setNewPosition
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$PunishTask -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$PunishTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$RentPetTask -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$RentPetTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$ShortBuffTask -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$ShortBuffTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SitDownTask -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SitDownTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0$ -> this$0$
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SkillDat -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SkillDat:
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    boolean _ctrlPressed -> _ctrlPressed
    boolean _shiftPressed -> _shiftPressed
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean) -> <init>
    boolean isCtrlPressed() -> isCtrlPressed
    boolean isShiftPressed() -> isShiftPressed
    com.l2jfrozen.gameserver.model.L2Skill getSkill() -> getSkill
    int getSkillId() -> getSkillId
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$StandUpTask -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$StandUpTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SummonRequest -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$SummonRequest:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _target -> _target
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    void <init>() -> <init>
    void setTarget(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> setTarget
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getTarget() -> getTarget
    com.l2jfrozen.gameserver.model.L2Skill getSkill() -> getSkill
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$TeleportProtectionFinalizer -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$TeleportProtectionFinalizer:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$TimeStamp -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$TimeStamp:
    com.l2jfrozen.gameserver.model.L2Skill skill -> skill
    long reuse -> reuse
    long stamp -> stamp
    long getStamp() -> getStamp
    com.l2jfrozen.gameserver.model.L2Skill getSkill() -> getSkill
    long getReuse() -> getReuse
    long getRemaining() -> getRemaining
    boolean hasNotPassed() -> hasNotPassed
    void <init>(com.l2jfrozen.gameserver.model.L2Skill,long) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2Skill,long,long) -> <init>
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$WarnUserTakeBreak -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$WarnUserTakeBreak:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$WaterTask -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$WaterTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$botChecker -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$botChecker:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$kickBot -> com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance$kickBot:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PenaltyMonsterInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2PenaltyMonsterInstance:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _ptk -> _ptk
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.L2Character getMostHated() -> getMostHated
    void notifyPlayerDead() -> notifyPlayerDead
    void setPlayerToKill(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setPlayerToKill
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _curFed -> _curFed
    com.l2jfrozen.gameserver.model.PetInventory _inventory -> _inventory
    int _controlItemId -> _controlItemId
    boolean _respawned -> _respawned
    boolean _mountable -> _mountable
    java.util.concurrent.Future _feedTask -> _feedTask
    int _feedTime -> _feedTime
    boolean _feedMode -> _feedMode
    com.l2jfrozen.gameserver.model.L2PetData _data -> _data
    long _expBeforeDeath -> _expBeforeDeath
    int FOOD_ITEM_CONSUME_COUNT -> FOOD_ITEM_CONSUME_COUNT
    com.l2jfrozen.gameserver.model.L2PetData getPetData() -> getPetData
    void setPetData(com.l2jfrozen.gameserver.model.L2PetData) -> setPetData
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance spawnPet(com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> spawnPet
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.stat.PetStat getStat() -> getStat
    double getLevelMod() -> getLevelMod
    boolean isRespawned() -> isRespawned
    int getSummonType() -> getSummonType
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    int getControlItemId() -> getControlItemId
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getControlItem() -> getControlItem
    int getCurrentFed() -> getCurrentFed
    void setCurrentFed(int) -> setCurrentFed
    void setPkKills(int) -> setPkKills
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getActiveWeaponInstance() -> getActiveWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getActiveWeaponItem() -> getActiveWeaponItem
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance getSecondaryWeaponInstance() -> getSecondaryWeaponInstance
    com.l2jfrozen.gameserver.templates.L2Weapon getSecondaryWeaponItem() -> getSecondaryWeaponItem
    com.l2jfrozen.gameserver.model.PetInventory getInventory() -> getInventory
    boolean destroyItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyItem
    boolean destroyItemByItemId(java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyItemByItemId
    void doPickupItem(com.l2jfrozen.gameserver.model.L2Object) -> doPickupItem
    void deleteMe(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> deleteMe
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void doRevive() -> doRevive
    void doRevive(double) -> doRevive
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance transferItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.Inventory,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Object) -> transferItem
    void giveAllToOwner() -> giveAllToOwner
    void giveItemToOwner(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> giveItemToOwner
    void destroyControlItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> destroyControlItem
    void dropAllItems() -> dropAllItems
    void dropItemHere(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> dropItemHere
    void dropItemHere(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,boolean) -> dropItemHere
    boolean isMountable() -> isMountable
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance restore(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> restore
    void store() -> store
    void stopFeed() -> stopFeed
    void startFeed(boolean) -> startFeed
    void unSummon(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> unSummon
    void restoreExp(double) -> restoreExp
    void deathPenalty() -> deathPenalty
    void addExpAndSp(long,int) -> addExpAndSp
    long getExpForThisLevel() -> getExpForThisLevel
    long getExpForNextLevel() -> getExpForNextLevel
    int getLevel() -> getLevel
    int getMaxFed() -> getMaxFed
    int getAccuracy() -> getAccuracy
    int getCriticalHit(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getCriticalHit
    int getEvasionRate(com.l2jfrozen.gameserver.model.L2Character) -> getEvasionRate
    int getRunSpeed() -> getRunSpeed
    int getPAtkSpd() -> getPAtkSpd
    int getMAtkSpd() -> getMAtkSpd
    int getMAtk(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMAtk
    int getMDef(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMDef
    int getPAtk(com.l2jfrozen.gameserver.model.L2Character) -> getPAtk
    int getPDef(com.l2jfrozen.gameserver.model.L2Character) -> getPDef
    int getSkillLevel(int) -> getSkillLevel
    void updateRefOwner(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> updateRefOwner
    void sendDamageMessage(com.l2jfrozen.gameserver.model.L2Character,int,boolean,boolean,boolean) -> sendDamageMessage
    com.l2jfrozen.gameserver.model.actor.stat.SummonStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.stat.PlayableStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.stat.CharStat getStat() -> getStat
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance$FeedTask -> com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance$FeedTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance:
    boolean _isNoblesseBlessed -> _isNoblesseBlessed
    boolean _getCharmOfLuck -> _getCharmOfLuck
    boolean _isPhoenixBlessed -> _isPhoenixBlessed
    boolean _ProtectionBlessing -> _ProtectionBlessing
    com.l2jfrozen.gameserver.model.L2Effect _lastNoblessEffect -> _lastNoblessEffect
    com.l2jfrozen.gameserver.model.L2Effect _lastProtectionBlessingEffect -> _lastProtectionBlessingEffect
    com.l2jfrozen.gameserver.model.L2Effect _lastPhoenixBlessedEffect -> _lastPhoenixBlessedEffect
    com.l2jfrozen.gameserver.model.L2Effect _lastCharmOfLuckEffect -> _lastCharmOfLuckEffect
    void <init>(int,com.l2jfrozen.gameserver.templates.L2CharTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.PlayableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.stat.PlayableStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.status.PlayableStatus getStatus() -> getStatus
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    boolean checkIfPvP(com.l2jfrozen.gameserver.model.L2Character) -> checkIfPvP
    boolean isAttackable() -> isAttackable
    boolean isNoblesseBlessed() -> isNoblesseBlessed
    void setIsNoblesseBlessed(boolean) -> setIsNoblesseBlessed
    void startNoblesseBlessing(com.l2jfrozen.gameserver.model.L2Effect) -> startNoblesseBlessing
    void stopNoblesseBlessing(com.l2jfrozen.gameserver.model.L2Effect) -> stopNoblesseBlessing
    boolean getProtectionBlessing() -> getProtectionBlessing
    void setProtectionBlessing(boolean) -> setProtectionBlessing
    void startProtectionBlessing(com.l2jfrozen.gameserver.model.L2Effect) -> startProtectionBlessing
    void stopProtectionBlessing(com.l2jfrozen.gameserver.model.L2Effect) -> stopProtectionBlessing
    boolean isPhoenixBlessed() -> isPhoenixBlessed
    void setIsPhoenixBlessed(boolean) -> setIsPhoenixBlessed
    void startPhoenixBlessing(com.l2jfrozen.gameserver.model.L2Effect) -> startPhoenixBlessing
    void stopPhoenixBlessing(com.l2jfrozen.gameserver.model.L2Effect) -> stopPhoenixBlessing
    boolean destroyItemByItemId(java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyItemByItemId
    boolean destroyItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyItem
    boolean getCharmOfLuck() -> getCharmOfLuck
    void setCharmOfLuck(boolean) -> setCharmOfLuck
    void startCharmOfLuck(com.l2jfrozen.gameserver.model.L2Effect) -> startCharmOfLuck
    void stopCharmOfLuck(com.l2jfrozen.gameserver.model.L2Effect) -> stopCharmOfLuck
    boolean isInFunEvent() -> isInFunEvent
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActingPlayer() -> getActingPlayer
    com.l2jfrozen.gameserver.model.actor.status.CharStatus getStatus() -> getStatus
    com.l2jfrozen.gameserver.model.actor.stat.CharStat getStat() -> getStat
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
com.l2jfrozen.gameserver.model.actor.instance.L2ProtectorInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2ProtectorInstance:
    java.util.concurrent.ScheduledFuture _aiTask -> _aiTask
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void deleteMe() -> deleteMe
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
com.l2jfrozen.gameserver.model.actor.instance.L2ProtectorInstance$ProtectorAI -> com.l2jfrozen.gameserver.model.actor.instance.L2ProtectorInstance$ProtectorAI:
    com.l2jfrozen.gameserver.model.actor.instance.L2ProtectorInstance _caster -> _caster
    com.l2jfrozen.gameserver.model.actor.instance.L2ProtectorInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ProtectorInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ProtectorInstance) -> <init>
    void run() -> run
    boolean handleCast(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> handleCast
    boolean handleCastonPet(com.l2jfrozen.gameserver.model.L2Summon,int,int) -> handleCastonPet
com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance:
    int LANES -> LANES
    int WINDOW_START -> WINDOW_START
    java.util.List _managers -> _managers
    int _raceNumber -> _raceNumber
    long SECOND -> SECOND
    long MINUTE -> MINUTE
    int _minutes -> _minutes
    int ACCEPTING_BETS -> ACCEPTING_BETS
    int WAITING -> WAITING
    int STARTING_RACE -> STARTING_RACE
    int RACE_END -> RACE_END
    int _state -> _state
    int[][] _codes -> _codes
    boolean _notInitialized -> _notInitialized
    com.l2jfrozen.gameserver.network.serverpackets.MonRaceInfo _packet -> _packet
    int[] _cost -> _cost
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.RaceManagerKnownList getKnownList() -> getKnownList
    void makeAnnouncement(com.l2jfrozen.gameserver.network.SystemMessageId) -> makeAnnouncement
    void broadcast(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcast
    void sendMonsterInfo() -> sendMonsterInfo
    void startRace() -> startRace
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showOdds(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showOdds
    void showMonsterInfo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMonsterInfo
    void showBuyTicket(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showBuyTicket
    com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Announcement -> com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Announcement:
    com.l2jfrozen.gameserver.network.SystemMessageId _type -> _type
    com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance,com.l2jfrozen.gameserver.network.SystemMessageId) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Race -> com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Race:
    com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Race$Info[] _info -> _info
    com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance,com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Race$Info[]) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Race$Info getLaneInfo(int) -> getLaneInfo
com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Race$Info -> com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Race$Info:
    int _id -> _id
    int _place -> _place
    int _odds -> _odds
    int _payout -> _payout
    com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Race this$1 -> this$1
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$Race,int,int,int,int) -> <init>
    int getId() -> getId
    int getOdds() -> getOdds
    int getPayout() -> getPayout
    int getPlace() -> getPlace
com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$RunEnd -> com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$RunEnd:
    com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$RunRace -> com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance$RunRace:
    com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance:
    int RAIDBOSS_MAINTENANCE_INTERVAL -> RAIDBOSS_MAINTENANCE_INTERVAL
    com.l2jfrozen.gameserver.managers.StatusEnum _raidStatus -> _raidStatus
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    boolean isRaid() -> isRaid
    int getMaintenanceInterval() -> getMaintenanceInterval
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void manageMinions() -> manageMinions
    void setRaidStatus(com.l2jfrozen.gameserver.managers.StatusEnum) -> setRaidStatus
    com.l2jfrozen.gameserver.managers.StatusEnum getRaidStatus() -> getRaidStatus
    void healFull() -> healFull
com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance$1 -> com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance$1:
    com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossManagerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2RaidBossManagerInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showChatWindow
    java.lang.String rbWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> rbWindow
com.l2jfrozen.gameserver.model.actor.instance.L2RecipeInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2RecipeInstance:
    int _itemId -> _itemId
    int _quantity -> _quantity
    void <init>(int,int) -> <init>
    int getItemId() -> getItemId
    int getQuantity() -> getQuantity
com.l2jfrozen.gameserver.model.actor.instance.L2RiftInvaderInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2RiftInvaderInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance:
    int mysteriousBoxId -> mysteriousBoxId
    java.util.concurrent.Future _victimSpawnKeyBoxTask -> _victimSpawnKeyBoxTask
    java.util.concurrent.Future _victimShout -> _victimShout
    java.util.concurrent.Future _changeImmortalTask -> _changeImmortalTask
    java.util.concurrent.Future _onDeadEventTask -> _onDeadEventTask
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onSpawn() -> onSpawn
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void deleteMe() -> deleteMe
    boolean isRaid() -> isRaid
    void giveCup(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> giveCup
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance$ChangeImmortal -> com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance$ChangeImmortal:
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance activeChar -> activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance,com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance$OnDeadEvent -> com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance$OnDeadEvent:
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance,com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance$VictimShout -> com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance$VictimShout:
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance,com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance$VictimSpawnKeyBox -> com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance$VictimSpawnKeyBox:
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance,com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherMonsterInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance:
    java.util.Map _hallGateKeepers -> _hallGateKeepers
    java.util.concurrent.Future _closeTask -> _closeTask
    java.util.concurrent.Future _spawnNextMysteriousBoxTask -> _spawnNextMysteriousBoxTask
    java.util.concurrent.Future _spawnMonsterTask -> _spawnMonsterTask
    java.lang.String HTML_FILE_PATH -> HTML_FILE_PATH
    int HALLS_KEY -> HALLS_KEY
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void deleteMe() -> deleteMe
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void doAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> doAction
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showChatWindow
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void openNextDoor(int) -> openNextDoor
    void sayInShout(java.lang.String) -> sayInShout
    void showHtmlFile(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showHtmlFile
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance$CloseNextDoor -> com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance$CloseNextDoor:
    com.l2jfrozen.gameserver.datatables.csv.DoorTable _DoorTable -> _DoorTable
    int _DoorId -> _DoorId
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance$SpawnMonster -> com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance$SpawnMonster:
    int _NpcId -> _NpcId
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance$SpawnNextMysteriousBox -> com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance$SpawnNextMysteriousBox:
    int _NpcId -> _NpcId
    com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2SepulcherNpcInstance,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2SiegeFlagInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2SiegeFlagInstance:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.entity.siege.Siege _siege -> _siege
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    boolean isAttackable() -> isAttackable
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void onForcedAttack(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onForcedAttack
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
com.l2jfrozen.gameserver.model.actor.instance.L2SiegeGuardInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2SiegeGuardInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _homeX -> _homeX
    int _homeY -> _homeY
    int _homeZ -> _homeZ
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.knownlist.SiegeGuardKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.ai.L2CharacterAI getAI() -> getAI
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    boolean hasRandomAnimation() -> hasRandomAnimation
    void getHomeLocation() -> getHomeLocation
    int getHomeX() -> getHomeX
    int getHomeY() -> getHomeY
    void returnHome() -> returnHome
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void addDamageHate(com.l2jfrozen.gameserver.model.L2Character,int,int) -> addDamageHate
    com.l2jfrozen.gameserver.model.actor.knownlist.AttackableKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList getKnownList() -> getKnownList
    com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList getKnownList() -> getKnownList
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2SiegeNpcInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2SiegeNpcInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void showSiegeInfoWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showSiegeInfoWindow
    boolean validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2SiegeSummonInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2SiegeSummonInstance:
    int SIEGE_GOLEM_ID -> SIEGE_GOLEM_ID
    int HOG_CANNON_ID -> HOG_CANNON_ID
    int SWOOP_CANNON_ID -> SWOOP_CANNON_ID
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> <init>
    void onSpawn() -> onSpawn
com.l2jfrozen.gameserver.model.actor.instance.L2SignsPriestInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2SignsPriestInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    boolean getPlayerAllyHasCastle(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPlayerAllyHasCastle
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,java.lang.String,boolean) -> showChatWindow
com.l2jfrozen.gameserver.model.actor.instance.L2StaticObjectInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2StaticObjectInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int INTERACTION_DISTANCE -> INTERACTION_DISTANCE
    int _staticObjectId -> _staticObjectId
    int _type -> _type
    int _x -> _x
    int _y -> _y
    java.lang.String _texture -> _texture
    int getStaticObjectId() -> getStaticObjectId
    void setStaticObjectId(int) -> setStaticObjectId
    void <init>(int) -> <init>
    int getType() -> getType
    void setType(int) -> setType
    void setMap(java.lang.String,int,int) -> setMap
    int getMapX() -> getMapX
    int getMapY() -> getMapY
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2SummonInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2SummonInstance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    float _expPenalty -> _expPenalty
    int _itemConsumeId -> _itemConsumeId
    int _itemConsumeCount -> _itemConsumeCount
    int _itemConsumeSteps -> _itemConsumeSteps
    int _totalLifeTime -> _totalLifeTime
    int _timeLostIdle -> _timeLostIdle
    int _timeLostActive -> _timeLostActive
    int _timeRemaining -> _timeRemaining
    int _nextItemConsumeTime -> _nextItemConsumeTime
    int lastShowntimeRemaining -> lastShowntimeRemaining
    java.util.concurrent.Future _summonLifeTask -> _summonLifeTask
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> <init>
    int getLevel() -> getLevel
    int getSummonType() -> getSummonType
    void setExpPenalty(float) -> setExpPenalty
    float getExpPenalty() -> getExpPenalty
    int getItemConsumeCount() -> getItemConsumeCount
    int getItemConsumeId() -> getItemConsumeId
    int getItemConsumeSteps() -> getItemConsumeSteps
    int getNextItemConsumeTime() -> getNextItemConsumeTime
    int getTotalLifeTime() -> getTotalLifeTime
    int getTimeLostIdle() -> getTimeLostIdle
    int getTimeLostActive() -> getTimeLostActive
    int getTimeRemaining() -> getTimeRemaining
    void setNextItemConsumeTime(int) -> setNextItemConsumeTime
    void decNextItemConsumeTime(int) -> decNextItemConsumeTime
    void decTimeRemaining(int) -> decTimeRemaining
    void addExpAndSp(int,int) -> addExpAndSp
    void reduceCurrentHp(int,com.l2jfrozen.gameserver.model.L2Character) -> reduceCurrentHp
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void unSummon(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> unSummon
    boolean destroyItem(java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyItem
    boolean destroyItemByItemId(java.lang.String,int,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> destroyItemByItemId
    void sendDamageMessage(com.l2jfrozen.gameserver.model.L2Character,int,boolean,boolean,boolean) -> sendDamageMessage
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.instance.L2SummonInstance$SummonLifetime -> com.l2jfrozen.gameserver.model.actor.instance.L2SummonInstance$SummonLifetime:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2SummonInstance _summon -> _summon
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2SummonInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2SymbolMakerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2SymbolMakerInstance:
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void showRemoveChat(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showRemoveChat
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance:
    int _foodSkillId -> _foodSkillId
    int MAX_DISTANCE_FROM_HOME -> MAX_DISTANCE_FROM_HOME
    int MAX_DISTANCE_FROM_OWNER -> MAX_DISTANCE_FROM_OWNER
    int MAX_DURATION -> MAX_DURATION
    int DURATION_CHECK_INTERVAL -> DURATION_CHECK_INTERVAL
    int DURATION_INCREASE_INTERVAL -> DURATION_INCREASE_INTERVAL
    int BUFF_INTERVAL -> BUFF_INTERVAL
    int _remainingTime -> _remainingTime
    int _homeX -> _homeX
    int _homeY -> _homeY
    int _homeZ -> _homeZ
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _owner -> _owner
    java.util.concurrent.Future _buffTask -> _buffTask
    java.util.concurrent.Future _durationCheckTask -> _durationCheckTask
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,int) -> <init>
    void onReceiveFood() -> onReceiveFood
    com.l2jfrozen.common.util.Point3D getHome() -> getHome
    void setHome(int,int,int) -> setHome
    void setHome(com.l2jfrozen.gameserver.model.L2Character) -> setHome
    int getRemainingTime() -> getRemainingTime
    void setRemainingTime(int) -> setRemainingTime
    int getFoodType() -> getFoodType
    void setFoodType(int) -> setFoodType
    boolean doDie(com.l2jfrozen.gameserver.model.L2Character) -> doDie
    void cleanTasks() -> cleanTasks
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getOwner() -> getOwner
    void setOwner(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setOwner
    boolean isTooFarFromHome() -> isTooFarFromHome
    void doDespawn() -> doDespawn
    void onOwnerGotAttacked(com.l2jfrozen.gameserver.model.L2Character) -> onOwnerGotAttacked
    void sitCastAndFollow(com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Character) -> sitCastAndFollow
com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance$CheckDuration -> com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance$CheckDuration:
    com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance _tamedBeast -> _tamedBeast
    com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance,com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance$CheckOwnerBuffs -> com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance$CheckOwnerBuffs:
    com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance _tamedBeast -> _tamedBeast
    int _numBuffs -> _numBuffs
    com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance,com.l2jfrozen.gameserver.model.actor.instance.L2TamedBeastInstance,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2TeleporterInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2TeleporterInstance:
    int COND_ALL_FALSE -> COND_ALL_FALSE
    int COND_BUSY_BECAUSE_OF_SIEGE -> COND_BUSY_BECAUSE_OF_SIEGE
    int COND_OWNER -> COND_OWNER
    int COND_REGULAR -> COND_REGULAR
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void showChatWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showChatWindow
    void doTeleport(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> doTeleport
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2TownPetInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2TownPetInstance:
    int randomX -> randomX
    int randomY -> randomY
    int spawnX -> spawnX
    int spawnY -> spawnY
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void onSpawn() -> onSpawn
com.l2jfrozen.gameserver.model.actor.instance.L2TownPetInstance$RandomWalkTask -> com.l2jfrozen.gameserver.model.actor.instance.L2TownPetInstance$RandomWalkTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2TownPetInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2TownPetInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.instance.L2TrainerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2TrainerInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
com.l2jfrozen.gameserver.model.actor.instance.L2VillageMasterInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2VillageMasterInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void dissolveClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> dissolveClan
    void recoverClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> recoverClan
    void changeClanLeader(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> changeClanLeader
    void createSubPledge(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String,int,int) -> createSubPledge
    void renameSubPledge(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,java.lang.String) -> renameSubPledge
    void assignSubPledgeLeader(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> assignSubPledgeLeader
    java.util.Set getAvailableSubClasses(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getAvailableSubClasses
    void showPledgeSkillList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showPledgeSkillList
    java.lang.String formatClassForDisplay(com.l2jfrozen.gameserver.model.base.PlayerClass) -> formatClassForDisplay
    com.l2jfrozen.gameserver.model.base.PlayerRace getVillageMasterRace() -> getVillageMasterRace
    com.l2jfrozen.gameserver.model.base.ClassType getVillageMasterTeachType() -> getVillageMasterTeachType
    java.util.Iterator iterSubClasses(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> iterSubClasses
com.l2jfrozen.gameserver.model.actor.instance.L2WarehouseInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2WarehouseInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    java.lang.String getHtmlPath(int,int) -> getHtmlPath
    void showRetrieveWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showRetrieveWindow
    void showDepositWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showDepositWindow
    void showDepositWindowClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showDepositWindowClan
    void showWithdrawWindowClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showWithdrawWindowClan
    void showWithdrawWindowFreight(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showWithdrawWindowFreight
    void showDepositWindowFreight(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showDepositWindowFreight
    void showDepositWindowFreight(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> showDepositWindowFreight
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
com.l2jfrozen.gameserver.model.actor.instance.L2WeddingManagerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2WeddingManagerInstance:
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMessageWindow
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void sendHtmlMessage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> sendHtmlMessage
com.l2jfrozen.gameserver.model.actor.instance.L2WyvernManagerInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2WyvernManagerInstance:
    int COND_CLAN_OWNER -> COND_CLAN_OWNER
    int _clanHallId -> _clanHallId
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void onBypassFeedback(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> onBypassFeedback
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void showMessageWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showMessageWindow
    com.l2jfrozen.gameserver.model.entity.ClanHall getClanHall() -> getClanHall
    int validateCondition(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> validateCondition
com.l2jfrozen.gameserver.model.actor.instance.L2XmassTreeInstance -> com.l2jfrozen.gameserver.model.actor.instance.L2XmassTreeInstance:
    java.util.concurrent.ScheduledFuture _aiTask -> _aiTask
    void <init>(int,com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    void deleteMe() -> deleteMe
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
com.l2jfrozen.gameserver.model.actor.instance.L2XmassTreeInstance$XmassAI -> com.l2jfrozen.gameserver.model.actor.instance.L2XmassTreeInstance$XmassAI:
    com.l2jfrozen.gameserver.model.actor.instance.L2XmassTreeInstance _caster -> _caster
    com.l2jfrozen.gameserver.model.actor.instance.L2XmassTreeInstance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2XmassTreeInstance,com.l2jfrozen.gameserver.model.actor.instance.L2XmassTreeInstance) -> <init>
    void run() -> run
    boolean handleCast(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> handleCast
com.l2jfrozen.gameserver.model.actor.instance.PunishLevel -> com.l2jfrozen.gameserver.model.actor.instance.PunishLevel:
    com.l2jfrozen.gameserver.model.actor.instance.PunishLevel NONE -> NONE
    com.l2jfrozen.gameserver.model.actor.instance.PunishLevel CHAT -> CHAT
    com.l2jfrozen.gameserver.model.actor.instance.PunishLevel JAIL -> JAIL
    com.l2jfrozen.gameserver.model.actor.instance.PunishLevel CHAR -> CHAR
    com.l2jfrozen.gameserver.model.actor.instance.PunishLevel ACC -> ACC
    int punValue -> punValue
    java.lang.String punString -> punString
    com.l2jfrozen.gameserver.model.actor.instance.PunishLevel[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.actor.instance.PunishLevel[] values() -> values
    com.l2jfrozen.gameserver.model.actor.instance.PunishLevel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    int value() -> value
    java.lang.String string() -> string
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.knownlist.AttackableKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.AttackableKnownList:
    void <init>(com.l2jfrozen.gameserver.model.L2Attackable) -> <init>
    boolean removeKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> removeKnownObject
    com.l2jfrozen.gameserver.model.L2Attackable getActiveChar() -> getActiveChar
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.BoatKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.BoatKnownList:
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.CharKnownList:
    java.util.Map _knownPlayers -> _knownPlayers
    java.util.Map _knownRelations -> _knownRelations
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    boolean knowsThePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> knowsThePlayer
    void removeAllKnownObjects() -> removeAllKnownObjects
    boolean removeKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> removeKnownObject
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    java.util.Collection getKnownCharacters() -> getKnownCharacters
    java.util.Collection getKnownCharactersInRadius(long) -> getKnownCharactersInRadius
    java.util.Map getKnownPlayers() -> getKnownPlayers
    java.util.Map getKnownRelations() -> getKnownRelations
    java.util.Collection getKnownPlayersInRadius(long) -> getKnownPlayersInRadius
com.l2jfrozen.gameserver.model.actor.knownlist.CommanderKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.CommanderKnownList:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2CommanderInstance) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    com.l2jfrozen.gameserver.model.actor.instance.L2CommanderInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Attackable getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.DoorKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.DoorKnownList:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance getActiveChar() -> getActiveChar
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.FortSiegeGuardKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.FortSiegeGuardKnownList:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2FortSiegeGuardInstance) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    com.l2jfrozen.gameserver.model.actor.instance.L2FortSiegeGuardInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Attackable getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.FriendlyMobKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.FriendlyMobKnownList:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2FriendlyMobInstance) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    boolean removeKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> removeKnownObject
    com.l2jfrozen.gameserver.model.actor.instance.L2FriendlyMobInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Attackable getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.GuardKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.GuardKnownList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2GuardInstance) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    boolean removeKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> removeKnownObject
    com.l2jfrozen.gameserver.model.actor.instance.L2GuardInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Attackable getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.knownlist.GuardNoHTMLKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.GuardNoHTMLKnownList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2GuardNoHTMLInstance) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    boolean removeKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> removeKnownObject
    com.l2jfrozen.gameserver.model.actor.instance.L2GuardNoHTMLInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Attackable getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.knownlist.MonsterKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.MonsterKnownList:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    boolean removeKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> removeKnownObject
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Attackable getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.NpcKnownList:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.NullKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.NullKnownList:
    void <init>(com.l2jfrozen.gameserver.model.L2Object) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    com.l2jfrozen.gameserver.model.L2Object getActiveObject() -> getActiveObject
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    void removeAllKnownObjects() -> removeAllKnownObjects
    boolean removeKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> removeKnownObject
com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList:
    com.l2jfrozen.gameserver.model.L2Object _activeObject -> _activeObject
    java.util.Map _knownObjects -> _knownObjects
    void <init>(com.l2jfrozen.gameserver.model.L2Object) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    boolean knowsObject(com.l2jfrozen.gameserver.model.L2Object) -> knowsObject
    void removeAllKnownObjects() -> removeAllKnownObjects
    boolean removeKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> removeKnownObject
    void updateKnownObjects() -> updateKnownObjects
    void findCloseObjects() -> findCloseObjects
    void forgetObjects() -> forgetObjects
    com.l2jfrozen.gameserver.model.L2Object getActiveObject() -> getActiveObject
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    java.util.Map getKnownObjects() -> getKnownObjects
com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList$KnownListAsynchronousUpdateTask -> com.l2jfrozen.gameserver.model.actor.knownlist.ObjectKnownList$KnownListAsynchronousUpdateTask:
    com.l2jfrozen.gameserver.model.L2Object _obj -> _obj
    void <init>(com.l2jfrozen.gameserver.model.L2Object) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.knownlist.PcKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.PcKnownList:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    boolean removeKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> removeKnownObject
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActiveChar() -> getActiveChar
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.PlayableKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.PlayableKnownList:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.RaceManagerKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.RaceManagerKnownList:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    boolean removeKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> removeKnownObject
    com.l2jfrozen.gameserver.model.actor.instance.L2RaceManagerInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.SiegeGuardKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.SiegeGuardKnownList:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2SiegeGuardInstance) -> <init>
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object) -> addKnownObject
    boolean addKnownObject(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> addKnownObject
    com.l2jfrozen.gameserver.model.actor.instance.L2SiegeGuardInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Attackable getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.knownlist.SummonKnownList -> com.l2jfrozen.gameserver.model.actor.knownlist.SummonKnownList:
    void <init>(com.l2jfrozen.gameserver.model.L2Summon) -> <init>
    com.l2jfrozen.gameserver.model.L2Summon getActiveChar() -> getActiveChar
    int getDistanceToForgetObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToForgetObject
    int getDistanceToWatchObject(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToWatchObject
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.poly.ObjectPoly -> com.l2jfrozen.gameserver.model.actor.poly.ObjectPoly:
    com.l2jfrozen.gameserver.model.L2Object _activeObject -> _activeObject
    int _polyId -> _polyId
    java.lang.String _polyType -> _polyType
    void <init>(com.l2jfrozen.gameserver.model.L2Object) -> <init>
    void setPolyInfo(java.lang.String,java.lang.String) -> setPolyInfo
    com.l2jfrozen.gameserver.model.L2Object getActiveObject() -> getActiveObject
    boolean isMorphed() -> isMorphed
    int getPolyId() -> getPolyId
    void setPolyId(int) -> setPolyId
    java.lang.String getPolyType() -> getPolyType
    void setPolyType(java.lang.String) -> setPolyType
com.l2jfrozen.gameserver.model.actor.position.L2CharPosition -> com.l2jfrozen.gameserver.model.actor.position.L2CharPosition:
    int x -> x
    int y -> y
    int z -> z
    int heading -> heading
    void <init>(int,int,int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
com.l2jfrozen.gameserver.model.actor.position.ObjectPosition -> com.l2jfrozen.gameserver.model.actor.position.ObjectPosition:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.L2Object _activeObject -> _activeObject
    int _heading -> _heading
    com.l2jfrozen.common.util.Point3D _worldPosition -> _worldPosition
    com.l2jfrozen.gameserver.model.L2WorldRegion _worldRegion -> _worldRegion
    java.lang.Boolean _changingRegion -> _changingRegion
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(com.l2jfrozen.gameserver.model.L2Object) -> <init>
    void setXYZ(int,int,int) -> setXYZ
    void setXYZInvisible(int,int,int) -> setXYZInvisible
    void updateWorldRegion() -> updateWorldRegion
    com.l2jfrozen.gameserver.model.L2Object getActiveObject() -> getActiveObject
    int getHeading() -> getHeading
    void setHeading(int) -> setHeading
    int getX() -> getX
    void setX(int) -> setX
    int getY() -> getY
    void setY(int) -> setY
    int getZ() -> getZ
    void setZ(int) -> setZ
    com.l2jfrozen.common.util.Point3D getWorldPosition() -> getWorldPosition
    void setWorldPosition(int,int,int) -> setWorldPosition
    void setWorldPosition(com.l2jfrozen.common.util.Point3D) -> setWorldPosition
    com.l2jfrozen.gameserver.model.L2WorldRegion getWorldRegion() -> getWorldRegion
    void setWorldRegion(com.l2jfrozen.gameserver.model.L2WorldRegion) -> setWorldRegion
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.stat.CharStat -> com.l2jfrozen.gameserver.model.actor.stat.CharStat:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.L2Character _activeChar -> _activeChar
    long _exp -> _exp
    int _sp -> _sp
    int _level -> _level
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    double calcStat(com.l2jfrozen.gameserver.skills.Stats,double,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> calcStat
    int getAccuracy() -> getAccuracy
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
    float getAttackSpeedMultiplier() -> getAttackSpeedMultiplier
    int getCON() -> getCON
    double getCriticalDmg(com.l2jfrozen.gameserver.model.L2Character,double) -> getCriticalDmg
    int getCriticalHit(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getCriticalHit
    int getDEX() -> getDEX
    int getEvasionRate(com.l2jfrozen.gameserver.model.L2Character) -> getEvasionRate
    long getExp() -> getExp
    void setExp(long) -> setExp
    int getINT() -> getINT
    int getLevel() -> getLevel
    void setLevel(int) -> setLevel
    int getMagicalAttackRange(com.l2jfrozen.gameserver.model.L2Skill) -> getMagicalAttackRange
    int getMaxCp() -> getMaxCp
    int getMaxHp() -> getMaxHp
    int getMaxMp() -> getMaxMp
    int getMAtk(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMAtk
    int getMAtkSpd() -> getMAtkSpd
    int getMCriticalHit(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMCriticalHit
    int getMDef(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMDef
    int getMEN() -> getMEN
    float getMovementSpeedMultiplier() -> getMovementSpeedMultiplier
    float getMoveSpeed() -> getMoveSpeed
    double getMReuseRate(com.l2jfrozen.gameserver.model.L2Skill) -> getMReuseRate
    double getPReuseRate(com.l2jfrozen.gameserver.model.L2Skill) -> getPReuseRate
    int getPAtk(com.l2jfrozen.gameserver.model.L2Character) -> getPAtk
    double getPAtkAnimals(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkAnimals
    double getPAtkDragons(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkDragons
    double getPAtkAngels(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkAngels
    double getPAtkInsects(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkInsects
    double getPAtkMonsters(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkMonsters
    double getPAtkPlants(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkPlants
    int getPAtkSpd() -> getPAtkSpd
    double getPAtkUndead(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkUndead
    double getPDefUndead(com.l2jfrozen.gameserver.model.L2Character) -> getPDefUndead
    double getPDefPlants(com.l2jfrozen.gameserver.model.L2Character) -> getPDefPlants
    double getPDefInsects(com.l2jfrozen.gameserver.model.L2Character) -> getPDefInsects
    double getPDefAnimals(com.l2jfrozen.gameserver.model.L2Character) -> getPDefAnimals
    double getPDefMonsters(com.l2jfrozen.gameserver.model.L2Character) -> getPDefMonsters
    double getPDefDragons(com.l2jfrozen.gameserver.model.L2Character) -> getPDefDragons
    double getPDefAngels(com.l2jfrozen.gameserver.model.L2Character) -> getPDefAngels
    int getPDef(com.l2jfrozen.gameserver.model.L2Character) -> getPDef
    int getPhysicalAttackRange() -> getPhysicalAttackRange
    double getReuseModifier(com.l2jfrozen.gameserver.model.L2Character) -> getReuseModifier
    int getRunSpeed() -> getRunSpeed
    int getShldDef() -> getShldDef
    int getSp() -> getSp
    void setSp(int) -> setSp
    int getSTR() -> getSTR
    int getWalkSpeed() -> getWalkSpeed
    int getWIT() -> getWIT
    int getMpConsume(com.l2jfrozen.gameserver.model.L2Skill) -> getMpConsume
    int getMpInitialConsume(com.l2jfrozen.gameserver.model.L2Skill) -> getMpInitialConsume
    double getPDefGiants(com.l2jfrozen.gameserver.model.L2Character) -> getPDefGiants
    double getPDefMagicCreatures(com.l2jfrozen.gameserver.model.L2Character) -> getPDefMagicCreatures
    double getPAtkGiants(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkGiants
    double getPAtkMagicCreatures(com.l2jfrozen.gameserver.model.L2Character) -> getPAtkMagicCreatures
com.l2jfrozen.gameserver.model.actor.stat.CharStat$1 -> com.l2jfrozen.gameserver.model.actor.stat.CharStat$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$skills$Stats -> $SwitchMap$com$l2jfrozen$gameserver$skills$Stats
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.stat.DoorStat -> com.l2jfrozen.gameserver.model.actor.stat.DoorStat:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance getActiveChar() -> getActiveChar
    int getLevel() -> getLevel
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.stat.NpcStat -> com.l2jfrozen.gameserver.model.actor.stat.NpcStat:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    int getMaxHp() -> getMaxHp
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.stat.PcStat -> com.l2jfrozen.gameserver.model.actor.stat.PcStat:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _oldMaxHp -> _oldMaxHp
    int _oldMaxMp -> _oldMaxMp
    int _oldMaxCp -> _oldMaxCp
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    boolean addExp(long) -> addExp
    boolean addExpAndSp(long,int) -> addExpAndSp
    boolean removeExpAndSp(long,int) -> removeExpAndSp
    boolean addLevel(byte) -> addLevel
    boolean addSp(int) -> addSp
    long getExpForLevel(int) -> getExpForLevel
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActiveChar() -> getActiveChar
    long getExp() -> getExp
    void setExp(long) -> setExp
    int getLevel() -> getLevel
    void setLevel(int) -> setLevel
    int getMaxCp() -> getMaxCp
    int getMaxHp() -> getMaxHp
    int getMaxMp() -> getMaxMp
    int getSp() -> getSp
    void setSp(int) -> setSp
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.stat.PetStat -> com.l2jfrozen.gameserver.model.actor.stat.PetStat:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance) -> <init>
    boolean addExp(int) -> addExp
    boolean addExpAndSp(long,int) -> addExpAndSp
    boolean addLevel(byte) -> addLevel
    long getExpForLevel(int) -> getExpForLevel
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance getActiveChar() -> getActiveChar
    int getFeedBattle() -> getFeedBattle
    int getFeedNormal() -> getFeedNormal
    void setLevel(int) -> setLevel
    int getMaxFeed() -> getMaxFeed
    int getMaxHp() -> getMaxHp
    int getMaxMp() -> getMaxMp
    int getMAtk(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMAtk
    int getMDef(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getMDef
    int getPAtk(com.l2jfrozen.gameserver.model.L2Character) -> getPAtk
    int getPDef(com.l2jfrozen.gameserver.model.L2Character) -> getPDef
    int getAccuracy() -> getAccuracy
    int getCriticalHit(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getCriticalHit
    int getEvasionRate(com.l2jfrozen.gameserver.model.L2Character) -> getEvasionRate
    int getRunSpeed() -> getRunSpeed
    int getPAtkSpd() -> getPAtkSpd
    int getMAtkSpd() -> getMAtkSpd
    com.l2jfrozen.gameserver.model.L2Summon getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.stat.PetStat$1 -> com.l2jfrozen.gameserver.model.actor.stat.PetStat$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$skills$Stats -> $SwitchMap$com$l2jfrozen$gameserver$skills$Stats
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.stat.PlayableStat -> com.l2jfrozen.gameserver.model.actor.stat.PlayableStat:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance) -> <init>
    boolean addExp(long) -> addExp
    boolean removeExp(long) -> removeExp
    boolean addExpAndSp(long,int) -> addExpAndSp
    boolean removeExpAndSp(long,int) -> removeExpAndSp
    boolean addLevel(byte) -> addLevel
    boolean addSp(int) -> addSp
    boolean removeSp(int) -> removeSp
    long getExpForLevel(int) -> getExpForLevel
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.stat.SummonStat -> com.l2jfrozen.gameserver.model.actor.stat.SummonStat:
    void <init>(com.l2jfrozen.gameserver.model.L2Summon) -> <init>
    com.l2jfrozen.gameserver.model.L2Summon getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.status.CharStatus -> com.l2jfrozen.gameserver.model.actor.status.CharStatus:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.L2Character _activeChar -> _activeChar
    double _currentCp -> _currentCp
    double _currentHp -> _currentHp
    double _currentMp -> _currentMp
    java.util.Set _StatusListener -> _StatusListener
    java.util.concurrent.Future _regTask -> _regTask
    byte _flagsRegenActive -> _flagsRegenActive
    byte REGEN_FLAG_CP -> REGEN_FLAG_CP
    byte REGEN_FLAG_HP -> REGEN_FLAG_HP
    byte REGEN_FLAG_MP -> REGEN_FLAG_MP
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void addStatusListener(com.l2jfrozen.gameserver.model.L2Character) -> addStatusListener
    void reduceCp(int) -> reduceCp
    void reduceHp(double,com.l2jfrozen.gameserver.model.L2Character) -> reduceHp
    void reduceHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceHp
    void reduceMp(double) -> reduceMp
    void removeStatusListener(com.l2jfrozen.gameserver.model.L2Character) -> removeStatusListener
    void startHpMpRegeneration() -> startHpMpRegeneration
    void stopHpMpRegeneration() -> stopHpMpRegeneration
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
    double getCurrentCp() -> getCurrentCp
    void setCurrentCpDirect(double) -> setCurrentCpDirect
    void setCurrentCp(double) -> setCurrentCp
    void setCurrentCp(double,boolean) -> setCurrentCp
    void setCurrentCp(double,boolean,boolean) -> setCurrentCp
    double getCurrentHp() -> getCurrentHp
    void setCurrentHp(double) -> setCurrentHp
    void setCurrentHpDirect(double) -> setCurrentHpDirect
    void setCurrentMpDirect(double) -> setCurrentMpDirect
    void setCurrentHp(double,boolean) -> setCurrentHp
    void setCurrentHp(double,boolean,boolean) -> setCurrentHp
    void setCurrentHpMp(double,double) -> setCurrentHpMp
    double getCurrentMp() -> getCurrentMp
    void setCurrentMp(double) -> setCurrentMp
    void setCurrentMp(double,boolean) -> setCurrentMp
    void setCurrentMp(double,boolean,boolean) -> setCurrentMp
    java.util.Set getStatusListener() -> getStatusListener
    void doRegeneration() -> doRegeneration
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.actor.status.CharStatus$RegenTask -> com.l2jfrozen.gameserver.model.actor.status.CharStatus$RegenTask:
    com.l2jfrozen.gameserver.model.actor.status.CharStatus this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.actor.status.CharStatus) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.actor.status.DoorStatus -> com.l2jfrozen.gameserver.model.actor.status.DoorStatus:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.status.NpcStatus -> com.l2jfrozen.gameserver.model.actor.status.NpcStatus:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void reduceHp(double,com.l2jfrozen.gameserver.model.L2Character) -> reduceHp
    void reduceHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceHp
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.status.PcStatus -> com.l2jfrozen.gameserver.model.actor.status.PcStatus:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void reduceHp(double,com.l2jfrozen.gameserver.model.L2Character) -> reduceHp
    void reduceHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceHp
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.status.PetStatus -> com.l2jfrozen.gameserver.model.actor.status.PetStatus:
    int _currentFed -> _currentFed
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance) -> <init>
    void reduceHp(double,com.l2jfrozen.gameserver.model.L2Character) -> reduceHp
    void reduceHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceHp
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance getActiveChar() -> getActiveChar
    int getCurrentFed() -> getCurrentFed
    void setCurrentFed(int) -> setCurrentFed
    com.l2jfrozen.gameserver.model.L2Summon getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.status.PlayableStatus -> com.l2jfrozen.gameserver.model.actor.status.PlayableStatus:
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance) -> <init>
    void reduceHp(double,com.l2jfrozen.gameserver.model.L2Character) -> reduceHp
    void reduceHp(double,com.l2jfrozen.gameserver.model.L2Character,boolean) -> reduceHp
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.actor.status.SummonStatus -> com.l2jfrozen.gameserver.model.actor.status.SummonStatus:
    void <init>(com.l2jfrozen.gameserver.model.L2Summon) -> <init>
    com.l2jfrozen.gameserver.model.L2Summon getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance getActiveChar() -> getActiveChar
    com.l2jfrozen.gameserver.model.L2Character getActiveChar() -> getActiveChar
com.l2jfrozen.gameserver.model.base.ClassId -> com.l2jfrozen.gameserver.model.base.ClassId:
    com.l2jfrozen.gameserver.model.base.ClassId fighter -> fighter
    com.l2jfrozen.gameserver.model.base.ClassId warrior -> warrior
    com.l2jfrozen.gameserver.model.base.ClassId gladiator -> gladiator
    com.l2jfrozen.gameserver.model.base.ClassId warlord -> warlord
    com.l2jfrozen.gameserver.model.base.ClassId knight -> knight
    com.l2jfrozen.gameserver.model.base.ClassId paladin -> paladin
    com.l2jfrozen.gameserver.model.base.ClassId darkAvenger -> darkAvenger
    com.l2jfrozen.gameserver.model.base.ClassId rogue -> rogue
    com.l2jfrozen.gameserver.model.base.ClassId treasureHunter -> treasureHunter
    com.l2jfrozen.gameserver.model.base.ClassId hawkeye -> hawkeye
    com.l2jfrozen.gameserver.model.base.ClassId mage -> mage
    com.l2jfrozen.gameserver.model.base.ClassId wizard -> wizard
    com.l2jfrozen.gameserver.model.base.ClassId sorceror -> sorceror
    com.l2jfrozen.gameserver.model.base.ClassId necromancer -> necromancer
    com.l2jfrozen.gameserver.model.base.ClassId warlock -> warlock
    com.l2jfrozen.gameserver.model.base.ClassId cleric -> cleric
    com.l2jfrozen.gameserver.model.base.ClassId bishop -> bishop
    com.l2jfrozen.gameserver.model.base.ClassId prophet -> prophet
    com.l2jfrozen.gameserver.model.base.ClassId elvenFighter -> elvenFighter
    com.l2jfrozen.gameserver.model.base.ClassId elvenKnight -> elvenKnight
    com.l2jfrozen.gameserver.model.base.ClassId templeKnight -> templeKnight
    com.l2jfrozen.gameserver.model.base.ClassId swordSinger -> swordSinger
    com.l2jfrozen.gameserver.model.base.ClassId elvenScout -> elvenScout
    com.l2jfrozen.gameserver.model.base.ClassId plainsWalker -> plainsWalker
    com.l2jfrozen.gameserver.model.base.ClassId silverRanger -> silverRanger
    com.l2jfrozen.gameserver.model.base.ClassId elvenMage -> elvenMage
    com.l2jfrozen.gameserver.model.base.ClassId elvenWizard -> elvenWizard
    com.l2jfrozen.gameserver.model.base.ClassId spellsinger -> spellsinger
    com.l2jfrozen.gameserver.model.base.ClassId elementalSummoner -> elementalSummoner
    com.l2jfrozen.gameserver.model.base.ClassId oracle -> oracle
    com.l2jfrozen.gameserver.model.base.ClassId elder -> elder
    com.l2jfrozen.gameserver.model.base.ClassId darkFighter -> darkFighter
    com.l2jfrozen.gameserver.model.base.ClassId palusKnight -> palusKnight
    com.l2jfrozen.gameserver.model.base.ClassId shillienKnight -> shillienKnight
    com.l2jfrozen.gameserver.model.base.ClassId bladedancer -> bladedancer
    com.l2jfrozen.gameserver.model.base.ClassId assassin -> assassin
    com.l2jfrozen.gameserver.model.base.ClassId abyssWalker -> abyssWalker
    com.l2jfrozen.gameserver.model.base.ClassId phantomRanger -> phantomRanger
    com.l2jfrozen.gameserver.model.base.ClassId darkMage -> darkMage
    com.l2jfrozen.gameserver.model.base.ClassId darkWizard -> darkWizard
    com.l2jfrozen.gameserver.model.base.ClassId spellhowler -> spellhowler
    com.l2jfrozen.gameserver.model.base.ClassId phantomSummoner -> phantomSummoner
    com.l2jfrozen.gameserver.model.base.ClassId shillienOracle -> shillienOracle
    com.l2jfrozen.gameserver.model.base.ClassId shillenElder -> shillenElder
    com.l2jfrozen.gameserver.model.base.ClassId orcFighter -> orcFighter
    com.l2jfrozen.gameserver.model.base.ClassId orcRaider -> orcRaider
    com.l2jfrozen.gameserver.model.base.ClassId destroyer -> destroyer
    com.l2jfrozen.gameserver.model.base.ClassId orcMonk -> orcMonk
    com.l2jfrozen.gameserver.model.base.ClassId tyrant -> tyrant
    com.l2jfrozen.gameserver.model.base.ClassId orcMage -> orcMage
    com.l2jfrozen.gameserver.model.base.ClassId orcShaman -> orcShaman
    com.l2jfrozen.gameserver.model.base.ClassId overlord -> overlord
    com.l2jfrozen.gameserver.model.base.ClassId warcryer -> warcryer
    com.l2jfrozen.gameserver.model.base.ClassId dwarvenFighter -> dwarvenFighter
    com.l2jfrozen.gameserver.model.base.ClassId scavenger -> scavenger
    com.l2jfrozen.gameserver.model.base.ClassId bountyHunter -> bountyHunter
    com.l2jfrozen.gameserver.model.base.ClassId artisan -> artisan
    com.l2jfrozen.gameserver.model.base.ClassId warsmith -> warsmith
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry1 -> dummyEntry1
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry2 -> dummyEntry2
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry3 -> dummyEntry3
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry4 -> dummyEntry4
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry5 -> dummyEntry5
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry6 -> dummyEntry6
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry7 -> dummyEntry7
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry8 -> dummyEntry8
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry9 -> dummyEntry9
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry10 -> dummyEntry10
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry11 -> dummyEntry11
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry12 -> dummyEntry12
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry13 -> dummyEntry13
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry14 -> dummyEntry14
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry15 -> dummyEntry15
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry16 -> dummyEntry16
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry17 -> dummyEntry17
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry18 -> dummyEntry18
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry19 -> dummyEntry19
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry20 -> dummyEntry20
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry21 -> dummyEntry21
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry22 -> dummyEntry22
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry23 -> dummyEntry23
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry24 -> dummyEntry24
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry25 -> dummyEntry25
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry26 -> dummyEntry26
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry27 -> dummyEntry27
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry28 -> dummyEntry28
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry29 -> dummyEntry29
    com.l2jfrozen.gameserver.model.base.ClassId dummyEntry30 -> dummyEntry30
    com.l2jfrozen.gameserver.model.base.ClassId duelist -> duelist
    com.l2jfrozen.gameserver.model.base.ClassId dreadnought -> dreadnought
    com.l2jfrozen.gameserver.model.base.ClassId phoenixKnight -> phoenixKnight
    com.l2jfrozen.gameserver.model.base.ClassId hellKnight -> hellKnight
    com.l2jfrozen.gameserver.model.base.ClassId sagittarius -> sagittarius
    com.l2jfrozen.gameserver.model.base.ClassId adventurer -> adventurer
    com.l2jfrozen.gameserver.model.base.ClassId archmage -> archmage
    com.l2jfrozen.gameserver.model.base.ClassId soultaker -> soultaker
    com.l2jfrozen.gameserver.model.base.ClassId arcanaLord -> arcanaLord
    com.l2jfrozen.gameserver.model.base.ClassId cardinal -> cardinal
    com.l2jfrozen.gameserver.model.base.ClassId hierophant -> hierophant
    com.l2jfrozen.gameserver.model.base.ClassId evaTemplar -> evaTemplar
    com.l2jfrozen.gameserver.model.base.ClassId swordMuse -> swordMuse
    com.l2jfrozen.gameserver.model.base.ClassId windRider -> windRider
    com.l2jfrozen.gameserver.model.base.ClassId moonlightSentinel -> moonlightSentinel
    com.l2jfrozen.gameserver.model.base.ClassId mysticMuse -> mysticMuse
    com.l2jfrozen.gameserver.model.base.ClassId elementalMaster -> elementalMaster
    com.l2jfrozen.gameserver.model.base.ClassId evaSaint -> evaSaint
    com.l2jfrozen.gameserver.model.base.ClassId shillienTemplar -> shillienTemplar
    com.l2jfrozen.gameserver.model.base.ClassId spectralDancer -> spectralDancer
    com.l2jfrozen.gameserver.model.base.ClassId ghostHunter -> ghostHunter
    com.l2jfrozen.gameserver.model.base.ClassId ghostSentinel -> ghostSentinel
    com.l2jfrozen.gameserver.model.base.ClassId stormScreamer -> stormScreamer
    com.l2jfrozen.gameserver.model.base.ClassId spectralMaster -> spectralMaster
    com.l2jfrozen.gameserver.model.base.ClassId shillienSaint -> shillienSaint
    com.l2jfrozen.gameserver.model.base.ClassId titan -> titan
    com.l2jfrozen.gameserver.model.base.ClassId grandKhauatari -> grandKhauatari
    com.l2jfrozen.gameserver.model.base.ClassId dominator -> dominator
    com.l2jfrozen.gameserver.model.base.ClassId doomcryer -> doomcryer
    com.l2jfrozen.gameserver.model.base.ClassId fortuneSeeker -> fortuneSeeker
    com.l2jfrozen.gameserver.model.base.ClassId maestro -> maestro
    int _id -> _id
    boolean _isMage -> _isMage
    com.l2jfrozen.gameserver.model.base.Race _race -> _race
    com.l2jfrozen.gameserver.model.base.ClassId _parent -> _parent
    com.l2jfrozen.gameserver.model.base.ClassId[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.base.ClassId[] values() -> values
    com.l2jfrozen.gameserver.model.base.ClassId valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,boolean,com.l2jfrozen.gameserver.model.base.Race,com.l2jfrozen.gameserver.model.base.ClassId) -> <init>
    int getId() -> getId
    boolean isMage() -> isMage
    com.l2jfrozen.gameserver.model.base.Race getRace() -> getRace
    boolean childOf(com.l2jfrozen.gameserver.model.base.ClassId) -> childOf
    boolean equalsOrChildOf(com.l2jfrozen.gameserver.model.base.ClassId) -> equalsOrChildOf
    int level() -> level
    com.l2jfrozen.gameserver.model.base.ClassId getParent() -> getParent
    com.l2jfrozen.gameserver.model.base.ClassId getClassIdByOrdinal(int) -> getClassIdByOrdinal
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.base.ClassLevel -> com.l2jfrozen.gameserver.model.base.ClassLevel:
    com.l2jfrozen.gameserver.model.base.ClassLevel First -> First
    com.l2jfrozen.gameserver.model.base.ClassLevel Second -> Second
    com.l2jfrozen.gameserver.model.base.ClassLevel Third -> Third
    com.l2jfrozen.gameserver.model.base.ClassLevel Fourth -> Fourth
    com.l2jfrozen.gameserver.model.base.ClassLevel[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.base.ClassLevel[] values() -> values
    com.l2jfrozen.gameserver.model.base.ClassLevel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.base.ClassType -> com.l2jfrozen.gameserver.model.base.ClassType:
    com.l2jfrozen.gameserver.model.base.ClassType Fighter -> Fighter
    com.l2jfrozen.gameserver.model.base.ClassType Mystic -> Mystic
    com.l2jfrozen.gameserver.model.base.ClassType Priest -> Priest
    com.l2jfrozen.gameserver.model.base.ClassType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.base.ClassType[] values() -> values
    com.l2jfrozen.gameserver.model.base.ClassType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.base.PlayerClass -> com.l2jfrozen.gameserver.model.base.PlayerClass:
    com.l2jfrozen.gameserver.model.base.PlayerClass HumanFighter -> HumanFighter
    com.l2jfrozen.gameserver.model.base.PlayerClass Warrior -> Warrior
    com.l2jfrozen.gameserver.model.base.PlayerClass Gladiator -> Gladiator
    com.l2jfrozen.gameserver.model.base.PlayerClass Warlord -> Warlord
    com.l2jfrozen.gameserver.model.base.PlayerClass HumanKnight -> HumanKnight
    com.l2jfrozen.gameserver.model.base.PlayerClass Paladin -> Paladin
    com.l2jfrozen.gameserver.model.base.PlayerClass DarkAvenger -> DarkAvenger
    com.l2jfrozen.gameserver.model.base.PlayerClass Rogue -> Rogue
    com.l2jfrozen.gameserver.model.base.PlayerClass TreasureHunter -> TreasureHunter
    com.l2jfrozen.gameserver.model.base.PlayerClass Hawkeye -> Hawkeye
    com.l2jfrozen.gameserver.model.base.PlayerClass HumanMystic -> HumanMystic
    com.l2jfrozen.gameserver.model.base.PlayerClass HumanWizard -> HumanWizard
    com.l2jfrozen.gameserver.model.base.PlayerClass Sorceror -> Sorceror
    com.l2jfrozen.gameserver.model.base.PlayerClass Necromancer -> Necromancer
    com.l2jfrozen.gameserver.model.base.PlayerClass Warlock -> Warlock
    com.l2jfrozen.gameserver.model.base.PlayerClass Cleric -> Cleric
    com.l2jfrozen.gameserver.model.base.PlayerClass Bishop -> Bishop
    com.l2jfrozen.gameserver.model.base.PlayerClass Prophet -> Prophet
    com.l2jfrozen.gameserver.model.base.PlayerClass ElvenFighter -> ElvenFighter
    com.l2jfrozen.gameserver.model.base.PlayerClass ElvenKnight -> ElvenKnight
    com.l2jfrozen.gameserver.model.base.PlayerClass TempleKnight -> TempleKnight
    com.l2jfrozen.gameserver.model.base.PlayerClass Swordsinger -> Swordsinger
    com.l2jfrozen.gameserver.model.base.PlayerClass ElvenScout -> ElvenScout
    com.l2jfrozen.gameserver.model.base.PlayerClass Plainswalker -> Plainswalker
    com.l2jfrozen.gameserver.model.base.PlayerClass SilverRanger -> SilverRanger
    com.l2jfrozen.gameserver.model.base.PlayerClass ElvenMystic -> ElvenMystic
    com.l2jfrozen.gameserver.model.base.PlayerClass ElvenWizard -> ElvenWizard
    com.l2jfrozen.gameserver.model.base.PlayerClass Spellsinger -> Spellsinger
    com.l2jfrozen.gameserver.model.base.PlayerClass ElementalSummoner -> ElementalSummoner
    com.l2jfrozen.gameserver.model.base.PlayerClass ElvenOracle -> ElvenOracle
    com.l2jfrozen.gameserver.model.base.PlayerClass ElvenElder -> ElvenElder
    com.l2jfrozen.gameserver.model.base.PlayerClass DarkElvenFighter -> DarkElvenFighter
    com.l2jfrozen.gameserver.model.base.PlayerClass PalusKnight -> PalusKnight
    com.l2jfrozen.gameserver.model.base.PlayerClass ShillienKnight -> ShillienKnight
    com.l2jfrozen.gameserver.model.base.PlayerClass Bladedancer -> Bladedancer
    com.l2jfrozen.gameserver.model.base.PlayerClass Assassin -> Assassin
    com.l2jfrozen.gameserver.model.base.PlayerClass AbyssWalker -> AbyssWalker
    com.l2jfrozen.gameserver.model.base.PlayerClass PhantomRanger -> PhantomRanger
    com.l2jfrozen.gameserver.model.base.PlayerClass DarkElvenMystic -> DarkElvenMystic
    com.l2jfrozen.gameserver.model.base.PlayerClass DarkElvenWizard -> DarkElvenWizard
    com.l2jfrozen.gameserver.model.base.PlayerClass Spellhowler -> Spellhowler
    com.l2jfrozen.gameserver.model.base.PlayerClass PhantomSummoner -> PhantomSummoner
    com.l2jfrozen.gameserver.model.base.PlayerClass ShillienOracle -> ShillienOracle
    com.l2jfrozen.gameserver.model.base.PlayerClass ShillienElder -> ShillienElder
    com.l2jfrozen.gameserver.model.base.PlayerClass OrcFighter -> OrcFighter
    com.l2jfrozen.gameserver.model.base.PlayerClass OrcRaider -> OrcRaider
    com.l2jfrozen.gameserver.model.base.PlayerClass Destroyer -> Destroyer
    com.l2jfrozen.gameserver.model.base.PlayerClass OrcMonk -> OrcMonk
    com.l2jfrozen.gameserver.model.base.PlayerClass Tyrant -> Tyrant
    com.l2jfrozen.gameserver.model.base.PlayerClass OrcMystic -> OrcMystic
    com.l2jfrozen.gameserver.model.base.PlayerClass OrcShaman -> OrcShaman
    com.l2jfrozen.gameserver.model.base.PlayerClass Overlord -> Overlord
    com.l2jfrozen.gameserver.model.base.PlayerClass Warcryer -> Warcryer
    com.l2jfrozen.gameserver.model.base.PlayerClass DwarvenFighter -> DwarvenFighter
    com.l2jfrozen.gameserver.model.base.PlayerClass DwarvenScavenger -> DwarvenScavenger
    com.l2jfrozen.gameserver.model.base.PlayerClass BountyHunter -> BountyHunter
    com.l2jfrozen.gameserver.model.base.PlayerClass DwarvenArtisan -> DwarvenArtisan
    com.l2jfrozen.gameserver.model.base.PlayerClass Warsmith -> Warsmith
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry1 -> dummyEntry1
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry2 -> dummyEntry2
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry3 -> dummyEntry3
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry4 -> dummyEntry4
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry5 -> dummyEntry5
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry6 -> dummyEntry6
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry7 -> dummyEntry7
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry8 -> dummyEntry8
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry9 -> dummyEntry9
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry10 -> dummyEntry10
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry11 -> dummyEntry11
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry12 -> dummyEntry12
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry13 -> dummyEntry13
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry14 -> dummyEntry14
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry15 -> dummyEntry15
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry16 -> dummyEntry16
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry17 -> dummyEntry17
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry18 -> dummyEntry18
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry19 -> dummyEntry19
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry20 -> dummyEntry20
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry21 -> dummyEntry21
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry22 -> dummyEntry22
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry23 -> dummyEntry23
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry24 -> dummyEntry24
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry25 -> dummyEntry25
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry26 -> dummyEntry26
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry27 -> dummyEntry27
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry28 -> dummyEntry28
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry29 -> dummyEntry29
    com.l2jfrozen.gameserver.model.base.PlayerClass dummyEntry30 -> dummyEntry30
    com.l2jfrozen.gameserver.model.base.PlayerClass duelist -> duelist
    com.l2jfrozen.gameserver.model.base.PlayerClass dreadnought -> dreadnought
    com.l2jfrozen.gameserver.model.base.PlayerClass phoenixKnight -> phoenixKnight
    com.l2jfrozen.gameserver.model.base.PlayerClass hellKnight -> hellKnight
    com.l2jfrozen.gameserver.model.base.PlayerClass sagittarius -> sagittarius
    com.l2jfrozen.gameserver.model.base.PlayerClass adventurer -> adventurer
    com.l2jfrozen.gameserver.model.base.PlayerClass archmage -> archmage
    com.l2jfrozen.gameserver.model.base.PlayerClass soultaker -> soultaker
    com.l2jfrozen.gameserver.model.base.PlayerClass arcanaLord -> arcanaLord
    com.l2jfrozen.gameserver.model.base.PlayerClass cardinal -> cardinal
    com.l2jfrozen.gameserver.model.base.PlayerClass hierophant -> hierophant
    com.l2jfrozen.gameserver.model.base.PlayerClass evaTemplar -> evaTemplar
    com.l2jfrozen.gameserver.model.base.PlayerClass swordMuse -> swordMuse
    com.l2jfrozen.gameserver.model.base.PlayerClass windRider -> windRider
    com.l2jfrozen.gameserver.model.base.PlayerClass moonlightSentinel -> moonlightSentinel
    com.l2jfrozen.gameserver.model.base.PlayerClass mysticMuse -> mysticMuse
    com.l2jfrozen.gameserver.model.base.PlayerClass elementalMaster -> elementalMaster
    com.l2jfrozen.gameserver.model.base.PlayerClass evaSaint -> evaSaint
    com.l2jfrozen.gameserver.model.base.PlayerClass shillienTemplar -> shillienTemplar
    com.l2jfrozen.gameserver.model.base.PlayerClass spectralDancer -> spectralDancer
    com.l2jfrozen.gameserver.model.base.PlayerClass ghostHunter -> ghostHunter
    com.l2jfrozen.gameserver.model.base.PlayerClass ghostSentinel -> ghostSentinel
    com.l2jfrozen.gameserver.model.base.PlayerClass stormScreamer -> stormScreamer
    com.l2jfrozen.gameserver.model.base.PlayerClass spectralMaster -> spectralMaster
    com.l2jfrozen.gameserver.model.base.PlayerClass shillienSaint -> shillienSaint
    com.l2jfrozen.gameserver.model.base.PlayerClass titan -> titan
    com.l2jfrozen.gameserver.model.base.PlayerClass grandKhauatari -> grandKhauatari
    com.l2jfrozen.gameserver.model.base.PlayerClass dominator -> dominator
    com.l2jfrozen.gameserver.model.base.PlayerClass doomcryer -> doomcryer
    com.l2jfrozen.gameserver.model.base.PlayerClass fortuneSeeker -> fortuneSeeker
    com.l2jfrozen.gameserver.model.base.PlayerClass maestro -> maestro
    com.l2jfrozen.gameserver.model.base.PlayerRace _race -> _race
    com.l2jfrozen.gameserver.model.base.ClassLevel _level -> _level
    com.l2jfrozen.gameserver.model.base.ClassType _type -> _type
    java.util.Set mainSubclassSet -> mainSubclassSet
    java.util.Set neverSubclassed -> neverSubclassed
    java.util.Set subclasseSet1 -> subclasseSet1
    java.util.Set subclasseSet2 -> subclasseSet2
    java.util.Set subclasseSet3 -> subclasseSet3
    java.util.Set subclasseSet4 -> subclasseSet4
    java.util.Set subclasseSet5 -> subclasseSet5
    java.util.EnumMap subclassSetMap -> subclassSetMap
    com.l2jfrozen.gameserver.model.base.PlayerClass[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.base.PlayerClass[] values() -> values
    com.l2jfrozen.gameserver.model.base.PlayerClass valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,com.l2jfrozen.gameserver.model.base.PlayerRace,com.l2jfrozen.gameserver.model.base.ClassType,com.l2jfrozen.gameserver.model.base.ClassLevel) -> <init>
    java.util.Set getAvailableSubclasses(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getAvailableSubclasses
    java.util.EnumSet getSet(com.l2jfrozen.gameserver.model.base.PlayerRace,com.l2jfrozen.gameserver.model.base.ClassLevel) -> getSet
    boolean isOfRace(com.l2jfrozen.gameserver.model.base.PlayerRace) -> isOfRace
    boolean isOfType(com.l2jfrozen.gameserver.model.base.ClassType) -> isOfType
    boolean isOfLevel(com.l2jfrozen.gameserver.model.base.ClassLevel) -> isOfLevel
    com.l2jfrozen.gameserver.model.base.ClassLevel getLevel() -> getLevel
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.base.PlayerClass$1 -> com.l2jfrozen.gameserver.model.base.PlayerClass$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$base$Race -> $SwitchMap$com$l2jfrozen$gameserver$model$base$Race
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.base.PlayerRace -> com.l2jfrozen.gameserver.model.base.PlayerRace:
    com.l2jfrozen.gameserver.model.base.PlayerRace Human -> Human
    com.l2jfrozen.gameserver.model.base.PlayerRace LightElf -> LightElf
    com.l2jfrozen.gameserver.model.base.PlayerRace DarkElf -> DarkElf
    com.l2jfrozen.gameserver.model.base.PlayerRace Orc -> Orc
    com.l2jfrozen.gameserver.model.base.PlayerRace Dwarf -> Dwarf
    com.l2jfrozen.gameserver.model.base.PlayerRace[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.base.PlayerRace[] values() -> values
    com.l2jfrozen.gameserver.model.base.PlayerRace valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.base.Race -> com.l2jfrozen.gameserver.model.base.Race:
    com.l2jfrozen.gameserver.model.base.Race human -> human
    com.l2jfrozen.gameserver.model.base.Race elf -> elf
    com.l2jfrozen.gameserver.model.base.Race darkelf -> darkelf
    com.l2jfrozen.gameserver.model.base.Race orc -> orc
    com.l2jfrozen.gameserver.model.base.Race dwarf -> dwarf
    com.l2jfrozen.gameserver.model.base.Race[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.base.Race[] values() -> values
    com.l2jfrozen.gameserver.model.base.Race valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.base.Sex -> com.l2jfrozen.gameserver.model.base.Sex:
    int MALE -> MALE
    int FEMALE -> FEMALE
    void <init>() -> <init>
com.l2jfrozen.gameserver.model.base.SoulCrystal -> com.l2jfrozen.gameserver.model.base.SoulCrystal:
    int[][] HighSoulConvert -> HighSoulConvert
    int[] SoulCrystalTable -> SoulCrystalTable
    int MAX_CRYSTALS_LEVEL -> MAX_CRYSTALS_LEVEL
    int BREAK_CHANCE -> BREAK_CHANCE
    int LEVEL_CHANCE -> LEVEL_CHANCE
    int RED_BROKEN_CRYSTAL -> RED_BROKEN_CRYSTAL
    int GRN_BROKEN_CYRSTAL -> GRN_BROKEN_CYRSTAL
    int BLU_BROKEN_CRYSTAL -> BLU_BROKEN_CRYSTAL
    int RED_NEW_CRYSTAL -> RED_NEW_CRYSTAL
    int GRN_NEW_CYRSTAL -> GRN_NEW_CYRSTAL
    int BLU_NEW_CRYSTAL -> BLU_NEW_CRYSTAL
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.base.SubClass -> com.l2jfrozen.gameserver.model.base.SubClass:
    com.l2jfrozen.gameserver.model.base.PlayerClass _class -> _class
    long _exp -> _exp
    int _sp -> _sp
    int _level -> _level
    int _classIndex -> _classIndex
    void <init>(int,long,int,byte,int) -> <init>
    void <init>(int,int) -> <init>
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.base.PlayerClass getClassDefinition() -> getClassDefinition
    int getClassId() -> getClassId
    long getExp() -> getExp
    int getSp() -> getSp
    int getLevel() -> getLevel
    int getClassIndex() -> getClassIndex
    void setClassId(int) -> setClassId
    void setExp(long) -> setExp
    void setSp(int) -> setSp
    void setClassIndex(int) -> setClassIndex
    void setLevel(int) -> setLevel
    void incLevel() -> incLevel
    void decLevel() -> decLevel
com.l2jfrozen.gameserver.model.entity.Announcements -> com.l2jfrozen.gameserver.model.entity.Announcements:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.Announcements _instance -> _instance
    java.util.List _announcements -> _announcements
    java.util.List _eventAnnouncements -> _eventAnnouncements
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.Announcements getInstance() -> getInstance
    void loadAnnouncements() -> loadAnnouncements
    void showAnnouncements(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showAnnouncements
    void addEventAnnouncement(com.l2jfrozen.gameserver.script.DateRange,java.lang.String[]) -> addEventAnnouncement
    void listAnnouncements(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> listAnnouncements
    void addAnnouncement(java.lang.String) -> addAnnouncement
    void delAnnouncement(int) -> delAnnouncement
    void readFromDisk(java.io.File) -> readFromDisk
    void saveToDisk() -> saveToDisk
    void announceToAll(java.lang.String) -> announceToAll
    void gameAnnounceToAll(java.lang.String) -> gameAnnounceToAll
    void announceToAll(com.l2jfrozen.gameserver.network.serverpackets.SystemMessage) -> announceToAll
    void handleAnnounce(java.lang.String,int) -> handleAnnounce
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.Auction -> com.l2jfrozen.gameserver.model.entity.Auction:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _id -> _id
    int _adenaId -> _adenaId
    long _endDate -> _endDate
    int _highestBidderId -> _highestBidderId
    java.lang.String _highestBidderName -> _highestBidderName
    int _highestBidderMaxBid -> _highestBidderMaxBid
    int _itemId -> _itemId
    java.lang.String _itemName -> _itemName
    int _itemObjectId -> _itemObjectId
    int _itemQuantity -> _itemQuantity
    java.lang.String _itemType -> _itemType
    int _sellerId -> _sellerId
    java.lang.String _sellerClanName -> _sellerClanName
    java.lang.String _sellerName -> _sellerName
    int _currentBid -> _currentBid
    int _startingBid -> _startingBid
    long MAX_ADENA -> MAX_ADENA
    java.util.Map _bidders -> _bidders
    java.lang.String[] ItemTypeName -> ItemTypeName
    void <init>(int) -> <init>
    void <init>(int,com.l2jfrozen.gameserver.model.L2Clan,long,int,java.lang.String) -> <init>
    void load() -> load
    void loadBid() -> loadBid
    void startAutoTask() -> startAutoTask
    java.lang.String getItemTypeName(com.l2jfrozen.gameserver.model.entity.ItemTypeEnum) -> getItemTypeName
    void saveAuctionDate() -> saveAuctionDate
    void setBid(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> setBid
    void returnItem(java.lang.String,int,boolean) -> returnItem
    boolean takeItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> takeItem
    void updateInDB(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> updateInDB
    void removeBids() -> removeBids
    void deleteAuctionFromDB() -> deleteAuctionFromDB
    void endAuction() -> endAuction
    void cancelBid(int) -> cancelBid
    void cancelAuction() -> cancelAuction
    void confirmAuction() -> confirmAuction
    int getId() -> getId
    int getCurrentBid() -> getCurrentBid
    long getEndDate() -> getEndDate
    int getHighestBidderId() -> getHighestBidderId
    java.lang.String getHighestBidderName() -> getHighestBidderName
    int getHighestBidderMaxBid() -> getHighestBidderMaxBid
    int getItemId() -> getItemId
    java.lang.String getItemName() -> getItemName
    int getItemObjectId() -> getItemObjectId
    int getItemQuantity() -> getItemQuantity
    java.lang.String getItemType() -> getItemType
    int getSellerId() -> getSellerId
    java.lang.String getSellerName() -> getSellerName
    java.lang.String getSellerClanName() -> getSellerClanName
    int getStartingBid() -> getStartingBid
    java.util.Map getBidders() -> getBidders
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.Auction$AutoEndTask -> com.l2jfrozen.gameserver.model.entity.Auction$AutoEndTask:
    com.l2jfrozen.gameserver.model.entity.Auction this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.Auction) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.Auction$Bidder -> com.l2jfrozen.gameserver.model.entity.Auction$Bidder:
    java.lang.String _name -> _name
    java.lang.String _clanName -> _clanName
    int _bid -> _bid
    java.util.Calendar _timeBid -> _timeBid
    com.l2jfrozen.gameserver.model.entity.Auction this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.Auction,java.lang.String,java.lang.String,int,long) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getClanName() -> getClanName
    int getBid() -> getBid
    java.util.Calendar getTimeBid() -> getTimeBid
    void setTimeBid(long) -> setTimeBid
    void setBid(int) -> setBid
com.l2jfrozen.gameserver.model.entity.ClanHall -> com.l2jfrozen.gameserver.model.entity.ClanHall:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _clanHallId -> _clanHallId
    java.util.List _doors -> _doors
    java.util.List _doorDefault -> _doorDefault
    java.lang.String _name -> _name
    int _ownerId -> _ownerId
    com.l2jfrozen.gameserver.model.L2Clan _ownerClan -> _ownerClan
    int _lease -> _lease
    java.lang.String _desc -> _desc
    java.lang.String _location -> _location
    long _paidUntil -> _paidUntil
    com.l2jfrozen.gameserver.model.zone.type.L2ClanHallZone _zone -> _zone
    int _grade -> _grade
    int _chRate -> _chRate
    boolean _isFree -> _isFree
    java.util.Map _functions -> _functions
    boolean _paid -> _paid
    int FUNC_TELEPORT -> FUNC_TELEPORT
    int FUNC_ITEM_CREATE -> FUNC_ITEM_CREATE
    int FUNC_RESTORE_HP -> FUNC_RESTORE_HP
    int FUNC_RESTORE_MP -> FUNC_RESTORE_MP
    int FUNC_RESTORE_EXP -> FUNC_RESTORE_EXP
    int FUNC_SUPPORT -> FUNC_SUPPORT
    int FUNC_DECO_FRONTPLATEFORM -> FUNC_DECO_FRONTPLATEFORM
    int FUNC_DECO_CURTAINS -> FUNC_DECO_CURTAINS
    void <init>(int,java.lang.String,int,int,java.lang.String,java.lang.String,long,int,boolean) -> <init>
    boolean getPaid() -> getPaid
    int getId() -> getId
    java.lang.String getName() -> getName
    int getOwnerId() -> getOwnerId
    int getLease() -> getLease
    java.lang.String getDesc() -> getDesc
    java.lang.String getLocation() -> getLocation
    long getPaidUntil() -> getPaidUntil
    int getGrade() -> getGrade
    java.util.List getDoors() -> getDoors
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance getDoor(int) -> getDoor
    com.l2jfrozen.gameserver.model.entity.ClanHall$ClanHallFunction getFunction(int) -> getFunction
    void setZone(com.l2jfrozen.gameserver.model.zone.type.L2ClanHallZone) -> setZone
    com.l2jfrozen.gameserver.model.zone.type.L2ClanHallZone getZone() -> getZone
    void free() -> free
    void setOwner(com.l2jfrozen.gameserver.model.L2Clan) -> setOwner
    com.l2jfrozen.gameserver.model.L2Clan getOwnerClan() -> getOwnerClan
    void spawnDoor() -> spawnDoor
    void openCloseDoor(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> openCloseDoor
    void openCloseDoor(int,boolean) -> openCloseDoor
    void openCloseDoor(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance,boolean) -> openCloseDoor
    void openCloseDoors(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> openCloseDoors
    void openCloseDoors(boolean) -> openCloseDoors
    void banishForeigners() -> banishForeigners
    void loadFunctions() -> loadFunctions
    void removeFunction(int) -> removeFunction
    boolean updateFunctions(int,int,int,long,boolean) -> updateFunctions
    void updateDb() -> updateDb
    void initialyzeTask(boolean) -> initialyzeTask
    void loadDoor() -> loadDoor
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.ClanHall$ClanHallFunction -> com.l2jfrozen.gameserver.model.entity.ClanHall$ClanHallFunction:
    int _type -> _type
    int _lvl -> _lvl
    int _fee -> _fee
    int _tempFee -> _tempFee
    long _rate -> _rate
    long _endDate -> _endDate
    boolean _inDebt -> _inDebt
    com.l2jfrozen.gameserver.model.entity.ClanHall this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.ClanHall,int,int,int,int,long,long) -> <init>
    int getType() -> getType
    int getLvl() -> getLvl
    int getLease() -> getLease
    long getRate() -> getRate
    long getEndTime() -> getEndTime
    void setLvl(int) -> setLvl
    void setLease(int) -> setLease
    void setEndTime(long) -> setEndTime
    void initializeTask() -> initializeTask
    void dbSave(boolean) -> dbSave
com.l2jfrozen.gameserver.model.entity.ClanHall$ClanHallFunction$FunctionTask -> com.l2jfrozen.gameserver.model.entity.ClanHall$ClanHallFunction$FunctionTask:
    com.l2jfrozen.gameserver.model.entity.ClanHall$ClanHallFunction this$1 -> this$1
    void <init>(com.l2jfrozen.gameserver.model.entity.ClanHall$ClanHallFunction) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.ClanHall$FeeTask -> com.l2jfrozen.gameserver.model.entity.ClanHall$FeeTask:
    com.l2jfrozen.gameserver.model.entity.ClanHall this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.ClanHall) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.DimensionalRift -> com.l2jfrozen.gameserver.model.entity.DimensionalRift:
    byte _type -> _type
    com.l2jfrozen.gameserver.model.L2Party _party -> _party
    javolution.util.FastList _completedRooms -> _completedRooms
    long seconds_5 -> seconds_5
    byte jumps_current -> jumps_current
    java.util.Timer teleporterTimer -> teleporterTimer
    java.util.TimerTask teleporterTimerTask -> teleporterTimerTask
    java.util.Timer spawnTimer -> spawnTimer
    java.util.TimerTask spawnTimerTask -> spawnTimerTask
    byte _choosenRoom -> _choosenRoom
    boolean _hasJumped -> _hasJumped
    javolution.util.FastList deadPlayers -> deadPlayers
    javolution.util.FastList revivedInWaitingRoom -> revivedInWaitingRoom
    boolean isBossRoom -> isBossRoom
    void <init>(com.l2jfrozen.gameserver.model.L2Party,byte,byte) -> <init>
    byte getType() -> getType
    byte getCurrentRoom() -> getCurrentRoom
    void createTeleporterTimer(boolean) -> createTeleporterTimer
    void createSpawnTimer(byte) -> createSpawnTimer
    void partyMemberInvited() -> partyMemberInvited
    void partyMemberExited(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> partyMemberExited
    void manualTeleport(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> manualTeleport
    void manualExitRift(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> manualExitRift
    void teleportToNextRoom(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> teleportToNextRoom
    void teleportToWaitingRoom(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> teleportToWaitingRoom
    void killRift() -> killRift
    java.util.Timer getTeleportTimer() -> getTeleportTimer
    java.util.TimerTask getTeleportTimerTask() -> getTeleportTimerTask
    java.util.Timer getSpawnTimer() -> getSpawnTimer
    java.util.TimerTask getSpawnTimerTask() -> getSpawnTimerTask
    void setTeleportTimer(java.util.Timer) -> setTeleportTimer
    void setTeleportTimerTask(java.util.TimerTask) -> setTeleportTimerTask
    void setSpawnTimer(java.util.Timer) -> setSpawnTimer
    void setSpawnTimerTask(java.util.TimerTask) -> setSpawnTimerTask
    long calcTimeToNextJump() -> calcTimeToNextJump
    void memberDead(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> memberDead
    void memberRessurected(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> memberRessurected
    void usedTeleport(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> usedTeleport
    javolution.util.FastList getDeadMemberList() -> getDeadMemberList
    javolution.util.FastList getRevivedAtWaitingRoom() -> getRevivedAtWaitingRoom
    void checkBossRoom(byte) -> checkBossRoom
    int[] getRoomCoord(byte) -> getRoomCoord
    byte getMaxJumps() -> getMaxJumps
com.l2jfrozen.gameserver.model.entity.DimensionalRift$1 -> com.l2jfrozen.gameserver.model.entity.DimensionalRift$1:
    boolean val$reasonTP -> val$reasonTP
    com.l2jfrozen.gameserver.model.entity.DimensionalRift this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.DimensionalRift,boolean) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.DimensionalRift$2 -> com.l2jfrozen.gameserver.model.entity.DimensionalRift$2:
    com.l2jfrozen.gameserver.managers.DimensionalRiftManager$DimensionalRiftRoom val$riftRoom -> val$riftRoom
    com.l2jfrozen.gameserver.model.entity.DimensionalRift this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.DimensionalRift,com.l2jfrozen.gameserver.managers.DimensionalRiftManager$DimensionalRiftRoom) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.Duel -> com.l2jfrozen.gameserver.model.entity.Duel:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int DUELSTATE_NODUEL -> DUELSTATE_NODUEL
    int DUELSTATE_DUELLING -> DUELSTATE_DUELLING
    int DUELSTATE_DEAD -> DUELSTATE_DEAD
    int DUELSTATE_WINNER -> DUELSTATE_WINNER
    int DUELSTATE_INTERRUPTED -> DUELSTATE_INTERRUPTED
    int _duelId -> _duelId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _playerA -> _playerA
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _playerB -> _playerB
    boolean _partyDuel -> _partyDuel
    java.util.Calendar _duelEndTime -> _duelEndTime
    int _surrenderRequest -> _surrenderRequest
    int _countdown -> _countdown
    boolean _finished -> _finished
    javolution.util.FastMap _playerConditions -> _playerConditions
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> <init>
    void stopFighting() -> stopFighting
    boolean isDuelistInPvp(boolean) -> isDuelistInPvp
    void startDuel() -> startDuel
    void savePlayerConditions() -> savePlayerConditions
    void restorePlayerConditions(boolean) -> restorePlayerConditions
    int getId() -> getId
    int getRemainingTime() -> getRemainingTime
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayerA() -> getPlayerA
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayerB() -> getPlayerB
    boolean isPartyDuel() -> isPartyDuel
    void setFinished(boolean) -> setFinished
    boolean getFinished() -> getFinished
    void teleportPlayers(int,int,int) -> teleportPlayers
    void broadcastToTeam1(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastToTeam1
    void broadcastToTeam2(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastToTeam2
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getWinner() -> getWinner
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getLooser() -> getLooser
    void playKneelAnimation() -> playKneelAnimation
    int countdown() -> countdown
    void endDuel(com.l2jfrozen.gameserver.model.entity.DuelResultEnum) -> endDuel
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum checkEndDuelCondition() -> checkEndDuelCondition
    void doSurrender(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> doSurrender
    void onPlayerDefeat(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onPlayerDefeat
    void onRemoveFromParty(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onRemoveFromParty
    void onBuff(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Effect) -> onBuff
    void onBuffStop(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Effect) -> onBuffStop
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.Duel$1 -> com.l2jfrozen.gameserver.model.entity.Duel$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$entity$DuelResultEnum -> $SwitchMap$com$l2jfrozen$gameserver$model$entity$DuelResultEnum
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.Duel$PlayerCondition -> com.l2jfrozen.gameserver.model.entity.Duel$PlayerCondition:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    double _hp -> _hp
    double _mp -> _mp
    double _cp -> _cp
    boolean _paDuel -> _paDuel
    int _x -> _x
    int _y -> _y
    int _z -> _z
    javolution.util.FastList _debuffs -> _debuffs
    com.l2jfrozen.gameserver.model.entity.Duel this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.Duel,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> <init>
    void restoreCondition() -> restoreCondition
    void registerDebuff(com.l2jfrozen.gameserver.model.L2Effect) -> registerDebuff
    void removeDebuff(com.l2jfrozen.gameserver.model.L2Effect) -> removeDebuff
    void teleportBack() -> teleportBack
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayer() -> getPlayer
com.l2jfrozen.gameserver.model.entity.Duel$ScheduleDuelTask -> com.l2jfrozen.gameserver.model.entity.Duel$ScheduleDuelTask:
    com.l2jfrozen.gameserver.model.entity.Duel _duel -> _duel
    com.l2jfrozen.gameserver.model.entity.Duel this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.Duel,com.l2jfrozen.gameserver.model.entity.Duel) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.Duel$ScheduleEndDuelTask -> com.l2jfrozen.gameserver.model.entity.Duel$ScheduleEndDuelTask:
    com.l2jfrozen.gameserver.model.entity.Duel _duel -> _duel
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum _result -> _result
    void <init>(com.l2jfrozen.gameserver.model.entity.Duel,com.l2jfrozen.gameserver.model.entity.DuelResultEnum) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.Duel$ScheduleStartDuelTask -> com.l2jfrozen.gameserver.model.entity.Duel$ScheduleStartDuelTask:
    com.l2jfrozen.gameserver.model.entity.Duel _duel -> _duel
    com.l2jfrozen.gameserver.model.entity.Duel this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.Duel,com.l2jfrozen.gameserver.model.entity.Duel) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.DuelResultEnum -> com.l2jfrozen.gameserver.model.entity.DuelResultEnum:
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum Continue -> Continue
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum Team1Win -> Team1Win
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum Team2Win -> Team2Win
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum Team1Surrender -> Team1Surrender
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum Team2Surrender -> Team2Surrender
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum Canceled -> Canceled
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum Timeout -> Timeout
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum[] values() -> values
    com.l2jfrozen.gameserver.model.entity.DuelResultEnum valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.FakeOnline -> com.l2jfrozen.gameserver.model.entity.FakeOnline:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String LOAD_OFFLINE_STATUS -> LOAD_OFFLINE_STATUS
    java.lang.String SET_OFFLINE_STATUS -> SET_OFFLINE_STATUS
    void <init>() -> <init>
    void restoreFakePlayers() -> restoreFakePlayers
    void setfakeplayers(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setfakeplayers
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.Hero -> com.l2jfrozen.gameserver.model.entity.Hero:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.Hero _instance -> _instance
    java.lang.String GET_HEROES -> GET_HEROES
    java.lang.String GET_ALL_HEROES -> GET_ALL_HEROES
    java.lang.String UPDATE_ALL -> UPDATE_ALL
    java.lang.String INSERT_HERO -> INSERT_HERO
    java.lang.String UPDATE_HERO -> UPDATE_HERO
    java.lang.String GET_CLAN_ALLY -> GET_CLAN_ALLY
    java.lang.String GET_CLAN_NAME -> GET_CLAN_NAME
    java.lang.String DELETE_ITEMS -> DELETE_ITEMS
    java.util.List _heroItems -> _heroItems
    java.util.Map _heroes -> _heroes
    java.util.Map _completeHeroes -> _completeHeroes
    java.lang.String COUNT -> COUNT
    java.lang.String PLAYED -> PLAYED
    java.lang.String CLAN_NAME -> CLAN_NAME
    java.lang.String CLAN_CREST -> CLAN_CREST
    java.lang.String ALLY_NAME -> ALLY_NAME
    java.lang.String ALLY_CREST -> ALLY_CREST
    com.l2jfrozen.gameserver.model.entity.Hero getInstance() -> getInstance
    void <init>() -> <init>
    void init() -> init
    void putHero(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> putHero
    void deleteHero(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> deleteHero
    java.util.Map getHeroes() -> getHeroes
    void computeNewHeroes(java.util.List) -> computeNewHeroes
    void updateHeroes(boolean) -> updateHeroes
    java.util.List getHeroItems() -> getHeroItems
    void deleteItemsInDb() -> deleteItemsInDb
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.ItemTypeEnum -> com.l2jfrozen.gameserver.model.entity.ItemTypeEnum:
    com.l2jfrozen.gameserver.model.entity.ItemTypeEnum ClanHall -> ClanHall
    com.l2jfrozen.gameserver.model.entity.ItemTypeEnum[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.entity.ItemTypeEnum[] values() -> values
    com.l2jfrozen.gameserver.model.entity.ItemTypeEnum valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.L2Rebirth -> com.l2jfrozen.gameserver.model.entity.L2Rebirth:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.L2Rebirth _instance -> _instance
    java.util.HashMap _playersRebirthInfo -> _playersRebirthInfo
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.L2Rebirth getInstance() -> getInstance
    void handleCommand(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleCommand
    void displayRebirthWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> displayRebirthWindow
    void requestRebirth(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> requestRebirth
    void grantRebirth(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> grantRebirth
    void displayCongrats(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> displayCongrats
    boolean playerIsEligible(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> playerIsEligible
    void grantRebirthSkills(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> grantRebirthSkills
    int getRebirthLevel(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getRebirthLevel
    com.l2jfrozen.gameserver.model.L2Skill getRebirthSkill(int,boolean) -> getRebirthSkill
    void loadRebirthInfo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> loadRebirthInfo
    void storePlayerBirth(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> storePlayerBirth
    void updatePlayerBirth(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> updatePlayerBirth
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.MonsterRace -> com.l2jfrozen.gameserver.model.entity.MonsterRace:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance[] _monsters -> _monsters
    com.l2jfrozen.gameserver.model.entity.MonsterRace _instance -> _instance
    java.lang.reflect.Constructor _constructor -> _constructor
    int[][] _speeds -> _speeds
    int[] _first -> _first
    int[] _second -> _second
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.MonsterRace getInstance() -> getInstance
    void newRace() -> newRace
    void newSpeeds() -> newSpeeds
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance[] getMonsters() -> getMonsters
    int[][] getSpeeds() -> getSpeeds
    int getFirstPlace() -> getFirstPlace
    int getSecondPlace() -> getSecondPlace
com.l2jfrozen.gameserver.model.entity.Wedding -> com.l2jfrozen.gameserver.model.entity.Wedding:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _Id -> _Id
    int _player1Id -> _player1Id
    int _player2Id -> _player2Id
    boolean _maried -> _maried
    java.util.Calendar _affiancedDate -> _affiancedDate
    java.util.Calendar _weddingDate -> _weddingDate
    int _type -> _type
    void <init>(int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void marry(int) -> marry
    void divorce() -> divorce
    int getId() -> getId
    int getPlayer1Id() -> getPlayer1Id
    int getPlayer2Id() -> getPlayer2Id
    boolean getMaried() -> getMaried
    java.util.Calendar getAffiancedDate() -> getAffiancedDate
    java.util.Calendar getWeddingDate() -> getWeddingDate
    int getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.event.CTF -> com.l2jfrozen.gameserver.model.entity.event.CTF:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _eventName -> _eventName
    java.lang.String _eventDesc -> _eventDesc
    java.lang.String _joiningLocationName -> _joiningLocationName
    com.l2jfrozen.gameserver.model.spawn.L2Spawn _npcSpawn -> _npcSpawn
    boolean _joining -> _joining
    boolean _teleport -> _teleport
    boolean _started -> _started
    boolean _aborted -> _aborted
    boolean _sitForced -> _sitForced
    boolean _inProgress -> _inProgress
    int _npcId -> _npcId
    int _npcX -> _npcX
    int _npcY -> _npcY
    int _npcZ -> _npcZ
    int _npcHeading -> _npcHeading
    int _rewardId -> _rewardId
    int _rewardAmount -> _rewardAmount
    int _minlvl -> _minlvl
    int _maxlvl -> _maxlvl
    int _joinTime -> _joinTime
    int _eventTime -> _eventTime
    int _minPlayers -> _minPlayers
    int _maxPlayers -> _maxPlayers
    long _intervalBetweenMatches -> _intervalBetweenMatches
    java.lang.String startEventTime -> startEventTime
    boolean _teamEvent -> _teamEvent
    java.util.Vector _players -> _players
    java.lang.String _topTeam -> _topTeam
    java.util.Vector _playersShuffle -> _playersShuffle
    java.util.Vector _teams -> _teams
    java.util.Vector _savePlayers -> _savePlayers
    java.util.Vector _savePlayerTeams -> _savePlayerTeams
    java.util.Vector _teamPlayersCount -> _teamPlayersCount
    java.util.Vector _teamColors -> _teamColors
    java.util.Vector _teamsX -> _teamsX
    java.util.Vector _teamsY -> _teamsY
    java.util.Vector _teamsZ -> _teamsZ
    java.util.Vector _teamPointsCount -> _teamPointsCount
    int _topScore -> _topScore
    int _eventCenterX -> _eventCenterX
    int _eventCenterY -> _eventCenterY
    int _eventCenterZ -> _eventCenterZ
    int _eventOffset -> _eventOffset
    int _FlagNPC -> _FlagNPC
    int _FLAG_IN_HAND_ITEM_ID -> _FLAG_IN_HAND_ITEM_ID
    java.util.Vector _flagIds -> _flagIds
    java.util.Vector _flagsX -> _flagsX
    java.util.Vector _flagsY -> _flagsY
    java.util.Vector _flagsZ -> _flagsZ
    java.util.Vector _flagSpawns -> _flagSpawns
    java.util.Vector _throneSpawns -> _throneSpawns
    java.util.Vector _flagsTaken -> _flagsTaken
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.event.CTF getNewInstance() -> getNewInstance
    java.lang.String get_eventName() -> get_eventName
    boolean set_eventName(java.lang.String) -> set_eventName
    java.lang.String get_eventDesc() -> get_eventDesc
    boolean set_eventDesc(java.lang.String) -> set_eventDesc
    java.lang.String get_joiningLocationName() -> get_joiningLocationName
    boolean set_joiningLocationName(java.lang.String) -> set_joiningLocationName
    int get_npcId() -> get_npcId
    boolean set_npcId(int) -> set_npcId
    com.l2jfrozen.gameserver.model.Location get_npcLocation() -> get_npcLocation
    int get_rewardId() -> get_rewardId
    boolean set_rewardId(int) -> set_rewardId
    int get_rewardAmount() -> get_rewardAmount
    boolean set_rewardAmount(int) -> set_rewardAmount
    int get_minlvl() -> get_minlvl
    boolean set_minlvl(int) -> set_minlvl
    int get_maxlvl() -> get_maxlvl
    boolean set_maxlvl(int) -> set_maxlvl
    int get_joinTime() -> get_joinTime
    boolean set_joinTime(int) -> set_joinTime
    int get_eventTime() -> get_eventTime
    boolean set_eventTime(int) -> set_eventTime
    int get_minPlayers() -> get_minPlayers
    boolean set_minPlayers(int) -> set_minPlayers
    int get_maxPlayers() -> get_maxPlayers
    boolean set_maxPlayers(int) -> set_maxPlayers
    long get_intervalBetweenMatches() -> get_intervalBetweenMatches
    boolean set_intervalBetweenMatches(long) -> set_intervalBetweenMatches
    java.lang.String getStartEventTime() -> getStartEventTime
    boolean setStartEventTime(java.lang.String) -> setStartEventTime
    boolean is_joining() -> is_joining
    boolean is_teleport() -> is_teleport
    boolean is_started() -> is_started
    boolean is_aborted() -> is_aborted
    boolean is_sitForced() -> is_sitForced
    boolean is_inProgress() -> is_inProgress
    boolean checkMaxLevel(int) -> checkMaxLevel
    boolean checkMinLevel(int) -> checkMinLevel
    boolean checkMinPlayers(int) -> checkMinPlayers
    boolean checkMaxPlayers(int) -> checkMaxPlayers
    boolean checkStartJoinOk() -> checkStartJoinOk
    boolean checkStartJoinTeamInfo() -> checkStartJoinTeamInfo
    boolean checkStartJoinPlayerInfo() -> checkStartJoinPlayerInfo
    boolean checkAutoEventStartJoinOk() -> checkAutoEventStartJoinOk
    boolean checkOptionalEventStartJoinOk() -> checkOptionalEventStartJoinOk
    void setNpcPos(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setNpcPos
    void spawnEventNpc() -> spawnEventNpc
    void unspawnEventNpc() -> unspawnEventNpc
    boolean startJoin() -> startJoin
    boolean startTeleport() -> startTeleport
    void afterTeleportOperations() -> afterTeleportOperations
    boolean startEvent() -> startEvent
    void afterStartOperations() -> afterStartOperations
    void restartEvent() -> restartEvent
    void finishEvent() -> finishEvent
    void afterFinishOperations() -> afterFinishOperations
    void abortEvent() -> abortEvent
    void afterFinish() -> afterFinish
    void teleportFinish() -> teleportFinish
    void autoEvent() -> autoEvent
    void eventOnceStart() -> eventOnceStart
    void waiter(long) -> waiter
    void sit() -> sit
    void removeOfflinePlayers() -> removeOfflinePlayers
    boolean startEventOk() -> startEventOk
    boolean finishEventOk() -> finishEventOk
    boolean addPlayerOk(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addPlayerOk
    void setUserData() -> setUserData
    void dumpData() -> dumpData
    void dumpLocalEventInfo() -> dumpLocalEventInfo
    void loadData() -> loadData
    void saveData() -> saveData
    void showEventHtml(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showEventHtml
    void addPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> addPlayer
    void removePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removePlayer
    void cleanCTF() -> cleanCTF
    void cleanLocalEventInfo() -> cleanLocalEventInfo
    void cleanEventPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> cleanEventPlayer
    void addDisconnectedPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addDisconnectedPlayer
    void afterAddDisconnectedPlayerOperations(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> afterAddDisconnectedPlayerOperations
    void shuffleTeams() -> shuffleTeams
    void playKneelAnimation(java.lang.String) -> playKneelAnimation
    void rewardTeam(java.lang.String) -> rewardTeam
    void processTopPlayer() -> processTopPlayer
    void processTopTeam() -> processTopTeam
    void addTeam(java.lang.String) -> addTeam
    void addTeamEventOperations(java.lang.String) -> addTeamEventOperations
    void removeTeam(java.lang.String) -> removeTeam
    void removeTeamEventItems(java.lang.String) -> removeTeamEventItems
    void setTeamPos(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setTeamPos
    void setTeamPos(java.lang.String,int,int,int) -> setTeamPos
    void setTeamColor(java.lang.String,int) -> setTeamColor
    int teamPlayersCount(java.lang.String) -> teamPlayersCount
    void setTeamPlayersCount(java.lang.String,int) -> setTeamPlayersCount
    boolean checkShufflePlayers(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkShufflePlayers
    void sendFinalMessages() -> sendFinalMessages
    int getIntervalBetweenMatchs() -> getIntervalBetweenMatchs
    void run() -> run
    java.lang.String getEventIdentifier() -> getEventIdentifier
    java.lang.String getEventStartTime() -> getEventStartTime
    void setEventStartTime(java.lang.String) -> setEventStartTime
    void onDisconnect(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onDisconnect
    int teamPointsCount(java.lang.String) -> teamPointsCount
    void setTeamPointsCount(java.lang.String,int) -> setTeamPointsCount
    int get_eventOffset() -> get_eventOffset
    boolean set_eventOffset(int) -> set_eventOffset
    void showFlagHtml(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> showFlagHtml
    void checkRestoreFlags() -> checkRestoreFlags
    void addFlagToPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addFlagToPlayer
    void removeFlagFromPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeFlagFromPlayer
    void setTeamFlag(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setTeamFlag
    void spawnAllFlags() -> spawnAllFlags
    void unspawnAllFlags() -> unspawnAllFlags
    void unspawnFlag(java.lang.String) -> unspawnFlag
    void spawnFlag(java.lang.String) -> spawnFlag
    boolean InRangeOfFlag(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> InRangeOfFlag
    void processInFlagRange(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> processInFlagRange
    void pointTeamTo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> pointTeamTo
    void addOrSet(int,com.l2jfrozen.gameserver.model.spawn.L2Spawn,boolean,int,int,int,int) -> addOrSet
    void calculateOutSideOfCTF() -> calculateOutSideOfCTF
    boolean isOutsideCTFArea(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isOutsideCTFArea
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.event.CTF$1 -> com.l2jfrozen.gameserver.model.entity.event.CTF$1:
    void <init>() -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.CTF$2 -> com.l2jfrozen.gameserver.model.entity.event.CTF$2:
    void <init>() -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.CTF$AutoEventTask -> com.l2jfrozen.gameserver.model.entity.event.CTF$AutoEventTask:
    void <init>() -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.DM -> com.l2jfrozen.gameserver.model.entity.event.DM:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _eventName -> _eventName
    java.lang.String _eventDesc -> _eventDesc
    java.lang.String _joiningLocationName -> _joiningLocationName
    com.l2jfrozen.gameserver.model.spawn.L2Spawn _npcSpawn -> _npcSpawn
    boolean _joining -> _joining
    boolean _teleport -> _teleport
    boolean _started -> _started
    boolean _aborted -> _aborted
    boolean _sitForced -> _sitForced
    boolean _inProgress -> _inProgress
    int _npcId -> _npcId
    int _npcX -> _npcX
    int _npcY -> _npcY
    int _npcZ -> _npcZ
    int _npcHeading -> _npcHeading
    int _rewardId -> _rewardId
    int _rewardAmount -> _rewardAmount
    int _minlvl -> _minlvl
    int _maxlvl -> _maxlvl
    int _joinTime -> _joinTime
    int _eventTime -> _eventTime
    int _minPlayers -> _minPlayers
    int _maxPlayers -> _maxPlayers
    int _topKills -> _topKills
    int _playerColors -> _playerColors
    int _playerX -> _playerX
    int _playerY -> _playerY
    int _playerZ -> _playerZ
    long _intervalBetweenMatchs -> _intervalBetweenMatchs
    java.lang.String startEventTime -> startEventTime
    boolean _teamEvent -> _teamEvent
    java.util.Vector _players -> _players
    java.util.List _topPlayers -> _topPlayers
    java.util.Vector _savePlayers -> _savePlayers
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.event.DM getNewInstance() -> getNewInstance
    java.lang.String get_eventName() -> get_eventName
    boolean set_eventName(java.lang.String) -> set_eventName
    java.lang.String get_eventDesc() -> get_eventDesc
    boolean set_eventDesc(java.lang.String) -> set_eventDesc
    java.lang.String get_joiningLocationName() -> get_joiningLocationName
    boolean set_joiningLocationName(java.lang.String) -> set_joiningLocationName
    int get_npcId() -> get_npcId
    boolean set_npcId(int) -> set_npcId
    com.l2jfrozen.gameserver.model.Location get_npcLocation() -> get_npcLocation
    int get_rewardId() -> get_rewardId
    boolean set_rewardId(int) -> set_rewardId
    int get_rewardAmount() -> get_rewardAmount
    boolean set_rewardAmount(int) -> set_rewardAmount
    int get_minlvl() -> get_minlvl
    boolean set_minlvl(int) -> set_minlvl
    int get_maxlvl() -> get_maxlvl
    boolean set_maxlvl(int) -> set_maxlvl
    int get_joinTime() -> get_joinTime
    boolean set_joinTime(int) -> set_joinTime
    int get_eventTime() -> get_eventTime
    boolean set_eventTime(int) -> set_eventTime
    int get_minPlayers() -> get_minPlayers
    boolean set_minPlayers(int) -> set_minPlayers
    int get_maxPlayers() -> get_maxPlayers
    boolean set_maxPlayers(int) -> set_maxPlayers
    long get_intervalBetweenMatchs() -> get_intervalBetweenMatchs
    boolean set_intervalBetweenMatchs(long) -> set_intervalBetweenMatchs
    java.lang.String getStartEventTime() -> getStartEventTime
    boolean setStartEventTime(java.lang.String) -> setStartEventTime
    boolean is_joining() -> is_joining
    boolean is_teleport() -> is_teleport
    boolean is_started() -> is_started
    boolean is_aborted() -> is_aborted
    boolean is_sitForced() -> is_sitForced
    boolean is_inProgress() -> is_inProgress
    boolean checkMaxLevel(int) -> checkMaxLevel
    boolean checkMinLevel(int) -> checkMinLevel
    boolean checkMinPlayers(int) -> checkMinPlayers
    boolean checkMaxPlayers(int) -> checkMaxPlayers
    boolean checkStartJoinOk() -> checkStartJoinOk
    boolean checkStartJoinTeamInfo() -> checkStartJoinTeamInfo
    boolean checkStartJoinPlayerInfo() -> checkStartJoinPlayerInfo
    boolean checkAutoEventStartJoinOk() -> checkAutoEventStartJoinOk
    boolean checkOptionalEventStartJoinOk() -> checkOptionalEventStartJoinOk
    void setNpcPos(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setNpcPos
    void spawnEventNpc() -> spawnEventNpc
    void unspawnEventNpc() -> unspawnEventNpc
    boolean startJoin() -> startJoin
    boolean startTeleport() -> startTeleport
    void afterTeleportOperations() -> afterTeleportOperations
    boolean startEvent() -> startEvent
    void removeParties() -> removeParties
    void afterStartOperations() -> afterStartOperations
    void restartEvent() -> restartEvent
    void finishEvent() -> finishEvent
    void afterFinishOperations() -> afterFinishOperations
    void abortEvent() -> abortEvent
    void afterFinish() -> afterFinish
    void teleportFinish() -> teleportFinish
    void autoEvent() -> autoEvent
    void eventOnceStart() -> eventOnceStart
    void waiter(long) -> waiter
    void sit() -> sit
    void removeOfflinePlayers() -> removeOfflinePlayers
    boolean startEventOk() -> startEventOk
    boolean finishEventOk() -> finishEventOk
    boolean addPlayerOk(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addPlayerOk
    void setUserData() -> setUserData
    void dumpData() -> dumpData
    void dumpLocalEventInfo() -> dumpLocalEventInfo
    void loadData() -> loadData
    void saveData() -> saveData
    void showEventHtml(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showEventHtml
    void addPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addPlayer
    void removePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removePlayer
    void cleanDM() -> cleanDM
    void cleanLocalEventInfo() -> cleanLocalEventInfo
    void cleanEventPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> cleanEventPlayer
    void addDisconnectedPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addDisconnectedPlayer
    int get_playerColors() -> get_playerColors
    boolean set_playerColors(int) -> set_playerColors
    void rewardPlayer() -> rewardPlayer
    void processTopPlayer() -> processTopPlayer
    void processTopTeam() -> processTopTeam
    com.l2jfrozen.gameserver.model.Location get_playersSpawnLocation() -> get_playersSpawnLocation
    void setPlayersPos(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setPlayersPos
    void removeUserData() -> removeUserData
    void sendFinalMessages() -> sendFinalMessages
    int getIntervalBetweenMatchs() -> getIntervalBetweenMatchs
    void setEventStartTime(java.lang.String) -> setEventStartTime
    java.lang.String getEventIdentifier() -> getEventIdentifier
    void run() -> run
    java.lang.String getEventStartTime() -> getEventStartTime
    void onDisconnect(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onDisconnect
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.event.DM$1 -> com.l2jfrozen.gameserver.model.entity.event.DM$1:
    void <init>() -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.DM$2 -> com.l2jfrozen.gameserver.model.entity.event.DM$2:
    void <init>() -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.EventInterface -> com.l2jfrozen.gameserver.model.entity.event.EventInterface:
com.l2jfrozen.gameserver.model.entity.event.EventPoint -> com.l2jfrozen.gameserver.model.entity.event.EventPoint:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    java.lang.Integer _points -> _points
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActiveChar() -> getActiveChar
    void savePoints() -> savePoints
    void loadFromDB() -> loadFromDB
    void saveToDb() -> saveToDb
    java.lang.Integer getPoints() -> getPoints
    void setPoints(java.lang.Integer) -> setPoints
    void addPoints(java.lang.Integer) -> addPoints
    void removePoints(java.lang.Integer) -> removePoints
    boolean canSpend(java.lang.Integer) -> canSpend
com.l2jfrozen.gameserver.model.entity.event.L2Event -> com.l2jfrozen.gameserver.model.entity.event.L2Event:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String eventName -> eventName
    int teamsNumber -> teamsNumber
    java.util.HashMap names -> names
    java.util.LinkedList participatingPlayers -> participatingPlayers
    java.util.HashMap players -> players
    int id -> id
    java.util.LinkedList npcs -> npcs
    boolean active -> active
    java.util.HashMap connectionLossData -> connectionLossData
    void <init>() -> <init>
    int getTeamOfPlayer(java.lang.String) -> getTeamOfPlayer
    java.lang.String[] getTopNKillers(int) -> getTopNKillers
    void showEventHtml(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showEventHtml
    void spawn(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> spawn
    void announceAllPlayers(java.lang.String) -> announceAllPlayers
    boolean isOnEvent(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isOnEvent
    void inscribePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> inscribePlayer
    void restoreChar(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> restoreChar
    void restoreAndTeleChar(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> restoreAndTeleChar
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.event.Lottery -> com.l2jfrozen.gameserver.model.entity.event.Lottery:
    long SECOND -> SECOND
    long MINUTE -> MINUTE
    com.l2jfrozen.gameserver.model.entity.event.Lottery _instance -> _instance
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String INSERT_LOTTERY -> INSERT_LOTTERY
    java.lang.String UPDATE_PRICE -> UPDATE_PRICE
    java.lang.String UPDATE_LOTTERY -> UPDATE_LOTTERY
    java.lang.String SELECT_LAST_LOTTERY -> SELECT_LAST_LOTTERY
    java.lang.String SELECT_LOTTERY_ITEM -> SELECT_LOTTERY_ITEM
    java.lang.String SELECT_LOTTERY_TICKET -> SELECT_LOTTERY_TICKET
    int _number -> _number
    int _prize -> _prize
    boolean _isSellingTickets -> _isSellingTickets
    boolean _isStarted -> _isStarted
    long _enddate -> _enddate
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.event.Lottery getInstance() -> getInstance
    int getId() -> getId
    int getPrize() -> getPrize
    long getEndDate() -> getEndDate
    void increasePrize(int) -> increasePrize
    boolean isSellableTickets() -> isSellableTickets
    boolean isStarted() -> isStarted
    int[] decodeNumbers(int,int) -> decodeNumbers
    int[] checkTicket(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> checkTicket
    int[] checkTicket(int,int,int) -> checkTicket
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.event.Lottery$finishLottery -> com.l2jfrozen.gameserver.model.entity.event.Lottery$finishLottery:
    com.l2jfrozen.gameserver.model.entity.event.Lottery this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.event.Lottery) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.Lottery$startLottery -> com.l2jfrozen.gameserver.model.entity.event.Lottery$startLottery:
    com.l2jfrozen.gameserver.model.entity.event.Lottery this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.event.Lottery) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.Lottery$stopSellingTickets -> com.l2jfrozen.gameserver.model.entity.event.Lottery$stopSellingTickets:
    com.l2jfrozen.gameserver.model.entity.event.Lottery this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.event.Lottery) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.TvT -> com.l2jfrozen.gameserver.model.entity.event.TvT:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _eventName -> _eventName
    java.lang.String _eventDesc -> _eventDesc
    java.lang.String _joiningLocationName -> _joiningLocationName
    com.l2jfrozen.gameserver.model.spawn.L2Spawn _npcSpawn -> _npcSpawn
    boolean _joining -> _joining
    boolean _teleport -> _teleport
    boolean _started -> _started
    boolean _aborted -> _aborted
    boolean _sitForced -> _sitForced
    boolean _inProgress -> _inProgress
    int _npcId -> _npcId
    int _npcX -> _npcX
    int _npcY -> _npcY
    int _npcZ -> _npcZ
    int _npcHeading -> _npcHeading
    int _rewardId -> _rewardId
    int _rewardAmount -> _rewardAmount
    int _minlvl -> _minlvl
    int _maxlvl -> _maxlvl
    int _joinTime -> _joinTime
    int _eventTime -> _eventTime
    int _minPlayers -> _minPlayers
    int _maxPlayers -> _maxPlayers
    long _intervalBetweenMatchs -> _intervalBetweenMatchs
    java.lang.String startEventTime -> startEventTime
    boolean _teamEvent -> _teamEvent
    java.util.Vector _players -> _players
    java.lang.String _topTeam -> _topTeam
    java.util.Vector _playersShuffle -> _playersShuffle
    java.util.Vector _teams -> _teams
    java.util.Vector _savePlayers -> _savePlayers
    java.util.Vector _savePlayerTeams -> _savePlayerTeams
    java.util.Vector _teamPlayersCount -> _teamPlayersCount
    java.util.Vector _teamColors -> _teamColors
    java.util.Vector _teamsX -> _teamsX
    java.util.Vector _teamsY -> _teamsY
    java.util.Vector _teamsZ -> _teamsZ
    java.util.Vector _teamPointsCount -> _teamPointsCount
    int _topKills -> _topKills
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.event.TvT getNewInstance() -> getNewInstance
    java.lang.String get_eventName() -> get_eventName
    boolean set_eventName(java.lang.String) -> set_eventName
    java.lang.String get_eventDesc() -> get_eventDesc
    boolean set_eventDesc(java.lang.String) -> set_eventDesc
    java.lang.String get_joiningLocationName() -> get_joiningLocationName
    boolean set_joiningLocationName(java.lang.String) -> set_joiningLocationName
    int get_npcId() -> get_npcId
    boolean set_npcId(int) -> set_npcId
    com.l2jfrozen.gameserver.model.Location get_npcLocation() -> get_npcLocation
    int get_rewardId() -> get_rewardId
    boolean set_rewardId(int) -> set_rewardId
    int get_rewardAmount() -> get_rewardAmount
    boolean set_rewardAmount(int) -> set_rewardAmount
    int get_minlvl() -> get_minlvl
    boolean set_minlvl(int) -> set_minlvl
    int get_maxlvl() -> get_maxlvl
    boolean set_maxlvl(int) -> set_maxlvl
    int get_joinTime() -> get_joinTime
    boolean set_joinTime(int) -> set_joinTime
    int get_eventTime() -> get_eventTime
    boolean set_eventTime(int) -> set_eventTime
    int get_minPlayers() -> get_minPlayers
    boolean set_minPlayers(int) -> set_minPlayers
    int get_maxPlayers() -> get_maxPlayers
    boolean set_maxPlayers(int) -> set_maxPlayers
    long get_intervalBetweenMatchs() -> get_intervalBetweenMatchs
    boolean set_intervalBetweenMatchs(long) -> set_intervalBetweenMatchs
    java.lang.String getStartEventTime() -> getStartEventTime
    boolean setStartEventTime(java.lang.String) -> setStartEventTime
    boolean is_joining() -> is_joining
    boolean is_teleport() -> is_teleport
    boolean is_started() -> is_started
    boolean is_aborted() -> is_aborted
    boolean is_sitForced() -> is_sitForced
    boolean is_inProgress() -> is_inProgress
    boolean checkMaxLevel(int) -> checkMaxLevel
    boolean checkMinLevel(int) -> checkMinLevel
    boolean checkMinPlayers(int) -> checkMinPlayers
    boolean checkMaxPlayers(int) -> checkMaxPlayers
    boolean checkStartJoinOk() -> checkStartJoinOk
    boolean checkStartJoinTeamInfo() -> checkStartJoinTeamInfo
    boolean checkStartJoinPlayerInfo() -> checkStartJoinPlayerInfo
    boolean checkAutoEventStartJoinOk() -> checkAutoEventStartJoinOk
    boolean checkOptionalEventStartJoinOk() -> checkOptionalEventStartJoinOk
    void setNpcPos(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setNpcPos
    void spawnEventNpc() -> spawnEventNpc
    void unspawnEventNpc() -> unspawnEventNpc
    boolean startJoin() -> startJoin
    boolean startTeleport() -> startTeleport
    boolean startEvent() -> startEvent
    void restartEvent() -> restartEvent
    void finishEvent() -> finishEvent
    void afterFinishOperations() -> afterFinishOperations
    void abortEvent() -> abortEvent
    void teleportFinish() -> teleportFinish
    void autoEvent() -> autoEvent
    void eventOnceStart() -> eventOnceStart
    void waiter(long) -> waiter
    void sit() -> sit
    void removeOfflinePlayers() -> removeOfflinePlayers
    boolean startEventOk() -> startEventOk
    boolean finishEventOk() -> finishEventOk
    boolean addPlayerOk(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addPlayerOk
    void setUserData() -> setUserData
    void dumpData() -> dumpData
    void dumpLocalEventInfo() -> dumpLocalEventInfo
    void loadData() -> loadData
    void saveData() -> saveData
    void showEventHtml(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showEventHtml
    void addPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> addPlayer
    void removePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removePlayer
    void cleanTvT() -> cleanTvT
    void cleanLocalEventInfo() -> cleanLocalEventInfo
    void cleanEventPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> cleanEventPlayer
    void addDisconnectedPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addDisconnectedPlayer
    void afterAddDisconnectedPlayerOperations(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> afterAddDisconnectedPlayerOperations
    void shuffleTeams() -> shuffleTeams
    void playKneelAnimation(java.lang.String) -> playKneelAnimation
    void rewardTeam(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> rewardTeam
    void processTopPlayer() -> processTopPlayer
    void processTopTeam() -> processTopTeam
    void addTeam(java.lang.String) -> addTeam
    void addTeamEventOperations(java.lang.String) -> addTeamEventOperations
    void removeTeam(java.lang.String) -> removeTeam
    void removeTeamEventItems(java.lang.String) -> removeTeamEventItems
    void setTeamPos(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setTeamPos
    void setTeamPos(java.lang.String,int,int,int) -> setTeamPos
    void setTeamColor(java.lang.String,int) -> setTeamColor
    int teamPlayersCount(java.lang.String) -> teamPlayersCount
    void setTeamPlayersCount(java.lang.String,int) -> setTeamPlayersCount
    boolean checkShufflePlayers(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkShufflePlayers
    void sendFinalMessages() -> sendFinalMessages
    int getIntervalBetweenMatchs() -> getIntervalBetweenMatchs
    void run() -> run
    java.lang.String getEventIdentifier() -> getEventIdentifier
    java.lang.String getEventStartTime() -> getEventStartTime
    void setEventStartTime(java.lang.String) -> setEventStartTime
    void onDisconnect(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onDisconnect
    int teamKillsCount(java.lang.String) -> teamKillsCount
    void setTeamKillsCount(java.lang.String,int) -> setTeamKillsCount
    void kickPlayerFromTvt(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> kickPlayerFromTvt
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance findBestKiller(java.util.Vector) -> findBestKiller
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance findLooser(java.util.Vector) -> findLooser
    void closeFortDoors() -> closeFortDoors
    void openFortDoors() -> openFortDoors
    void closeAdenColosseumDoors() -> closeAdenColosseumDoors
    void openAdenColosseumDoors() -> openAdenColosseumDoors
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.event.TvT$1 -> com.l2jfrozen.gameserver.model.entity.event.TvT$1:
    void <init>() -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.TvT$2 -> com.l2jfrozen.gameserver.model.entity.event.TvT$2:
    void <init>() -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.TvT$AutoEventTask -> com.l2jfrozen.gameserver.model.entity.event.TvT$AutoEventTask:
    void <init>() -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.event.TvT$TvTTeam -> com.l2jfrozen.gameserver.model.entity.event.TvT$TvTTeam:
    int killCount -> killCount
    java.lang.String name -> name
    void <init>(java.lang.String,int) -> <init>
    int getKillCount() -> getKillCount
    void setKillCount(int) -> setKillCount
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
com.l2jfrozen.gameserver.model.entity.event.manager.EventManager -> com.l2jfrozen.gameserver.model.entity.event.manager.EventManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean TVT_EVENT_ENABLED -> TVT_EVENT_ENABLED
    java.util.ArrayList TVT_TIMES_LIST -> TVT_TIMES_LIST
    boolean CTF_EVENT_ENABLED -> CTF_EVENT_ENABLED
    java.util.ArrayList CTF_TIMES_LIST -> CTF_TIMES_LIST
    boolean DM_EVENT_ENABLED -> DM_EVENT_ENABLED
    java.util.ArrayList DM_TIMES_LIST -> DM_TIMES_LIST
    com.l2jfrozen.gameserver.model.entity.event.manager.EventManager instance -> instance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.event.manager.EventManager getInstance() -> getInstance
    void loadConfiguration() -> loadConfiguration
    void startEventRegistration() -> startEventRegistration
    void registerTvT() -> registerTvT
    void registerCTF() -> registerCTF
    void registerDM() -> registerDM
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.event.manager.EventTask -> com.l2jfrozen.gameserver.model.entity.event.manager.EventTask:
    java.lang.String getEventIdentifier() -> getEventIdentifier
    java.lang.String getEventStartTime() -> getEventStartTime
com.l2jfrozen.gameserver.model.entity.event.manager.EventsGlobalTask -> com.l2jfrozen.gameserver.model.entity.event.manager.EventsGlobalTask:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.event.manager.EventsGlobalTask instance -> instance
    boolean destroy -> destroy
    java.util.Hashtable time_to_tasks -> time_to_tasks
    java.util.Hashtable eventid_to_tasks -> eventid_to_tasks
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.event.manager.EventsGlobalTask getInstance() -> getInstance
    void registerNewEventTask(com.l2jfrozen.gameserver.model.entity.event.manager.EventTask) -> registerNewEventTask
    void clearEventTasksByEventName(java.lang.String) -> clearEventTasksByEventName
    void deleteEventTask(com.l2jfrozen.gameserver.model.entity.event.manager.EventTask) -> deleteEventTask
    void checkRegisteredEvents() -> checkRegisteredEvents
    void destroyLocalInstance() -> destroyLocalInstance
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.olympiad.COMP_TYPE -> com.l2jfrozen.gameserver.model.entity.olympiad.COMP_TYPE:
    com.l2jfrozen.gameserver.model.entity.olympiad.COMP_TYPE CLASSED -> CLASSED
    com.l2jfrozen.gameserver.model.entity.olympiad.COMP_TYPE NON_CLASSED -> NON_CLASSED
    com.l2jfrozen.gameserver.model.entity.olympiad.COMP_TYPE[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.entity.olympiad.COMP_TYPE[] values() -> values
    com.l2jfrozen.gameserver.model.entity.olympiad.COMP_TYPE valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad -> com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad _instance -> _instance
    java.util.Map _nobles -> _nobles
    java.util.Map _oldnobles -> _oldnobles
    com.l2jfrozen.common.util.L2FastList _heroesToBe -> _heroesToBe
    com.l2jfrozen.common.util.L2FastList _nonClassBasedRegisters -> _nonClassBasedRegisters
    java.util.Map _classBasedRegisters -> _classBasedRegisters
    int OLY_MANAGER -> OLY_MANAGER
    javolution.util.FastList olymanagers -> olymanagers
    java.lang.String OLYMPIAD_HTML_PATH -> OLYMPIAD_HTML_PATH
    java.lang.String OLYMPIAD_LOAD_NOBLES -> OLYMPIAD_LOAD_NOBLES
    java.lang.String OLYMPIAD_SAVE_NOBLES -> OLYMPIAD_SAVE_NOBLES
    java.lang.String OLYMPIAD_UPDATE_NOBLES -> OLYMPIAD_UPDATE_NOBLES
    java.lang.String OLYMPIAD_UPDATE_OLD_NOBLES -> OLYMPIAD_UPDATE_OLD_NOBLES
    java.lang.String OLYMPIAD_GET_HEROS -> OLYMPIAD_GET_HEROS
    java.lang.String GET_EACH_CLASS_LEADER -> GET_EACH_CLASS_LEADER
    java.lang.String GET_EACH_CLASS_LEADER_CURRENT -> GET_EACH_CLASS_LEADER_CURRENT
    java.lang.String OLYMPIAD_DELETE_ALL -> OLYMPIAD_DELETE_ALL
    java.lang.String OLYMPIAD_MONTH_CLEAR -> OLYMPIAD_MONTH_CLEAR
    java.lang.String OLYMPIAD_MONTH_CREATE -> OLYMPIAD_MONTH_CREATE
    java.lang.String OLYMPIAD_LOAD_OLD_NOBLES -> OLYMPIAD_LOAD_OLD_NOBLES
    int[] HERO_IDS -> HERO_IDS
    int COMP_START -> COMP_START
    int COMP_MIN -> COMP_MIN
    long COMP_PERIOD -> COMP_PERIOD
    long WEEKLY_PERIOD -> WEEKLY_PERIOD
    long VALIDATION_PERIOD -> VALIDATION_PERIOD
    int DEFAULT_POINTS -> DEFAULT_POINTS
    int WEEKLY_POINTS -> WEEKLY_POINTS
    java.lang.String CHAR_ID -> CHAR_ID
    java.lang.String CLASS_ID -> CLASS_ID
    java.lang.String CHAR_NAME -> CHAR_NAME
    java.lang.String POINTS -> POINTS
    java.lang.String COMP_DONE -> COMP_DONE
    java.lang.String COMP_WON -> COMP_WON
    java.lang.String COMP_LOST -> COMP_LOST
    java.lang.String COMP_DRAWN -> COMP_DRAWN
    long _olympiadEnd -> _olympiadEnd
    long _validationEnd -> _validationEnd
    int _period -> _period
    long _nextWeeklyChange -> _nextWeeklyChange
    int _currentCycle -> _currentCycle
    long _compEnd -> _compEnd
    java.util.Calendar _compStart -> _compStart
    boolean _inCompPeriod -> _inCompPeriod
    boolean _compStarted -> _compStarted
    java.util.concurrent.ScheduledFuture _scheduledCompStart -> _scheduledCompStart
    java.util.concurrent.ScheduledFuture _scheduledCompEnd -> _scheduledCompEnd
    java.util.concurrent.ScheduledFuture _scheduledOlympiadEnd -> _scheduledOlympiadEnd
    java.util.concurrent.ScheduledFuture _scheduledWeeklyTask -> _scheduledWeeklyTask
    java.util.concurrent.ScheduledFuture _scheduledValdationTask -> _scheduledValdationTask
    com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad getInstance() -> getInstance
    void <init>() -> <init>
    java.lang.Integer getStadiumCount() -> getStadiumCount
    void load() -> load
    void init() -> init
    boolean registerNoble(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> registerNoble
    int getNobleCount() -> getNobleCount
    com.l2jfrozen.gameserver.templates.StatsSet getNobleStats(int) -> getNobleStats
    void updateNobleStats(int,com.l2jfrozen.gameserver.templates.StatsSet) -> updateNobleStats
    void updateOldNobleStats(int,com.l2jfrozen.gameserver.templates.StatsSet) -> updateOldNobleStats
    com.l2jfrozen.common.util.L2FastList getRegisteredNonClassBased() -> getRegisteredNonClassBased
    java.util.Map getRegisteredClassBased() -> getRegisteredClassBased
    com.l2jfrozen.common.util.L2FastList hasEnoughRegisteredClassed() -> hasEnoughRegisteredClassed
    boolean hasEnoughRegisteredNonClassed() -> hasEnoughRegisteredNonClassed
    void clearRegistered() -> clearRegistered
    boolean isRegistered(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isRegistered
    boolean unRegisterNoble(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> unRegisterNoble
    void removeDisconnectedCompetitor(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeDisconnectedCompetitor
    void notifyCompetitorDamage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> notifyCompetitorDamage
    void updateCompStatus() -> updateCompStatus
    long getMillisToOlympiadEnd() -> getMillisToOlympiadEnd
    void manualSelectHeroes() -> manualSelectHeroes
    long getMillisToValidationEnd() -> getMillisToValidationEnd
    boolean isOlympiadEnd() -> isOlympiadEnd
    void setNewOlympiadEnd() -> setNewOlympiadEnd
    boolean inCompPeriod() -> inCompPeriod
    long getMillisToCompBegin() -> getMillisToCompBegin
    long setNewCompBegin() -> setNewCompBegin
    long getMillisToCompEnd() -> getMillisToCompEnd
    long getMillisToWeekChange() -> getMillisToWeekChange
    void scheduleWeeklyChange() -> scheduleWeeklyChange
    void addWeeklyPoints() -> addWeeklyPoints
    javolution.util.FastMap getMatchList() -> getMatchList
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance[] getPlayers(int) -> getPlayers
    int getCurrentCycle() -> getCurrentCycle
    void addSpectator(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> addSpectator
    int getSpectatorArena(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getSpectatorArena
    void removeSpectator(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeSpectator
    com.l2jfrozen.common.util.L2FastList getSpectators(int) -> getSpectators
    java.util.Map getOlympiadGames() -> getOlympiadGames
    boolean playerInStadia(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> playerInStadia
    int[] getWaitingList() -> getWaitingList
    void saveNobleData() -> saveNobleData
    void saveOldNobleData(int) -> saveOldNobleData
    void saveOlympiadStatus() -> saveOlympiadStatus
    void updateMonthlyData() -> updateMonthlyData
    void sortHerosToBe() -> sortHerosToBe
    com.l2jfrozen.common.util.L2FastList getClassLeaderBoard(int) -> getClassLeaderBoard
    void giveHeroBonus() -> giveHeroBonus
    int getNoblessePasses(int) -> getNoblessePasses
    boolean isRegisteredInComp(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isRegisteredInComp
    int getNoblePoints(int) -> getNoblePoints
    int getCompetitionDone(int) -> getCompetitionDone
    int getCompetitionWon(int) -> getCompetitionWon
    int getCompetitionLost(int) -> getCompetitionLost
    void deleteNobles() -> deleteNobles
    void logResult(java.lang.String,java.lang.String,java.lang.Double,java.lang.Double,int,int,java.lang.String,int,java.lang.String) -> logResult
    void sendMatchList(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendMatchList
    void bypassChangeArena(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> bypassChangeArena
    void setNewOlympiadEndCustom() -> setNewOlympiadEndCustom
    void schedulePointsRestoreCustom() -> schedulePointsRestoreCustom
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$1 -> com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$1:
    com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$1$1 -> com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$1$1:
    com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$1 this$1 -> this$1
    void <init>(com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$1) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$1$2 -> com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$1$2:
    com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$1 this$1 -> this$1
    void <init>(com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$1) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$2 -> com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$2:
    com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$3 -> com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$3:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$entity$olympiad$OlympiadPeriod -> $SwitchMap$com$l2jfrozen$gameserver$model$entity$olympiad$OlympiadPeriod
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$OlympiadEndTask -> com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$OlympiadEndTask:
    com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$OlympiadPointsRestoreTask -> com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$OlympiadPointsRestoreTask:
    long restoreTime -> restoreTime
    com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad,long) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$ValidationEndTask -> com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad$ValidationEndTask:
    com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.olympiad.Olympiad) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadGame -> com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadGame:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.olympiad.COMP_TYPE _type -> _type
    boolean _aborted -> _aborted
    boolean _gamestarted -> _gamestarted
    boolean _playerOneDisconnected -> _playerOneDisconnected
    boolean _playerTwoDisconnected -> _playerTwoDisconnected
    boolean _playerOneDefaulted -> _playerOneDefaulted
    boolean _playerTwoDefaulted -> _playerTwoDefaulted
    java.lang.String _playerOneName -> _playerOneName
    java.lang.String _playerTwoName -> _playerTwoName
    javolution.util.FastList _playerOneSkills -> _playerOneSkills
    javolution.util.FastList _playerTwoSkills -> _playerTwoSkills
    java.lang.String POINTS -> POINTS
    java.lang.String COMP_DONE -> COMP_DONE
    java.lang.String COMP_WON -> COMP_WON
    java.lang.String COMP_LOST -> COMP_LOST
    java.lang.String COMP_DRAWN -> COMP_DRAWN
    boolean _battleStarted -> _battleStarted
    int _damageP1 -> _damageP1
    int _damageP2 -> _damageP2
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _playerOne -> _playerOne
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _playerTwo -> _playerTwo
    com.l2jfrozen.common.util.L2FastList _players -> _players
    int[] _stadiumPort -> _stadiumPort
    int x1 -> x1
    int y1 -> y1
    int z1 -> z1
    int x2 -> x2
    int y2 -> y2
    int z2 -> z2
    int _stadiumID -> _stadiumID
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage _sm -> _sm
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage _sm2 -> _sm2
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage _sm3 -> _sm3
    void <init>(int,com.l2jfrozen.gameserver.model.entity.olympiad.COMP_TYPE,com.l2jfrozen.common.util.L2FastList) -> <init>
    boolean isAborted() -> isAborted
    void clearPlayers() -> clearPlayers
    void handleDisconnect(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> handleDisconnect
    void removals() -> removals
    boolean portPlayersToArena() -> portPlayersToArena
    void additions() -> additions
    void sendMessageToPlayers(boolean,int) -> sendMessageToPlayers
    void portPlayersBack() -> portPlayersBack
    void PlayersStatusBack() -> PlayersStatusBack
    boolean haveWinner() -> haveWinner
    void validateWinner(boolean) -> validateWinner
    boolean makeCompetitionStart() -> makeCompetitionStart
    void addDamage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> addDamage
    java.lang.String getTitle() -> getTitle
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance[] getPlayers() -> getPlayers
    void broadcastMessage(com.l2jfrozen.gameserver.network.serverpackets.SystemMessage,boolean) -> broadcastMessage
    void announceGame() -> announceGame
    void sendPlayersStatus(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendPlayersStatus
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadGame$1 -> com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadGame$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$entity$olympiad$COMP_TYPE -> $SwitchMap$com$l2jfrozen$gameserver$model$entity$olympiad$COMP_TYPE
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadGameTask -> com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadGameTask:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadGame _game -> _game
    long BATTLE_PERIOD -> BATTLE_PERIOD
    boolean _terminated -> _terminated
    boolean _started -> _started
    boolean OLYMPIAD_MODE_TIE -> OLYMPIAD_MODE_TIE
    boolean isTerminated() -> isTerminated
    boolean isStarted() -> isStarted
    void <init>(com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadGame) -> <init>
    boolean checkObserverStatusBug(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkObserverStatusBug
    void removeObserverModeBug(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeObserverModeBug
    boolean checkBattleStatus() -> checkBattleStatus
    boolean checkDefaulted() -> checkDefaulted
    void run() -> run
    boolean runGame() -> runGame
    boolean teleportCountdown() -> teleportCountdown
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadManager -> com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _olympiadInstances -> _olympiadInstances
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadStadium[] STADIUMS -> STADIUMS
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadManager getInstance() -> getInstance
    void run() -> run
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadGame getOlympiadGame(int) -> getOlympiadGame
    void removeGame(com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadGame) -> removeGame
    java.util.Map getOlympiadGames() -> getOlympiadGames
    com.l2jfrozen.common.util.L2FastList getRandomClassList(java.util.Map,com.l2jfrozen.common.util.L2FastList) -> getRandomClassList
    com.l2jfrozen.common.util.L2FastList nextOpponents(com.l2jfrozen.common.util.L2FastList) -> nextOpponents
    boolean existNextOpponents(com.l2jfrozen.common.util.L2FastList) -> existNextOpponents
    javolution.util.FastMap getAllTitles() -> getAllTitles
    void <init>(com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadManager$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadManager$1 -> com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadManager$1:
com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadManager$SingletonHolder -> com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadManager$SingletonHolder:
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadPeriod -> com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadPeriod:
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadPeriod MONTH -> MONTH
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadPeriod WEEK -> WEEK
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadPeriod DAY -> DAY
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadPeriod[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadPeriod[] values() -> values
    com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadPeriod valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadStadium -> com.l2jfrozen.gameserver.model.entity.olympiad.OlympiadStadium:
    boolean _freeToUse -> _freeToUse
    int[] _coords -> _coords
    com.l2jfrozen.common.util.L2FastList _spectators -> _spectators
    boolean isFreeToUse() -> isFreeToUse
    void setStadiaBusy() -> setStadiaBusy
    void setStadiaFree() -> setStadiaFree
    int[] getCoordinates() -> getCoordinates
    void <init>(int,int,int) -> <init>
    void addSpectator(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> addSpectator
    com.l2jfrozen.common.util.L2FastList getSpectators() -> getSpectators
    void removeSpectator(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeSpectator
    void clearSpectators() -> clearSpectators
com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSigns -> com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSigns:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSigns _instance -> _instance
    java.lang.String SEVEN_SIGNS_HTML_PATH -> SEVEN_SIGNS_HTML_PATH
    int CABAL_NULL -> CABAL_NULL
    int CABAL_DUSK -> CABAL_DUSK
    int CABAL_DAWN -> CABAL_DAWN
    int SEAL_NULL -> SEAL_NULL
    int SEAL_AVARICE -> SEAL_AVARICE
    int SEAL_GNOSIS -> SEAL_GNOSIS
    int SEAL_STRIFE -> SEAL_STRIFE
    int PERIOD_COMP_RECRUITING -> PERIOD_COMP_RECRUITING
    int PERIOD_COMPETITION -> PERIOD_COMPETITION
    int PERIOD_COMP_RESULTS -> PERIOD_COMP_RESULTS
    int PERIOD_SEAL_VALIDATION -> PERIOD_SEAL_VALIDATION
    int PERIOD_START_HOUR -> PERIOD_START_HOUR
    int PERIOD_START_MINS -> PERIOD_START_MINS
    int PERIOD_START_DAY -> PERIOD_START_DAY
    int PERIOD_MINOR_LENGTH -> PERIOD_MINOR_LENGTH
    int PERIOD_MAJOR_LENGTH -> PERIOD_MAJOR_LENGTH
    int ANCIENT_ADENA_ID -> ANCIENT_ADENA_ID
    int RECORD_SEVEN_SIGNS_ID -> RECORD_SEVEN_SIGNS_ID
    int CERTIFICATE_OF_APPROVAL_ID -> CERTIFICATE_OF_APPROVAL_ID
    int RECORD_SEVEN_SIGNS_COST -> RECORD_SEVEN_SIGNS_COST
    int ADENA_JOIN_DAWN_COST -> ADENA_JOIN_DAWN_COST
    int ORATOR_NPC_ID -> ORATOR_NPC_ID
    int PREACHER_NPC_ID -> PREACHER_NPC_ID
    int MAMMON_MERCHANT_ID -> MAMMON_MERCHANT_ID
    int MAMMON_BLACKSMITH_ID -> MAMMON_BLACKSMITH_ID
    int MAMMON_MARKETEER_ID -> MAMMON_MARKETEER_ID
    int SPIRIT_IN_ID -> SPIRIT_IN_ID
    int SPIRIT_OUT_ID -> SPIRIT_OUT_ID
    int LILITH_NPC_ID -> LILITH_NPC_ID
    int ANAKIM_NPC_ID -> ANAKIM_NPC_ID
    int CREST_OF_DAWN_ID -> CREST_OF_DAWN_ID
    int CREST_OF_DUSK_ID -> CREST_OF_DUSK_ID
    int SEAL_STONE_BLUE_ID -> SEAL_STONE_BLUE_ID
    int SEAL_STONE_GREEN_ID -> SEAL_STONE_GREEN_ID
    int SEAL_STONE_RED_ID -> SEAL_STONE_RED_ID
    int SEAL_STONE_BLUE_VALUE -> SEAL_STONE_BLUE_VALUE
    int SEAL_STONE_GREEN_VALUE -> SEAL_STONE_GREEN_VALUE
    int SEAL_STONE_RED_VALUE -> SEAL_STONE_RED_VALUE
    int BLUE_CONTRIB_POINTS -> BLUE_CONTRIB_POINTS
    int GREEN_CONTRIB_POINTS -> GREEN_CONTRIB_POINTS
    int RED_CONTRIB_POINTS -> RED_CONTRIB_POINTS
    java.util.Calendar _calendar -> _calendar
    int _activePeriod -> _activePeriod
    int _currentCycle -> _currentCycle
    double _dawnStoneScore -> _dawnStoneScore
    double _duskStoneScore -> _duskStoneScore
    int _dawnFestivalScore -> _dawnFestivalScore
    int _duskFestivalScore -> _duskFestivalScore
    int _compWinner -> _compWinner
    int _previousWinner -> _previousWinner
    java.util.Map _signsPlayerData -> _signsPlayerData
    java.util.Map _signsSealOwners -> _signsSealOwners
    java.util.Map _signsDuskSealTotals -> _signsDuskSealTotals
    java.util.Map _signsDawnSealTotals -> _signsDawnSealTotals
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance _merchantSpawn -> _merchantSpawn
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance _blacksmithSpawn -> _blacksmithSpawn
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance _spiritInSpawn -> _spiritInSpawn
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance _spiritOutSpawn -> _spiritOutSpawn
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance _lilithSpawn -> _lilithSpawn
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance _anakimSpawn -> _anakimSpawn
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance _crestofdawnspawn -> _crestofdawnspawn
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance _crestofduskspawn -> _crestofduskspawn
    java.util.Map _oratorSpawns -> _oratorSpawns
    java.util.Map _preacherSpawns -> _preacherSpawns
    java.util.Map _marketeerSpawns -> _marketeerSpawns
    void <init>() -> <init>
    void spawnSevenSignsNPC() -> spawnSevenSignsNPC
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSigns getInstance() -> getInstance
    int calcContributionScore(int,int,int) -> calcContributionScore
    int calcAncientAdenaReward(int,int,int) -> calcAncientAdenaReward
    java.lang.String getCabalShortName(int) -> getCabalShortName
    java.lang.String getCabalName(int) -> getCabalName
    java.lang.String getSealName(int,boolean) -> getSealName
    int getCurrentCycle() -> getCurrentCycle
    int getCurrentPeriod() -> getCurrentPeriod
    int getDaysToPeriodChange() -> getDaysToPeriodChange
    long getMilliToPeriodChange() -> getMilliToPeriodChange
    void setCalendarForNextPeriodChange() -> setCalendarForNextPeriodChange
    java.lang.String getCurrentPeriodName() -> getCurrentPeriodName
    boolean isSealValidationPeriod() -> isSealValidationPeriod
    boolean isCompResultsPeriod() -> isCompResultsPeriod
    int getCurrentScore(int) -> getCurrentScore
    double getCurrentStoneScore(int) -> getCurrentStoneScore
    int getCurrentFestivalScore(int) -> getCurrentFestivalScore
    int getCabalHighestScore() -> getCabalHighestScore
    int getSealOwner(int) -> getSealOwner
    int getSealProportion(int,int) -> getSealProportion
    int getTotalMembers(int) -> getTotalMembers
    com.l2jfrozen.gameserver.templates.StatsSet getPlayerData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPlayerData
    int getPlayerStoneContrib(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPlayerStoneContrib
    int getPlayerContribScore(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPlayerContribScore
    int getPlayerAdenaCollect(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPlayerAdenaCollect
    int getPlayerSeal(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPlayerSeal
    int getPlayerCabal(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getPlayerCabal
    void restoreSevenSignsData() -> restoreSevenSignsData
    void saveSevenSignsData(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> saveSevenSignsData
    void resetPlayerData() -> resetPlayerData
    boolean hasRegisteredBefore(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> hasRegisteredBefore
    int setPlayerInfo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> setPlayerInfo
    int getAncientAdenaReward(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> getAncientAdenaReward
    int addPlayerStoneContrib(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int) -> addPlayerStoneContrib
    void addFestivalScore(int,int) -> addFestivalScore
    void sendCurrentPeriodMsg(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendCurrentPeriodMsg
    void sendMessageToAll(com.l2jfrozen.gameserver.network.SystemMessageId) -> sendMessageToAll
    void initializeSeals() -> initializeSeals
    void resetSeals() -> resetSeals
    void calcNewSealOwners() -> calcNewSealOwners
    void teleLosingCabalFromDungeons(java.lang.String) -> teleLosingCabalFromDungeons
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSigns$SevenSignsPeriodChange -> com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSigns$SevenSignsPeriodChange:
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSigns this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSigns) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival -> com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival _instance -> _instance
    java.lang.String GET_CLAN_NAME -> GET_CLAN_NAME
    long FESTIVAL_SIGNUP_TIME -> FESTIVAL_SIGNUP_TIME
    int FESTIVAL_MAX_OFFSET_X -> FESTIVAL_MAX_OFFSET_X
    int FESTIVAL_MAX_OFFSET_Y -> FESTIVAL_MAX_OFFSET_Y
    int FESTIVAL_DEFAULT_RESPAWN -> FESTIVAL_DEFAULT_RESPAWN
    int FESTIVAL_COUNT -> FESTIVAL_COUNT
    int FESTIVAL_LEVEL_MAX_FOR_31 -> FESTIVAL_LEVEL_MAX_FOR_31
    int FESTIVAL_LEVEL_MAX_FOR_42 -> FESTIVAL_LEVEL_MAX_FOR_42
    int FESTIVAL_LEVEL_MAX_FOR_53 -> FESTIVAL_LEVEL_MAX_FOR_53
    int FESTIVAL_LEVEL_MAX_FOR_64 -> FESTIVAL_LEVEL_MAX_FOR_64
    int FESTIVAL_LEVEL_MAX_FOR_NONE -> FESTIVAL_LEVEL_MAX_FOR_NONE
    int[] FESTIVAL_LEVEL_SCORES -> FESTIVAL_LEVEL_SCORES
    int FESTIVAL_OFFERING_ID -> FESTIVAL_OFFERING_ID
    int FESTIVAL_OFFERING_VALUE -> FESTIVAL_OFFERING_VALUE
    int[][] FESTIVAL_DAWN_PLAYER_SPAWNS -> FESTIVAL_DAWN_PLAYER_SPAWNS
    int[][] FESTIVAL_DUSK_PLAYER_SPAWNS -> FESTIVAL_DUSK_PLAYER_SPAWNS
    int[][] FESTIVAL_DAWN_WITCH_SPAWNS -> FESTIVAL_DAWN_WITCH_SPAWNS
    int[][] FESTIVAL_DUSK_WITCH_SPAWNS -> FESTIVAL_DUSK_WITCH_SPAWNS
    int[][][] FESTIVAL_DAWN_PRIMARY_SPAWNS -> FESTIVAL_DAWN_PRIMARY_SPAWNS
    int[][][] FESTIVAL_DUSK_PRIMARY_SPAWNS -> FESTIVAL_DUSK_PRIMARY_SPAWNS
    int[][][] FESTIVAL_DAWN_SECONDARY_SPAWNS -> FESTIVAL_DAWN_SECONDARY_SPAWNS
    int[][][] FESTIVAL_DUSK_SECONDARY_SPAWNS -> FESTIVAL_DUSK_SECONDARY_SPAWNS
    int[][][] FESTIVAL_DAWN_CHEST_SPAWNS -> FESTIVAL_DAWN_CHEST_SPAWNS
    int[][][] FESTIVAL_DUSK_CHEST_SPAWNS -> FESTIVAL_DUSK_CHEST_SPAWNS
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$FestivalManager _managerInstance -> _managerInstance
    java.util.concurrent.ScheduledFuture _managerScheduledTask -> _managerScheduledTask
    int _signsCycle -> _signsCycle
    int _festivalCycle -> _festivalCycle
    long _nextFestivalCycleStart -> _nextFestivalCycleStart
    long _nextFestivalStart -> _nextFestivalStart
    boolean _festivalInitialized -> _festivalInitialized
    boolean _festivalInProgress -> _festivalInProgress
    java.util.List _accumulatedBonuses -> _accumulatedBonuses
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _dawnChatGuide -> _dawnChatGuide
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _duskChatGuide -> _duskChatGuide
    java.util.Map _dawnFestivalParticipants -> _dawnFestivalParticipants
    java.util.Map _duskFestivalParticipants -> _duskFestivalParticipants
    java.util.Map _dawnPreviousParticipants -> _dawnPreviousParticipants
    java.util.Map _duskPreviousParticipants -> _duskPreviousParticipants
    java.util.Map _dawnFestivalScores -> _dawnFestivalScores
    java.util.Map _duskFestivalScores -> _duskFestivalScores
    java.util.Map _festivalData -> _festivalData
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival getInstance() -> getInstance
    java.lang.String getFestivalName(int) -> getFestivalName
    int getMaxLevelForFestival(int) -> getMaxLevelForFestival
    boolean isFestivalArcher(int) -> isFestivalArcher
    boolean isFestivalChest(int) -> isFestivalChest
    java.util.concurrent.ScheduledFuture getFestivalManagerSchedule() -> getFestivalManagerSchedule
    void startFestivalManager() -> startFestivalManager
    void restoreFestivalData() -> restoreFestivalData
    void saveFestivalData(boolean) -> saveFestivalData
    void rewardHighRanked() -> rewardHighRanked
    void addReputationPointsForPartyMemberClan(java.lang.String) -> addReputationPointsForPartyMemberClan
    void resetFestivalData(boolean) -> resetFestivalData
    int getCurrentFestivalCycle() -> getCurrentFestivalCycle
    boolean isFestivalInitialized() -> isFestivalInitialized
    boolean isFestivalInProgress() -> isFestivalInProgress
    void setNextCycleStart() -> setNextCycleStart
    void setNextFestivalStart(long) -> setNextFestivalStart
    int getMinsToNextCycle() -> getMinsToNextCycle
    int getMinsToNextFestival() -> getMinsToNextFestival
    java.lang.String getTimeToNextFestivalStart() -> getTimeToNextFestivalStart
    int[] getFestivalForPlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getFestivalForPlayer
    boolean isPlayerParticipant(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isPlayerParticipant
    java.util.List getParticipants(int,int) -> getParticipants
    java.util.List getPreviousParticipants(int,int) -> getPreviousParticipants
    void setParticipants(int,int,com.l2jfrozen.gameserver.model.L2Party) -> setParticipants
    void updateParticipants(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Party) -> updateParticipants
    int getFinalScore(int,int) -> getFinalScore
    int getHighestScore(int,int) -> getHighestScore
    com.l2jfrozen.gameserver.templates.StatsSet getHighestScoreData(int,int) -> getHighestScoreData
    com.l2jfrozen.gameserver.templates.StatsSet getOverallHighestScoreData(int) -> getOverallHighestScoreData
    boolean setFinalScore(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int) -> setFinalScore
    int getAccumulatedBonus(int) -> getAccumulatedBonus
    int getTotalAccumulatedBonus() -> getTotalAccumulatedBonus
    void addAccumulatedBonus(int,int,int) -> addAccumulatedBonus
    int distribAccumulatedBonus(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> distribAccumulatedBonus
    void sendMessageToAll(java.lang.String,java.lang.String) -> sendMessageToAll
    boolean increaseChallenge(int,int) -> increaseChallenge
    void npcSpawned(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> npcSpawned
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$FestivalManager -> com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$FestivalManager:
    java.util.Map _festivalInstances -> _festivalInstances
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival) -> <init>
    void run() -> run
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$L2DarknessFestival getFestivalInstance(int,int) -> getFestivalInstance
com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$FestivalSpawn -> com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$FestivalSpawn:
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    int _npcId -> _npcId
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival,int,int,int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival,int[]) -> <init>
com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$L2DarknessFestival -> com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$L2DarknessFestival:
    int _cabal -> _cabal
    int _levelRange -> _levelRange
    boolean _challengeIncreased -> _challengeIncreased
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$FestivalSpawn _startLocation -> _startLocation
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$FestivalSpawn _witchSpawn -> _witchSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _witchInst -> _witchInst
    java.util.List _npcInsts -> _npcInsts
    java.util.List _participants -> _participants
    java.util.Map _originalLocations -> _originalLocations
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival,int,int) -> <init>
    void festivalInit() -> festivalInit
    void festivalStart() -> festivalStart
    void moveMonstersToCenter() -> moveMonstersToCenter
    void spawnFestivalMonsters(int,int) -> spawnFestivalMonsters
    boolean increaseChallenge() -> increaseChallenge
    void sendMessageToParticipants(java.lang.String) -> sendMessageToParticipants
    void festivalEnd() -> festivalEnd
    void unspawnMobs() -> unspawnMobs
    void relocatePlayer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> relocatePlayer
com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$RestoreStatus -> com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival$RestoreStatus:
    com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.sevensigns.SevenSignsFestival) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.Castle -> com.l2jfrozen.gameserver.model.entity.siege.Castle:
    org.apache.log4j.Logger LOGGER -> LOGGER
    javolution.util.FastList _procure -> _procure
    javolution.util.FastList _production -> _production
    javolution.util.FastList _procureNext -> _procureNext
    javolution.util.FastList _productionNext -> _productionNext
    boolean _isNextPeriodApproved -> _isNextPeriodApproved
    java.lang.String CASTLE_MANOR_DELETE_PRODUCTION -> CASTLE_MANOR_DELETE_PRODUCTION
    java.lang.String CASTLE_MANOR_DELETE_PRODUCTION_PERIOD -> CASTLE_MANOR_DELETE_PRODUCTION_PERIOD
    java.lang.String CASTLE_MANOR_DELETE_PROCURE -> CASTLE_MANOR_DELETE_PROCURE
    java.lang.String CASTLE_MANOR_DELETE_PROCURE_PERIOD -> CASTLE_MANOR_DELETE_PROCURE_PERIOD
    java.lang.String CASTLE_UPDATE_CROP -> CASTLE_UPDATE_CROP
    java.lang.String CASTLE_UPDATE_SEED -> CASTLE_UPDATE_SEED
    int _castleId -> _castleId
    java.util.List _doors -> _doors
    java.util.List _doorDefault -> _doorDefault
    java.lang.String _name -> _name
    int _ownerId -> _ownerId
    com.l2jfrozen.gameserver.model.entity.siege.Siege _siege -> _siege
    java.util.Calendar _siegeDate -> _siegeDate
    int _siegeDayOfWeek -> _siegeDayOfWeek
    int _siegeHourOfDay -> _siegeHourOfDay
    int _taxPercent -> _taxPercent
    double _taxRate -> _taxRate
    int _treasury -> _treasury
    com.l2jfrozen.gameserver.model.zone.type.L2CastleZone _zone -> _zone
    com.l2jfrozen.gameserver.model.zone.type.L2CastleTeleportZone _teleZone -> _teleZone
    com.l2jfrozen.gameserver.model.L2Clan _formerOwner -> _formerOwner
    int _nbArtifact -> _nbArtifact
    int[] _gate -> _gate
    java.util.Map _engrave -> _engrave
    void <init>(int) -> <init>
    void Engrave(com.l2jfrozen.gameserver.model.L2Clan,int) -> Engrave
    void addToTreasury(int) -> addToTreasury
    boolean addToTreasuryNoTax(int) -> addToTreasuryNoTax
    void banishForeigners() -> banishForeigners
    boolean checkIfInZone(int,int,int) -> checkIfInZone
    void setZone(com.l2jfrozen.gameserver.model.zone.type.L2CastleZone) -> setZone
    com.l2jfrozen.gameserver.model.zone.type.L2CastleZone getZone() -> getZone
    void setTeleZone(com.l2jfrozen.gameserver.model.zone.type.L2CastleTeleportZone) -> setTeleZone
    com.l2jfrozen.gameserver.model.zone.type.L2CastleTeleportZone getTeleZone() -> getTeleZone
    double getDistance(com.l2jfrozen.gameserver.model.L2Object) -> getDistance
    void closeDoor(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> closeDoor
    void openDoor(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> openDoor
    void openCloseDoor(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> openCloseDoor
    void removeUpgrade() -> removeUpgrade
    void setOwner(com.l2jfrozen.gameserver.model.L2Clan) -> setOwner
    void removeOwner(com.l2jfrozen.gameserver.model.L2Clan) -> removeOwner
    void setTaxPercent(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> setTaxPercent
    void setTaxPercent(int) -> setTaxPercent
    void spawnDoor() -> spawnDoor
    void spawnDoor(boolean) -> spawnDoor
    void upgradeDoor(int,int,int,int) -> upgradeDoor
    void load() -> load
    void loadDoor() -> loadDoor
    void loadDoorUpgrade() -> loadDoorUpgrade
    void removeDoorUpgrade() -> removeDoorUpgrade
    void saveDoorUpgrade(int,int,int,int) -> saveDoorUpgrade
    void updateOwnerInDB(com.l2jfrozen.gameserver.model.L2Clan) -> updateOwnerInDB
    int getCastleId() -> getCastleId
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance getDoor(int) -> getDoor
    java.util.List getDoors() -> getDoors
    java.lang.String getName() -> getName
    int getOwnerId() -> getOwnerId
    com.l2jfrozen.gameserver.model.entity.siege.Siege getSiege() -> getSiege
    java.util.Calendar getSiegeDate() -> getSiegeDate
    int getSiegeDayOfWeek() -> getSiegeDayOfWeek
    int getSiegeHourOfDay() -> getSiegeHourOfDay
    int getTaxPercent() -> getTaxPercent
    double getTaxRate() -> getTaxRate
    int getTreasury() -> getTreasury
    javolution.util.FastList getSeedProduction(int) -> getSeedProduction
    javolution.util.FastList getCropProcure(int) -> getCropProcure
    void setSeedProduction(javolution.util.FastList,int) -> setSeedProduction
    void setCropProcure(javolution.util.FastList,int) -> setCropProcure
    com.l2jfrozen.gameserver.managers.CastleManorManager$SeedProduction getSeed(int,int) -> getSeed
    com.l2jfrozen.gameserver.managers.CastleManorManager$CropProcure getCrop(int,int) -> getCrop
    int getManorCost(int) -> getManorCost
    void saveSeedData() -> saveSeedData
    void saveSeedData(int) -> saveSeedData
    void saveCropData() -> saveCropData
    void saveCropData(int) -> saveCropData
    void updateCrop(int,int,int) -> updateCrop
    void updateSeed(int,int,int) -> updateSeed
    boolean isNextPeriodApproved() -> isNextPeriodApproved
    void setNextPeriodApproved(boolean) -> setNextPeriodApproved
    void updateClansReputation() -> updateClansReputation
    void createClanGate(int,int,int) -> createClanGate
    void destroyClanGate() -> destroyClanGate
    boolean isGateOpen() -> isGateOpen
    int getGateX() -> getGateX
    int getGateY() -> getGateY
    int getGateZ() -> getGateZ
    void oustAllPlayers() -> oustAllPlayers
    boolean isSiegeInProgress() -> isSiegeInProgress
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.ClanHallSiege -> com.l2jfrozen.gameserver.model.entity.siege.ClanHallSiege:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Calendar _siegeDate -> _siegeDate
    java.util.Calendar _siegeEndDate -> _siegeEndDate
    boolean _isInProgress -> _isInProgress
    void <init>() -> <init>
    long restoreSiegeDate(int) -> restoreSiegeDate
    void setNewSiegeDate(long,int,int) -> setNewSiegeDate
    java.util.Calendar getSiegeDate() -> getSiegeDate
    void setSiegeDate(java.util.Calendar) -> setSiegeDate
    boolean getIsInProgress() -> getIsInProgress
    void setIsInProgress(boolean) -> setIsInProgress
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.Fort -> com.l2jfrozen.gameserver.model.entity.siege.Fort:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _fortId -> _fortId
    java.util.List _doors -> _doors
    java.util.List _doorDefault -> _doorDefault
    java.lang.String _name -> _name
    int _ownerId -> _ownerId
    com.l2jfrozen.gameserver.model.L2Clan _fortOwner -> _fortOwner
    com.l2jfrozen.gameserver.model.entity.siege.FortSiege _siege -> _siege
    java.util.Calendar _siegeDate -> _siegeDate
    int _siegeDayOfWeek -> _siegeDayOfWeek
    int _siegeHourOfDay -> _siegeHourOfDay
    com.l2jfrozen.gameserver.model.zone.type.L2FortZone _zone -> _zone
    com.l2jfrozen.gameserver.model.L2Clan _formerOwner -> _formerOwner
    void <init>(int) -> <init>
    void EndOfSiege(com.l2jfrozen.gameserver.model.L2Clan) -> EndOfSiege
    void Engrave(com.l2jfrozen.gameserver.model.L2Clan,int) -> Engrave
    void addToTreasury(int) -> addToTreasury
    boolean addToTreasuryNoTax(int) -> addToTreasuryNoTax
    void banishForeigners() -> banishForeigners
    boolean checkIfInZone(int,int,int) -> checkIfInZone
    void setZone(com.l2jfrozen.gameserver.model.zone.type.L2FortZone) -> setZone
    com.l2jfrozen.gameserver.model.zone.type.L2FortZone getZone() -> getZone
    double getDistance(com.l2jfrozen.gameserver.model.L2Object) -> getDistance
    void closeDoor(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> closeDoor
    void openDoor(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> openDoor
    void openCloseDoor(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> openCloseDoor
    void removeUpgrade() -> removeUpgrade
    void setOwner(com.l2jfrozen.gameserver.model.L2Clan) -> setOwner
    void removeOwner(com.l2jfrozen.gameserver.model.L2Clan) -> removeOwner
    void setTaxPercent(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> setTaxPercent
    void spawnDoor() -> spawnDoor
    void spawnDoor(boolean) -> spawnDoor
    void upgradeDoor(int,int,int,int) -> upgradeDoor
    void load() -> load
    void loadDoor() -> loadDoor
    void loadDoorUpgrade() -> loadDoorUpgrade
    void removeDoorUpgrade() -> removeDoorUpgrade
    void saveDoorUpgrade(int,int,int,int) -> saveDoorUpgrade
    void updateOwnerInDB(com.l2jfrozen.gameserver.model.L2Clan) -> updateOwnerInDB
    int getFortId() -> getFortId
    com.l2jfrozen.gameserver.model.L2Clan getOwnerClan() -> getOwnerClan
    int getOwnerId() -> getOwnerId
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance getDoor(int) -> getDoor
    java.util.List getDoors() -> getDoors
    com.l2jfrozen.gameserver.model.entity.siege.FortSiege getSiege() -> getSiege
    java.util.Calendar getSiegeDate() -> getSiegeDate
    void setSiegeDate(java.util.Calendar) -> setSiegeDate
    int getSiegeDayOfWeek() -> getSiegeDayOfWeek
    int getSiegeHourOfDay() -> getSiegeHourOfDay
    java.lang.String getName() -> getName
    void updateClansReputation() -> updateClansReputation
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.Fort$endFortressSiege -> com.l2jfrozen.gameserver.model.entity.siege.Fort$endFortressSiege:
    com.l2jfrozen.gameserver.model.entity.siege.Fort _f -> _f
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    com.l2jfrozen.gameserver.model.entity.siege.Fort this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Fort,com.l2jfrozen.gameserver.model.entity.siege.Fort,com.l2jfrozen.gameserver.model.L2Clan) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.FortSiege -> com.l2jfrozen.gameserver.model.entity.siege.FortSiege:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _attackerClans -> _attackerClans
    java.util.List _defenderClans -> _defenderClans
    java.util.List _defenderWaitingClans -> _defenderWaitingClans
    int _defenderRespawnDelayPenalty -> _defenderRespawnDelayPenalty
    java.util.List _commanders -> _commanders
    java.util.List _combatflag -> _combatflag
    com.l2jfrozen.gameserver.model.entity.siege.Fort[] _fort -> _fort
    boolean _isInProgress -> _isInProgress
    boolean _isScheduled -> _isScheduled
    boolean _isNormalSide -> _isNormalSide
    boolean _isRegistrationOver -> _isRegistrationOver
    java.util.Calendar _siegeEndDate -> _siegeEndDate
    com.l2jfrozen.gameserver.managers.FortSiegeGuardManager _siegeGuardManager -> _siegeGuardManager
    java.util.Calendar _siegeRegistrationEndDate -> _siegeRegistrationEndDate
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Fort[]) -> <init>
    void endSiege() -> endSiege
    void removeDefender(com.l2jfrozen.gameserver.model.L2SiegeClan) -> removeDefender
    void removeAttacker(com.l2jfrozen.gameserver.model.L2SiegeClan) -> removeAttacker
    void addDefender(com.l2jfrozen.gameserver.model.L2SiegeClan,com.l2jfrozen.gameserver.model.SiegeClanType) -> addDefender
    void addAttacker(com.l2jfrozen.gameserver.model.L2SiegeClan) -> addAttacker
    void midVictory() -> midVictory
    void startSiege() -> startSiege
    void announceToPlayer(java.lang.String,boolean) -> announceToPlayer
    void updatePlayerSiegeStateFlags(boolean) -> updatePlayerSiegeStateFlags
    void approveSiegeDefenderClan(int) -> approveSiegeDefenderClan
    boolean checkIfInZone(com.l2jfrozen.gameserver.model.L2Object) -> checkIfInZone
    boolean checkIfInZone(int,int,int) -> checkIfInZone
    boolean checkIsAttacker(com.l2jfrozen.gameserver.model.L2Clan) -> checkIsAttacker
    boolean checkIsDefender(com.l2jfrozen.gameserver.model.L2Clan) -> checkIsDefender
    boolean checkIsDefenderWaiting(com.l2jfrozen.gameserver.model.L2Clan) -> checkIsDefenderWaiting
    void clearSiegeClan() -> clearSiegeClan
    void clearSiegeDate() -> clearSiegeDate
    void clearSiegeWaitingClan() -> clearSiegeWaitingClan
    java.util.List getAttackersInZone() -> getAttackersInZone
    java.util.List getDefendersButNotOwnersInZone() -> getDefendersButNotOwnersInZone
    java.util.List getPlayersInZone() -> getPlayersInZone
    java.util.List getOwnersInZone() -> getOwnersInZone
    java.util.List getSpectatorsInZone() -> getSpectatorsInZone
    void killedCT(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> killedCT
    void killedCommander(com.l2jfrozen.gameserver.model.actor.instance.L2CommanderInstance) -> killedCommander
    void killedFlag(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> killedFlag
    void listRegisterClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> listRegisterClan
    void registerAttacker(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> registerAttacker
    void registerAttacker(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> registerAttacker
    void registerDefender(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> registerDefender
    void registerDefender(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> registerDefender
    void removeSiegeClan(int) -> removeSiegeClan
    void removeSiegeClan(com.l2jfrozen.gameserver.model.L2Clan) -> removeSiegeClan
    void removeSiegeClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeSiegeClan
    void checkAutoTask() -> checkAutoTask
    void startAutoTask(boolean) -> startAutoTask
    void teleportPlayer(com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType,com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType) -> teleportPlayer
    void addAttacker(int) -> addAttacker
    void addDefender(int) -> addDefender
    void addDefender(int,com.l2jfrozen.gameserver.model.SiegeClanType) -> addDefender
    void addDefenderWaiting(int) -> addDefenderWaiting
    boolean checkIfCanRegister(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkIfCanRegister
    void setSiegeDateTime() -> setSiegeDateTime
    void loadSiegeClan() -> loadSiegeClan
    void removeCommander() -> removeCommander
    void removeFlags() -> removeFlags
    void saveFortSiege() -> saveFortSiege
    void saveSiegeDate() -> saveSiegeDate
    void saveSiegeClan(com.l2jfrozen.gameserver.model.L2Clan,int,boolean) -> saveSiegeClan
    void spawnCommander(int) -> spawnCommander
    void spawnFlag(int) -> spawnFlag
    void unSpawnFlags() -> unSpawnFlags
    void spawnSiegeGuard() -> spawnSiegeGuard
    com.l2jfrozen.gameserver.model.L2SiegeClan getAttackerClan(com.l2jfrozen.gameserver.model.L2Clan) -> getAttackerClan
    com.l2jfrozen.gameserver.model.L2SiegeClan getAttackerClan(int) -> getAttackerClan
    java.util.List getAttackerClans() -> getAttackerClans
    int getAttackerRespawnDelay() -> getAttackerRespawnDelay
    com.l2jfrozen.gameserver.model.entity.siege.Fort getFort() -> getFort
    com.l2jfrozen.gameserver.model.L2SiegeClan getDefenderClan(com.l2jfrozen.gameserver.model.L2Clan) -> getDefenderClan
    com.l2jfrozen.gameserver.model.L2SiegeClan getDefenderClan(int) -> getDefenderClan
    java.util.List getDefenderClans() -> getDefenderClans
    com.l2jfrozen.gameserver.model.L2SiegeClan getDefenderWaitingClan(com.l2jfrozen.gameserver.model.L2Clan) -> getDefenderWaitingClan
    com.l2jfrozen.gameserver.model.L2SiegeClan getDefenderWaitingClan(int) -> getDefenderWaitingClan
    java.util.List getDefenderWaitingClans() -> getDefenderWaitingClans
    int getDefenderRespawnDelay() -> getDefenderRespawnDelay
    boolean getIsInProgress() -> getIsInProgress
    boolean getIsScheduled() -> getIsScheduled
    void setIsScheduled(boolean) -> setIsScheduled
    boolean getIsRegistrationOver() -> getIsRegistrationOver
    java.util.Calendar getSiegeDate() -> getSiegeDate
    java.util.List getFlag(com.l2jfrozen.gameserver.model.L2Clan) -> getFlag
    com.l2jfrozen.gameserver.managers.FortSiegeGuardManager getSiegeGuardManager() -> getSiegeGuardManager
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.FortSiege$1 -> com.l2jfrozen.gameserver.model.entity.siege.FortSiege$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$entity$siege$TeleportWhoType -> $SwitchMap$com$l2jfrozen$gameserver$model$entity$siege$TeleportWhoType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.FortSiege$ScheduleEndSiegeTask -> com.l2jfrozen.gameserver.model.entity.siege.FortSiege$ScheduleEndSiegeTask:
    com.l2jfrozen.gameserver.model.entity.siege.Fort _fortInst -> _fortInst
    com.l2jfrozen.gameserver.model.entity.siege.FortSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.FortSiege,com.l2jfrozen.gameserver.model.entity.siege.Fort) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.FortSiege$ScheduleStartSiegeTask -> com.l2jfrozen.gameserver.model.entity.siege.FortSiege$ScheduleStartSiegeTask:
    com.l2jfrozen.gameserver.model.entity.siege.Fort _fortInst -> _fortInst
    com.l2jfrozen.gameserver.model.entity.siege.FortSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.FortSiege,com.l2jfrozen.gameserver.model.entity.siege.Fort) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.Siege -> com.l2jfrozen.gameserver.model.entity.siege.Siege:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.text.SimpleDateFormat fmt -> fmt
    int _controlTowerCount -> _controlTowerCount
    int _controlTowerMaxCount -> _controlTowerMaxCount
    java.util.List _attackerClans -> _attackerClans
    java.util.List _defenderClans -> _defenderClans
    java.util.List _defenderWaitingClans -> _defenderWaitingClans
    int _defenderRespawnDelayPenalty -> _defenderRespawnDelayPenalty
    java.util.List _artifacts -> _artifacts
    java.util.List _controlTowers -> _controlTowers
    com.l2jfrozen.gameserver.model.entity.siege.Castle[] _castle -> _castle
    boolean _isInProgress -> _isInProgress
    boolean _isNormalSide -> _isNormalSide
    boolean _isRegistrationOver -> _isRegistrationOver
    java.util.Calendar _siegeEndDate -> _siegeEndDate
    com.l2jfrozen.gameserver.managers.SiegeGuardManager _siegeGuardManager -> _siegeGuardManager
    java.util.Calendar _siegeRegistrationEndDate -> _siegeRegistrationEndDate
    int getControlTowerCount() -> getControlTowerCount
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Castle[]) -> <init>
    void endSiege() -> endSiege
    void removeDefender(com.l2jfrozen.gameserver.model.L2SiegeClan) -> removeDefender
    void removeAttacker(com.l2jfrozen.gameserver.model.L2SiegeClan) -> removeAttacker
    void addDefender(com.l2jfrozen.gameserver.model.L2SiegeClan,com.l2jfrozen.gameserver.model.SiegeClanType) -> addDefender
    void addAttacker(com.l2jfrozen.gameserver.model.L2SiegeClan) -> addAttacker
    void midVictory() -> midVictory
    void startSiege() -> startSiege
    void announceToPlayer(java.lang.String,boolean) -> announceToPlayer
    void updatePlayerSiegeStateFlags(boolean) -> updatePlayerSiegeStateFlags
    void approveSiegeDefenderClan(int) -> approveSiegeDefenderClan
    boolean checkIfInZone(com.l2jfrozen.gameserver.model.L2Object) -> checkIfInZone
    boolean checkIfInZone(int,int,int) -> checkIfInZone
    boolean checkIsAttacker(com.l2jfrozen.gameserver.model.L2Clan) -> checkIsAttacker
    boolean checkIsDefender(com.l2jfrozen.gameserver.model.L2Clan) -> checkIsDefender
    boolean checkIsDefenderWaiting(com.l2jfrozen.gameserver.model.L2Clan) -> checkIsDefenderWaiting
    void clearSiegeClan() -> clearSiegeClan
    void clearSiegeWaitingClan() -> clearSiegeWaitingClan
    java.util.List getAttackersInZone() -> getAttackersInZone
    java.util.List getDefendersButNotOwnersInZone() -> getDefendersButNotOwnersInZone
    java.util.List getPlayersInZone() -> getPlayersInZone
    java.util.List getOwnersInZone() -> getOwnersInZone
    java.util.List getSpectatorsInZone() -> getSpectatorsInZone
    void killedCT(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> killedCT
    void killedFlag(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> killedFlag
    void listRegisterClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> listRegisterClan
    void registerAttacker(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> registerAttacker
    void registerAttacker(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> registerAttacker
    void registerDefender(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> registerDefender
    void registerDefender(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> registerDefender
    void removeSiegeClan(int) -> removeSiegeClan
    void removeSiegeClan(com.l2jfrozen.gameserver.model.L2Clan) -> removeSiegeClan
    void removeSiegeClan(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> removeSiegeClan
    void startAutoTask() -> startAutoTask
    void teleportPlayer(com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType,com.l2jfrozen.gameserver.datatables.csv.TeleportWhereType) -> teleportPlayer
    void addAttacker(int) -> addAttacker
    void addDefender(int) -> addDefender
    void addDefender(int,com.l2jfrozen.gameserver.model.SiegeClanType) -> addDefender
    void addDefenderWaiting(int) -> addDefenderWaiting
    boolean checkIfCanRegister(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkIfCanRegister
    boolean checkIfAlreadyRegisteredForAnotherSiege(com.l2jfrozen.gameserver.model.L2Clan) -> checkIfAlreadyRegisteredForAnotherSiege
    void correctSiegeDateTime() -> correctSiegeDateTime
    void loadSiegeClan() -> loadSiegeClan
    void removeArtifact() -> removeArtifact
    void removeControlTower() -> removeControlTower
    void removeFlags() -> removeFlags
    void removeDefenderFlags() -> removeDefenderFlags
    void saveCastleSiege() -> saveCastleSiege
    void saveSiegeDate() -> saveSiegeDate
    void saveSiegeClan(com.l2jfrozen.gameserver.model.L2Clan,int,boolean) -> saveSiegeClan
    void setNextSiegeDate() -> setNextSiegeDate
    void spawnArtifact(int) -> spawnArtifact
    void spawnControlTower(int) -> spawnControlTower
    void spawnSiegeGuard() -> spawnSiegeGuard
    com.l2jfrozen.gameserver.model.L2SiegeClan getAttackerClan(com.l2jfrozen.gameserver.model.L2Clan) -> getAttackerClan
    com.l2jfrozen.gameserver.model.L2SiegeClan getAttackerClan(int) -> getAttackerClan
    java.util.List getAttackerClans() -> getAttackerClans
    int getAttackerRespawnDelay() -> getAttackerRespawnDelay
    com.l2jfrozen.gameserver.model.entity.siege.Castle getCastle() -> getCastle
    com.l2jfrozen.gameserver.model.L2SiegeClan getDefenderClan(com.l2jfrozen.gameserver.model.L2Clan) -> getDefenderClan
    com.l2jfrozen.gameserver.model.L2SiegeClan getDefenderClan(int) -> getDefenderClan
    java.util.List getDefenderClans() -> getDefenderClans
    com.l2jfrozen.gameserver.model.L2SiegeClan getDefenderWaitingClan(com.l2jfrozen.gameserver.model.L2Clan) -> getDefenderWaitingClan
    com.l2jfrozen.gameserver.model.L2SiegeClan getDefenderWaitingClan(int) -> getDefenderWaitingClan
    java.util.List getDefenderWaitingClans() -> getDefenderWaitingClans
    int getDefenderRespawnDelay() -> getDefenderRespawnDelay
    boolean getIsInProgress() -> getIsInProgress
    boolean getIsRegistrationOver() -> getIsRegistrationOver
    java.util.Calendar getSiegeDate() -> getSiegeDate
    java.util.List getFlag(com.l2jfrozen.gameserver.model.L2Clan) -> getFlag
    com.l2jfrozen.gameserver.managers.SiegeGuardManager getSiegeGuardManager() -> getSiegeGuardManager
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.Siege$1 -> com.l2jfrozen.gameserver.model.entity.siege.Siege$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$entity$siege$TeleportWhoType -> $SwitchMap$com$l2jfrozen$gameserver$model$entity$siege$TeleportWhoType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.Siege$ScheduleEndSiegeTask -> com.l2jfrozen.gameserver.model.entity.siege.Siege$ScheduleEndSiegeTask:
    com.l2jfrozen.gameserver.model.entity.siege.Castle _castleInst -> _castleInst
    com.l2jfrozen.gameserver.model.entity.siege.Siege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Siege,com.l2jfrozen.gameserver.model.entity.siege.Castle) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.Siege$ScheduleStartSiegeTask -> com.l2jfrozen.gameserver.model.entity.siege.Siege$ScheduleStartSiegeTask:
    com.l2jfrozen.gameserver.model.entity.siege.Castle _castleInst -> _castleInst
    com.l2jfrozen.gameserver.model.entity.siege.Siege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Siege,com.l2jfrozen.gameserver.model.entity.siege.Castle) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType -> com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType:
    com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType All -> All
    com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType Attacker -> Attacker
    com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType DefenderNotOwner -> DefenderNotOwner
    com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType Owner -> Owner
    com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType Spectator -> Spectator
    com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType[] values() -> values
    com.l2jfrozen.gameserver.model.entity.siege.TeleportWhoType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege _instance -> _instance
    boolean _registrationPeriod -> _registrationPeriod
    int _clanCounter -> _clanCounter
    java.util.Map _clansInfo -> _clansInfo
    com.l2jfrozen.gameserver.model.zone.type.L2ClanHallZone zone -> zone
    com.l2jfrozen.gameserver.model.entity.ClanHall clanhall -> clanhall
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$clanPlayersInfo _ownerClanInfo -> _ownerClanInfo
    boolean _finalStage -> _finalStage
    java.util.concurrent.ScheduledFuture _midTimer -> _midTimer
    com.l2jfrozen.common.util.taskmanager.ExclusiveTask _startSiegeTask -> _startSiegeTask
    com.l2jfrozen.common.util.taskmanager.ExclusiveTask _endSiegeTask -> _endSiegeTask
    com.l2jfrozen.common.util.taskmanager.ExclusiveTask _mobControlTask -> _mobControlTask
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege getInstance() -> getInstance
    void <init>() -> <init>
    void startSiege() -> startSiege
    void startSecondStep(com.l2jfrozen.gameserver.model.L2Clan) -> startSecondStep
    void endSiege(boolean) -> endSiege
    void unSpawnAll() -> unSpawnAll
    void gateControl(int) -> gateControl
    void teleportPlayers() -> teleportPlayers
    com.l2jfrozen.gameserver.model.L2Clan checkHaveWinner() -> checkHaveWinner
    void spawnFlags() -> spawnFlags
    void setRegistrationPeriod(boolean) -> setRegistrationPeriod
    boolean isRegistrationPeriod() -> isRegistrationPeriod
    boolean isPlayerRegister(com.l2jfrozen.gameserver.model.L2Clan,java.lang.String) -> isPlayerRegister
    boolean isClanOnSiege(com.l2jfrozen.gameserver.model.L2Clan) -> isClanOnSiege
    int registerClanOnSiege(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Clan) -> registerClanOnSiege
    boolean unRegisterClan(com.l2jfrozen.gameserver.model.L2Clan) -> unRegisterClan
    javolution.util.FastList getRegisteredClans() -> getRegisteredClans
    javolution.util.FastList getRegisteredPlayers(com.l2jfrozen.gameserver.model.L2Clan) -> getRegisteredPlayers
    com.l2jfrozen.gameserver.model.actor.instance.L2DecoInstance getSiegeFlag(com.l2jfrozen.gameserver.model.L2Clan) -> getSiegeFlag
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance getQuestMob(com.l2jfrozen.gameserver.model.L2Clan) -> getQuestMob
    int getPlayersCount(java.lang.String) -> getPlayersCount
    void addPlayer(com.l2jfrozen.gameserver.model.L2Clan,java.lang.String) -> addPlayer
    void removePlayer(com.l2jfrozen.gameserver.model.L2Clan,java.lang.String) -> removePlayer
    void anonce(java.lang.String,int) -> anonce
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$1 -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$1:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege) -> <init>
    void onElapsed() -> onElapsed
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$2 -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$2:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege) -> <init>
    void onElapsed() -> onElapsed
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$3 -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$3:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege) -> <init>
    void onElapsed() -> onElapsed
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$clanPlayersInfo -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$clanPlayersInfo:
    java.lang.String _clanName -> _clanName
    com.l2jfrozen.gameserver.model.actor.instance.L2DecoInstance _flag -> _flag
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance _mob -> _mob
    javolution.util.FastList _players -> _players
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege) -> <init>
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$midSiegeStep -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$midSiegeStep:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$startFirstStep -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege$startFirstStep:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.BanditStrongholdSiege) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle _instance -> _instance
    javolution.util.FastMap _clansDamageInfo -> _clansDamageInfo
    int START_DAY -> START_DAY
    int HOUR -> HOUR
    int MINUTES -> MINUTES
    int BOSS_ID -> BOSS_ID
    int BOSS1_ID -> BOSS1_ID
    int BOSS2_ID -> BOSS2_ID
    int MESSENGER_ID -> MESSENGER_ID
    java.util.concurrent.ScheduledFuture _gustav -> _gustav
    java.util.concurrent.ScheduledFuture _dietrich -> _dietrich
    java.util.concurrent.ScheduledFuture _mikhail -> _mikhail
    java.util.concurrent.ScheduledFuture _monsterdespawn -> _monsterdespawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _minion1 -> _minion1
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _minion2 -> _minion2
    java.util.ArrayList _monsters -> _monsters
    java.util.ArrayList _spawns -> _spawns
    java.util.Calendar _siegetime -> _siegetime
    boolean _progress -> _progress
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle getInstance() -> getInstance
    void <init>() -> <init>
    void setCalendarForNextSiege() -> setCalendarForNextSiege
    int getDaysToSiege() -> getDaysToSiege
    long getMilliToSiege() -> getMilliToSiege
    void MessengerSpawn() -> MessengerSpawn
    void Announce(java.lang.String) -> Announce
    void Siege() -> Siege
    void addMonster(int,int,int,int,int) -> addMonster
    void fillMonsters() -> fillMonsters
    void spawnMonsters() -> spawnMonsters
    void DeSpawn() -> DeSpawn
    boolean Conditions(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> Conditions
    boolean getIsInProgress() -> getIsInProgress
    void setIsInProgress(boolean) -> setIsInProgress
    void SiegeFinish() -> SiegeFinish
    void addSiegeDamage(com.l2jfrozen.gameserver.model.L2Clan,long) -> addSiegeDamage
    void update() -> update
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$AnnounceInfo -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$AnnounceInfo:
    java.lang.String _message -> _message
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle,java.lang.String) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$DamageInfo -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$DamageInfo:
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    long _damage -> _damage
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle) -> <init>
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$DeSpawnMonsters -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$DeSpawnMonsters:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$DeSpawnTimer -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$DeSpawnTimer:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _npc -> _npc
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$MonsterLocation -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$MonsterLocation:
    int _id -> _id
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    void <init>(int,int,int,int,int) -> <init>
    int getId() -> getId
    int getX() -> getX
    int getY() -> getY
    int getZ() -> getZ
    int getHeading() -> getHeading
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$RunMessengerSpawn -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$RunMessengerSpawn:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$RunSiege -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle$RunSiege:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.DevastatedCastle) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance _instance -> _instance
    javolution.util.FastMap _clansDamageInfo -> _clansDamageInfo
    int START_DAY -> START_DAY
    int HOUR -> HOUR
    int MINUTES -> MINUTES
    int BOSS_ID -> BOSS_ID
    int MESSENGER_ID -> MESSENGER_ID
    java.util.concurrent.ScheduledFuture _nurka -> _nurka
    java.util.concurrent.ScheduledFuture _announce -> _announce
    java.util.Calendar _capturetime -> _capturetime
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance getInstance() -> getInstance
    void <init>() -> <init>
    void setCalendarForNextCaprture() -> setCalendarForNextCaprture
    int getDaysToCapture() -> getDaysToCapture
    long getMilliToCapture() -> getMilliToCapture
    void MessengerSpawn() -> MessengerSpawn
    void BossSpawn() -> BossSpawn
    boolean Conditions(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> Conditions
    void Announce(java.lang.String) -> Announce
    void CaptureFinish() -> CaptureFinish
    void addSiegeDamage(com.l2jfrozen.gameserver.model.L2Clan,long) -> addSiegeDamage
    void update() -> update
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance$AnnounceInfo -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance$AnnounceInfo:
    java.lang.String _message -> _message
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance,java.lang.String) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance$DamageInfo -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance$DamageInfo:
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    long _damage -> _damage
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance) -> <init>
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance$DeSpawnTimer -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance$DeSpawnTimer:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _npc -> _npc
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance$RunBossSpawn -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance$RunBossSpawn:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance$RunMessengerSpawn -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance$RunMessengerSpawn:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.FortressOfResistance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege _instance -> _instance
    boolean _registrationPeriod -> _registrationPeriod
    int _clanCounter -> _clanCounter
    java.util.Map _clansInfo -> _clansInfo
    com.l2jfrozen.gameserver.model.entity.ClanHall clanhall -> clanhall
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$clanPlayersInfo _ownerClanInfo -> _ownerClanInfo
    boolean _finalStage -> _finalStage
    java.util.concurrent.ScheduledFuture _midTimer -> _midTimer
    com.l2jfrozen.gameserver.model.zone.type.L2ClanHallZone zone -> zone
    com.l2jfrozen.common.util.taskmanager.ExclusiveTask _startSiegeTask -> _startSiegeTask
    com.l2jfrozen.common.util.taskmanager.ExclusiveTask _endSiegeTask -> _endSiegeTask
    com.l2jfrozen.common.util.taskmanager.ExclusiveTask _mobControlTask -> _mobControlTask
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege getInstance() -> getInstance
    void <init>() -> <init>
    void startSiege() -> startSiege
    void startSecondStep(com.l2jfrozen.gameserver.model.L2Clan) -> startSecondStep
    void endSiege(boolean) -> endSiege
    void unSpawnAll() -> unSpawnAll
    void gateControl(int) -> gateControl
    void teleportPlayers() -> teleportPlayers
    com.l2jfrozen.gameserver.model.L2Clan checkHaveWinner() -> checkHaveWinner
    void spawnFlags() -> spawnFlags
    void setRegistrationPeriod(boolean) -> setRegistrationPeriod
    boolean isRegistrationPeriod() -> isRegistrationPeriod
    boolean isPlayerRegister(com.l2jfrozen.gameserver.model.L2Clan,java.lang.String) -> isPlayerRegister
    boolean isClanOnSiege(com.l2jfrozen.gameserver.model.L2Clan) -> isClanOnSiege
    int registerClanOnSiege(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Clan) -> registerClanOnSiege
    boolean unRegisterClan(com.l2jfrozen.gameserver.model.L2Clan) -> unRegisterClan
    javolution.util.FastList getRegisteredClans() -> getRegisteredClans
    javolution.util.FastList getRegisteredPlayers(com.l2jfrozen.gameserver.model.L2Clan) -> getRegisteredPlayers
    com.l2jfrozen.gameserver.model.actor.instance.L2DecoInstance getSiegeFlag(com.l2jfrozen.gameserver.model.L2Clan) -> getSiegeFlag
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance getQuestMob(com.l2jfrozen.gameserver.model.L2Clan) -> getQuestMob
    int getPlayersCount(java.lang.String) -> getPlayersCount
    void addPlayer(com.l2jfrozen.gameserver.model.L2Clan,java.lang.String) -> addPlayer
    void removePlayer(com.l2jfrozen.gameserver.model.L2Clan,java.lang.String) -> removePlayer
    void anonce(java.lang.String,int) -> anonce
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$1 -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$1:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege) -> <init>
    void onElapsed() -> onElapsed
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$2 -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$2:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege) -> <init>
    void onElapsed() -> onElapsed
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$3 -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$3:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege) -> <init>
    void onElapsed() -> onElapsed
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$clanPlayersInfo -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$clanPlayersInfo:
    java.lang.String _clanName -> _clanName
    com.l2jfrozen.gameserver.model.actor.instance.L2DecoInstance _flag -> _flag
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance _mob -> _mob
    javolution.util.FastList _players -> _players
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege) -> <init>
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$midSiegeStep -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$midSiegeStep:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$startFirstStep -> com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege$startFirstStep:
    com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.clanhalls.WildBeastFarmSiege) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.multisell.L2Multisell -> com.l2jfrozen.gameserver.model.multisell.L2Multisell:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _entries -> _entries
    com.l2jfrozen.gameserver.model.multisell.L2Multisell _instance -> _instance
    com.l2jfrozen.gameserver.model.multisell.MultiSellListContainer getList(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getList
    void <init>() -> <init>
    void reload() -> reload
    com.l2jfrozen.gameserver.model.multisell.L2Multisell getInstance() -> getInstance
    void parseData() -> parseData
    com.l2jfrozen.gameserver.model.multisell.MultiSellListContainer generateMultiSell(int,boolean,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,double) -> generateMultiSell
    com.l2jfrozen.gameserver.model.multisell.MultiSellEntry prepareEntry(com.l2jfrozen.gameserver.model.multisell.MultiSellEntry,boolean,boolean,int,double) -> prepareEntry
    void SeparateAndSend(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean,double) -> SeparateAndSend
    void hashFiles(java.lang.String,java.util.List) -> hashFiles
    void parse() -> parse
    com.l2jfrozen.gameserver.model.multisell.MultiSellListContainer parseDocument(org.w3c.dom.Document) -> parseDocument
    com.l2jfrozen.gameserver.model.multisell.MultiSellEntry parseEntry(org.w3c.dom.Node) -> parseEntry
    void updateReferencePrice(com.l2jfrozen.gameserver.model.multisell.MultiSellListContainer) -> updateReferencePrice
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.multisell.MultiSellEntry -> com.l2jfrozen.gameserver.model.multisell.MultiSellEntry:
    int _entryId -> _entryId
    java.util.List _products -> _products
    java.util.List _ingredients -> _ingredients
    void <init>() -> <init>
    void setEntryId(int) -> setEntryId
    int getEntryId() -> getEntryId
    void addProduct(com.l2jfrozen.gameserver.model.multisell.MultiSellIngredient) -> addProduct
    java.util.List getProducts() -> getProducts
    void addIngredient(com.l2jfrozen.gameserver.model.multisell.MultiSellIngredient) -> addIngredient
    java.util.List getIngredients() -> getIngredients
com.l2jfrozen.gameserver.model.multisell.MultiSellIngredient -> com.l2jfrozen.gameserver.model.multisell.MultiSellIngredient:
    int _itemId -> _itemId
    int _itemCount -> _itemCount
    int _enchantmentLevel -> _enchantmentLevel
    boolean _isTaxIngredient -> _isTaxIngredient
    boolean _mantainIngredient -> _mantainIngredient
    void <init>(int,int,boolean,boolean) -> <init>
    void <init>(int,int,int,boolean,boolean) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.multisell.MultiSellIngredient) -> <init>
    void setItemId(int) -> setItemId
    int getItemId() -> getItemId
    void setItemCount(int) -> setItemCount
    int getItemCount() -> getItemCount
    void setEnchantmentLevel(int) -> setEnchantmentLevel
    int getEnchantmentLevel() -> getEnchantmentLevel
    void setIsTaxIngredient(boolean) -> setIsTaxIngredient
    boolean isTaxIngredient() -> isTaxIngredient
    void setMantainIngredient(boolean) -> setMantainIngredient
    boolean getMantainIngredient() -> getMantainIngredient
com.l2jfrozen.gameserver.model.multisell.MultiSellListContainer -> com.l2jfrozen.gameserver.model.multisell.MultiSellListContainer:
    int _listId -> _listId
    boolean _applyTaxes -> _applyTaxes
    boolean _maintainEnchantment -> _maintainEnchantment
    java.util.List _entriesC -> _entriesC
    void <init>() -> <init>
    void setListId(int) -> setListId
    void setApplyTaxes(boolean) -> setApplyTaxes
    void setMaintainEnchantment(boolean) -> setMaintainEnchantment
    int getListId() -> getListId
    boolean getApplyTaxes() -> getApplyTaxes
    boolean getMaintainEnchantment() -> getMaintainEnchantment
    void addEntry(com.l2jfrozen.gameserver.model.multisell.MultiSellEntry) -> addEntry
    java.util.List getEntries() -> getEntries
com.l2jfrozen.gameserver.model.quest.Quest -> com.l2jfrozen.gameserver.model.quest.Quest:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _allEventsS -> _allEventsS
    java.util.Map _allEventTimers -> _allEventTimers
    int _questId -> _questId
    java.lang.String _name -> _name
    java.lang.String _prefixPath -> _prefixPath
    java.lang.String _descr -> _descr
    com.l2jfrozen.gameserver.model.quest.State _initialState -> _initialState
    java.util.Map _states -> _states
    javolution.util.FastList _questItemIds -> _questItemIds
    java.util.Collection findAllEvents() -> findAllEvents
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    void init_LoadGlobalData() -> init_LoadGlobalData
    void saveGlobalData() -> saveGlobalData
    int getQuestIntId() -> getQuestIntId
    void setInitialState(com.l2jfrozen.gameserver.model.quest.State) -> setInitialState
    com.l2jfrozen.gameserver.model.quest.QuestState newQuestState(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> newQuestState
    com.l2jfrozen.gameserver.model.quest.State getInitialState() -> getInitialState
    java.lang.String getName() -> getName
    java.lang.String getPrefixPath() -> getPrefixPath
    java.lang.String getDescr() -> getDescr
    com.l2jfrozen.gameserver.model.quest.State addState(com.l2jfrozen.gameserver.model.quest.State) -> addState
    void startQuestTimer(java.lang.String,long,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> startQuestTimer
    void startQuestTimer(java.lang.String,long,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> startQuestTimer
    com.l2jfrozen.gameserver.model.quest.QuestTimer getQuestTimer(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getQuestTimer
    void cancelQuestTimer(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> cancelQuestTimer
    void cancelQuestTimers(java.lang.String) -> cancelQuestTimers
    void removeQuestTimer(com.l2jfrozen.gameserver.model.quest.QuestTimer) -> removeQuestTimer
    boolean notifyAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> notifyAttack
    boolean notifyDeath(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.quest.QuestState) -> notifyDeath
    boolean notifyEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> notifyEvent
    boolean notifyKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> notifyKill
    boolean notifyTalk(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.quest.QuestState) -> notifyTalk
    boolean notifyFirstTalk(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> notifyFirstTalk
    boolean notifySkillUse(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> notifySkillUse
    boolean notifySpellFinished(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> notifySpellFinished
    boolean notifyFactionCall(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> notifyFactionCall
    boolean notifyAggroRangeEnter(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> notifyAggroRangeEnter
    boolean notifySpawn(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> notifySpawn
    java.lang.String onAttack(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean) -> onAttack
    java.lang.String onDeath(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.quest.QuestState) -> onDeath
    java.lang.String onAdvEvent(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAdvEvent
    void sendDlgMessage(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendDlgMessage
    void onDlgAnswer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onDlgAnswer
    java.lang.String onEvent(java.lang.String,com.l2jfrozen.gameserver.model.quest.QuestState) -> onEvent
    java.lang.String onKill(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onKill
    java.lang.String onTalk(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onTalk
    java.lang.String onFirstTalk(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onFirstTalk
    java.lang.String onSkillUse(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSkillUse
    java.lang.String onSpellFinished(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Skill) -> onSpellFinished
    java.lang.String onFactionCall(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onFactionCall
    java.lang.String onAggroRangeEnter(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> onAggroRangeEnter
    java.lang.String onSpawn(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> onSpawn
    boolean showError(com.l2jfrozen.gameserver.model.L2Character,java.lang.Throwable) -> showError
    boolean showResult(com.l2jfrozen.gameserver.model.L2Character,java.lang.String) -> showResult
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addStartNpc(int) -> addStartNpc
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addFirstTalkId(int) -> addFirstTalkId
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addAttackId(int) -> addAttackId
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addKillId(int) -> addKillId
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addTalkId(int) -> addTalkId
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addFactionCallId(int) -> addFactionCallId
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addSkillUseId(int) -> addSkillUseId
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addSpellFinishedId(int) -> addSpellFinishedId
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addAggroRangeEnterId(int) -> addAggroRangeEnterId
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addSpawnId(int) -> addSpawnId
    com.l2jfrozen.gameserver.templates.L2NpcTemplate addEventId(int,com.l2jfrozen.gameserver.model.quest.QuestEventType) -> addEventId
    void playerEnter(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> playerEnter
    void saveGlobalQuestVar(java.lang.String,java.lang.String) -> saveGlobalQuestVar
    java.lang.String loadGlobalQuestVar(java.lang.String) -> loadGlobalQuestVar
    void deleteGlobalQuestVar(java.lang.String) -> deleteGlobalQuestVar
    void deleteAllGlobalQuestVars() -> deleteAllGlobalQuestVars
    void createQuestVarInDb(com.l2jfrozen.gameserver.model.quest.QuestState,java.lang.String,java.lang.String) -> createQuestVarInDb
    void updateQuestVarInDb(com.l2jfrozen.gameserver.model.quest.QuestState,java.lang.String,java.lang.String) -> updateQuestVarInDb
    void deleteQuestVarInDb(com.l2jfrozen.gameserver.model.quest.QuestState,java.lang.String) -> deleteQuestVarInDb
    void deleteQuestInDb(com.l2jfrozen.gameserver.model.quest.QuestState) -> deleteQuestInDb
    void createQuestInDb(com.l2jfrozen.gameserver.model.quest.QuestState) -> createQuestInDb
    void updateQuestInDb(com.l2jfrozen.gameserver.model.quest.QuestState) -> updateQuestInDb
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getRandomPartyMember(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getRandomPartyMember
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getRandomPartyMember(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> getRandomPartyMember
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getRandomPartyMember(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> getRandomPartyMember
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getRandomPartyMemberState(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.quest.State) -> getRandomPartyMemberState
    java.lang.String showHtmlFile(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showHtmlFile
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,com.l2jfrozen.gameserver.model.L2Character) -> addSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,int,int,int,int,boolean,int) -> addSpawn
    void registerItem(int) -> registerItem
    javolution.util.FastList getRegisteredItemIds() -> getRegisteredItemIds
    com.l2jfrozen.gameserver.scripting.ScriptManager getScriptManager() -> getScriptManager
    boolean unload() -> unload
    boolean reload() -> reload
    java.lang.String getScriptName() -> getScriptName
    void registerMobs(int[]) -> registerMobs
    void registerMobs(int[],com.l2jfrozen.gameserver.model.quest.QuestEventType[]) -> registerMobs
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.quest.QuestEventType -> com.l2jfrozen.gameserver.model.quest.QuestEventType:
    com.l2jfrozen.gameserver.model.quest.QuestEventType NPC_FIRST_TALK -> NPC_FIRST_TALK
    com.l2jfrozen.gameserver.model.quest.QuestEventType QUEST_START -> QUEST_START
    com.l2jfrozen.gameserver.model.quest.QuestEventType QUEST_TALK -> QUEST_TALK
    com.l2jfrozen.gameserver.model.quest.QuestEventType MOBGOTATTACKED -> MOBGOTATTACKED
    com.l2jfrozen.gameserver.model.quest.QuestEventType MOBKILLED -> MOBKILLED
    com.l2jfrozen.gameserver.model.quest.QuestEventType ON_FACTION_CALL -> ON_FACTION_CALL
    com.l2jfrozen.gameserver.model.quest.QuestEventType MOB_TARGETED_BY_SKILL -> MOB_TARGETED_BY_SKILL
    com.l2jfrozen.gameserver.model.quest.QuestEventType ON_SPELL_FINISHED -> ON_SPELL_FINISHED
    com.l2jfrozen.gameserver.model.quest.QuestEventType ON_AGGRO_RANGE_ENTER -> ON_AGGRO_RANGE_ENTER
    com.l2jfrozen.gameserver.model.quest.QuestEventType ON_SPAWN -> ON_SPAWN
    com.l2jfrozen.gameserver.model.quest.QuestEventType ON_SKILL_USE -> ON_SKILL_USE
    com.l2jfrozen.gameserver.model.quest.QuestEventType ON_KILL -> ON_KILL
    com.l2jfrozen.gameserver.model.quest.QuestEventType ON_ATTACK -> ON_ATTACK
    boolean _allowMultipleRegistration -> _allowMultipleRegistration
    com.l2jfrozen.gameserver.model.quest.QuestEventType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.model.quest.QuestEventType[] values() -> values
    com.l2jfrozen.gameserver.model.quest.QuestEventType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,boolean) -> <init>
    boolean isMultipleRegistrationAllowed() -> isMultipleRegistrationAllowed
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.quest.QuestSpawn -> com.l2jfrozen.gameserver.model.quest.QuestSpawn:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.quest.QuestSpawn instance -> instance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.quest.QuestSpawn getInstance() -> getInstance
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,com.l2jfrozen.gameserver.model.L2Character) -> addSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,int,int,int,int,boolean,int) -> addSpawn
com.l2jfrozen.gameserver.model.quest.QuestSpawn$DeSpawnScheduleTimerTask -> com.l2jfrozen.gameserver.model.quest.QuestSpawn$DeSpawnScheduleTimerTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _npc -> _npc
    com.l2jfrozen.gameserver.model.quest.QuestSpawn this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.quest.QuestSpawn,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.quest.QuestState -> com.l2jfrozen.gameserver.model.quest.QuestState:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _questName -> _questName
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.quest.State _state -> _state
    boolean _isCompleted -> _isCompleted
    java.util.Map _vars -> _vars
    boolean _isExitQuestOnCleanUp -> _isExitQuestOnCleanUp
    void <init>(com.l2jfrozen.gameserver.model.quest.Quest,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.quest.State,boolean) -> <init>
    java.lang.String getQuestName() -> getQuestName
    com.l2jfrozen.gameserver.model.quest.Quest getQuest() -> getQuest
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayer() -> getPlayer
    com.l2jfrozen.gameserver.model.quest.State getState() -> getState
    boolean isCompleted() -> isCompleted
    boolean isStarted() -> isStarted
    java.lang.Object setState(com.l2jfrozen.gameserver.model.quest.State) -> setState
    java.lang.String getStateId() -> getStateId
    java.lang.String setInternal(java.lang.String,java.lang.String) -> setInternal
    java.lang.String set(java.lang.String,java.lang.String) -> set
    void setCond(int,int) -> setCond
    java.lang.String unset(java.lang.String) -> unset
    java.lang.Object get(java.lang.String) -> get
    int getInt(java.lang.String) -> getInt
    void addNotifyOfDeath(com.l2jfrozen.gameserver.model.L2Character) -> addNotifyOfDeath
    int getQuestItemsCount(int) -> getQuestItemsCount
    int getEnchantLevel(int) -> getEnchantLevel
    void giveItems(int,int) -> giveItems
    void giveItems(int,int,int) -> giveItems
    boolean dropQuestItems(int,int,int,int,boolean) -> dropQuestItems
    boolean dropQuestItems(int,int,int,int,int,boolean) -> dropQuestItems
    void addRadar(int,int,int) -> addRadar
    void removeRadar(int,int,int) -> removeRadar
    void clearRadar() -> clearRadar
    void takeItems(int,int) -> takeItems
    void playSound(java.lang.String) -> playSound
    void addExpAndSp(int,int) -> addExpAndSp
    int getRandom(int) -> getRandom
    int getItemEquipped(int) -> getItemEquipped
    int getGameTicks() -> getGameTicks
    boolean isExitQuestOnCleanUp() -> isExitQuestOnCleanUp
    void setIsExitQuestOnCleanUp(boolean) -> setIsExitQuestOnCleanUp
    void startQuestTimer(java.lang.String,long) -> startQuestTimer
    void startQuestTimer(java.lang.String,long,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> startQuestTimer
    com.l2jfrozen.gameserver.model.quest.QuestTimer getQuestTimer(java.lang.String) -> getQuestTimer
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int) -> addSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,int) -> addSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,int,int,int) -> addSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,com.l2jfrozen.gameserver.model.L2Character) -> addSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,com.l2jfrozen.gameserver.model.L2Character,int) -> addSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,int,int,int,int) -> addSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,com.l2jfrozen.gameserver.model.L2Character,boolean,int) -> addSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance addSpawn(int,int,int,int,int,boolean,int) -> addSpawn
    java.lang.String showHtmlFile(java.lang.String) -> showHtmlFile
    com.l2jfrozen.gameserver.model.quest.QuestState exitQuest(boolean) -> exitQuest
    void showQuestionMark(int) -> showQuestionMark
    void playTutorialVoice(java.lang.String) -> playTutorialVoice
    void showTutorialHTML(java.lang.String) -> showTutorialHTML
    void closeTutorialHtml() -> closeTutorialHtml
    void onTutorialClientEvent(int) -> onTutorialClientEvent
    void dropItem(com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> dropItem
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getNpc() -> getNpc
    void checkNewbieQuests() -> checkNewbieQuests
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.quest.QuestStateManager -> com.l2jfrozen.gameserver.model.quest.QuestStateManager:
    com.l2jfrozen.gameserver.model.quest.QuestStateManager _instance -> _instance
    java.util.List _questStates -> _questStates
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.quest.QuestStateManager getInstance() -> getInstance
    void addQuestState(com.l2jfrozen.gameserver.model.quest.Quest,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.quest.State,boolean) -> addQuestState
    void cleanUp() -> cleanUp
    com.l2jfrozen.gameserver.model.quest.QuestState getQuestState(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> getQuestState
    java.util.List getQuestStates() -> getQuestStates
com.l2jfrozen.gameserver.model.quest.QuestStateManager$ScheduleTimerTask -> com.l2jfrozen.gameserver.model.quest.QuestStateManager$ScheduleTimerTask:
    com.l2jfrozen.gameserver.model.quest.QuestStateManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.quest.QuestStateManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.quest.QuestTimer -> com.l2jfrozen.gameserver.model.quest.QuestTimer:
    boolean _isActive -> _isActive
    java.lang.String _name -> _name
    com.l2jfrozen.gameserver.model.quest.Quest _quest -> _quest
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _npc -> _npc
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    boolean _isRepeating -> _isRepeating
    java.util.concurrent.ScheduledFuture _schedular -> _schedular
    void <init>(com.l2jfrozen.gameserver.model.quest.Quest,java.lang.String,long,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.quest.Quest,java.lang.String,long,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.quest.QuestState,java.lang.String,long) -> <init>
    void cancel() -> cancel
    void cancel(boolean) -> cancel
    boolean isMatch(com.l2jfrozen.gameserver.model.quest.Quest,java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isMatch
    boolean getIsActive() -> getIsActive
    boolean getIsRepeating() -> getIsRepeating
    com.l2jfrozen.gameserver.model.quest.Quest getQuest() -> getQuest
    java.lang.String getName() -> getName
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getNpc() -> getNpc
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayer() -> getPlayer
    java.lang.String toString() -> toString
com.l2jfrozen.gameserver.model.quest.QuestTimer$ScheduleTimerTask -> com.l2jfrozen.gameserver.model.quest.QuestTimer$ScheduleTimerTask:
    com.l2jfrozen.gameserver.model.quest.QuestTimer this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.quest.QuestTimer) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.quest.State -> com.l2jfrozen.gameserver.model.quest.State:
    java.lang.String _questName -> _questName
    java.lang.String _name -> _name
    void <init>(java.lang.String,com.l2jfrozen.gameserver.model.quest.Quest) -> <init>
    void addQuestDrop(int,int,int) -> addQuestDrop
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
com.l2jfrozen.gameserver.model.quest.jython.QuestJython -> com.l2jfrozen.gameserver.model.quest.jython.QuestJython:
    void <init>(int,java.lang.String,java.lang.String) -> <init>
com.l2jfrozen.gameserver.model.scripts.L2RBManager -> com.l2jfrozen.gameserver.model.scripts.L2RBManager:
    void <init>() -> <init>
    void RaidbossLevel40(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> RaidbossLevel40
    void RaidbossLevel45(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> RaidbossLevel45
    void RaidbossLevel50(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> RaidbossLevel50
    void RaidbossLevel55(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> RaidbossLevel55
    void RaidbossLevel60(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> RaidbossLevel60
    void RaidbossLevel65(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> RaidbossLevel65
    void RaidbossLevel70(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> RaidbossLevel70
com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel40 -> com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel40:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel45 -> com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel45:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel50 -> com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel50:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel55 -> com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel55:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel60 -> com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel60:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel65 -> com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel65:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel70 -> com.l2jfrozen.gameserver.model.scripts.L2RBManager$RaidbossLevel70:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.spawn.AutoSpawn -> com.l2jfrozen.gameserver.model.spawn.AutoSpawn:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn _instance -> _instance
    int DEFAULT_INITIAL_SPAWN -> DEFAULT_INITIAL_SPAWN
    int DEFAULT_RESPAWN -> DEFAULT_RESPAWN
    int DEFAULT_DESPAWN -> DEFAULT_DESPAWN
    java.util.Map _registeredSpawns -> _registeredSpawns
    java.util.Map _runningSpawns -> _runningSpawns
    boolean _activeState -> _activeState
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn getInstance() -> getInstance
    int size() -> size
    void restoreSpawnData() -> restoreSpawnData
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance registerSpawn(int,int[][],int,int,int) -> registerSpawn
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance registerSpawn(int,int,int,int) -> registerSpawn
    boolean removeSpawn(com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance) -> removeSpawn
    void removeSpawn(int) -> removeSpawn
    void setSpawnActive(com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance,boolean) -> setSpawnActive
    void setAllActive(boolean) -> setAllActive
    long getTimeToNextSpawn(com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance) -> getTimeToNextSpawn
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance getAutoSpawnInstance(int,boolean) -> getAutoSpawnInstance
    java.util.Map getAutoSpawnInstances(int) -> getAutoSpawnInstances
    boolean isSpawnRegistered(int) -> isSpawnRegistered
    boolean isSpawnRegistered(com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance) -> isSpawnRegistered
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoDespawner -> com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoDespawner:
    int _objectId -> _objectId
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.spawn.AutoSpawn,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance -> com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawnInstance:
    int _objectId -> _objectId
    int _spawnIndex -> _spawnIndex
    int _npcId -> _npcId
    int _initDelay -> _initDelay
    int _resDelay -> _resDelay
    int _desDelay -> _desDelay
    int _spawnCount -> _spawnCount
    int _lastLocIndex -> _lastLocIndex
    java.util.List _npcList -> _npcList
    java.util.List _locList -> _locList
    boolean _spawnActive -> _spawnActive
    boolean _randomSpawn -> _randomSpawn
    boolean _broadcastAnnouncement -> _broadcastAnnouncement
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.spawn.AutoSpawn,int,int,int,int) -> <init>
    void setSpawnActive(boolean) -> setSpawnActive
    boolean addNpcInstance(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> addNpcInstance
    boolean removeNpcInstance(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> removeNpcInstance
    int getObjectId() -> getObjectId
    int getInitialDelay() -> getInitialDelay
    int getRespawnDelay() -> getRespawnDelay
    int getDespawnDelay() -> getDespawnDelay
    int getNpcId() -> getNpcId
    int getSpawnCount() -> getSpawnCount
    com.l2jfrozen.gameserver.model.Location[] getLocationList() -> getLocationList
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance[] getNPCInstanceList() -> getNPCInstanceList
    com.l2jfrozen.gameserver.model.spawn.L2Spawn[] getSpawns() -> getSpawns
    void setSpawnCount(int) -> setSpawnCount
    void setRandomSpawn(boolean) -> setRandomSpawn
    void setBroadcast(boolean) -> setBroadcast
    boolean isSpawnActive() -> isSpawnActive
    boolean isRandomSpawn() -> isRandomSpawn
    boolean isBroadcasting() -> isBroadcasting
    boolean addSpawnLocation(int,int,int,int) -> addSpawnLocation
    boolean addSpawnLocation(int[]) -> addSpawnLocation
    com.l2jfrozen.gameserver.model.Location removeSpawnLocation(int) -> removeSpawnLocation
com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawner -> com.l2jfrozen.gameserver.model.spawn.AutoSpawn$AutoSpawner:
    int _objectId -> _objectId
    com.l2jfrozen.gameserver.model.spawn.AutoSpawn this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.spawn.AutoSpawn,int) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.spawn.L2GroupSpawn -> com.l2jfrozen.gameserver.model.spawn.L2GroupSpawn:
    java.lang.reflect.Constructor _constructor -> _constructor
    com.l2jfrozen.gameserver.templates.L2NpcTemplate _template -> _template
    void <init>(com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance doGroupSpawn() -> doGroupSpawn
com.l2jfrozen.gameserver.model.spawn.L2Spawn -> com.l2jfrozen.gameserver.model.spawn.L2Spawn:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.templates.L2NpcTemplate _template -> _template
    int _id -> _id
    int _location -> _location
    int _maximumCount -> _maximumCount
    int _currentCount -> _currentCount
    int _scheduledCount -> _scheduledCount
    int _locX -> _locX
    int _locY -> _locY
    int _locZ -> _locZ
    int _heading -> _heading
    int _respawnDelay -> _respawnDelay
    int _respawnMinDelay -> _respawnMinDelay
    int _respawnMaxDelay -> _respawnMaxDelay
    java.lang.reflect.Constructor _constructor -> _constructor
    boolean _doRespawn -> _doRespawn
    int _instanceId -> _instanceId
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _lastSpawn -> _lastSpawn
    java.util.List _spawnListeners -> _spawnListeners
    boolean _customSpawn -> _customSpawn
    boolean _customBossInstance -> _customBossInstance
    void <init>(com.l2jfrozen.gameserver.templates.L2NpcTemplate) -> <init>
    int getAmount() -> getAmount
    int getId() -> getId
    int getLocation() -> getLocation
    int getLocx() -> getLocx
    int getLocy() -> getLocy
    int getLocz() -> getLocz
    int getNpcid() -> getNpcid
    int getHeading() -> getHeading
    int getRespawnDelay() -> getRespawnDelay
    int getRespawnMinDelay() -> getRespawnMinDelay
    int getRespawnMaxDelay() -> getRespawnMaxDelay
    void setAmount(int) -> setAmount
    void setId(int) -> setId
    void setLocation(int) -> setLocation
    void setRespawnMinDelay(int) -> setRespawnMinDelay
    void setRespawnMaxDelay(int) -> setRespawnMaxDelay
    void setLocx(int) -> setLocx
    void setLocy(int) -> setLocy
    void setLocz(int) -> setLocz
    void setHeading(int) -> setHeading
    void setCustom(boolean) -> setCustom
    boolean isCustom() -> isCustom
    boolean is_customBossInstance() -> is_customBossInstance
    void set_customBossInstance(boolean) -> set_customBossInstance
    void decreaseCount(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> decreaseCount
    int init() -> init
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance spawnOne() -> spawnOne
    void stopRespawn() -> stopRespawn
    void startRespawn() -> startRespawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance doSpawn() -> doSpawn
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance intializeNpcInstance(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> intializeNpcInstance
    void addSpawnListener(com.l2jfrozen.gameserver.model.spawn.SpawnListener) -> addSpawnListener
    void removeSpawnListener(com.l2jfrozen.gameserver.model.spawn.SpawnListener) -> removeSpawnListener
    void notifyNpcSpawned(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> notifyNpcSpawned
    void setRespawnDelay(int) -> setRespawnDelay
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance getLastSpawn() -> getLastSpawn
    void respawnNpc(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> respawnNpc
    com.l2jfrozen.gameserver.templates.L2NpcTemplate getTemplate() -> getTemplate
    int getInstanceId() -> getInstanceId
    void setInstanceId(int) -> setInstanceId
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.spawn.L2Spawn$1 -> com.l2jfrozen.gameserver.model.spawn.L2Spawn$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$config$CorrectSpawnsZ -> $SwitchMap$com$l2jfrozen$gameserver$config$CorrectSpawnsZ
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.spawn.L2Spawn$SpawnTask -> com.l2jfrozen.gameserver.model.spawn.L2Spawn$SpawnTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _oldNpc -> _oldNpc
    com.l2jfrozen.gameserver.model.spawn.L2Spawn this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.spawn.L2Spawn,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.spawn.SpawnListener -> com.l2jfrozen.gameserver.model.spawn.SpawnListener:
    void npcSpawned(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> npcSpawned
com.l2jfrozen.gameserver.model.waypoint.WayPointNode -> com.l2jfrozen.gameserver.model.waypoint.WayPointNode:
    int _id -> _id
    java.lang.String _title -> _title
    java.lang.String _type -> _type
    java.lang.String NORMAL -> NORMAL
    java.lang.String SELECTED -> SELECTED
    java.lang.String LINKED -> LINKED
    int _lineId -> _lineId
    java.lang.String LINE_TYPE -> LINE_TYPE
    java.util.Map _linkLists -> _linkLists
    void <init>(int) -> <init>
    boolean isAutoAttackable(com.l2jfrozen.gameserver.model.L2Character) -> isAutoAttackable
    com.l2jfrozen.gameserver.model.waypoint.WayPointNode spawn(java.lang.String,int,int,int,int) -> spawn
    com.l2jfrozen.gameserver.model.waypoint.WayPointNode spawn(boolean,int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> spawn
    com.l2jfrozen.gameserver.model.waypoint.WayPointNode spawn(boolean,int,com.l2jfrozen.common.util.Point3D) -> spawn
    com.l2jfrozen.gameserver.model.waypoint.WayPointNode spawn(com.l2jfrozen.common.util.Point3D) -> spawn
    com.l2jfrozen.gameserver.model.waypoint.WayPointNode spawn(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> spawn
    void onAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onAction
    void setNormalInfo(java.lang.String,int,java.lang.String) -> setNormalInfo
    void setNormalInfo(java.lang.String,int) -> setNormalInfo
    void changeID(int) -> changeID
    void changeID(int,java.lang.String) -> changeID
    void setLinked() -> setLinked
    void setNormal() -> setNormal
    void setSelected() -> setSelected
    boolean isMarker() -> isMarker
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    int getId() -> getId
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    void drawLine(com.l2jfrozen.gameserver.model.waypoint.WayPointNode,com.l2jfrozen.gameserver.model.waypoint.WayPointNode) -> drawLine
    void addLineInfo(com.l2jfrozen.gameserver.model.waypoint.WayPointNode,java.util.List) -> addLineInfo
    void eraseLine(com.l2jfrozen.gameserver.model.waypoint.WayPointNode,com.l2jfrozen.gameserver.model.waypoint.WayPointNode) -> eraseLine
    void eraseLine(com.l2jfrozen.gameserver.model.waypoint.WayPointNode) -> eraseLine
    java.util.List getLineInfo(com.l2jfrozen.gameserver.model.waypoint.WayPointNode) -> getLineInfo
    void setLineId(int) -> setLineId
    java.util.List getLineNodes() -> getLineNodes
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.zone.L2ZoneForm -> com.l2jfrozen.gameserver.model.zone.L2ZoneForm:
    void <init>() -> <init>
    boolean isInsideZone(int,int,int) -> isInsideZone
    boolean intersectsRectangle(int,int,int,int) -> intersectsRectangle
    double getDistanceToZone(int,int) -> getDistanceToZone
    int getLowZ() -> getLowZ
    int getHighZ() -> getHighZ
    boolean lineSegmentsIntersect(int,int,int,int,int,int,int,int) -> lineSegmentsIntersect
    boolean lineIntersectsLine(int,int,int,int,int,int,int,int) -> lineIntersectsLine
    int sameSide(double,double,double,double,double,double,double,double) -> sameSide
    boolean isBetween(double,double,double) -> isBetween
com.l2jfrozen.gameserver.model.zone.L2ZoneManager -> com.l2jfrozen.gameserver.model.zone.L2ZoneManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    javolution.util.FastList _zones -> _zones
    void <init>() -> <init>
    void registerNewZone(com.l2jfrozen.gameserver.model.zone.L2ZoneType) -> registerNewZone
    void unregisterZone(com.l2jfrozen.gameserver.model.zone.L2ZoneType) -> unregisterZone
    void revalidateZones(com.l2jfrozen.gameserver.model.L2Character) -> revalidateZones
    void removeCharacter(com.l2jfrozen.gameserver.model.L2Character) -> removeCharacter
    void onDeath(com.l2jfrozen.gameserver.model.L2Character) -> onDeath
    void onRevive(com.l2jfrozen.gameserver.model.L2Character) -> onRevive
    javolution.util.FastList getZones() -> getZones
com.l2jfrozen.gameserver.model.zone.L2ZoneType -> com.l2jfrozen.gameserver.model.zone.L2ZoneType:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _id -> _id
    com.l2jfrozen.gameserver.model.zone.L2ZoneForm _zone -> _zone
    javolution.util.FastMap _characterList -> _characterList
    boolean _checkAffected -> _checkAffected
    int _minLvl -> _minLvl
    int _maxLvl -> _maxLvl
    int[] _race -> _race
    int[] _class -> _class
    char _classType -> _classType
    void <init>(int) -> <init>
    int getId() -> getId
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void setSpawnLocs(org.w3c.dom.Node) -> setSpawnLocs
    boolean isAffected(com.l2jfrozen.gameserver.model.L2Character) -> isAffected
    void setZone(com.l2jfrozen.gameserver.model.zone.L2ZoneForm) -> setZone
    com.l2jfrozen.gameserver.model.zone.L2ZoneForm getZone() -> getZone
    boolean isInsideZone(int,int,int) -> isInsideZone
    boolean isInsideZone(com.l2jfrozen.gameserver.model.L2Object) -> isInsideZone
    double getDistanceToZone(int,int) -> getDistanceToZone
    double getDistanceToZone(com.l2jfrozen.gameserver.model.L2Object) -> getDistanceToZone
    void revalidateInZone(com.l2jfrozen.gameserver.model.L2Character) -> revalidateInZone
    void removeCharacter(com.l2jfrozen.gameserver.model.L2Character) -> removeCharacter
    boolean isCharacterInZone(com.l2jfrozen.gameserver.model.L2Character) -> isCharacterInZone
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    void broadcastPacket(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> broadcastPacket
    javolution.util.FastMap getCharactersInside() -> getCharactersInside
com.l2jfrozen.gameserver.model.zone.form.ZoneCuboid -> com.l2jfrozen.gameserver.model.zone.form.ZoneCuboid:
    int _x1 -> _x1
    int _x2 -> _x2
    int _y1 -> _y1
    int _y2 -> _y2
    int _z1 -> _z1
    int _z2 -> _z2
    void <init>(int,int,int,int,int,int) -> <init>
    boolean isInsideZone(int,int,int) -> isInsideZone
    boolean intersectsRectangle(int,int,int,int) -> intersectsRectangle
    double getDistanceToZone(int,int) -> getDistanceToZone
    int getLowZ() -> getLowZ
    int getHighZ() -> getHighZ
com.l2jfrozen.gameserver.model.zone.form.ZoneCylinder -> com.l2jfrozen.gameserver.model.zone.form.ZoneCylinder:
    int _x -> _x
    int _y -> _y
    int _z1 -> _z1
    int _z2 -> _z2
    int _rad -> _rad
    int _radS -> _radS
    void <init>(int,int,int,int,int) -> <init>
    boolean isInsideZone(int,int,int) -> isInsideZone
    boolean intersectsRectangle(int,int,int,int) -> intersectsRectangle
    double getDistanceToZone(int,int) -> getDistanceToZone
    int getLowZ() -> getLowZ
    int getHighZ() -> getHighZ
com.l2jfrozen.gameserver.model.zone.form.ZoneNPoly -> com.l2jfrozen.gameserver.model.zone.form.ZoneNPoly:
    int[] _x -> _x
    int[] _y -> _y
    int _z1 -> _z1
    int _z2 -> _z2
    void <init>(int[],int[],int,int) -> <init>
    boolean isInsideZone(int,int,int) -> isInsideZone
    boolean intersectsRectangle(int,int,int,int) -> intersectsRectangle
    double getDistanceToZone(int,int) -> getDistanceToZone
    int getLowZ() -> getLowZ
    int getHighZ() -> getHighZ
com.l2jfrozen.gameserver.model.zone.type.L2ArenaZone -> com.l2jfrozen.gameserver.model.zone.type.L2ArenaZone:
    int[] _spawnLoc -> _spawnLoc
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    void oustAllPlayers() -> oustAllPlayers
    int[] getSpawnLoc() -> getSpawnLoc
com.l2jfrozen.gameserver.model.zone.type.L2BigheadZone -> com.l2jfrozen.gameserver.model.zone.type.L2BigheadZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2BossZone -> com.l2jfrozen.gameserver.model.zone.type.L2BossZone:
    java.lang.String _zoneName -> _zoneName
    int _timeInvade -> _timeInvade
    boolean _enabled -> _enabled
    boolean _IsFlyingEnable -> _IsFlyingEnable
    javolution.util.FastMap _playerAllowedReEntryTimes -> _playerAllowedReEntryTimes
    java.util.List _playersAllowed -> _playersAllowed
    int _bossId -> _bossId
    void <init>(int,int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void movePlayersTo(int,int,int) -> movePlayersTo
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void setZoneEnabled(boolean) -> setZoneEnabled
    java.lang.String getZoneName() -> getZoneName
    int getTimeInvade() -> getTimeInvade
    void setAllowedPlayers(java.util.List) -> setAllowedPlayers
    java.util.List getAllowedPlayers() -> getAllowedPlayers
    boolean isPlayerAllowed(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> isPlayerAllowed
    void oustAllPlayers() -> oustAllPlayers
    void allowPlayerEntry(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> allowPlayerEntry
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    void updateKnownList(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> updateKnownList
    int getBossId() -> getBossId
com.l2jfrozen.gameserver.model.zone.type.L2CastleTeleportZone -> com.l2jfrozen.gameserver.model.zone.type.L2CastleTeleportZone:
    int[] _spawnLoc -> _spawnLoc
    int _castleId -> _castleId
    com.l2jfrozen.gameserver.model.entity.siege.Castle _castle -> _castle
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    javolution.util.FastList getAllPlayers() -> getAllPlayers
    void oustAllPlayers() -> oustAllPlayers
    int[] getSpawn() -> getSpawn
com.l2jfrozen.gameserver.model.zone.type.L2CastleZone -> com.l2jfrozen.gameserver.model.zone.type.L2CastleZone:
    int _castleId -> _castleId
    com.l2jfrozen.gameserver.model.entity.siege.Castle _castle -> _castle
    int[] _spawnLoc -> _spawnLoc
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    void updateZoneStatusForCharactersInside() -> updateZoneStatusForCharactersInside
    void banishForeigners(int) -> banishForeigners
    void announceToPlayers(java.lang.String) -> announceToPlayers
    javolution.util.FastList getAllPlayers() -> getAllPlayers
    int[] getSpawn() -> getSpawn
    boolean isSiegeActive() -> isSiegeActive
com.l2jfrozen.gameserver.model.zone.type.L2ClanHallZone -> com.l2jfrozen.gameserver.model.zone.type.L2ClanHallZone:
    int _clanHallId -> _clanHallId
    int[] _spawnLoc -> _spawnLoc
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    void banishForeigners(int) -> banishForeigners
    javolution.util.FastMap getCharactersInside() -> getCharactersInside
    com.l2jfrozen.gameserver.model.Location getSpawn() -> getSpawn
com.l2jfrozen.gameserver.model.zone.type.L2CustomZone -> com.l2jfrozen.gameserver.model.zone.type.L2CustomZone:
    java.lang.String _zoneName -> _zoneName
    boolean _IsFlyingEnable -> _IsFlyingEnable
    void <init>(int) -> <init>
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    java.lang.String getZoneName() -> getZoneName
    boolean isFlyingEnable() -> isFlyingEnable
com.l2jfrozen.gameserver.model.zone.type.L2DamageZone -> com.l2jfrozen.gameserver.model.zone.type.L2DamageZone:
    int _damagePerSec -> _damagePerSec
    java.util.concurrent.Future _task -> _task
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    java.util.Collection getCharacterList() -> getCharacterList
    int getDamagePerSecond() -> getDamagePerSecond
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2DamageZone$ApplyDamage -> com.l2jfrozen.gameserver.model.zone.type.L2DamageZone$ApplyDamage:
    com.l2jfrozen.gameserver.model.zone.type.L2DamageZone _dmgZone -> _dmgZone
    com.l2jfrozen.gameserver.model.zone.type.L2DamageZone this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.zone.type.L2DamageZone,com.l2jfrozen.gameserver.model.zone.type.L2DamageZone) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.zone.type.L2DerbyTrackZone -> com.l2jfrozen.gameserver.model.zone.type.L2DerbyTrackZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2DynamicZone -> com.l2jfrozen.gameserver.model.zone.type.L2DynamicZone:
    com.l2jfrozen.gameserver.model.L2WorldRegion _region -> _region
    com.l2jfrozen.gameserver.model.L2Character _owner -> _owner
    java.util.concurrent.Future _task -> _task
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    void setTask(java.util.concurrent.Future) -> setTask
    void <init>(com.l2jfrozen.gameserver.model.L2WorldRegion,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void remove() -> remove
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2DynamicZone$1 -> com.l2jfrozen.gameserver.model.zone.type.L2DynamicZone$1:
    com.l2jfrozen.gameserver.model.zone.type.L2DynamicZone this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.zone.type.L2DynamicZone) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.zone.type.L2EffectZone -> com.l2jfrozen.gameserver.model.zone.type.L2EffectZone:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _chance -> _chance
    int _initialDelay -> _initialDelay
    int _reuse -> _reuse
    boolean _enabled -> _enabled
    boolean _isShowDangerIcon -> _isShowDangerIcon
    java.util.concurrent.Future _task -> _task
    javolution.util.FastMap _skills -> _skills
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    com.l2jfrozen.gameserver.model.L2Skill getSkill(int,int) -> getSkill
    int getChance() -> getChance
    boolean isEnabled() -> isEnabled
    void addSkill(int,int) -> addSkill
    void removeSkill(int) -> removeSkill
    void clearSkills() -> clearSkills
    int getSkillLevel(int) -> getSkillLevel
    void setZoneEnabled(boolean) -> setZoneEnabled
    java.util.Collection getCharacterList() -> getCharacterList
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.model.zone.type.L2EffectZone$ApplySkill -> com.l2jfrozen.gameserver.model.zone.type.L2EffectZone$ApplySkill:
    com.l2jfrozen.gameserver.model.zone.type.L2EffectZone this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.zone.type.L2EffectZone) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.zone.type.L2FishingZone -> com.l2jfrozen.gameserver.model.zone.type.L2FishingZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    int getWaterZ() -> getWaterZ
com.l2jfrozen.gameserver.model.zone.type.L2FortZone -> com.l2jfrozen.gameserver.model.zone.type.L2FortZone:
    int _fortId -> _fortId
    com.l2jfrozen.gameserver.model.entity.siege.Fort _fort -> _fort
    int[] _spawnLoc -> _spawnLoc
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    void updateZoneStatusForCharactersInside() -> updateZoneStatusForCharactersInside
    void banishForeigners(int) -> banishForeigners
    void announceToPlayers(java.lang.String) -> announceToPlayers
    javolution.util.FastList getAllPlayers() -> getAllPlayers
    int[] getSpawn() -> getSpawn
com.l2jfrozen.gameserver.model.zone.type.L2JailZone -> com.l2jfrozen.gameserver.model.zone.type.L2JailZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2JailZone$BackToJail -> com.l2jfrozen.gameserver.model.zone.type.L2JailZone$BackToJail:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.zone.type.L2MotherTreeZone -> com.l2jfrozen.gameserver.model.zone.type.L2MotherTreeZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2NoHqZone -> com.l2jfrozen.gameserver.model.zone.type.L2NoHqZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2NoLandingZone -> com.l2jfrozen.gameserver.model.zone.type.L2NoLandingZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2NoStoreZone -> com.l2jfrozen.gameserver.model.zone.type.L2NoStoreZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2OlympiadStadiumZone -> com.l2jfrozen.gameserver.model.zone.type.L2OlympiadStadiumZone:
    int _stadiumId -> _stadiumId
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    int getStadiumId() -> getStadiumId
com.l2jfrozen.gameserver.model.zone.type.L2PeaceZone -> com.l2jfrozen.gameserver.model.zone.type.L2PeaceZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2PoisonZone -> com.l2jfrozen.gameserver.model.zone.type.L2PoisonZone:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _skillId -> _skillId
    int _chance -> _chance
    int _initialDelay -> _initialDelay
    int _skillLvl -> _skillLvl
    int _reuse -> _reuse
    boolean _enabled -> _enabled
    java.lang.String _target -> _target
    java.util.concurrent.Future _task -> _task
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    com.l2jfrozen.gameserver.model.L2Skill getSkill() -> getSkill
    java.lang.String getTargetType() -> getTargetType
    boolean isEnabled() -> isEnabled
    int getChance() -> getChance
    void setZoneEnabled(boolean) -> setZoneEnabled
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2PoisonZone$ApplySkill -> com.l2jfrozen.gameserver.model.zone.type.L2PoisonZone$ApplySkill:
    com.l2jfrozen.gameserver.model.zone.type.L2PoisonZone this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.model.zone.type.L2PoisonZone) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.model.zone.type.L2ScriptZone -> com.l2jfrozen.gameserver.model.zone.type.L2ScriptZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2SwampZone -> com.l2jfrozen.gameserver.model.zone.type.L2SwampZone:
    int _move_bonus -> _move_bonus
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    int getMoveBonus() -> getMoveBonus
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
com.l2jfrozen.gameserver.model.zone.type.L2TownZone -> com.l2jfrozen.gameserver.model.zone.type.L2TownZone:
    java.lang.String _townName -> _townName
    int _townId -> _townId
    int _redirectTownId -> _redirectTownId
    int _taxById -> _taxById
    boolean _noPeace -> _noPeace
    javolution.util.FastList _spawnLoc -> _spawnLoc
    void <init>(int) -> <init>
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void setSpawnLocs(org.w3c.dom.Node) -> setSpawnLocs
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    java.lang.String getName() -> getName
    int getTownId() -> getTownId
    int getRedirectTownId() -> getRedirectTownId
    int[] getSpawnLoc() -> getSpawnLoc
    int getTaxById() -> getTaxById
com.l2jfrozen.gameserver.model.zone.type.L2WaterZone -> com.l2jfrozen.gameserver.model.zone.type.L2WaterZone:
    void <init>(int) -> <init>
    void onEnter(com.l2jfrozen.gameserver.model.L2Character) -> onEnter
    void onExit(com.l2jfrozen.gameserver.model.L2Character) -> onExit
    void onDieInside(com.l2jfrozen.gameserver.model.L2Character) -> onDieInside
    void onReviveInside(com.l2jfrozen.gameserver.model.L2Character) -> onReviveInside
    int getWaterZ() -> getWaterZ
com.l2jfrozen.gameserver.network.BlowFishKeygen -> com.l2jfrozen.gameserver.network.BlowFishKeygen:
    int CRYPT_KEYS_SIZE -> CRYPT_KEYS_SIZE
    byte[][] CRYPT_KEYS -> CRYPT_KEYS
    void <init>() -> <init>
    byte[] getRandomKey() -> getRandomKey
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.ClientStats -> com.l2jfrozen.gameserver.network.ClientStats:
    int processedPackets -> processedPackets
    int droppedPackets -> droppedPackets
    int unknownPackets -> unknownPackets
    int totalQueueSize -> totalQueueSize
    int maxQueueSize -> maxQueueSize
    int totalBursts -> totalBursts
    int maxBurstSize -> maxBurstSize
    int shortFloods -> shortFloods
    int longFloods -> longFloods
    int totalQueueOverflows -> totalQueueOverflows
    int totalUnderflowExceptions -> totalUnderflowExceptions
    int[] _packetsInSecond -> _packetsInSecond
    long _packetCountStartTick -> _packetCountStartTick
    int _head -> _head
    int _totalCount -> _totalCount
    int _floodsInMin -> _floodsInMin
    long _floodStartTick -> _floodStartTick
    int _unknownPacketsInMin -> _unknownPacketsInMin
    long _unknownPacketStartTick -> _unknownPacketStartTick
    int _overflowsInMin -> _overflowsInMin
    long _overflowStartTick -> _overflowStartTick
    int _underflowReadsInMin -> _underflowReadsInMin
    long _underflowReadStartTick -> _underflowReadStartTick
    boolean _floodDetected -> _floodDetected
    boolean _queueOverflowDetected -> _queueOverflowDetected
    int BUFFER_SIZE -> BUFFER_SIZE
    void <init>() -> <init>
    boolean dropPacket() -> dropPacket
    boolean countPacket(int) -> countPacket
    boolean countUnknownPacket() -> countUnknownPacket
    boolean countBurst(int) -> countBurst
    boolean countQueueOverflow() -> countQueueOverflow
    boolean countUnderflowException() -> countUnderflowException
    boolean countFloods() -> countFloods
    boolean longFloodDetected() -> longFloodDetected
    boolean countPacket() -> countPacket
com.l2jfrozen.gameserver.network.CustomPacketHandlerInterface -> com.l2jfrozen.gameserver.network.CustomPacketHandlerInterface:
    com.l2jfrozen.gameserver.network.clientpackets.L2GameClientPacket handlePacket(java.nio.ByteBuffer,com.l2jfrozen.gameserver.network.L2GameClient) -> handlePacket
com.l2jfrozen.gameserver.network.Disconnection -> com.l2jfrozen.gameserver.network.Disconnection:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.network.GameClientState -> com.l2jfrozen.gameserver.network.GameClientState:
    com.l2jfrozen.gameserver.network.GameClientState CONNECTED -> CONNECTED
    com.l2jfrozen.gameserver.network.GameClientState AUTHED -> AUTHED
    com.l2jfrozen.gameserver.network.GameClientState IN_GAME -> IN_GAME
    com.l2jfrozen.gameserver.network.GameClientState[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.network.GameClientState[] values() -> values
    com.l2jfrozen.gameserver.network.GameClientState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.GameCrypt -> com.l2jfrozen.gameserver.network.GameCrypt:
    byte[] _inKey -> _inKey
    byte[] _outKey -> _outKey
    boolean _isEnabled -> _isEnabled
    void <init>() -> <init>
    void setKey(byte[]) -> setKey
    void decrypt(byte[],int,int) -> decrypt
    void encrypt(byte[],int,int) -> encrypt
com.l2jfrozen.gameserver.network.L2GameClient -> com.l2jfrozen.gameserver.network.L2GameClient:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.util.FloodProtectors _floodProtectors -> _floodProtectors
    com.l2jfrozen.gameserver.network.GameClientState state -> state
    java.lang.String accountName -> accountName
    com.l2jfrozen.netcore.SessionKey sessionId -> sessionId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance activeChar -> activeChar
    java.util.concurrent.locks.ReentrantLock _activeCharLock -> _activeCharLock
    boolean _isAuthedGG -> _isAuthedGG
    long _connectionStartTime -> _connectionStartTime
    java.util.List _charSlotMapping -> _charSlotMapping
    java.util.concurrent.ScheduledFuture _cleanupTask -> _cleanupTask
    com.l2jfrozen.gameserver.network.ClientStats _stats -> _stats
    com.l2jfrozen.gameserver.network.GameCrypt crypt -> crypt
    long packetsNextSendTick -> packetsNextSendTick
    int unknownPacketCount -> unknownPacketCount
    boolean _closenow -> _closenow
    boolean _isDetached -> _isDetached
    boolean _forcedToClose -> _forcedToClose
    java.util.concurrent.ArrayBlockingQueue _packetQueue -> _packetQueue
    java.util.concurrent.locks.ReentrantLock _queueLock -> _queueLock
    long _last_received_packet_action_time -> _last_received_packet_action_time
    void <init>(com.l2jfrozen.netcore.MMOConnection) -> <init>
    byte[] enableCrypt() -> enableCrypt
    com.l2jfrozen.gameserver.network.GameClientState getState() -> getState
    void setState(com.l2jfrozen.gameserver.network.GameClientState) -> setState
    com.l2jfrozen.gameserver.network.ClientStats getStats() -> getStats
    long getConnectionStartTime() -> getConnectionStartTime
    boolean decrypt(java.nio.ByteBuffer,int) -> decrypt
    boolean encrypt(java.nio.ByteBuffer,int) -> encrypt
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getActiveChar() -> getActiveChar
    void setActiveChar(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setActiveChar
    java.util.concurrent.locks.ReentrantLock getActiveCharLock() -> getActiveCharLock
    boolean isAuthedGG() -> isAuthedGG
    void setGameGuardOk(boolean) -> setGameGuardOk
    void setAccountName(java.lang.String) -> setAccountName
    java.lang.String getAccountName() -> getAccountName
    void setSessionId(com.l2jfrozen.netcore.SessionKey) -> setSessionId
    com.l2jfrozen.netcore.SessionKey getSessionId() -> getSessionId
    void sendPacket(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> sendPacket
    boolean isDetached() -> isDetached
    void setDetached(boolean) -> setDetached
    byte markToDeleteChar(int) -> markToDeleteChar
    void markRestoredChar(int) -> markRestoredChar
    void deleteCharByObjId(int) -> deleteCharByObjId
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance loadCharFromDisk(int) -> loadCharFromDisk
    void setCharSelection(com.l2jfrozen.gameserver.model.CharSelectInfoPackage[]) -> setCharSelection
    void close(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> close
    int getObjectIdForSlot(int) -> getObjectIdForSlot
    void onForcedDisconnection(boolean) -> onForcedDisconnection
    void onDisconnection() -> onDisconnection
    void closeNow() -> closeNow
    void close(int) -> close
    java.lang.String toString() -> toString
    com.l2jfrozen.gameserver.util.FloodProtectors getFloodProtectors() -> getFloodProtectors
    boolean checkUnknownPackets() -> checkUnknownPackets
    boolean cancelCleanup() -> cancelCleanup
    boolean dropPacket() -> dropPacket
    void onBufferUnderflow() -> onBufferUnderflow
    void execute(com.l2jfrozen.netcore.ReceivablePacket) -> e
    void run() -> run
    boolean is_forcedToClose() -> is_forcedToClose
    boolean isConnectionAlive() -> isConnectionAlive
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.L2GameClient$1 -> com.l2jfrozen.gameserver.network.L2GameClient$1:
    com.l2jfrozen.gameserver.network.L2GameClient this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.L2GameClient) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.network.L2GameClient$2 -> com.l2jfrozen.gameserver.network.L2GameClient$2:
    int[] $SwitchMap$com$l2jfrozen$gameserver$network$GameClientState -> $SwitchMap$com$l2jfrozen$gameserver$network$GameClientState
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.L2GameClient$CleanupTask -> com.l2jfrozen.gameserver.network.L2GameClient$CleanupTask:
    com.l2jfrozen.gameserver.network.L2GameClient this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.L2GameClient) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.network.L2GameClient$DisconnectTask -> com.l2jfrozen.gameserver.network.L2GameClient$DisconnectTask:
    com.l2jfrozen.gameserver.network.L2GameClient this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.L2GameClient) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.network.L2GamePacketHandler -> com.l2jfrozen.gameserver.network.L2GamePacketHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    com.l2jfrozen.netcore.ReceivablePacket handlePacket(java.nio.ByteBuffer,com.l2jfrozen.gameserver.network.L2GameClient) -> handlePacket
    void printDebug(int,java.nio.ByteBuffer,com.l2jfrozen.gameserver.network.GameClientState,com.l2jfrozen.gameserver.network.L2GameClient) -> printDebug
    void printDebugDoubleOpcode(int,int,java.nio.ByteBuffer,com.l2jfrozen.gameserver.network.GameClientState,com.l2jfrozen.gameserver.network.L2GameClient) -> printDebugDoubleOpcode
    com.l2jfrozen.gameserver.network.L2GameClient create(com.l2jfrozen.netcore.MMOConnection) -> create
    void execute(com.l2jfrozen.netcore.ReceivablePacket) -> e
    com.l2jfrozen.netcore.ReceivablePacket handlePacket(java.nio.ByteBuffer,com.l2jfrozen.netcore.MMOClient) -> h
    com.l2jfrozen.netcore.MMOClient create(com.l2jfrozen.netcore.MMOConnection) -> c
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.L2GamePacketHandler$1 -> com.l2jfrozen.gameserver.network.L2GamePacketHandler$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$network$GameClientState -> $SwitchMap$com$l2jfrozen$gameserver$network$GameClientState
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.PacketHistory -> com.l2jfrozen.gameserver.network.PacketHistory:
    java.util.Map _info -> _info
    long _timeStamp -> _timeStamp
    javolution.xml.XMLFormat PACKET_HISTORY_XML -> PACKET_HISTORY_XML
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.PacketHistory$1 -> com.l2jfrozen.gameserver.network.PacketHistory$1:
    void <init>(java.lang.Class) -> <init>
    void read(javolution.xml.XMLFormat$InputElement,com.l2jfrozen.gameserver.network.PacketHistory) -> read
    void write(com.l2jfrozen.gameserver.network.PacketHistory,javolution.xml.XMLFormat$OutputElement) -> write
    void read(javolution.xml.XMLFormat$InputElement,java.lang.Object) -> read
    void write(java.lang.Object,javolution.xml.XMLFormat$OutputElement) -> write
com.l2jfrozen.gameserver.network.SystemChatChannelId -> com.l2jfrozen.gameserver.network.SystemChatChannelId:
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_NORMAL -> CHAT_NORMAL
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_SHOUT -> CHAT_SHOUT
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_TELL -> CHAT_TELL
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_PARTY -> CHAT_PARTY
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_CLAN -> CHAT_CLAN
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_SYSTEM -> CHAT_SYSTEM
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_USER_PET -> CHAT_USER_PET
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_GM_PET -> CHAT_GM_PET
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_MARKET -> CHAT_MARKET
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_ALLIANCE -> CHAT_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_ANNOUNCE -> CHAT_ANNOUNCE
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_CUSTOM -> CHAT_CUSTOM
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_L2FRIEND -> CHAT_L2FRIEND
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_MSN -> CHAT_MSN
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_PARTY_ROOM -> CHAT_PARTY_ROOM
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_COMMANDER -> CHAT_COMMANDER
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_INNER_PARTYMASTER -> CHAT_INNER_PARTYMASTER
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_HERO -> CHAT_HERO
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_CRITICAL_ANNOUNCE -> CHAT_CRITICAL_ANNOUNCE
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_UNKNOWN -> CHAT_UNKNOWN
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_BATTLEFIELD -> CHAT_BATTLEFIELD
    com.l2jfrozen.gameserver.network.SystemChatChannelId CHAT_NONE -> CHAT_NONE
    java.lang.String _channelName -> _channelName
    com.l2jfrozen.gameserver.network.SystemChatChannelId[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.network.SystemChatChannelId[] values() -> values
    com.l2jfrozen.gameserver.network.SystemChatChannelId valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    int getId() -> getId
    java.lang.String getName() -> getName
    com.l2jfrozen.gameserver.network.SystemChatChannelId getChatType(int) -> getChatType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.SystemMessageId -> com.l2jfrozen.gameserver.network.SystemMessageId:
    com.l2jfrozen.gameserver.network.SystemMessageId THE_SERVER_WILL_BE_COMING_DOWN_IN_S1_SECONDS -> THE_SERVER_WILL_BE_COMING_DOWN_IN_S1_SECONDS
    com.l2jfrozen.gameserver.network.SystemMessageId PAYMENT_FOR_YOUR_CLAN_HALL_HAS_NOT_BEEN_MADE_PLEASE_MAKE_PAYMENT_TO_YOUR_CLAN_WAREHOUSE_BY_S1_TOMORROW -> PAYMENT_FOR_YOUR_CLAN_HALL_HAS_NOT_BEEN_MADE_PLEASE_MAKE_PAYMENT_TO_YOUR_CLAN_WAREHOUSE_BY_S1_TOMORROW
    com.l2jfrozen.gameserver.network.SystemMessageId THE_CLAN_HALL_FEE_IS_ONE_WEEK_OVERDUE_THEREFORE_THE_CLAN_HALL_OWNERSHIP_HAS_BEEN_REVOKED -> THE_CLAN_HALL_FEE_IS_ONE_WEEK_OVERDUE_THEREFORE_THE_CLAN_HALL_OWNERSHIP_HAS_BEEN_REVOKED
    com.l2jfrozen.gameserver.network.SystemMessageId TARGET_IN_PEACEZONE -> TARGET_IN_PEACEZONE
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_ATK_PEACEZONE -> CANT_ATK_PEACEZONE
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_ENOUGH_HP -> NOT_ENOUGH_HP
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_ENOUGH_MP -> NOT_ENOUGH_MP
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_ENOUGH_ITEMS -> NOT_ENOUGH_ITEMS
    com.l2jfrozen.gameserver.network.SystemMessageId USE_S1 -> USE_S1
    com.l2jfrozen.gameserver.network.SystemMessageId S1_PREPARED_FOR_REUSE -> S1_PREPARED_FOR_REUSE
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_FEEL_S1_EFFECT -> YOU_FEEL_S1_EFFECT
    com.l2jfrozen.gameserver.network.SystemMessageId REJUVENATING_HP -> REJUVENATING_HP
    com.l2jfrozen.gameserver.network.SystemMessageId REJUVENATING_MP -> REJUVENATING_MP
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_USE_ITEM_WHILE_USING_MAGIC -> CANNOT_USE_ITEM_WHILE_USING_MAGIC
    com.l2jfrozen.gameserver.network.SystemMessageId CASTING_INTERRUPTED -> CASTING_INTERRUPTED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_WAS_UNAFFECTED_BY_S2 -> S1_WAS_UNAFFECTED_BY_S2
    com.l2jfrozen.gameserver.network.SystemMessageId DRAIN_HALF_SUCCESFUL -> DRAIN_HALF_SUCCESFUL
    com.l2jfrozen.gameserver.network.SystemMessageId RESISTED_S1_DRAIN -> RESISTED_S1_DRAIN
    com.l2jfrozen.gameserver.network.SystemMessageId ATTACK_FAILED -> ATTACK_FAILED
    com.l2jfrozen.gameserver.network.SystemMessageId RESISTED_S1_MAGIC -> RESISTED_S1_MAGIC
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HP_RESTORED -> S1_HP_RESTORED
    com.l2jfrozen.gameserver.network.SystemMessageId S2_HP_RESTORED_BY_S1 -> S2_HP_RESTORED_BY_S1
    com.l2jfrozen.gameserver.network.SystemMessageId S1_MP_RESTORED -> S1_MP_RESTORED
    com.l2jfrozen.gameserver.network.SystemMessageId S2_MP_RESTORED_BY_S1 -> S2_MP_RESTORED_BY_S1
    com.l2jfrozen.gameserver.network.SystemMessageId S2_MP_HAS_BEEN_DRAINED_BY_S1 -> S2_MP_HAS_BEEN_DRAINED_BY_S1
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_OPPONENTS_MP_WAS_REDUCED_BY_S1 -> YOUR_OPPONENTS_MP_WAS_REDUCED_BY_S1
    com.l2jfrozen.gameserver.network.SystemMessageId TARGET_CANT_FOUND -> TARGET_CANT_FOUND
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_USE_ON_YOURSELF -> CANNOT_USE_ON_YOURSELF
    com.l2jfrozen.gameserver.network.SystemMessageId EARNED_ADENA -> EARNED_ADENA
    com.l2jfrozen.gameserver.network.SystemMessageId EARNED_S2_S1_S -> EARNED_S2_S1_S
    com.l2jfrozen.gameserver.network.SystemMessageId EARNED_ITEM -> EARNED_ITEM
    com.l2jfrozen.gameserver.network.SystemMessageId DISSAPEARED_ITEM -> DISSAPEARED_ITEM
    com.l2jfrozen.gameserver.network.SystemMessageId DISSAPEARED_ADENA -> DISSAPEARED_ADENA
    com.l2jfrozen.gameserver.network.SystemMessageId SOUL_CRYSTAL_ABSORBING_SUCCEEDED -> SOUL_CRYSTAL_ABSORBING_SUCCEEDED
    com.l2jfrozen.gameserver.network.SystemMessageId SOUL_CRYSTAL_ABSORBING_FAILED -> SOUL_CRYSTAL_ABSORBING_FAILED
    com.l2jfrozen.gameserver.network.SystemMessageId SOUL_CRYSTAL_BROKE -> SOUL_CRYSTAL_BROKE
    com.l2jfrozen.gameserver.network.SystemMessageId SOUL_CRYSTAL_ABSORBING_FAILED_RESONATION -> SOUL_CRYSTAL_ABSORBING_FAILED_RESONATION
    com.l2jfrozen.gameserver.network.SystemMessageId SOUL_CRYSTAL_ABSORBING_REFUSED -> SOUL_CRYSTAL_ABSORBING_REFUSED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DID_S1_DMG -> YOU_DID_S1_DMG
    com.l2jfrozen.gameserver.network.SystemMessageId S1_GAVE_YOU_S2_DMG -> S1_GAVE_YOU_S2_DMG
    com.l2jfrozen.gameserver.network.SystemMessageId EFFECT_S1_DISAPPEARED -> EFFECT_S1_DISAPPEARED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_EARNED_S1_EXP_AND_S2_SP -> YOU_EARNED_S1_EXP_AND_S2_SP
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_INCREASED_YOUR_LEVEL -> YOU_INCREASED_YOUR_LEVEL
    com.l2jfrozen.gameserver.network.SystemMessageId NOTHING_HAPPENED -> NOTHING_HAPPENED
    com.l2jfrozen.gameserver.network.SystemMessageId ITEM_MISSING_TO_LEARN_SKILL -> ITEM_MISSING_TO_LEARN_SKILL
    com.l2jfrozen.gameserver.network.SystemMessageId LEARNED_SKILL_S1 -> LEARNED_SKILL_S1
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_ENOUGH_SP_TO_LEARN_SKILL -> NOT_ENOUGH_SP_TO_LEARN_SKILL
    com.l2jfrozen.gameserver.network.SystemMessageId DO_NOT_HAVE_FURTHER_SKILLS_TO_LEARN -> DO_NOT_HAVE_FURTHER_SKILLS_TO_LEARN
    com.l2jfrozen.gameserver.network.SystemMessageId NO_MORE_SKILLS_TO_LEARN -> NO_MORE_SKILLS_TO_LEARN
    com.l2jfrozen.gameserver.network.SystemMessageId FALL_DAMAGE_S1 -> FALL_DAMAGE_S1
    com.l2jfrozen.gameserver.network.SystemMessageId DROWN_DAMAGE_S1 -> DROWN_DAMAGE_S1
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DROPPED_S1 -> YOU_DROPPED_S1
    com.l2jfrozen.gameserver.network.SystemMessageId TARGET_IS_NOT_FOUND_IN_THE_GAME -> TARGET_IS_NOT_FOUND_IN_THE_GAME
    com.l2jfrozen.gameserver.network.SystemMessageId TARGET_MUST_BE_IN_CLAN -> TARGET_MUST_BE_IN_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_MUST_SELECT_A_TARGET -> YOU_MUST_SELECT_A_TARGET
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_BE_RESURRECTED_DURING_SIEGE -> CANNOT_BE_RESURRECTED_DURING_SIEGE
    com.l2jfrozen.gameserver.network.SystemMessageId SOULSHOTS_GRADE_MISMATCH -> SOULSHOTS_GRADE_MISMATCH
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_ENOUGH_SOULSHOTS -> NOT_ENOUGH_SOULSHOTS
    com.l2jfrozen.gameserver.network.SystemMessageId ENABLED_SOULSHOT -> ENABLED_SOULSHOT
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_USE_SOULSHOTS -> CANNOT_USE_SOULSHOTS
    com.l2jfrozen.gameserver.network.SystemMessageId SPIRITSHOTS_GRADE_MISMATCH -> SPIRITSHOTS_GRADE_MISMATCH
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_ENOUGH_SPIRITSHOTS -> NOT_ENOUGH_SPIRITSHOTS
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_USE_SPIRITSHOTS -> CANNOT_USE_SPIRITSHOTS
    com.l2jfrozen.gameserver.network.SystemMessageId ENABLED_SPIRITSHOT -> ENABLED_SPIRITSHOT
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CP_WILL_BE_RESTORED -> S1_CP_WILL_BE_RESTORED
    com.l2jfrozen.gameserver.network.SystemMessageId USE_OF_S1_WILL_BE_AUTO -> USE_OF_S1_WILL_BE_AUTO
    com.l2jfrozen.gameserver.network.SystemMessageId AUTO_USE_OF_S1_CANCELLED -> AUTO_USE_OF_S1_CANCELLED
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_CREATED_WHILE_ENGAGED_IN_TRADING -> CANNOT_CREATED_WHILE_ENGAGED_IN_TRADING
    com.l2jfrozen.gameserver.network.SystemMessageId SKILL_REMOVED_DUE_LACK_MP -> SKILL_REMOVED_DUE_LACK_MP
    com.l2jfrozen.gameserver.network.SystemMessageId SKILL_REMOVED_DUE_LACK_HP -> SKILL_REMOVED_DUE_LACK_HP
    com.l2jfrozen.gameserver.network.SystemMessageId S1_IS_NOT_ONLINE -> S1_IS_NOT_ONLINE
    com.l2jfrozen.gameserver.network.SystemMessageId GETTING_READY_TO_SHOOT_AN_ARROW -> GETTING_READY_TO_SHOOT_AN_ARROW
    com.l2jfrozen.gameserver.network.SystemMessageId AVOIDED_S1S_ATTACK -> AVOIDED_S1S_ATTACK
    com.l2jfrozen.gameserver.network.SystemMessageId MISSED_TARGET -> MISSED_TARGET
    com.l2jfrozen.gameserver.network.SystemMessageId CRITICAL_HIT -> CRITICAL_HIT
    com.l2jfrozen.gameserver.network.SystemMessageId CRITICAL_HIT_BY_PET -> CRITICAL_HIT_BY_PET
    com.l2jfrozen.gameserver.network.SystemMessageId CRITICAL_HIT_BY_SUMMONED_MOB -> CRITICAL_HIT_BY_SUMMONED_MOB
    com.l2jfrozen.gameserver.network.SystemMessageId CRITICAL_HIT_MAGIC -> CRITICAL_HIT_MAGIC
    com.l2jfrozen.gameserver.network.SystemMessageId SHIELD_DEFENCE_SUCCESSFULL -> SHIELD_DEFENCE_SUCCESSFULL
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_EXCELLENT_SHIELD_DEFENSE_WAS_A_SUCCESS -> YOUR_EXCELLENT_SHIELD_DEFENSE_WAS_A_SUCCESS
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_KARMA_HAS_BEEN_CHANGED_TO -> YOUR_KARMA_HAS_BEEN_CHANGED_TO
    com.l2jfrozen.gameserver.network.SystemMessageId OVER_HIT -> OVER_HIT
    com.l2jfrozen.gameserver.network.SystemMessageId ACQUIRED_BONUS_EXPERIENCE_THROUGH_OVER_HIT -> ACQUIRED_BONUS_EXPERIENCE_THROUGH_OVER_HIT
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_MOVE_SITTING -> CANT_MOVE_SITTING
    com.l2jfrozen.gameserver.network.SystemMessageId SYMBOL_ADDED -> SYMBOL_ADDED
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_DRAW_SYMBOL -> CANT_DRAW_SYMBOL
    com.l2jfrozen.gameserver.network.SystemMessageId SKILL_NOT_AVAILABLE -> SKILL_NOT_AVAILABLE
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_SEE_TARGET -> CANT_SEE_TARGET
    com.l2jfrozen.gameserver.network.SystemMessageId SWEEPER_FAILED_TARGET_NOT_SPOILED -> SWEEPER_FAILED_TARGET_NOT_SPOILED
    com.l2jfrozen.gameserver.network.SystemMessageId ALREDAY_SPOILED -> ALREDAY_SPOILED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_SWEEPED_UP_S2_S3 -> S1_SWEEPED_UP_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId S1_SWEEPED_UP_S2 -> S1_SWEEPED_UP_S2
    com.l2jfrozen.gameserver.network.SystemMessageId SPOIL_SUCCESS -> SPOIL_SUCCESS
    com.l2jfrozen.gameserver.network.SystemMessageId SPOIL_CANNOT_USE -> SPOIL_CANNOT_USE
    com.l2jfrozen.gameserver.network.SystemMessageId SWEEP_NOT_ALLOWED -> SWEEP_NOT_ALLOWED
    com.l2jfrozen.gameserver.network.SystemMessageId WAITING_FOR_REPLY -> WAITING_FOR_REPLY
    com.l2jfrozen.gameserver.network.SystemMessageId S1_INVITED_YOU_TO_PARTY_FINDER_KEEPER -> S1_INVITED_YOU_TO_PARTY_FINDER_KEEPER
    com.l2jfrozen.gameserver.network.SystemMessageId S1_INVITED_YOU_TO_PARTY_RANDOM -> S1_INVITED_YOU_TO_PARTY_RANDOM
    com.l2jfrozen.gameserver.network.SystemMessageId S1_INVITED_YOU_TO_PARTY -> S1_INVITED_YOU_TO_PARTY
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_INVITED_S1_TO_PARTY -> YOU_INVITED_S1_TO_PARTY
    com.l2jfrozen.gameserver.network.SystemMessageId OTHER_PARTY_IS_DROZEN -> OTHER_PARTY_IS_DROZEN
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_JOINED_S1_PARTY -> YOU_JOINED_S1_PARTY
    com.l2jfrozen.gameserver.network.SystemMessageId S1_JOINED_PARTY -> S1_JOINED_PARTY
    com.l2jfrozen.gameserver.network.SystemMessageId S1_LEFT_PARTY -> S1_LEFT_PARTY
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_LEFT_PARTY -> YOU_LEFT_PARTY
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_LEADER_CAN_INVITE -> ONLY_LEADER_CAN_INVITE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_DID_NOT_REPLY -> S1_DID_NOT_REPLY
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DID_NOT_REPLY -> YOU_DID_NOT_REPLY
    com.l2jfrozen.gameserver.network.SystemMessageId PLAYER_DECLINED -> PLAYER_DECLINED
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_FULL -> PARTY_FULL
    com.l2jfrozen.gameserver.network.SystemMessageId S1_IS_ALREADY_IN_PARTY -> S1_IS_ALREADY_IN_PARTY
    com.l2jfrozen.gameserver.network.SystemMessageId INVITED_USER_NOT_ONLINE -> INVITED_USER_NOT_ONLINE
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_DISPERSED -> PARTY_DISPERSED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_BECOME_A_PARTY_LEADER -> S1_HAS_BECOME_A_PARTY_LEADER
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_A_PARTY_LEADER_CAN_TRANSFER_ONES_RIGHTS_TO_ANOTHER_PLAYER -> ONLY_A_PARTY_LEADER_CAN_TRANSFER_ONES_RIGHTS_TO_ANOTHER_PLAYER
    com.l2jfrozen.gameserver.network.SystemMessageId PLEASE_SELECT_THE_PERSON_TO_WHOM_YOU_WOULD_LIKE_TO_TRANSFER_THE_RIGHTS_OF_A_PARTY_LEADER -> PLEASE_SELECT_THE_PERSON_TO_WHOM_YOU_WOULD_LIKE_TO_TRANSFER_THE_RIGHTS_OF_A_PARTY_LEADER
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_TRANSFER_RIGHTS_TO_YOURSELF -> YOU_CANNOT_TRANSFER_RIGHTS_TO_YOURSELF
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CAN_TRANSFER_RIGHTS_ONLY_TO_ANOTHER_PARTY_MEMBER -> YOU_CAN_TRANSFER_RIGHTS_ONLY_TO_ANOTHER_PARTY_MEMBER
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_FAILED_TO_TRANSFER_THE_PARTY_LEADER_RIGHTS -> YOU_HAVE_FAILED_TO_TRANSFER_THE_PARTY_LEADER_RIGHTS
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_INFORMATION -> PARTY_INFORMATION
    com.l2jfrozen.gameserver.network.SystemMessageId LOOTING_FINDERS_KEEPERS -> LOOTING_FINDERS_KEEPERS
    com.l2jfrozen.gameserver.network.SystemMessageId LOOTING_BY_TURN -> LOOTING_BY_TURN
    com.l2jfrozen.gameserver.network.SystemMessageId LOOTING_BY_TURN_INCLUDE_SPOIL -> LOOTING_BY_TURN_INCLUDE_SPOIL
    com.l2jfrozen.gameserver.network.SystemMessageId LOOTING_RANDOM -> LOOTING_RANDOM
    com.l2jfrozen.gameserver.network.SystemMessageId LOOTING_RANDOM_INCLUDE_SPOIL -> LOOTING_RANDOM_INCLUDE_SPOIL
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_LEADER_S1 -> PARTY_LEADER_S1
    com.l2jfrozen.gameserver.network.SystemMessageId JOINED_COMMAND_CHANNEL -> JOINED_COMMAND_CHANNEL
    com.l2jfrozen.gameserver.network.SystemMessageId COMMAND_CHANNEL_DISBANDED -> COMMAND_CHANNEL_DISBANDED
    com.l2jfrozen.gameserver.network.SystemMessageId COMMAND_CHANNEL_LEADER_NOW_S1 -> COMMAND_CHANNEL_LEADER_NOW_S1
    com.l2jfrozen.gameserver.network.SystemMessageId WEIGHT_LIMIT_EXCEEDED -> WEIGHT_LIMIT_EXCEEDED
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_ENOUGH_ARROWS -> NOT_ENOUGH_ARROWS
    com.l2jfrozen.gameserver.network.SystemMessageId SLOTS_FULL -> SLOTS_FULL
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DISCARD_EXCHANGE_ITEM -> CANNOT_DISCARD_EXCHANGE_ITEM
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DISCARD_DISTANCE_TOO_FAR -> CANNOT_DISCARD_DISTANCE_TOO_FAR
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DISCARD_THIS_ITEM -> CANNOT_DISCARD_THIS_ITEM
    com.l2jfrozen.gameserver.network.SystemMessageId NO_ITEM_DEPOSITED_IN_WH -> NO_ITEM_DEPOSITED_IN_WH
    com.l2jfrozen.gameserver.network.SystemMessageId TARGET_IS_INCORRECT -> TARGET_IS_INCORRECT
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_INVITED_THE_WRONG_TARGET -> YOU_HAVE_INVITED_THE_WRONG_TARGET
    com.l2jfrozen.gameserver.network.SystemMessageId S1_IS_BUSY_TRY_LATER -> S1_IS_BUSY_TRY_LATER
    com.l2jfrozen.gameserver.network.SystemMessageId WAITING_FOR_ANOTHER_REPLY -> WAITING_FOR_ANOTHER_REPLY
    com.l2jfrozen.gameserver.network.SystemMessageId S1_DID_NOT_RESPOND_TO_CLAN_INVITATION -> S1_DID_NOT_RESPOND_TO_CLAN_INVITATION
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DID_NOT_RESPOND_TO_S1_CLAN_INVITATION -> YOU_DID_NOT_RESPOND_TO_S1_CLAN_INVITATION
    com.l2jfrozen.gameserver.network.SystemMessageId NO_RESPONSE_TO_ALLY_INVITATION -> NO_RESPONSE_TO_ALLY_INVITATION
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DID_NOT_RESPOND_TO_ALLY_INVITATION -> YOU_DID_NOT_RESPOND_TO_ALLY_INVITATION
    com.l2jfrozen.gameserver.network.SystemMessageId ALREADY_TRADING -> ALREADY_TRADING
    com.l2jfrozen.gameserver.network.SystemMessageId REQUEST_S1_FOR_TRADE -> REQUEST_S1_FOR_TRADE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_DENIED_TRADE_REQUEST -> S1_DENIED_TRADE_REQUEST
    com.l2jfrozen.gameserver.network.SystemMessageId BEGIN_TRADE_WITH_S1 -> BEGIN_TRADE_WITH_S1
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CONFIRMED_TRADE -> S1_CONFIRMED_TRADE
    com.l2jfrozen.gameserver.network.SystemMessageId TRADE_SUCCESSFUL -> TRADE_SUCCESSFUL
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANCELED_TRADE -> S1_CANCELED_TRADE
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_USE_QUEST_ITEMS -> CANNOT_USE_QUEST_ITEMS
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_USE_ITEM_WHILE_TRADING -> CANNOT_USE_ITEM_WHILE_TRADING
    com.l2jfrozen.gameserver.network.SystemMessageId S1_PURCHASED_S2 -> S1_PURCHASED_S2
    com.l2jfrozen.gameserver.network.SystemMessageId S1_PURCHASED_S2_S3 -> S1_PURCHASED_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId S1_PURCHASED_S3_S2_S -> S1_PURCHASED_S3_S2_S
    com.l2jfrozen.gameserver.network.SystemMessageId PURCHASED_S2_FROM_S1 -> PURCHASED_S2_FROM_S1
    com.l2jfrozen.gameserver.network.SystemMessageId PURCHASED_S2_S3_FROM_S1 -> PURCHASED_S2_S3_FROM_S1
    com.l2jfrozen.gameserver.network.SystemMessageId PURCHASED_S3_S2_S_FROM_S1 -> PURCHASED_S3_S2_S_FROM_S1
    com.l2jfrozen.gameserver.network.SystemMessageId THE_PURCHASE_IS_COMPLETE -> THE_PURCHASE_IS_COMPLETE
    com.l2jfrozen.gameserver.network.SystemMessageId THE_PURCHASE_PRICE_IS_HIGHER_THAN_MONEY -> THE_PURCHASE_PRICE_IS_HIGHER_THAN_MONEY
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_NOT_ENOUGH_ADENA -> YOU_NOT_ENOUGH_ADENA
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_TRADE_DISCARD_DROP_ITEM_WHILE_IN_SHOPMODE -> CANNOT_TRADE_DISCARD_DROP_ITEM_WHILE_IN_SHOPMODE
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_EXCEEDED_QUANTITY_THAT_CAN_BE_INPUTTED -> YOU_HAVE_EXCEEDED_QUANTITY_THAT_CAN_BE_INPUTTED
    com.l2jfrozen.gameserver.network.SystemMessageId NO_CB_IN_MY_CLAN -> NO_CB_IN_MY_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId CB_OFFLINE -> CB_OFFLINE
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_ARE_WORKING_WITH_ANOTHER_CLAN -> YOU_ARE_WORKING_WITH_ANOTHER_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId S1_IS_NOT_A_CLAN_LEADER -> S1_IS_NOT_A_CLAN_LEADER
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DO_NOT_MEET_CRITERIA_IN_ORDER_TO_CREATE_A_CLAN -> YOU_DO_NOT_MEET_CRITERIA_IN_ORDER_TO_CREATE_A_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_THE_CLAN_LEADER_IS_ENABLED -> ONLY_THE_CLAN_LEADER_IS_ENABLED
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_CREATE_CLAN -> FAILED_TO_CREATE_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_MUST_WAIT_XX_DAYS_BEFORE_CREATING_A_NEW_CLAN -> YOU_MUST_WAIT_XX_DAYS_BEFORE_CREATING_A_NEW_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_NAME_INCORRECT -> CLAN_NAME_INCORRECT
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_NAME_TOO_LONG -> CLAN_NAME_TOO_LONG
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ALREADY_EXISTS -> S1_ALREADY_EXISTS
    com.l2jfrozen.gameserver.network.SystemMessageId S1_DOES_NOT_EXIST -> S1_DOES_NOT_EXIST
    com.l2jfrozen.gameserver.network.SystemMessageId THE_CLAN_REPUTATION_SCORE_IS_TOO_LOW -> THE_CLAN_REPUTATION_SCORE_IS_TOO_LOW
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_CREATED -> CLAN_CREATED
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_LVL_3_NEEDED_TO_ENDOWE_TITLE -> CLAN_LVL_3_NEEDED_TO_ENDOWE_TITLE
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_CREST_HAS_BEEN_DELETED -> CLAN_CREST_HAS_BEEN_DELETED
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_LVL_3_NEEDED_TO_SET_CREST -> CLAN_LVL_3_NEEDED_TO_SET_CREST
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_SET_CREST_WHILE_DISSOLUTION_IN_PROGRESS -> CANNOT_SET_CREST_WHILE_DISSOLUTION_IN_PROGRESS
    com.l2jfrozen.gameserver.network.SystemMessageId THE_S1S_CLAN_ACADEMY_HAS_BEEN_CREATED -> THE_S1S_CLAN_ACADEMY_HAS_BEEN_CREATED
    com.l2jfrozen.gameserver.network.SystemMessageId THE_KNIGHTS_OF_S1_HAVE_BEEN_CREATED -> THE_KNIGHTS_OF_S1_HAVE_BEEN_CREATED
    com.l2jfrozen.gameserver.network.SystemMessageId THE_ROYAL_GUARD_OF_S1_HAVE_BEEN_CREATED -> THE_ROYAL_GUARD_OF_S1_HAVE_BEEN_CREATED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DO_NOT_MEET_CRITERIA_IN_ORDER_TO_CREATE_A_CLAN_ACADEMY -> YOU_DO_NOT_MEET_CRITERIA_IN_ORDER_TO_CREATE_A_CLAN_ACADEMY
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DO_NOT_MEET_CRITERIA_IN_ORDER_TO_CREATE_A_MILITARY_UNIT -> YOU_DO_NOT_MEET_CRITERIA_IN_ORDER_TO_CREATE_A_MILITARY_UNIT
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_HAS_ALREADY_ESTABLISHED_A_CLAN_ACADEMY -> CLAN_HAS_ALREADY_ESTABLISHED_A_CLAN_ACADEMY
    com.l2jfrozen.gameserver.network.SystemMessageId ANOTHER_MILITARY_UNIT_IS_ALREADY_USING_THAT_NAME -> ANOTHER_MILITARY_UNIT_IS_ALREADY_USING_THAT_NAME
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_BEEN_SELECTED_AS_CAPTAIN_OF_S2 -> S1_HAS_BEEN_SELECTED_AS_CAPTAIN_OF_S2
    com.l2jfrozen.gameserver.network.SystemMessageId CAPTAIN_OF_ORDER_OF_KNIGHTS_CANNOT_BE_APPOINTED -> CAPTAIN_OF_ORDER_OF_KNIGHTS_CANNOT_BE_APPOINTED
    com.l2jfrozen.gameserver.network.SystemMessageId CAPTAIN_OF_ROYAL_GUARD_CANNOT_BE_APPOINTED -> CAPTAIN_OF_ROYAL_GUARD_CANNOT_BE_APPOINTED
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_INVITE_YOURSELF -> CANNOT_INVITE_YOURSELF
    com.l2jfrozen.gameserver.network.SystemMessageId S1_WORKING_WITH_ANOTHER_CLAN -> S1_WORKING_WITH_ANOTHER_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_INVITED_YOU_TO_JOIN_THE_CLAN_S2 -> S1_HAS_INVITED_YOU_TO_JOIN_THE_CLAN_S2
    com.l2jfrozen.gameserver.network.SystemMessageId S1_DOESNOT_MEET_REQUIREMENTS_TO_JOIN_ACADEMY -> S1_DOESNOT_MEET_REQUIREMENTS_TO_JOIN_ACADEMY
    com.l2jfrozen.gameserver.network.SystemMessageId ACADEMY_REQUIREMENTS -> ACADEMY_REQUIREMENTS
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_MUST_WAIT_BEFORE_ACCEPTING_A_NEW_MEMBER -> YOU_MUST_WAIT_BEFORE_ACCEPTING_A_NEW_MEMBER
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_MUST_WAIT_BEFORE_JOINING_ANOTHER_CLAN -> YOU_MUST_WAIT_BEFORE_JOINING_ANOTHER_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId S1_MUST_WAIT_BEFORE_JOINING_ANOTHER_CLAN -> S1_MUST_WAIT_BEFORE_JOINING_ANOTHER_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId ENTERED_THE_CLAN -> ENTERED_THE_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId S1_REFUSED_TO_JOIN_CLAN -> S1_REFUSED_TO_JOIN_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_JOINED_CLAN -> S1_HAS_JOINED_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_MEMBER_S1_LOGGED_IN -> CLAN_MEMBER_S1_LOGGED_IN
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_ARE_NOT_AUTHORIZED_TO_DO_THAT -> YOU_ARE_NOT_AUTHORIZED_TO_DO_THAT
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CLAN_IS_FULL -> S1_CLAN_IS_FULL
    com.l2jfrozen.gameserver.network.SystemMessageId SUBCLAN_IS_FULL -> SUBCLAN_IS_FULL
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_LEVEL_INCREASED -> CLAN_LEVEL_INCREASED
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_MEMBER_GRADUATED_FROM_ACADEMY -> CLAN_MEMBER_GRADUATED_FROM_ACADEMY
    com.l2jfrozen.gameserver.network.SystemMessageId ACADEMY_MEMBERSHIP_TERMINATED -> ACADEMY_MEMBERSHIP_TERMINATED
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_CAN_ACCUMULATE_CLAN_REPUTATION_POINTS -> CLAN_CAN_ACCUMULATE_CLAN_REPUTATION_POINTS
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_WAS_DEFEATED_IN_SIEGE_AND_LOST_S1_REPUTATION_POINTS -> CLAN_WAS_DEFEATED_IN_SIEGE_AND_LOST_S1_REPUTATION_POINTS
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_VICTORIOUS_IN_SIEGE_AND_GAINED_S1_REPUTATION_POINTS -> CLAN_VICTORIOUS_IN_SIEGE_AND_GAINED_S1_REPUTATION_POINTS
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_ACQUIRED_CONTESTED_CLAN_HALL_AND_S1_REPUTATION_POINTS -> CLAN_ACQUIRED_CONTESTED_CLAN_HALL_AND_S1_REPUTATION_POINTS
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_MEMBER_S1_WAS_IN_HIGHEST_RANKED_PARTY_IN_FESTIVAL_OF_DARKNESS_AND_GAINED_S2_REPUTATION -> CLAN_MEMBER_S1_WAS_IN_HIGHEST_RANKED_PARTY_IN_FESTIVAL_OF_DARKNESS_AND_GAINED_S2_REPUTATION
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_MEMBER_S1_BECAME_HERO_AND_GAINED_S2_REPUTATION_POINTS -> CLAN_MEMBER_S1_BECAME_HERO_AND_GAINED_S2_REPUTATION_POINTS
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_QUEST_COMPLETED_AND_S1_POINTS_GAINED -> CLAN_QUEST_COMPLETED_AND_S1_POINTS_GAINED
    com.l2jfrozen.gameserver.network.SystemMessageId OPPOSING_CLAN_CAPTURED_CLAN_HALL_AND_YOUR_CLAN_LOSES_S1_POINTS -> OPPOSING_CLAN_CAPTURED_CLAN_HALL_AND_YOUR_CLAN_LOSES_S1_POINTS
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_LOST_CONTESTED_CLAN_HALL_AND_300_POINTS -> CLAN_LOST_CONTESTED_CLAN_HALL_AND_300_POINTS
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_CAPTURED_CONTESTED_CLAN_HALL_AND_S1_POINTS_DEDUCTED_FROM_OPPONENT -> CLAN_CAPTURED_CONTESTED_CLAN_HALL_AND_S1_POINTS_DEDUCTED_FROM_OPPONENT
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_ADDED_S1S_POINTS_TO_REPUTATION_SCORE -> CLAN_ADDED_S1S_POINTS_TO_REPUTATION_SCORE
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_MEMBER_S1_WAS_KILLED_AND_S2_POINTS_DEDUCTED_FROM_REPUTATION -> CLAN_MEMBER_S1_WAS_KILLED_AND_S2_POINTS_DEDUCTED_FROM_REPUTATION
    com.l2jfrozen.gameserver.network.SystemMessageId FOR_KILLING_OPPOSING_MEMBER_S1_POINTS_WERE_DEDUCTED_FROM_OPPONENTS -> FOR_KILLING_OPPOSING_MEMBER_S1_POINTS_WERE_DEDUCTED_FROM_OPPONENTS
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_CLAN_FAILED_TO_DEFEND_CASTLE_AND_S1_POINTS_LOST_AND_ADDED_TO_OPPONENT -> YOUR_CLAN_FAILED_TO_DEFEND_CASTLE_AND_S1_POINTS_LOST_AND_ADDED_TO_OPPONENT
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_CLAN_HAS_BEEN_INITIALIZED_AND_S1_POINTS_LOST -> YOUR_CLAN_HAS_BEEN_INITIALIZED_AND_S1_POINTS_LOST
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_CLAN_FAILED_TO_DEFEND_CASTLE_AND_S1_POINTS_LOST -> YOUR_CLAN_FAILED_TO_DEFEND_CASTLE_AND_S1_POINTS_LOST
    com.l2jfrozen.gameserver.network.SystemMessageId S1_DEDUCTED_FROM_CLAN_REP -> S1_DEDUCTED_FROM_CLAN_REP
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_SKILL_S1_ADDED -> CLAN_SKILL_S1_ADDED
    com.l2jfrozen.gameserver.network.SystemMessageId REPUTATION_POINTS_0_OR_LOWER_CLAN_SKILLS_DEACTIVATED -> REPUTATION_POINTS_0_OR_LOWER_CLAN_SKILLS_DEACTIVATED
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_REPUTATION_SCORE_IS_TOO_LOW -> CLAN_REPUTATION_SCORE_IS_TOO_LOW
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_SKILLS_WILL_BE_ACTIVATED_SINCE_REPUTATION_IS_0_OR_HIGHER -> CLAN_SKILLS_WILL_BE_ACTIVATED_SINCE_REPUTATION_IS_0_OR_HIGHER
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_INCREASE_CLAN_LEVEL -> FAILED_TO_INCREASE_CLAN_LEVEL
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_LEADERS_MAY_NOT_BE_DELETED -> CLAN_LEADERS_MAY_NOT_BE_DELETED
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_MEMBER_MAY_NOT_BE_DELETED -> CLAN_MEMBER_MAY_NOT_BE_DELETED
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_MEMBER_S1_EXPELLED -> CLAN_MEMBER_S1_EXPELLED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_SUCCEEDED_IN_EXPELLING_CLAN_MEMBER -> YOU_HAVE_SUCCEEDED_IN_EXPELLING_CLAN_MEMBER
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_WITHDRAWN_FROM_CLAN -> YOU_HAVE_WITHDRAWN_FROM_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_MEMBERSHIP_TERMINATED -> CLAN_MEMBERSHIP_TERMINATED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_WITHDRAWN_FROM_THE_CLAN -> S1_HAS_WITHDRAWN_FROM_THE_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_LEADER_CANNOT_WITHDRAW -> CLAN_LEADER_CANNOT_WITHDRAW
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_DISMISS_YOURSELF -> YOU_CANNOT_DISMISS_YOURSELF
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_MEMBER_CANNOT_BE_DISMISSED_DURING_COMBAT -> CLAN_MEMBER_CANNOT_BE_DISMISSED_DURING_COMBAT
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_LEAVE_DURING_COMBAT -> YOU_CANNOT_LEAVE_DURING_COMBAT
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DISSOLVE_WHILE_IN_WAR -> CANNOT_DISSOLVE_WHILE_IN_WAR
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DISSOLVE_WHILE_IN_SIEGE -> CANNOT_DISSOLVE_WHILE_IN_SIEGE
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DISSOLVE_WHILE_OWNING_CLAN_HALL_OR_CASTLE -> CANNOT_DISSOLVE_WHILE_OWNING_CLAN_HALL_OR_CASTLE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_BEEN_ABORTED -> S1_HAS_BEEN_ABORTED
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DISSOLVE_CAUSE_CLAN_WILL_PARTICIPATE_IN_CASTLE_SIEGE -> CANNOT_DISSOLVE_CAUSE_CLAN_WILL_PARTICIPATE_IN_CASTLE_SIEGE
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_RISE_LEVEL_WHILE_DISSOLUTION_IN_PROGRESS -> CANNOT_RISE_LEVEL_WHILE_DISSOLUTION_IN_PROGRESS
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DISPERSE_THE_CLANS_IN_ALLY -> CANNOT_DISPERSE_THE_CLANS_IN_ALLY
    com.l2jfrozen.gameserver.network.SystemMessageId DISSOLUTION_IN_PROGRESS -> DISSOLUTION_IN_PROGRESS
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_PARTICIPATE_IN_SIEGE_WHILE_DISSOLUTION_IN_PROGRESS -> CANT_PARTICIPATE_IN_SIEGE_WHILE_DISSOLUTION_IN_PROGRESS
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_HAS_DISPERSED -> CLAN_HAS_DISPERSED
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_LEADER_PRIVILEGES_HAVE_BEEN_TRANSFERRED_TO_S1 -> CLAN_LEADER_PRIVILEGES_HAVE_BEEN_TRANSFERRED_TO_S1
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_EMBLEM_WAS_SUCCESSFULLY_REGISTERED -> CLAN_EMBLEM_WAS_SUCCESSFULLY_REGISTERED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DO_NOT_HAVE_THE_RIGHT_TO_USE_CLAN_WAREHOUSE -> YOU_DO_NOT_HAVE_THE_RIGHT_TO_USE_CLAN_WAREHOUSE
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_LEVEL_1_CLAN_OR_HIGHER_CAN_USE_WAREHOUSE -> ONLY_LEVEL_1_CLAN_OR_HIGHER_CAN_USE_WAREHOUSE
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_CLAN_LEADER_CAN_RETRIEVE_ITEMS_FROM_CLAN_WAREHOUSE -> ONLY_CLAN_LEADER_CAN_RETRIEVE_ITEMS_FROM_CLAN_WAREHOUSE
    com.l2jfrozen.gameserver.network.SystemMessageId TITLE_CHANGED -> TITLE_CHANGED
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_INFO_HEAD -> CLAN_INFO_HEAD
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_INFO_NAME -> CLAN_INFO_NAME
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_INFO_LEADER -> CLAN_INFO_LEADER
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_INFO_LEVEL -> CLAN_INFO_LEVEL
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_INFO_SEPARATOR -> CLAN_INFO_SEPARATOR
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_INFO_FOOT -> CLAN_INFO_FOOT
    com.l2jfrozen.gameserver.network.SystemMessageId ACQUIRE_SKILL_FAILED_BAD_CLAN_REP_SCORE -> ACQUIRE_SKILL_FAILED_BAD_CLAN_REP_SCORE
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_WAR_DECLARED_IF_CLAN_LVL3_OR_15_MEMBER -> CLAN_WAR_DECLARED_IF_CLAN_LVL3_OR_15_MEMBER
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_WAR_CANNOT_DECLARED_CLAN_NOT_EXIST -> CLAN_WAR_CANNOT_DECLARED_CLAN_NOT_EXIST
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_WAR_AGAINST_A_ALLIED_CLAN_NOT_WORK -> CLAN_WAR_AGAINST_A_ALLIED_CLAN_NOT_WORK
    com.l2jfrozen.gameserver.network.SystemMessageId ALREADY_AT_WAR_WITH_S1_WAIT_5_DAYS -> ALREADY_AT_WAR_WITH_S1_WAIT_5_DAYS
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_WAR_DECLARED_AGAINST_S1_IF_KILLED_LOSE_LOW_EXP -> CLAN_WAR_DECLARED_AGAINST_S1_IF_KILLED_LOSE_LOW_EXP
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_S1_DECLARED_WAR -> CLAN_S1_DECLARED_WAR
    com.l2jfrozen.gameserver.network.SystemMessageId WAR_AGAINST_S1_HAS_STOPPED -> WAR_AGAINST_S1_HAS_STOPPED
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_S1_HAS_DECIDED_TO_STOP -> CLAN_S1_HAS_DECIDED_TO_STOP
    com.l2jfrozen.gameserver.network.SystemMessageId CLANS_YOU_DECLARED_WAR_ON -> CLANS_YOU_DECLARED_WAR_ON
    com.l2jfrozen.gameserver.network.SystemMessageId CLANS_THAT_HAVE_DECLARED_WAR_ON_YOU -> CLANS_THAT_HAVE_DECLARED_WAR_ON_YOU
    com.l2jfrozen.gameserver.network.SystemMessageId WAR_LIST -> WAR_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_PICKED_UP_S1_ADENA -> YOU_PICKED_UP_S1_ADENA
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_PICKED_UP_S1_S2 -> YOU_PICKED_UP_S1_S2
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_PICKED_UP_S1 -> YOU_PICKED_UP_S1
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_PICKED_UP_A_S1_S2 -> YOU_PICKED_UP_A_S1_S2
    com.l2jfrozen.gameserver.network.SystemMessageId S1_PICKED_UP_S2_S3 -> S1_PICKED_UP_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId S1_PICKED_UP_S2 -> S1_PICKED_UP_S2
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_PICKUP_S1_ADENA -> FAILED_TO_PICKUP_S1_ADENA
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_PICKUP_S1 -> FAILED_TO_PICKUP_S1
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_PICKUP_S2_S1_S -> FAILED_TO_PICKUP_S2_S1_S
    com.l2jfrozen.gameserver.network.SystemMessageId ATTENTION_S1_PICKED_UP_S2 -> ATTENTION_S1_PICKED_UP_S2
    com.l2jfrozen.gameserver.network.SystemMessageId ATTENTION_S1_PICKED_UP_S2_S3 -> ATTENTION_S1_PICKED_UP_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId GM_LIST -> GM_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId GM_S1 -> GM_S1
    com.l2jfrozen.gameserver.network.SystemMessageId THE_PERSON_IS_IN_MESSAGE_REFUSAL_MODE -> THE_PERSON_IS_IN_MESSAGE_REFUSAL_MODE
    com.l2jfrozen.gameserver.network.SystemMessageId MESSAGE_REFUSAL_MODE -> MESSAGE_REFUSAL_MODE
    com.l2jfrozen.gameserver.network.SystemMessageId MESSAGE_ACCEPTANCE_MODE -> MESSAGE_ACCEPTANCE_MODE
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_TI_S1_S2_S3 -> LOC_TI_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_GLUDIN_S1_S2_S3 -> LOC_GLUDIN_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_GLUDIO_S1_S2_S3 -> LOC_GLUDIO_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_NETRAL_ZONE_S1_S2_S3 -> LOC_NETRAL_ZONE_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_ELVEN_S1_S2_S3 -> LOC_ELVEN_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_DARK_ELVEN_S1_S2_S3 -> LOC_DARK_ELVEN_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_DION_S1_S2_S3 -> LOC_DION_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_FLORAN_S1_S2_S3 -> LOC_FLORAN_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_GIRAN_S1_S2_S3 -> LOC_GIRAN_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_GIRAN_HARBOR_S1_S2_S3 -> LOC_GIRAN_HARBOR_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_ORC_S1_S2_S3 -> LOC_ORC_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_DWARVEN_S1_S2_S3 -> LOC_DWARVEN_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_OREN_S1_S2_S3 -> LOC_OREN_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_HUNTER_S1_S2_S3 -> LOC_HUNTER_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_ADEN_S1_S2_S3 -> LOC_ADEN_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_COLISEUM_S1_S2_S3 -> LOC_COLISEUM_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_HEINE_S1_S2_S3 -> LOC_HEINE_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_RUNE_S1_S2_S3 -> LOC_RUNE_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_GODDARD_S1_S2_S3 -> LOC_GODDARD_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_SCHUTTGART_S1_S2_S3 -> LOC_SCHUTTGART_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId LOC_PRIMEVAL_ISLE_S1_S2_S3 -> LOC_PRIMEVAL_ISLE_S1_S2_S3
    com.l2jfrozen.gameserver.network.SystemMessageId CRYSTALLIZE_LEVEL_TOO_LOW -> CRYSTALLIZE_LEVEL_TOO_LOW
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_BE_USED -> S1_CANNOT_BE_USED
    com.l2jfrozen.gameserver.network.SystemMessageId ACQUIRED -> ACQUIRED
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_NO_PAYOUT_INFO -> MONSRACE_NO_PAYOUT_INFO
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_TICKETS_NOT_AVAILABLE -> MONSRACE_TICKETS_NOT_AVAILABLE
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_TICKETS_AVAILABLE_FOR_S1_RACE -> MONSRACE_TICKETS_AVAILABLE_FOR_S1_RACE
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_TICKETS_NOW_AVAILABLE_FOR_S1_RACE -> MONSRACE_TICKETS_NOW_AVAILABLE_FOR_S1_RACE
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_TICKETS_STOP_IN_S1_MINUTES -> MONSRACE_TICKETS_STOP_IN_S1_MINUTES
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_TICKET_SALES_CLOSED -> MONSRACE_TICKET_SALES_CLOSED
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_BEGINS_IN_S1_MINUTES -> MONSRACE_BEGINS_IN_S1_MINUTES
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_BEGINS_IN_30_SECONDS -> MONSRACE_BEGINS_IN_30_SECONDS
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_COUNTDOWN_IN_FIVE_SECONDS -> MONSRACE_COUNTDOWN_IN_FIVE_SECONDS
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_BEGINS_IN_S1_SECONDS -> MONSRACE_BEGINS_IN_S1_SECONDS
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_RACE_START -> MONSRACE_RACE_START
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_RACE_END -> MONSRACE_RACE_END
    com.l2jfrozen.gameserver.network.SystemMessageId MONSRACE_FIRST_PLACE_S1_SECOND_S2 -> MONSRACE_FIRST_PLACE_S1_SECOND_S2
    com.l2jfrozen.gameserver.network.SystemMessageId NAMING_THERE_IS_A_SPACE -> NAMING_THERE_IS_A_SPACE
    com.l2jfrozen.gameserver.network.SystemMessageId NAMING_INAPPROPRIATE_CHARACTER_NAME -> NAMING_INAPPROPRIATE_CHARACTER_NAME
    com.l2jfrozen.gameserver.network.SystemMessageId NAMING_INCLUDES_FORBIDDEN_WORDS -> NAMING_INCLUDES_FORBIDDEN_WORDS
    com.l2jfrozen.gameserver.network.SystemMessageId NAMING_ALREADY_IN_USE_BY_ANOTHER_PET -> NAMING_ALREADY_IN_USE_BY_ANOTHER_PET
    com.l2jfrozen.gameserver.network.SystemMessageId NAMING_PETNAME_UP_TO_8CHARS -> NAMING_PETNAME_UP_TO_8CHARS
    com.l2jfrozen.gameserver.network.SystemMessageId NAMING_NAME_PET -> NAMING_NAME_PET
    com.l2jfrozen.gameserver.network.SystemMessageId NAMING_YOU_CANNOT_SET_NAME_OF_THE_PET -> NAMING_YOU_CANNOT_SET_NAME_OF_THE_PET
    com.l2jfrozen.gameserver.network.SystemMessageId NAMING_NAME_ALREADY_EXISTS -> NAMING_NAME_ALREADY_EXISTS
    com.l2jfrozen.gameserver.network.SystemMessageId NAMING_CHARNAME_UP_TO_16CHARS -> NAMING_CHARNAME_UP_TO_16CHARS
    com.l2jfrozen.gameserver.network.SystemMessageId NAMING_PETNAME_CONTAINS_INVALID_CHARS -> NAMING_PETNAME_CONTAINS_INVALID_CHARS
    com.l2jfrozen.gameserver.network.SystemMessageId PET_HIT_FOR_S1_DAMAGE -> PET_HIT_FOR_S1_DAMAGE
    com.l2jfrozen.gameserver.network.SystemMessageId PET_RECEIVED_S2_DAMAGE_BY_S1 -> PET_RECEIVED_S2_DAMAGE_BY_S1
    com.l2jfrozen.gameserver.network.SystemMessageId ITEM_NOT_FOR_PETS -> ITEM_NOT_FOR_PETS
    com.l2jfrozen.gameserver.network.SystemMessageId DEAD_PET_CANNOT_BE_RETURNED -> DEAD_PET_CANNOT_BE_RETURNED
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_GIVE_ITEMS_TO_DEAD_PET -> CANNOT_GIVE_ITEMS_TO_DEAD_PET
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_EQUIP_PET_ITEM -> CANNOT_EQUIP_PET_ITEM
    com.l2jfrozen.gameserver.network.SystemMessageId PET_EARNED_S1_EXP -> PET_EARNED_S1_EXP
    com.l2jfrozen.gameserver.network.SystemMessageId S1_GAME_PET_S2_DMG -> S1_GAME_PET_S2_DMG
    com.l2jfrozen.gameserver.network.SystemMessageId PET_CANNOT_USE_ITEM -> PET_CANNOT_USE_ITEM
    com.l2jfrozen.gameserver.network.SystemMessageId PET_TOOK_S1_BECAUSE_HE_WAS_HUNGRY -> PET_TOOK_S1_BECAUSE_HE_WAS_HUNGRY
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_RESTORE_HUNGRY_PETS -> YOU_CANNOT_RESTORE_HUNGRY_PETS
    com.l2jfrozen.gameserver.network.SystemMessageId PET_CANNOT_SENT_BACK_DURING_BATTLE -> PET_CANNOT_SENT_BACK_DURING_BATTLE
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_ALREADY_HAVE_A_PET -> YOU_ALREADY_HAVE_A_PET
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_SUMMON_IN_COMBAT -> YOU_CANNOT_SUMMON_IN_COMBAT
    com.l2jfrozen.gameserver.network.SystemMessageId PETS_ARE_NOT_AVAILABLE_AT_THIS_TIME -> PETS_ARE_NOT_AVAILABLE_AT_THIS_TIME
    com.l2jfrozen.gameserver.network.SystemMessageId SOULSHOTS_AND_SPIRITSHOTS_ARE_NOT_AVAILABLE_FOR_A_DEAD_PET -> SOULSHOTS_AND_SPIRITSHOTS_ARE_NOT_AVAILABLE_FOR_A_DEAD_PET
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_ENOUGH_SOULSHOTS_FOR_PET -> NOT_ENOUGH_SOULSHOTS_FOR_PET
    com.l2jfrozen.gameserver.network.SystemMessageId MASTER_CANNOT_RES -> MASTER_CANNOT_RES
    com.l2jfrozen.gameserver.network.SystemMessageId RES_HAS_ALREADY_BEEN_PROPOSED -> RES_HAS_ALREADY_BEEN_PROPOSED
    com.l2jfrozen.gameserver.network.SystemMessageId PET_USE_THE_POWER_OF_SPIRIT -> PET_USE_THE_POWER_OF_SPIRIT
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_ENOUGH_SPIRITHOTS_FOR_PET -> NOT_ENOUGH_SPIRITHOTS_FOR_PET
    com.l2jfrozen.gameserver.network.SystemMessageId PET_CANNOT_RES -> PET_CANNOT_RES
    com.l2jfrozen.gameserver.network.SystemMessageId RAID_WAS_SUCCESSFUL -> RAID_WAS_SUCCESSFUL
    com.l2jfrozen.gameserver.network.SystemMessageId SUBCLASS_NO_CHANGE_OR_CREATE_WHILE_SKILL_IN_USE -> SUBCLASS_NO_CHANGE_OR_CREATE_WHILE_SKILL_IN_USE
    com.l2jfrozen.gameserver.network.SystemMessageId STRIDER_CANT_BE_RIDDEN_WHILE_DEAD -> STRIDER_CANT_BE_RIDDEN_WHILE_DEAD
    com.l2jfrozen.gameserver.network.SystemMessageId DEAD_STRIDER_CANT_BE_RIDDEN -> DEAD_STRIDER_CANT_BE_RIDDEN
    com.l2jfrozen.gameserver.network.SystemMessageId STRIDER_IN_BATLLE_CANT_BE_RIDDEN -> STRIDER_IN_BATLLE_CANT_BE_RIDDEN
    com.l2jfrozen.gameserver.network.SystemMessageId STRIDER_CANT_BE_RIDDEN_WHILE_IN_BATTLE -> STRIDER_CANT_BE_RIDDEN_WHILE_IN_BATTLE
    com.l2jfrozen.gameserver.network.SystemMessageId STRIDER_CAN_BE_RIDDEN_ONLY_WHILE_STANDING -> STRIDER_CAN_BE_RIDDEN_ONLY_WHILE_STANDING
    com.l2jfrozen.gameserver.network.SystemMessageId SUMMON_GAVE_DAMAGE_S1 -> SUMMON_GAVE_DAMAGE_S1
    com.l2jfrozen.gameserver.network.SystemMessageId SUMMON_RECEIVED_DAMAGE_S2_BY_S1 -> SUMMON_RECEIVED_DAMAGE_S2_BY_S1
    com.l2jfrozen.gameserver.network.SystemMessageId SUMMON_A_PET -> SUMMON_A_PET
    com.l2jfrozen.gameserver.network.SystemMessageId CUBIC_SUMMONING_FAILED -> CUBIC_SUMMONING_FAILED
    com.l2jfrozen.gameserver.network.SystemMessageId SUMMONING_SERVITOR_COSTS_S2_S1 -> SUMMONING_SERVITOR_COSTS_S2_S1
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_SUMMON_PLAYERS_WHO_ARE_IN_OLYMPIAD -> YOU_CANNOT_SUMMON_PLAYERS_WHO_ARE_IN_OLYMPIAD
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CURRENTLY_TRADING_OR_OPERATING_PRIVATE_STORE_AND_CANNOT_BE_SUMMONED -> S1_CURRENTLY_TRADING_OR_OPERATING_PRIVATE_STORE_AND_CANNOT_BE_SUMMONED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_IS_DEAD_AT_THE_MOMENT_AND_CANNOT_BE_SUMMONED -> S1_IS_DEAD_AT_THE_MOMENT_AND_CANNOT_BE_SUMMONED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_MAY_NOT_SUMMON_FROM_YOUR_CURRENT_LOCATION -> YOU_MAY_NOT_SUMMON_FROM_YOUR_CURRENT_LOCATION
    com.l2jfrozen.gameserver.network.SystemMessageId S1_WISHES_TO_SUMMON_YOU_FROM_S2_DO_YOU_ACCEPT -> S1_WISHES_TO_SUMMON_YOU_FROM_S2_DO_YOU_ACCEPT
    com.l2jfrozen.gameserver.network.SystemMessageId S1_IS_ENGAGED_IN_COMBAT_AND_CANNOT_BE_SUMMONED -> S1_IS_ENGAGED_IN_COMBAT_AND_CANNOT_BE_SUMMONED
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_TARGET_IS_IN_AN_AREA_WHICH_BLOCKS_SUMMONING -> YOUR_TARGET_IS_IN_AN_AREA_WHICH_BLOCKS_SUMMONING
    com.l2jfrozen.gameserver.network.SystemMessageId S1_SUCCESSFULLY_ENCHANTED -> S1_SUCCESSFULLY_ENCHANTED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_S2_SUCCESSFULLY_ENCHANTED -> S1_S2_SUCCESSFULLY_ENCHANTED
    com.l2jfrozen.gameserver.network.SystemMessageId ENCHANTMENT_FAILED_S1_EVAPORATED -> ENCHANTMENT_FAILED_S1_EVAPORATED
    com.l2jfrozen.gameserver.network.SystemMessageId ENCHANTMENT_FAILED_S1_S2_EVAPORATED -> ENCHANTMENT_FAILED_S1_S2_EVAPORATED
    com.l2jfrozen.gameserver.network.SystemMessageId SELECT_ITEM_TO_ENCHANT -> SELECT_ITEM_TO_ENCHANT
    com.l2jfrozen.gameserver.network.SystemMessageId INAPPROPRIATE_ENCHANT_CONDITION -> INAPPROPRIATE_ENCHANT_CONDITION
    com.l2jfrozen.gameserver.network.SystemMessageId BLESSED_ENCHANT_FAILED -> BLESSED_ENCHANT_FAILED
    com.l2jfrozen.gameserver.network.SystemMessageId ENCHANT_SCROLL_CANCELLED -> ENCHANT_SCROLL_CANCELLED
    com.l2jfrozen.gameserver.network.SystemMessageId EQUIPMENT_S1_S2_REMOVED -> EQUIPMENT_S1_S2_REMOVED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_DISARMED -> S1_DISARMED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_S2_EQUIPPED -> S1_S2_EQUIPPED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_EQUIPPED -> S1_EQUIPPED
    com.l2jfrozen.gameserver.network.SystemMessageId QUEST_EVENT_PERIOD -> QUEST_EVENT_PERIOD
    com.l2jfrozen.gameserver.network.SystemMessageId VALIDATION_PERIOD -> VALIDATION_PERIOD
    com.l2jfrozen.gameserver.network.SystemMessageId INITIAL_PERIOD -> INITIAL_PERIOD
    com.l2jfrozen.gameserver.network.SystemMessageId RESULTS_PERIOD -> RESULTS_PERIOD
    com.l2jfrozen.gameserver.network.SystemMessageId QUEST_EVENT_PERIOD_BEGUN -> QUEST_EVENT_PERIOD_BEGUN
    com.l2jfrozen.gameserver.network.SystemMessageId QUEST_EVENT_PERIOD_ENDED -> QUEST_EVENT_PERIOD_ENDED
    com.l2jfrozen.gameserver.network.SystemMessageId DAWN_OBTAINED_AVARICE -> DAWN_OBTAINED_AVARICE
    com.l2jfrozen.gameserver.network.SystemMessageId DAWN_OBTAINED_GNOSIS -> DAWN_OBTAINED_GNOSIS
    com.l2jfrozen.gameserver.network.SystemMessageId DAWN_OBTAINED_STRIFE -> DAWN_OBTAINED_STRIFE
    com.l2jfrozen.gameserver.network.SystemMessageId DUSK_OBTAINED_AVARICE -> DUSK_OBTAINED_AVARICE
    com.l2jfrozen.gameserver.network.SystemMessageId DUSK_OBTAINED_GNOSIS -> DUSK_OBTAINED_GNOSIS
    com.l2jfrozen.gameserver.network.SystemMessageId DUSK_OBTAINED_STRIFE -> DUSK_OBTAINED_STRIFE
    com.l2jfrozen.gameserver.network.SystemMessageId SEAL_VALIDATION_PERIOD_BEGUN -> SEAL_VALIDATION_PERIOD_BEGUN
    com.l2jfrozen.gameserver.network.SystemMessageId SEAL_VALIDATION_PERIOD_ENDED -> SEAL_VALIDATION_PERIOD_ENDED
    com.l2jfrozen.gameserver.network.SystemMessageId DAWN_WON -> DAWN_WON
    com.l2jfrozen.gameserver.network.SystemMessageId DUSK_WON -> DUSK_WON
    com.l2jfrozen.gameserver.network.SystemMessageId PREPARATIONS_PERIOD_BEGUN -> PREPARATIONS_PERIOD_BEGUN
    com.l2jfrozen.gameserver.network.SystemMessageId COMPETITION_PERIOD_BEGUN -> COMPETITION_PERIOD_BEGUN
    com.l2jfrozen.gameserver.network.SystemMessageId RESULTS_PERIOD_BEGUN -> RESULTS_PERIOD_BEGUN
    com.l2jfrozen.gameserver.network.SystemMessageId VALIDATION_PERIOD_BEGUN -> VALIDATION_PERIOD_BEGUN
    com.l2jfrozen.gameserver.network.SystemMessageId CONTRIB_SCORE_INCREASED -> CONTRIB_SCORE_INCREASED
    com.l2jfrozen.gameserver.network.SystemMessageId SEVENSIGNS_PARTECIPATION_DAWN -> SEVENSIGNS_PARTECIPATION_DAWN
    com.l2jfrozen.gameserver.network.SystemMessageId SEVENSIGNS_PARTECIPATION_DUSK -> SEVENSIGNS_PARTECIPATION_DUSK
    com.l2jfrozen.gameserver.network.SystemMessageId FIGHT_FOR_AVARICE -> FIGHT_FOR_AVARICE
    com.l2jfrozen.gameserver.network.SystemMessageId FIGHT_FOR_GNOSIS -> FIGHT_FOR_GNOSIS
    com.l2jfrozen.gameserver.network.SystemMessageId FIGHT_FOR_STRIFE -> FIGHT_FOR_STRIFE
    com.l2jfrozen.gameserver.network.SystemMessageId CONTRIB_SCORE_EXCEEDED -> CONTRIB_SCORE_EXCEEDED
    com.l2jfrozen.gameserver.network.SystemMessageId UNTIL_MONDAY_6PM -> UNTIL_MONDAY_6PM
    com.l2jfrozen.gameserver.network.SystemMessageId UNTIL_TODAY_6PM -> UNTIL_TODAY_6PM
    com.l2jfrozen.gameserver.network.SystemMessageId SEAL_OWNED_10_MORE_VOTED -> SEAL_OWNED_10_MORE_VOTED
    com.l2jfrozen.gameserver.network.SystemMessageId SEAL_NOT_OWNED_35_MORE_VOTED -> SEAL_NOT_OWNED_35_MORE_VOTED
    com.l2jfrozen.gameserver.network.SystemMessageId SEAL_OWNED_10_LESS_VOTED -> SEAL_OWNED_10_LESS_VOTED
    com.l2jfrozen.gameserver.network.SystemMessageId SEAL_NOT_OWNED_35_LESS_VOTED -> SEAL_NOT_OWNED_35_LESS_VOTED
    com.l2jfrozen.gameserver.network.SystemMessageId COMPETITION_TIE_SEAL_NOT_AWARDED -> COMPETITION_TIE_SEAL_NOT_AWARDED
    com.l2jfrozen.gameserver.network.SystemMessageId CAN_BE_USED_BY_DAWN -> CAN_BE_USED_BY_DAWN
    com.l2jfrozen.gameserver.network.SystemMessageId CAN_BE_USED_BY_DUSK -> CAN_BE_USED_BY_DUSK
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_THAT_OWNS_CASTLE_IS_AUTOMATICALLY_REGISTERED_DEFENDING -> CLAN_THAT_OWNS_CASTLE_IS_AUTOMATICALLY_REGISTERED_DEFENDING
    com.l2jfrozen.gameserver.network.SystemMessageId SIEGE_OF_S1_HAS_BEEN_CANCELED_DUE_TO_LACK_OF_INTEREST -> SIEGE_OF_S1_HAS_BEEN_CANCELED_DUE_TO_LACK_OF_INTEREST
    com.l2jfrozen.gameserver.network.SystemMessageId S1_SIEGE_WAS_CANCELED_BECAUSE_NO_CLANS_PARTICIPATED -> S1_SIEGE_WAS_CANCELED_BECAUSE_NO_CLANS_PARTICIPATED
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_VIEW_SIEGE -> ONLY_VIEW_SIEGE
    com.l2jfrozen.gameserver.network.SystemMessageId NO_PORT_THAT_IS_IN_SIGE -> NO_PORT_THAT_IS_IN_SIGE
    com.l2jfrozen.gameserver.network.SystemMessageId S2_HAS_BEEN_DESIGNATED_AS_APPRENTICE_OF_CLAN_MEMBER_S1 -> S2_HAS_BEEN_DESIGNATED_AS_APPRENTICE_OF_CLAN_MEMBER_S1
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_APPRENTICE_S1_HAS_LOGGED_IN -> YOUR_APPRENTICE_S1_HAS_LOGGED_IN
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_APPRENTICE_S1_HAS_LOGGED_OUT -> YOUR_APPRENTICE_S1_HAS_LOGGED_OUT
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_SPONSOR_S1_HAS_LOGGED_IN -> YOUR_SPONSOR_S1_HAS_LOGGED_IN
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_SPONSOR_S1_HAS_LOGGED_OUT -> YOUR_SPONSOR_S1_HAS_LOGGED_OUT
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DO_NOT_HAVE_THE_RIGHT_TO_DISMISS_AN_APPRENTICE -> YOU_DO_NOT_HAVE_THE_RIGHT_TO_DISMISS_AN_APPRENTICE
    com.l2jfrozen.gameserver.network.SystemMessageId S2_CLAN_MEMBER_S1_S_APPRENTICE_HAS_BEEN_REMOVED -> S2_CLAN_MEMBER_S1_S_APPRENTICE_HAS_BEEN_REMOVED
    com.l2jfrozen.gameserver.network.SystemMessageId WAR_WITH_THE_S1_CLAN_HAS_BEGUN -> WAR_WITH_THE_S1_CLAN_HAS_BEGUN
    com.l2jfrozen.gameserver.network.SystemMessageId WAR_WITH_THE_S1_CLAN_HAS_ENDED -> WAR_WITH_THE_S1_CLAN_HAS_ENDED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_WON_THE_WAR_OVER_THE_S1_CLAN -> YOU_HAVE_WON_THE_WAR_OVER_THE_S1_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_SURRENDERED_TO_THE_S1_CLAN -> YOU_HAVE_SURRENDERED_TO_THE_S1_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId REQUEST_TO_END_WAR_HAS_BEEN_DENIED -> REQUEST_TO_END_WAR_HAS_BEEN_DENIED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_PERSONALLY_SURRENDERED_TO_THE_S1_CLAN -> YOU_HAVE_PERSONALLY_SURRENDERED_TO_THE_S1_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId WAR_PROCLAMATION_HAS_BEEN_REFUSED -> WAR_PROCLAMATION_HAS_BEEN_REFUSED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_ARE_NOT_A_CLAN_MEMBER -> YOU_ARE_NOT_A_CLAN_MEMBER
    com.l2jfrozen.gameserver.network.SystemMessageId FEATURE_ONLY_FOR_ALLIANCE_LEADER -> FEATURE_ONLY_FOR_ALLIANCE_LEADER
    com.l2jfrozen.gameserver.network.SystemMessageId NO_CURRENT_ALLIANCES -> NO_CURRENT_ALLIANCES
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_EXCEEDED_THE_LIMIT -> YOU_HAVE_EXCEEDED_THE_LIMIT
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_INVITE_CLAN_WITHIN_1_DAY -> CANT_INVITE_CLAN_WITHIN_1_DAY
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_ENTER_ALLIANCE_WITHIN_1_DAY -> CANT_ENTER_ALLIANCE_WITHIN_1_DAY
    com.l2jfrozen.gameserver.network.SystemMessageId MAY_NOT_ALLY_CLAN_BATTLE -> MAY_NOT_ALLY_CLAN_BATTLE
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_CLAN_LEADER_WITHDRAW_ALLY -> ONLY_CLAN_LEADER_WITHDRAW_ALLY
    com.l2jfrozen.gameserver.network.SystemMessageId ALLIANCE_LEADER_CANT_WITHDRAW -> ALLIANCE_LEADER_CANT_WITHDRAW
    com.l2jfrozen.gameserver.network.SystemMessageId DIFFERANT_ALLIANCE -> DIFFERANT_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_DOESNT_EXISTS -> CLAN_DOESNT_EXISTS
    com.l2jfrozen.gameserver.network.SystemMessageId ALREADY_JOINED_ALLIANCE -> ALREADY_JOINED_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_CLAN_LEADER_CREATE_ALLIANCE -> ONLY_CLAN_LEADER_CREATE_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_CREATE_ALLIANCE_10_DAYS_DISOLUTION -> CANT_CREATE_ALLIANCE_10_DAYS_DISOLUTION
    com.l2jfrozen.gameserver.network.SystemMessageId INCORRECT_ALLIANCE_NAME -> INCORRECT_ALLIANCE_NAME
    com.l2jfrozen.gameserver.network.SystemMessageId INCORRECT_ALLIANCE_NAME_LENGTH -> INCORRECT_ALLIANCE_NAME_LENGTH
    com.l2jfrozen.gameserver.network.SystemMessageId ALLIANCE_ALREADY_EXISTS -> ALLIANCE_ALREADY_EXISTS
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_ACCEPT_ALLY_ENEMY_FOR_SIEGE -> CANT_ACCEPT_ALLY_ENEMY_FOR_SIEGE
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_INVITED_FOR_ALLIANCE -> YOU_INVITED_FOR_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId SELECT_USER_TO_INVITE -> SELECT_USER_TO_INVITE
    com.l2jfrozen.gameserver.network.SystemMessageId DO_YOU_WISH_TO_WITHDRW -> DO_YOU_WISH_TO_WITHDRW
    com.l2jfrozen.gameserver.network.SystemMessageId ENTER_NAME_CLAN_TO_EXPEL -> ENTER_NAME_CLAN_TO_EXPEL
    com.l2jfrozen.gameserver.network.SystemMessageId DO_YOU_WISH_TO_DISOLVE -> DO_YOU_WISH_TO_DISOLVE
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_ACCEPTED_ALLIANCE -> YOU_ACCEPTED_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_INVITE_CLAN_IN_ALLIANCE -> FAILED_TO_INVITE_CLAN_IN_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_WITHDRAWN_FROM_ALLIANCE -> YOU_HAVE_WITHDRAWN_FROM_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_FAILED_TO_WITHDRAWN_FROM_ALLIANCE -> YOU_HAVE_FAILED_TO_WITHDRAWN_FROM_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_EXPELED_A_CLAN -> YOU_HAVE_EXPELED_A_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_EXPELED_A_CLAN -> FAILED_TO_EXPELED_A_CLAN
    com.l2jfrozen.gameserver.network.SystemMessageId ALLIANCE_DISOLVED -> ALLIANCE_DISOLVED
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_DISOLVE_ALLIANCE -> FAILED_TO_DISOLVE_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId S2_ALLIANCE_LEADER_OF_S1_REQUESTED_ALLIANCE -> S2_ALLIANCE_LEADER_OF_S1_REQUESTED_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId TO_CREATE_AN_ALLY_YOU_CLAN_MUST_BE_LEVEL_5_OR_HIGHER -> TO_CREATE_AN_ALLY_YOU_CLAN_MUST_BE_LEVEL_5_OR_HIGHER
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_MAY_NOT_CREATE_ALLY_WHILE_DISSOLVING -> YOU_MAY_NOT_CREATE_ALLY_WHILE_DISSOLVING
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CLAN_ALREADY_MEMBER_OF_S2_ALLIANCE -> S1_CLAN_ALREADY_MEMBER_OF_S2_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DISSOLVE_ALLY_WHILE_IN_SIEGE -> CANNOT_DISSOLVE_ALLY_WHILE_IN_SIEGE
    com.l2jfrozen.gameserver.network.SystemMessageId OPPOSING_CLAN_IS_PARTICIPATING_IN_SIEGE -> OPPOSING_CLAN_IS_PARTICIPATING_IN_SIEGE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANT_ENTER_ALLIANCE_WITHIN_1_DAY -> S1_CANT_ENTER_ALLIANCE_WITHIN_1_DAY
    com.l2jfrozen.gameserver.network.SystemMessageId S1_S2_ALLIANCE -> S1_S2_ALLIANCE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_NO_ALLI_EXISTS -> S1_NO_ALLI_EXISTS
    com.l2jfrozen.gameserver.network.SystemMessageId ALLIANCE_INFO_HEAD -> ALLIANCE_INFO_HEAD
    com.l2jfrozen.gameserver.network.SystemMessageId ALLIANCE_NAME_S1 -> ALLIANCE_NAME_S1
    com.l2jfrozen.gameserver.network.SystemMessageId CONNECTION_S1_TOTAL_S2 -> CONNECTION_S1_TOTAL_S2
    com.l2jfrozen.gameserver.network.SystemMessageId ALLIANCE_LEADER_S2_OF_S1 -> ALLIANCE_LEADER_S2_OF_S1
    com.l2jfrozen.gameserver.network.SystemMessageId ALLIANCE_CLAN_TOTAL_S1 -> ALLIANCE_CLAN_TOTAL_S1
    com.l2jfrozen.gameserver.network.SystemMessageId SI_INVITED_YOU_AS_FRIEND -> SI_INVITED_YOU_AS_FRIEND
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_INVITE_A_FRIEND -> FAILED_TO_INVITE_A_FRIEND
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ADDED_TO_FRIENDS -> S1_ADDED_TO_FRIENDS
    com.l2jfrozen.gameserver.network.SystemMessageId S1_JOINED_AS_FRIEND -> S1_JOINED_AS_FRIEND
    com.l2jfrozen.gameserver.network.SystemMessageId FRIEND_S1_HAS_LOGGED_IN -> FRIEND_S1_HAS_LOGGED_IN
    com.l2jfrozen.gameserver.network.SystemMessageId NIGHT_EFFECT_APPLIES -> NIGHT_EFFECT_APPLIES
    com.l2jfrozen.gameserver.network.SystemMessageId DAY_EFFECT_DISAPPEARS -> DAY_EFFECT_DISAPPEARS
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_REGISTER_TO_IGNORE_LIST -> FAILED_TO_REGISTER_TO_IGNORE_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId S1_WAS_ADDED_TO_YOUR_IGNORE_LIST -> S1_WAS_ADDED_TO_YOUR_IGNORE_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId S1_WAS_REMOVED_FROM_YOUR_IGNORE_LIST -> S1_WAS_REMOVED_FROM_YOUR_IGNORE_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_ADDED_YOU_TO_IGNORE_LIST -> S1_HAS_ADDED_YOU_TO_IGNORE_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId FRIEND_LIST_HEAD -> FRIEND_LIST_HEAD
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ONLINE -> S1_ONLINE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_OFFLINE -> S1_OFFLINE
    com.l2jfrozen.gameserver.network.SystemMessageId FRIEND_LIST_FOOT -> FRIEND_LIST_FOOT
    com.l2jfrozen.gameserver.network.SystemMessageId S1_REMOVED_FROM_YOUR_FRIENDS_LIST -> S1_REMOVED_FROM_YOUR_FRIENDS_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId PLEACE_CHECK_YOUR_FRIEND_LIST_AGAIN -> PLEACE_CHECK_YOUR_FRIEND_LIST_AGAIN
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_ADD_YOURSELF_TO_OWN_FRIEND_LIST -> YOU_CANNOT_ADD_YOURSELF_TO_OWN_FRIEND_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId FRIEND_LIST_NOT_READY_YET_REGISTER_LATER -> FRIEND_LIST_NOT_READY_YET_REGISTER_LATER
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ALRADY_ON_LIST -> S1_ALRADY_ON_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId S1_REQUESTED_TO_BECOME_FRIENDS -> S1_REQUESTED_TO_BECOME_FRIENDS
    com.l2jfrozen.gameserver.network.SystemMessageId THE_USER_YOU_REQUESTED_IS_NOT_IN_GAME -> THE_USER_YOU_REQUESTED_IS_NOT_IN_GAME
    com.l2jfrozen.gameserver.network.SystemMessageId S1_NOT_ON_YOUR_FRIENDS_LIST -> S1_NOT_ON_YOUR_FRIENDS_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_BEEN_DELETED_FROM_YOUR_FRIENDS_LIST -> S1_HAS_BEEN_DELETED_FROM_YOUR_FRIENDS_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_ADD_YOURSELF_TO_YOUR_OWN_FRIENDS_LIST -> YOU_CANNOT_ADD_YOURSELF_TO_YOUR_OWN_FRIENDS_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ALREADY_IN_FRIENDS_LIST -> S1_ALREADY_IN_FRIENDS_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId NO_NEW_INVITATIONS_ACCEPTED -> NO_NEW_INVITATIONS_ACCEPTED
    com.l2jfrozen.gameserver.network.SystemMessageId THE_USER_NOT_IN_FRIENDS_LIST -> THE_USER_NOT_IN_FRIENDS_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_SUCCEEDED_INVITING_FRIEND -> YOU_HAVE_SUCCEEDED_INVITING_FRIEND
    com.l2jfrozen.gameserver.network.SystemMessageId THE_PLAYER_IS_REJECTING_FRIEND_INVITATIONS -> THE_PLAYER_IS_REJECTING_FRIEND_INVITATIONS
    com.l2jfrozen.gameserver.network.SystemMessageId DO_YOU_WISH_TO_DELETE_FRIENDLIST -> DO_YOU_WISH_TO_DELETE_FRIENDLIST
    com.l2jfrozen.gameserver.network.SystemMessageId S1_S2 -> S1_S2
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_LOGOUT_WHILE_FIGHTING -> CANT_LOGOUT_WHILE_FIGHTING
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_RESTART_WHILE_FIGHTING -> CANT_RESTART_WHILE_FIGHTING
    com.l2jfrozen.gameserver.network.SystemMessageId ENTER_FILE_NAME_CREST -> ENTER_FILE_NAME_CREST
    com.l2jfrozen.gameserver.network.SystemMessageId S1_REQUIRED_FOR_SUMMONING -> S1_REQUIRED_FOR_SUMMONING
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ALREADY_SUMMONED -> S1_ALREADY_SUMMONED
    com.l2jfrozen.gameserver.network.SystemMessageId USE_S1_ -> USE_S1_
    com.l2jfrozen.gameserver.network.SystemMessageId FILE_NOT_FOUND -> FILE_NOT_FOUND
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ROLLED_S2 -> S1_ROLLED_S2
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_MAY_NOT_THROW_THE_DICE_AT_THIS_TIME_TRY_AGAIN_LATER -> YOU_MAY_NOT_THROW_THE_DICE_AT_THIS_TIME_TRY_AGAIN_LATER
    com.l2jfrozen.gameserver.network.SystemMessageId NO_GM_PROVIDING_SERVICE_NOW -> NO_GM_PROVIDING_SERVICE_NOW
    com.l2jfrozen.gameserver.network.SystemMessageId TARGET_TOO_FAR -> TARGET_TOO_FAR
    com.l2jfrozen.gameserver.network.SystemMessageId S1_DISAPPEARED -> S1_DISAPPEARED
    com.l2jfrozen.gameserver.network.SystemMessageId INCORRECT_TARGET -> INCORRECT_TARGET
    com.l2jfrozen.gameserver.network.SystemMessageId INCOMPATIBLE_ITEM_GRADE -> INCOMPATIBLE_ITEM_GRADE
    com.l2jfrozen.gameserver.network.SystemMessageId SP_DECREASED_S1 -> SP_DECREASED_S1
    com.l2jfrozen.gameserver.network.SystemMessageId EXP_DECREASED_BY_S1 -> EXP_DECREASED_BY_S1
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_WORN_OFF -> S1_HAS_WORN_OFF
    com.l2jfrozen.gameserver.network.SystemMessageId LETHAL_STRIKE -> LETHAL_STRIKE
    com.l2jfrozen.gameserver.network.SystemMessageId LETHAL_STRIKE_SUCCESSFUL -> LETHAL_STRIKE_SUCCESSFUL
    com.l2jfrozen.gameserver.network.SystemMessageId AMOUNT_FOR_WINNER_S1_IS_S2_ADENA_WE_HAVE_S3_PRIZE_WINNER -> AMOUNT_FOR_WINNER_S1_IS_S2_ADENA_WE_HAVE_S3_PRIZE_WINNER
    com.l2jfrozen.gameserver.network.SystemMessageId AMOUNT_FOR_LOTTERY_S1_IS_S2_ADENA_NO_WINNER -> AMOUNT_FOR_LOTTERY_S1_IS_S2_ADENA_NO_WINNER
    com.l2jfrozen.gameserver.network.SystemMessageId INVENTORY_LESS_THAN_80_PERCENT -> INVENTORY_LESS_THAN_80_PERCENT
    com.l2jfrozen.gameserver.network.SystemMessageId NO_LOTTERY_TICKETS_CURRENT_SOLD -> NO_LOTTERY_TICKETS_CURRENT_SOLD
    com.l2jfrozen.gameserver.network.SystemMessageId NO_LOTTERY_TICKETS_AVAILABLE -> NO_LOTTERY_TICKETS_AVAILABLE
    com.l2jfrozen.gameserver.network.SystemMessageId ENTERED_COMBAT_ZONE -> ENTERED_COMBAT_ZONE
    com.l2jfrozen.gameserver.network.SystemMessageId LEFT_COMBAT_ZONE -> LEFT_COMBAT_ZONE
    com.l2jfrozen.gameserver.network.SystemMessageId PLAYING_FOR_LONG_TIME -> PLAYING_FOR_LONG_TIME
    com.l2jfrozen.gameserver.network.SystemMessageId CHARACTER_DOES_NOT_EXIST -> CHARACTER_DOES_NOT_EXIST
    com.l2jfrozen.gameserver.network.SystemMessageId WELCOME_TO_LINEAGE -> WELCOME_TO_LINEAGE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_DIED_DROPPED_S3_S2 -> S1_DIED_DROPPED_S3_S2
    com.l2jfrozen.gameserver.network.SystemMessageId CREATE_LVL_TOO_LOW_TO_REGISTER -> CREATE_LVL_TOO_LOW_TO_REGISTER
    com.l2jfrozen.gameserver.network.SystemMessageId UP_TO_S1_RECIPES_CAN_REGISTER -> UP_TO_S1_RECIPES_CAN_REGISTER
    com.l2jfrozen.gameserver.network.SystemMessageId CLAN_HAS_NO_CLAN_HALL -> CLAN_HAS_NO_CLAN_HALL
    com.l2jfrozen.gameserver.network.SystemMessageId INVALID_MACRO -> INVALID_MACRO
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_MAY_CREATE_UP_TO_24_MACROS -> YOU_MAY_CREATE_UP_TO_24_MACROS
    com.l2jfrozen.gameserver.network.SystemMessageId ENTER_THE_MACRO_NAME -> ENTER_THE_MACRO_NAME
    com.l2jfrozen.gameserver.network.SystemMessageId MACRO_DESCRIPTION_MAX_32_CHARS -> MACRO_DESCRIPTION_MAX_32_CHARS
    com.l2jfrozen.gameserver.network.SystemMessageId LOTTERY_TICKET_SALES_TEMP_SUSPENDED -> LOTTERY_TICKET_SALES_TEMP_SUSPENDED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_MAY_NOT_IMPOSE_A_BLOCK_AN_A_GM -> YOU_MAY_NOT_IMPOSE_A_BLOCK_AN_A_GM
    com.l2jfrozen.gameserver.network.SystemMessageId GAME_CLIENT_UNABLE_TO_CONNECT_TO_PETITION_SERVER -> GAME_CLIENT_UNABLE_TO_CONNECT_TO_PETITION_SERVER
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_ONE_ACTIVE_PETITION_AT_TIME -> ONLY_ONE_ACTIVE_PETITION_AT_TIME
    com.l2jfrozen.gameserver.network.SystemMessageId PETITION_SYSTEM_CURRENT_UNAVAILABLE -> PETITION_SYSTEM_CURRENT_UNAVAILABLE
    com.l2jfrozen.gameserver.network.SystemMessageId WE_HAVE_RECEIVED_S1_PETITIONS_TODAY -> WE_HAVE_RECEIVED_S1_PETITIONS_TODAY
    com.l2jfrozen.gameserver.network.SystemMessageId PETITION_MAX_CHARS_255 -> PETITION_MAX_CHARS_255
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_UNDER_PETITION_CONSULTATION -> NOT_UNDER_PETITION_CONSULTATION
    com.l2jfrozen.gameserver.network.SystemMessageId PETITION_ACCEPTED_RECENT_NO_S1 -> PETITION_ACCEPTED_RECENT_NO_S1
    com.l2jfrozen.gameserver.network.SystemMessageId SUBMITTED_YOU_S1_TH_PETITION_S2_LEFT -> SUBMITTED_YOU_S1_TH_PETITION_S2_LEFT
    com.l2jfrozen.gameserver.network.SystemMessageId S1_PETITION_ON_WAITING_LIST -> S1_PETITION_ON_WAITING_LIST
    com.l2jfrozen.gameserver.network.SystemMessageId PETITION_UNDER_PROCESS -> PETITION_UNDER_PROCESS
    com.l2jfrozen.gameserver.network.SystemMessageId PETITION_CANCELED_SUBMIT_S1_MORE_TODAY -> PETITION_CANCELED_SUBMIT_S1_MORE_TODAY
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_CANCEL_PETITION_TRY_LATER -> FAILED_CANCEL_PETITION_TRY_LATER
    com.l2jfrozen.gameserver.network.SystemMessageId PETITION_NOT_SUBMITTED -> PETITION_NOT_SUBMITTED
    com.l2jfrozen.gameserver.network.SystemMessageId PETITION_ENDED_WITH_S1 -> PETITION_ENDED_WITH_S1
    com.l2jfrozen.gameserver.network.SystemMessageId RECENT_NO_S1_CANCELED -> RECENT_NO_S1_CANCELED
    com.l2jfrozen.gameserver.network.SystemMessageId THIS_END_THE_PETITION_PLEASE_PROVIDE_FEEDBACK -> THIS_END_THE_PETITION_PLEASE_PROVIDE_FEEDBACK
    com.l2jfrozen.gameserver.network.SystemMessageId PETITION_APP_ACCEPTED -> PETITION_APP_ACCEPTED
    com.l2jfrozen.gameserver.network.SystemMessageId PETITION_WITH_S1_UNDER_WAY -> PETITION_WITH_S1_UNDER_WAY
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_ARE_NOT_IN_PETITION_CHAT -> YOU_ARE_NOT_IN_PETITION_CHAT
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_RECOMMEND_YOURSELF -> YOU_CANNOT_RECOMMEND_YOURSELF
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_BEEN_RECOMMENDED -> YOU_HAVE_BEEN_RECOMMENDED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_RECOMMENDED -> YOU_HAVE_RECOMMENDED
    com.l2jfrozen.gameserver.network.SystemMessageId THAT_CHARACTER_IS_RECOMMENDED -> THAT_CHARACTER_IS_RECOMMENDED
    com.l2jfrozen.gameserver.network.SystemMessageId NO_MORE_RECOMMENDATIONS_TO_HAVE -> NO_MORE_RECOMMENDATIONS_TO_HAVE
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_LEVEL_SUP_10_CAN_RECOMMEND -> ONLY_LEVEL_SUP_10_CAN_RECOMMEND
    com.l2jfrozen.gameserver.network.SystemMessageId PET_USES_S1 -> PET_USES_S1
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_NO_LONGER_RECIVE_A_RECOMMENDATION -> YOU_NO_LONGER_RECIVE_A_RECOMMENDATION
    com.l2jfrozen.gameserver.network.SystemMessageId NPC_SERVER_NOT_OPERATING -> NPC_SERVER_NOT_OPERATING
    com.l2jfrozen.gameserver.network.SystemMessageId INVENTORY_VOLUME -> INVENTORY_VOLUME
    com.l2jfrozen.gameserver.network.SystemMessageId RECIPE_ALREADY_REGISTERED -> RECIPE_ALREADY_REGISTERED
    com.l2jfrozen.gameserver.network.SystemMessageId NO_FUTHER_RECIPES_CAN_BE_ADDED -> NO_FUTHER_RECIPES_CAN_BE_ADDED
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_AUTHORIZED_TO_REGISTER_RECIPE -> NOT_AUTHORIZED_TO_REGISTER_RECIPE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ADDED -> S1_ADDED
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_ALTER_RECIPEBOOK_WHILE_CRAFTING -> CANT_ALTER_RECIPEBOOK_WHILE_CRAFTING
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_REGISTER_NO_ABILITY_TO_CRAFT -> CANT_REGISTER_NO_ABILITY_TO_CRAFT
    com.l2jfrozen.gameserver.network.SystemMessageId WOULD_YOU_LIKE_TO_OPEN_THE_GATE -> WOULD_YOU_LIKE_TO_OPEN_THE_GATE
    com.l2jfrozen.gameserver.network.SystemMessageId WOULD_YOU_LIKE_TO_CLOSE_THE_GATE -> WOULD_YOU_LIKE_TO_CLOSE_THE_GATE
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_CRAFT_DURING_COMBAT -> CANT_CRAFT_DURING_COMBAT
    com.l2jfrozen.gameserver.network.SystemMessageId ENTER_SHADOW_MOTHER_TREE -> ENTER_SHADOW_MOTHER_TREE
    com.l2jfrozen.gameserver.network.SystemMessageId EXIT_SHADOW_MOTHER_TREE -> EXIT_SHADOW_MOTHER_TREE
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_USE_ITEMS_SKILLS_WITH_FORMALWEAR -> CANNOT_USE_ITEMS_SKILLS_WITH_FORMALWEAR
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_WILL_ENTER_THE_OLYMPIAD_STADIUM_IN_S1_SECOND_S -> YOU_WILL_ENTER_THE_OLYMPIAD_STADIUM_IN_S1_SECOND_S
    com.l2jfrozen.gameserver.network.SystemMessageId THE_GAME_HAS_BEEN_CANCELLED_BECAUSE_THE_OTHER_PARTY_ENDS_THE_GAME -> THE_GAME_HAS_BEEN_CANCELLED_BECAUSE_THE_OTHER_PARTY_ENDS_THE_GAME
    com.l2jfrozen.gameserver.network.SystemMessageId THE_GAME_HAS_BEEN_CANCELLED_BECAUSE_THE_OTHER_PARTY_DOES_NOT_MEET_THE_REQUIREMENTS_FOR_JOINING_THE_GAME -> THE_GAME_HAS_BEEN_CANCELLED_BECAUSE_THE_OTHER_PARTY_DOES_NOT_MEET_THE_REQUIREMENTS_FOR_JOINING_THE_GAME
    com.l2jfrozen.gameserver.network.SystemMessageId THE_GAME_WILL_START_IN_S1_SECOND_S -> THE_GAME_WILL_START_IN_S1_SECOND_S
    com.l2jfrozen.gameserver.network.SystemMessageId STARTS_THE_GAME -> STARTS_THE_GAME
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_WON_THE_GAME -> S1_HAS_WON_THE_GAME
    com.l2jfrozen.gameserver.network.SystemMessageId THE_GAME_ENDED_IN_A_TIE -> THE_GAME_ENDED_IN_A_TIE
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_WILL_GO_BACK_TO_THE_VILLAGE_IN_S1_SECOND_S -> YOU_WILL_GO_BACK_TO_THE_VILLAGE_IN_S1_SECOND_S
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANT_JOIN_THE_OLYMPIAD_WITH_A_SUB_JOB_CHARACTER -> YOU_CANT_JOIN_THE_OLYMPIAD_WITH_A_SUB_JOB_CHARACTER
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_NOBLESS_CAN_PARTICIPATE_IN_THE_OLYMPIAD -> ONLY_NOBLESS_CAN_PARTICIPATE_IN_THE_OLYMPIAD
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_ALREADY_BEEN_REGISTERED_IN_A_WAITING_LIST_OF_AN_EVENT -> YOU_HAVE_ALREADY_BEEN_REGISTERED_IN_A_WAITING_LIST_OF_AN_EVENT
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_BEEN_REGISTERED_IN_A_WAITING_LIST_OF_CLASSIFIED_GAMES -> YOU_HAVE_BEEN_REGISTERED_IN_A_WAITING_LIST_OF_CLASSIFIED_GAMES
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_BEEN_REGISTERED_IN_A_WAITING_LIST_OF_NO_CLASS_GAMES -> YOU_HAVE_BEEN_REGISTERED_IN_A_WAITING_LIST_OF_NO_CLASS_GAMES
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_BEEN_DELETED_FROM_THE_WAITING_LIST_OF_A_GAME -> YOU_HAVE_BEEN_DELETED_FROM_THE_WAITING_LIST_OF_A_GAME
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_NOT_BEEN_REGISTERED_IN_A_WAITING_LIST_OF_A_GAME -> YOU_HAVE_NOT_BEEN_REGISTERED_IN_A_WAITING_LIST_OF_A_GAME
    com.l2jfrozen.gameserver.network.SystemMessageId THIS_ITEM_CANT_BE_EQUIPPED_FOR_THE_OLYMPIAD_EVENT -> THIS_ITEM_CANT_BE_EQUIPPED_FOR_THE_OLYMPIAD_EVENT
    com.l2jfrozen.gameserver.network.SystemMessageId THIS_ITEM_IS_NOT_AVAILABLE_FOR_THE_OLYMPIAD_EVENT -> THIS_ITEM_IS_NOT_AVAILABLE_FOR_THE_OLYMPIAD_EVENT
    com.l2jfrozen.gameserver.network.SystemMessageId THIS_SKILL_IS_NOT_AVAILABLE_FOR_THE_OLYMPIAD_EVENT -> THIS_SKILL_IS_NOT_AVAILABLE_FOR_THE_OLYMPIAD_EVENT
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_EQUIP_ITEM_DUE_TO_BAD_CONDITION -> CANNOT_EQUIP_ITEM_DUE_TO_BAD_CONDITION
    com.l2jfrozen.gameserver.network.SystemMessageId OLYMPIAD_PERIOD_S1_HAS_STARTED -> OLYMPIAD_PERIOD_S1_HAS_STARTED
    com.l2jfrozen.gameserver.network.SystemMessageId OLYMPIAD_PERIOD_S1_HAS_ENDED -> OLYMPIAD_PERIOD_S1_HAS_ENDED
    com.l2jfrozen.gameserver.network.SystemMessageId THE_OLYMPIAD_GAME_HAS_STARTED -> THE_OLYMPIAD_GAME_HAS_STARTED
    com.l2jfrozen.gameserver.network.SystemMessageId THE_OLYMPIAD_GAME_HAS_ENDED -> THE_OLYMPIAD_GAME_HAS_ENDED
    com.l2jfrozen.gameserver.network.SystemMessageId THE_OLYMPIAD_GAME_IS_NOT_CURRENTLY_IN_PROGRESS -> THE_OLYMPIAD_GAME_IS_NOT_CURRENTLY_IN_PROGRESS
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_GAINED_S2_OLYMPIAD_POINTS -> S1_HAS_GAINED_S2_OLYMPIAD_POINTS
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_LOST_S2_OLYMPIAD_POINTS -> S1_HAS_LOST_S2_OLYMPIAD_POINTS
    com.l2jfrozen.gameserver.network.SystemMessageId THE_PRESENT_RECORD_DURING_THE_CURRENT_OLYMPIAD_SESSION_IS_S1_WINS_S2_DEFEATS_YOU_HAVE_EARNED_S3_OLYMPIAD_POINTS -> THE_PRESENT_RECORD_DURING_THE_CURRENT_OLYMPIAD_SESSION_IS_S1_WINS_S2_DEFEATS_YOU_HAVE_EARNED_S3_OLYMPIAD_POINTS
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_ARE_ALREADY_ON_THE_WAITING_LIST_TO_PARTICIPATE_IN_THE_GAME_FOR_YOUR_CLASS -> YOU_ARE_ALREADY_ON_THE_WAITING_LIST_TO_PARTICIPATE_IN_THE_GAME_FOR_YOUR_CLASS
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_ARE_ALREADY_ON_THE_WAITING_LIST_FOR_ALL_CLASSES_WAITING_TO_PARTICIPATE_IN_THE_GAME -> YOU_ARE_ALREADY_ON_THE_WAITING_LIST_FOR_ALL_CLASSES_WAITING_TO_PARTICIPATE_IN_THE_GAME
    com.l2jfrozen.gameserver.network.SystemMessageId SINCE_80_PERCENT_OR_MORE_OF_YOUR_INVENTORY_SLOTS_ARE_FULL_YOU_CANNOT_PARTICIPATE_IN_THE_OLYMPIAD -> SINCE_80_PERCENT_OR_MORE_OF_YOUR_INVENTORY_SLOTS_ARE_FULL_YOU_CANNOT_PARTICIPATE_IN_THE_OLYMPIAD
    com.l2jfrozen.gameserver.network.SystemMessageId SINCE_YOU_HAVE_CHANGED_YOUR_CLASS_INTO_A_SUB_JOB_YOU_CANNOT_PARTICIPATE_IN_THE_OLYMPIAD -> SINCE_YOU_HAVE_CHANGED_YOUR_CLASS_INTO_A_SUB_JOB_YOU_CANNOT_PARTICIPATE_IN_THE_OLYMPIAD
    com.l2jfrozen.gameserver.network.SystemMessageId WHILE_YOU_ARE_ON_THE_WAITING_LIST_YOU_ARE_NOT_ALLOWED_TO_WATCH_THE_GAME -> WHILE_YOU_ARE_ON_THE_WAITING_LIST_YOU_ARE_NOT_ALLOWED_TO_WATCH_THE_GAME
    com.l2jfrozen.gameserver.network.SystemMessageId THERE_IS_NO_OPPONENT_TO_RECEIVE_YOUR_CHALLENGE_FOR_A_DUEL -> THERE_IS_NO_OPPONENT_TO_RECEIVE_YOUR_CHALLENGE_FOR_A_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_BEEN_CHALLENGED_TO_A_DUEL -> S1_HAS_BEEN_CHALLENGED_TO_A_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId S1S_PARTY_HAS_BEEN_CHALLENGED_TO_A_DUEL -> S1S_PARTY_HAS_BEEN_CHALLENGED_TO_A_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_ACCEPTED_YOUR_CHALLENGE_TO_A_DUEL_THE_DUEL_WILL_BEGIN_IN_A_FEW_MOMENTS -> S1_HAS_ACCEPTED_YOUR_CHALLENGE_TO_A_DUEL_THE_DUEL_WILL_BEGIN_IN_A_FEW_MOMENTS
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_ACCEPTED_S1S_CHALLENGE_TO_A_DUEL_THE_DUEL_WILL_BEGIN_IN_A_FEW_MOMENTS -> YOU_HAVE_ACCEPTED_S1S_CHALLENGE_TO_A_DUEL_THE_DUEL_WILL_BEGIN_IN_A_FEW_MOMENTS
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_DECLINED_YOUR_CHALLENGE_TO_A_DUEL -> S1_HAS_DECLINED_YOUR_CHALLENGE_TO_A_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_ACCEPTED_S1S_CHALLENGE_TO_A_PARTY_DUEL_THE_DUEL_WILL_BEGIN_IN_A_FEW_MOMENTS -> YOU_HAVE_ACCEPTED_S1S_CHALLENGE_TO_A_PARTY_DUEL_THE_DUEL_WILL_BEGIN_IN_A_FEW_MOMENTS
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_ACCEPTED_YOUR_CHALLENGE_TO_DUEL_AGAINST_THEIR_PARTY_THE_DUEL_WILL_BEGIN_IN_A_FEW_MOMENTS -> S1_HAS_ACCEPTED_YOUR_CHALLENGE_TO_DUEL_AGAINST_THEIR_PARTY_THE_DUEL_WILL_BEGIN_IN_A_FEW_MOMENTS
    com.l2jfrozen.gameserver.network.SystemMessageId THE_OPPOSING_PARTY_HAS_DECLINED_YOUR_CHALLENGE_TO_A_DUEL -> THE_OPPOSING_PARTY_HAS_DECLINED_YOUR_CHALLENGE_TO_A_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId SINCE_THE_PERSON_YOU_CHALLENGED_IS_NOT_CURRENTLY_IN_A_PARTY_THEY_CANNOT_DUEL_AGAINST_YOUR_PARTY -> SINCE_THE_PERSON_YOU_CHALLENGED_IS_NOT_CURRENTLY_IN_A_PARTY_THEY_CANNOT_DUEL_AGAINST_YOUR_PARTY
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_CHALLENGED_YOU_TO_A_DUEL -> S1_HAS_CHALLENGED_YOU_TO_A_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId S1S_PARTY_HAS_CHALLENGED_YOUR_PARTY_TO_A_DUEL -> S1S_PARTY_HAS_CHALLENGED_YOUR_PARTY_TO_A_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_ARE_UNABLE_TO_REQUEST_A_DUEL_AT_THIS_TIME -> YOU_ARE_UNABLE_TO_REQUEST_A_DUEL_AT_THIS_TIME
    com.l2jfrozen.gameserver.network.SystemMessageId THE_OPPOSING_PARTY_IS_CURRENTLY_UNABLE_TO_ACCEPT_A_CHALLENGE_TO_A_DUEL -> THE_OPPOSING_PARTY_IS_CURRENTLY_UNABLE_TO_ACCEPT_A_CHALLENGE_TO_A_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId IN_A_MOMENT_YOU_WILL_BE_TRANSPORTED_TO_THE_SITE_WHERE_THE_DUEL_WILL_TAKE_PLACE -> IN_A_MOMENT_YOU_WILL_BE_TRANSPORTED_TO_THE_SITE_WHERE_THE_DUEL_WILL_TAKE_PLACE
    com.l2jfrozen.gameserver.network.SystemMessageId THE_DUEL_WILL_BEGIN_IN_S1_SECONDS -> THE_DUEL_WILL_BEGIN_IN_S1_SECONDS
    com.l2jfrozen.gameserver.network.SystemMessageId LET_THE_DUEL_BEGIN -> LET_THE_DUEL_BEGIN
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_WON_THE_DUEL -> S1_HAS_WON_THE_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId S1S_PARTY_HAS_WON_THE_DUEL -> S1S_PARTY_HAS_WON_THE_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId THE_DUEL_HAS_ENDED_IN_A_TIE -> THE_DUEL_HAS_ENDED_IN_A_TIE
    com.l2jfrozen.gameserver.network.SystemMessageId SINCE_S1_WITHDREW_FROM_THE_DUEL_S2_HAS_WON -> SINCE_S1_WITHDREW_FROM_THE_DUEL_S2_HAS_WON
    com.l2jfrozen.gameserver.network.SystemMessageId SINCE_S1S_PARTY_WITHDREW_FROM_THE_DUEL_S1S_PARTY_HAS_WON -> SINCE_S1S_PARTY_WITHDREW_FROM_THE_DUEL_S1S_PARTY_HAS_WON
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_DUEL_BECAUSE_S1_IS_CURRENTLY_ENGAGED_IN_A_PRIVATE_STORE_OR_MANUFACTURE -> S1_CANNOT_DUEL_BECAUSE_S1_IS_CURRENTLY_ENGAGED_IN_A_PRIVATE_STORE_OR_MANUFACTURE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_DUEL_BECAUSE_S1_IS_CURRENTLY_FISHING -> S1_CANNOT_DUEL_BECAUSE_S1_IS_CURRENTLY_FISHING
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_DUEL_BECAUSE_S1S_HP_OR_MP_IS_BELOW_50_PERCENT -> S1_CANNOT_DUEL_BECAUSE_S1S_HP_OR_MP_IS_BELOW_50_PERCENT
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_MAKE_A_CHALLANGE_TO_A_DUEL_BECAUSE_S1_IS_CURRENTLY_IN_A_DUEL_PROHIBITED_AREA -> S1_CANNOT_MAKE_A_CHALLANGE_TO_A_DUEL_BECAUSE_S1_IS_CURRENTLY_IN_A_DUEL_PROHIBITED_AREA
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_DUEL_BECAUSE_S1_IS_CURRENTLY_ENGAGED_IN_BATTLE -> S1_CANNOT_DUEL_BECAUSE_S1_IS_CURRENTLY_ENGAGED_IN_BATTLE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_DUEL_BECAUSE_S1_IS_ALREADY_ENGAGED_IN_A_DUEL -> S1_CANNOT_DUEL_BECAUSE_S1_IS_ALREADY_ENGAGED_IN_A_DUEL
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_DUEL_BECAUSE_S1_IS_IN_A_CHAOTIC_STATE -> S1_CANNOT_DUEL_BECAUSE_S1_IS_IN_A_CHAOTIC_STATE
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_DUEL_BECAUSE_S1_IS_PARTICIPATING_IN_THE_OLYMPIAD -> S1_CANNOT_DUEL_BECAUSE_S1_IS_PARTICIPATING_IN_THE_OLYMPIAD
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_DUEL_BECAUSE_S1_IS_PARTICIPATING_IN_A_CLAN_HALL_WAR -> S1_CANNOT_DUEL_BECAUSE_S1_IS_PARTICIPATING_IN_A_CLAN_HALL_WAR
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_DUEL_BECAUSE_S1_IS_PARTICIPATING_IN_A_SIEGE_WAR -> S1_CANNOT_DUEL_BECAUSE_S1_IS_PARTICIPATING_IN_A_SIEGE_WAR
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_DUEL_BECAUSE_S1_IS_CURRENTLY_RIDING_A_BOAT_WYVERN_OR_STRIDER -> S1_CANNOT_DUEL_BECAUSE_S1_IS_CURRENTLY_RIDING_A_BOAT_WYVERN_OR_STRIDER
    com.l2jfrozen.gameserver.network.SystemMessageId S1_CANNOT_RECEIVE_A_DUEL_CHALLENGE_BECAUSE_S1_IS_TOO_FAR_AWAY -> S1_CANNOT_RECEIVE_A_DUEL_CHALLENGE_BECAUSE_S1_IS_TOO_FAR_AWAY
    com.l2jfrozen.gameserver.network.SystemMessageId S1_INVITED_YOU_TO_PARTY_ROOM_CONFIRM -> S1_INVITED_YOU_TO_PARTY_ROOM_CONFIRM
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_MATCHING_REQUEST_NO_RESPONSE -> PARTY_MATCHING_REQUEST_NO_RESPONSE
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DISMISS_PARTY_MEMBER -> CANNOT_DISMISS_PARTY_MEMBER
    com.l2jfrozen.gameserver.network.SystemMessageId COURT_MAGICIAN_CREATED_PORTAL -> COURT_MAGICIAN_CREATED_PORTAL
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_ROOM_CREATED -> PARTY_ROOM_CREATED
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_ROOM_REVISED -> PARTY_ROOM_REVISED
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_ROOM_FORBIDDEN -> PARTY_ROOM_FORBIDDEN
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_ROOM_EXITED -> PARTY_ROOM_EXITED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_LEFT_PARTY_ROOM -> S1_LEFT_PARTY_ROOM
    com.l2jfrozen.gameserver.network.SystemMessageId OUSTED_FROM_PARTY_ROOM -> OUSTED_FROM_PARTY_ROOM
    com.l2jfrozen.gameserver.network.SystemMessageId S1_KICKED_FROM_PARTY_ROOM -> S1_KICKED_FROM_PARTY_ROOM
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_ROOM_DISBANDED -> PARTY_ROOM_DISBANDED
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_VIEW_PARTY_ROOMS -> CANT_VIEW_PARTY_ROOMS
    com.l2jfrozen.gameserver.network.SystemMessageId PARTY_ROOM_LEADER_CHANGED -> PARTY_ROOM_LEADER_CHANGED
    com.l2jfrozen.gameserver.network.SystemMessageId CANT_ENTER_PARTY_ROOM -> CANT_ENTER_PARTY_ROOM
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ENTERED_PARTY_ROOM -> S1_ENTERED_PARTY_ROOM
    com.l2jfrozen.gameserver.network.SystemMessageId S1_INVITED_YOU_TO_PARTY_ROOM -> S1_INVITED_YOU_TO_PARTY_ROOM
    com.l2jfrozen.gameserver.network.SystemMessageId SELECT_THE_ITEM_TO_BE_AUGMENTED -> SELECT_THE_ITEM_TO_BE_AUGMENTED
    com.l2jfrozen.gameserver.network.SystemMessageId SELECT_THE_CATALYST_FOR_AUGMENTATION -> SELECT_THE_CATALYST_FOR_AUGMENTATION
    com.l2jfrozen.gameserver.network.SystemMessageId REQUIRES_S1_S2 -> REQUIRES_S1_S2
    com.l2jfrozen.gameserver.network.SystemMessageId THIS_IS_NOT_A_SUITABLE_ITEM -> THIS_IS_NOT_A_SUITABLE_ITEM
    com.l2jfrozen.gameserver.network.SystemMessageId GEMSTONE_QUANTITY_IS_INCORRECT -> GEMSTONE_QUANTITY_IS_INCORRECT
    com.l2jfrozen.gameserver.network.SystemMessageId THE_ITEM_WAS_SUCCESSFULLY_AUGMENTED -> THE_ITEM_WAS_SUCCESSFULLY_AUGMENTED
    com.l2jfrozen.gameserver.network.SystemMessageId SELECT_THE_ITEM_FROM_WHICH_YOU_WISH_TO_REMOVE_AUGMENTATION -> SELECT_THE_ITEM_FROM_WHICH_YOU_WISH_TO_REMOVE_AUGMENTATION
    com.l2jfrozen.gameserver.network.SystemMessageId AUGMENTATION_REMOVAL_CAN_ONLY_BE_DONE_ON_AN_AUGMENTED_ITEM -> AUGMENTATION_REMOVAL_CAN_ONLY_BE_DONE_ON_AN_AUGMENTED_ITEM
    com.l2jfrozen.gameserver.network.SystemMessageId AUGMENTATION_HAS_BEEN_SUCCESSFULLY_REMOVED_FROM_YOUR_S1 -> AUGMENTATION_HAS_BEEN_SUCCESSFULLY_REMOVED_FROM_YOUR_S1
    com.l2jfrozen.gameserver.network.SystemMessageId ONCE_AN_ITEM_IS_AUGMENTED_IT_CANNOT_BE_AUGMENTED_AGAIN -> ONCE_AN_ITEM_IS_AUGMENTED_IT_CANNOT_BE_AUGMENTED_AGAIN
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_AUGMENT_ITEMS_WHILE_A_PRIVATE_STORE_OR_PRIVATE_WORKSHOP_IS_IN_OPERATION -> YOU_CANNOT_AUGMENT_ITEMS_WHILE_A_PRIVATE_STORE_OR_PRIVATE_WORKSHOP_IS_IN_OPERATION
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_AUGMENT_ITEMS_WHILE_DEAD -> YOU_CANNOT_AUGMENT_ITEMS_WHILE_DEAD
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_AUGMENT_ITEMS_WHILE_PARALYZED -> YOU_CANNOT_AUGMENT_ITEMS_WHILE_PARALYZED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_AUGMENT_ITEMS_WHILE_FISHING -> YOU_CANNOT_AUGMENT_ITEMS_WHILE_FISHING
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CANNOT_AUGMENT_ITEMS_WHILE_SITTING_DOWN -> YOU_CANNOT_AUGMENT_ITEMS_WHILE_SITTING_DOWN
    com.l2jfrozen.gameserver.network.SystemMessageId PRESS_THE_AUGMENT_BUTTON_TO_BEGIN -> PRESS_THE_AUGMENT_BUTTON_TO_BEGIN
    com.l2jfrozen.gameserver.network.SystemMessageId AUGMENTATION_FAILED_DUE_TO_INAPPROPRIATE_CONDITIONS -> AUGMENTATION_FAILED_DUE_TO_INAPPROPRIATE_CONDITIONS
    com.l2jfrozen.gameserver.network.SystemMessageId AUGMENTED_ITEM_CANNOT_BE_DISCARDED -> AUGMENTED_ITEM_CANNOT_BE_DISCARDED
    com.l2jfrozen.gameserver.network.SystemMessageId S1S_REMAINING_MANA_IS_NOW_10 -> S1S_REMAINING_MANA_IS_NOW_10
    com.l2jfrozen.gameserver.network.SystemMessageId S1S_REMAINING_MANA_IS_NOW_5 -> S1S_REMAINING_MANA_IS_NOW_5
    com.l2jfrozen.gameserver.network.SystemMessageId S1S_REMAINING_MANA_IS_NOW_1 -> S1S_REMAINING_MANA_IS_NOW_1
    com.l2jfrozen.gameserver.network.SystemMessageId S1S_REMAINING_MANA_IS_NOW_0 -> S1S_REMAINING_MANA_IS_NOW_0
    com.l2jfrozen.gameserver.network.SystemMessageId UNABLE_TO_UNLOCK_DOOR -> UNABLE_TO_UNLOCK_DOOR
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_TO_UNLOCK_DOOR -> FAILED_TO_UNLOCK_DOOR
    com.l2jfrozen.gameserver.network.SystemMessageId THERE_IS_S1_HOUR_AND_S2_MINUTE_LEFT_OF_THE_FIXED_USAGE_TIME -> THERE_IS_S1_HOUR_AND_S2_MINUTE_LEFT_OF_THE_FIXED_USAGE_TIME
    com.l2jfrozen.gameserver.network.SystemMessageId S2_MINUTE_OF_USAGE_TIME_ARE_LEFT_FOR_S1 -> S2_MINUTE_OF_USAGE_TIME_ARE_LEFT_FOR_S1
    com.l2jfrozen.gameserver.network.SystemMessageId S2_WAS_DROPPED_IN_THE_S1_REGION -> S2_WAS_DROPPED_IN_THE_S1_REGION
    com.l2jfrozen.gameserver.network.SystemMessageId THE_OWNER_OF_S2_HAS_APPEARED_IN_THE_S1_REGION -> THE_OWNER_OF_S2_HAS_APPEARED_IN_THE_S1_REGION
    com.l2jfrozen.gameserver.network.SystemMessageId S2_OWNER_HAS_LOGGED_INTO_THE_S1_REGION -> S2_OWNER_HAS_LOGGED_INTO_THE_S1_REGION
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HAS_DISAPPEARED -> S1_HAS_DISAPPEARED
    com.l2jfrozen.gameserver.network.SystemMessageId RESSURECTION_REQUEST -> RESSURECTION_REQUEST
    com.l2jfrozen.gameserver.network.SystemMessageId FORCE_INCREASED_TO_S1 -> FORCE_INCREASED_TO_S1
    com.l2jfrozen.gameserver.network.SystemMessageId FORCE_MAXLEVEL_REACHED -> FORCE_MAXLEVEL_REACHED
    com.l2jfrozen.gameserver.network.SystemMessageId FORCE_MAXIMUM -> FORCE_MAXIMUM
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DO_WHILE_FISHING_1 -> CANNOT_DO_WHILE_FISHING_1
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_FISHING_SKILLS_NOW -> ONLY_FISHING_SKILLS_NOW
    com.l2jfrozen.gameserver.network.SystemMessageId GOT_A_BITE -> GOT_A_BITE
    com.l2jfrozen.gameserver.network.SystemMessageId FISH_SPIT_THE_HOOK -> FISH_SPIT_THE_HOOK
    com.l2jfrozen.gameserver.network.SystemMessageId BAIT_STOLEN_BY_FISH -> BAIT_STOLEN_BY_FISH
    com.l2jfrozen.gameserver.network.SystemMessageId BAIT_LOST_FISH_GOT_AWAY -> BAIT_LOST_FISH_GOT_AWAY
    com.l2jfrozen.gameserver.network.SystemMessageId FISHING_POLE_NOT_EQUIPPED -> FISHING_POLE_NOT_EQUIPPED
    com.l2jfrozen.gameserver.network.SystemMessageId BAIT_ON_HOOK_BEFORE_FISHING -> BAIT_ON_HOOK_BEFORE_FISHING
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_FISH_UNDER_WATER -> CANNOT_FISH_UNDER_WATER
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_FISH_ON_BOAT -> CANNOT_FISH_ON_BOAT
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_FISH_HERE -> CANNOT_FISH_HERE
    com.l2jfrozen.gameserver.network.SystemMessageId FISHING_ATTEMPT_CANCELLED -> FISHING_ATTEMPT_CANCELLED
    com.l2jfrozen.gameserver.network.SystemMessageId NOT_ENOUGH_BAIT -> NOT_ENOUGH_BAIT
    com.l2jfrozen.gameserver.network.SystemMessageId REEL_LINE_AND_STOP_FISHING -> REEL_LINE_AND_STOP_FISHING
    com.l2jfrozen.gameserver.network.SystemMessageId CAST_LINE_AND_START_FISHING -> CAST_LINE_AND_START_FISHING
    com.l2jfrozen.gameserver.network.SystemMessageId CAN_USE_PUMPING_ONLY_WHILE_FISHING -> CAN_USE_PUMPING_ONLY_WHILE_FISHING
    com.l2jfrozen.gameserver.network.SystemMessageId CAN_USE_REELING_ONLY_WHILE_FISHING -> CAN_USE_REELING_ONLY_WHILE_FISHING
    com.l2jfrozen.gameserver.network.SystemMessageId FISH_RESISTED_ATTEMPT_TO_BRING_IT_IN -> FISH_RESISTED_ATTEMPT_TO_BRING_IT_IN
    com.l2jfrozen.gameserver.network.SystemMessageId PUMPING_SUCCESFUL_S1_DAMAGE -> PUMPING_SUCCESFUL_S1_DAMAGE
    com.l2jfrozen.gameserver.network.SystemMessageId FISH_RESISTED_PUMPING_S1_HP_REGAINED -> FISH_RESISTED_PUMPING_S1_HP_REGAINED
    com.l2jfrozen.gameserver.network.SystemMessageId REELING_SUCCESFUL_S1_DAMAGE -> REELING_SUCCESFUL_S1_DAMAGE
    com.l2jfrozen.gameserver.network.SystemMessageId FISH_RESISTED_REELING_S1_HP_REGAINED -> FISH_RESISTED_REELING_S1_HP_REGAINED
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CAUGHT_SOMETHING -> YOU_CAUGHT_SOMETHING
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DO_WHILE_FISHING_2 -> CANNOT_DO_WHILE_FISHING_2
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_DO_WHILE_FISHING_3 -> CANNOT_DO_WHILE_FISHING_3
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_ATTACK_WITH_FISHING_POLE -> CANNOT_ATTACK_WITH_FISHING_POLE
    com.l2jfrozen.gameserver.network.SystemMessageId WRONG_FISHINGSHOT_GRADE -> WRONG_FISHINGSHOT_GRADE
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_FISH_WHILE_USING_RECIPE_BOOK -> CANNOT_FISH_WHILE_USING_RECIPE_BOOK
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_CAUGHT_SOMETHING_SMELLY_THROW_IT_BACK -> YOU_CAUGHT_SOMETHING_SMELLY_THROW_IT_BACK
    com.l2jfrozen.gameserver.network.SystemMessageId FISH_NO_MORE_BITING_TRY_OTHER_LOCATION -> FISH_NO_MORE_BITING_TRY_OTHER_LOCATION
    com.l2jfrozen.gameserver.network.SystemMessageId FISH_RESISTING_LOOK_BOBBLER -> FISH_RESISTING_LOOK_BOBBLER
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_WORN_FISH_OUT -> YOU_WORN_FISH_OUT
    com.l2jfrozen.gameserver.network.SystemMessageId NOTHING_INSIDE_THAT -> NOTHING_INSIDE_THAT
    com.l2jfrozen.gameserver.network.SystemMessageId REELING_PUMPING_3_LEVELS_HIGHER_THAN_FISHING_PENALTY -> REELING_PUMPING_3_LEVELS_HIGHER_THAN_FISHING_PENALTY
    com.l2jfrozen.gameserver.network.SystemMessageId REELING_SUCCESSFUL_PENALTY_S1 -> REELING_SUCCESSFUL_PENALTY_S1
    com.l2jfrozen.gameserver.network.SystemMessageId PUMPING_SUCCESSFUL_PENALTY_S1 -> PUMPING_SUCCESSFUL_PENALTY_S1
    com.l2jfrozen.gameserver.network.SystemMessageId AUTO_USE_CANCELLED_LACK_OF_S1 -> AUTO_USE_CANCELLED_LACK_OF_S1
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_AUTO_USE_LACK_OF_S1 -> CANNOT_AUTO_USE_LACK_OF_S1
    com.l2jfrozen.gameserver.network.SystemMessageId THERE_IS_NO_SKILL_THAT_ENABLES_ENCHANT -> THERE_IS_NO_SKILL_THAT_ENABLES_ENCHANT
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DONT_HAVE_ALL_OF_THE_ITEMS_NEEDED_TO_ENCHANT_THAT_SKILL -> YOU_DONT_HAVE_ALL_OF_THE_ITEMS_NEEDED_TO_ENCHANT_THAT_SKILL
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_SUCCEEDED_IN_ENCHANTING_THE_SKILL_S1 -> YOU_HAVE_SUCCEEDED_IN_ENCHANTING_THE_SKILL_S1
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_HAVE_FAILED_TO_ENCHANT_THE_SKILL_S1 -> YOU_HAVE_FAILED_TO_ENCHANT_THE_SKILL_S1
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DONT_HAVE_ENOUGH_SP_TO_ENCHANT_THAT_SKILL -> YOU_DONT_HAVE_ENOUGH_SP_TO_ENCHANT_THAT_SKILL
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_DONT_HAVE_ENOUGH_EXP_TO_ENCHANT_THAT_SKILL -> YOU_DONT_HAVE_ENOUGH_EXP_TO_ENCHANT_THAT_SKILL
    com.l2jfrozen.gameserver.network.SystemMessageId TIME_S1_S2_IN_THE_DAY -> TIME_S1_S2_IN_THE_DAY
    com.l2jfrozen.gameserver.network.SystemMessageId TIME_S1_S2_IN_THE_NIGHT -> TIME_S1_S2_IN_THE_NIGHT
    com.l2jfrozen.gameserver.network.SystemMessageId THIRD_CLASS_TRANSFER -> THIRD_CLASS_TRANSFER
    com.l2jfrozen.gameserver.network.SystemMessageId CLASS_TRANSFER -> CLASS_TRANSFER
    com.l2jfrozen.gameserver.network.SystemMessageId SUBCLASS_TRANSFER_COMPLETED -> SUBCLASS_TRANSFER_COMPLETED
    com.l2jfrozen.gameserver.network.SystemMessageId ADD_NEW_SUBCLASS -> ADD_NEW_SUBCLASS
    com.l2jfrozen.gameserver.network.SystemMessageId THE_SEED_HAS_BEEN_SOWN -> THE_SEED_HAS_BEEN_SOWN
    com.l2jfrozen.gameserver.network.SystemMessageId THIS_SEED_MAY_NOT_BE_SOWN_HERE -> THIS_SEED_MAY_NOT_BE_SOWN_HERE
    com.l2jfrozen.gameserver.network.SystemMessageId THE_MANOR_SYSTEM_IS_CURRENTLY_UNDER_MAINTENANCE -> THE_MANOR_SYSTEM_IS_CURRENTLY_UNDER_MAINTENANCE
    com.l2jfrozen.gameserver.network.SystemMessageId THE_TRANSACTION_IS_COMPLETE -> THE_TRANSACTION_IS_COMPLETE
    com.l2jfrozen.gameserver.network.SystemMessageId THERE_IS_A_DISCREPANCY_ON_THE_INVOICE -> THERE_IS_A_DISCREPANCY_ON_THE_INVOICE
    com.l2jfrozen.gameserver.network.SystemMessageId THE_SEED_QUANTITY_IS_INCORRECT -> THE_SEED_QUANTITY_IS_INCORRECT
    com.l2jfrozen.gameserver.network.SystemMessageId THE_SEED_INFORMATION_IS_INCORRECT -> THE_SEED_INFORMATION_IS_INCORRECT
    com.l2jfrozen.gameserver.network.SystemMessageId THE_MANOR_INFORMATION_HAS_BEEN_UPDATED -> THE_MANOR_INFORMATION_HAS_BEEN_UPDATED
    com.l2jfrozen.gameserver.network.SystemMessageId THE_NUMBER_OF_CROPS_IS_INCORRECT -> THE_NUMBER_OF_CROPS_IS_INCORRECT
    com.l2jfrozen.gameserver.network.SystemMessageId THE_CROPS_ARE_PRICED_INCORRECTLY -> THE_CROPS_ARE_PRICED_INCORRECTLY
    com.l2jfrozen.gameserver.network.SystemMessageId THE_TYPE_IS_INCORRECT -> THE_TYPE_IS_INCORRECT
    com.l2jfrozen.gameserver.network.SystemMessageId NO_CROPS_CAN_BE_PURCHASED_AT_THIS_TIME -> NO_CROPS_CAN_BE_PURCHASED_AT_THIS_TIME
    com.l2jfrozen.gameserver.network.SystemMessageId THE_SEED_WAS_SUCCESSFULLY_SOWN -> THE_SEED_WAS_SUCCESSFULLY_SOWN
    com.l2jfrozen.gameserver.network.SystemMessageId THE_SEED_WAS_NOT_SOWN -> THE_SEED_WAS_NOT_SOWN
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_ARE_NOT_AUTHORIZED_TO_HARVEST -> YOU_ARE_NOT_AUTHORIZED_TO_HARVEST
    com.l2jfrozen.gameserver.network.SystemMessageId THE_HARVEST_HAS_FAILED -> THE_HARVEST_HAS_FAILED
    com.l2jfrozen.gameserver.network.SystemMessageId THE_HARVEST_FAILED_BECAUSE_THE_SEED_WAS_NOT_SOWN -> THE_HARVEST_FAILED_BECAUSE_THE_SEED_WAS_NOT_SOWN
    com.l2jfrozen.gameserver.network.SystemMessageId THE_SEED_PRICING_GREATLY_DIFFERS_FROM_STANDARD_SEED_PRICES -> THE_SEED_PRICING_GREATLY_DIFFERS_FROM_STANDARD_SEED_PRICES
    com.l2jfrozen.gameserver.network.SystemMessageId THE_AMOUNT_IS_NOT_SUFFICIENT_AND_SO_THE_MANOR_IS_NOT_IN_OPERATION -> THE_AMOUNT_IS_NOT_SUFFICIENT_AND_SO_THE_MANOR_IS_NOT_IN_OPERATION
    com.l2jfrozen.gameserver.network.SystemMessageId THE_NEXT_SEED_PURCHASE_PRICE_IS_S1_ADENA -> THE_NEXT_SEED_PURCHASE_PRICE_IS_S1_ADENA
    com.l2jfrozen.gameserver.network.SystemMessageId THE_SALES_PRICE_FOR_SEEDS_IS_S1_ADENA -> THE_SALES_PRICE_FOR_SEEDS_IS_S1_ADENA
    com.l2jfrozen.gameserver.network.SystemMessageId THE_REMAINDER_AFTER_SELLING_THE_SEEDS_IS_S1 -> THE_REMAINDER_AFTER_SELLING_THE_SEEDS_IS_S1
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HARVESTED_S3_S2S -> S1_HARVESTED_S3_S2S
    com.l2jfrozen.gameserver.network.SystemMessageId S1_HARVESTED_S2S -> S1_HARVESTED_S2S
    com.l2jfrozen.gameserver.network.SystemMessageId TRADED_S2_OF_CROP_S1 -> TRADED_S2_OF_CROP_S1
    com.l2jfrozen.gameserver.network.SystemMessageId FAILED_IN_TRADING_S2_OF_CROP_S1 -> FAILED_IN_TRADING_S2_OF_CROP_S1
    com.l2jfrozen.gameserver.network.SystemMessageId THE_TARGET_IS_UNAVAILABLE_FOR_SEEDING -> THE_TARGET_IS_UNAVAILABLE_FOR_SEEDING
    com.l2jfrozen.gameserver.network.SystemMessageId SEED_PRICE_SHOULD_BE_MORE_THAN_S1_AND_LESS_THAN_S2 -> SEED_PRICE_SHOULD_BE_MORE_THAN_S1_AND_LESS_THAN_S2
    com.l2jfrozen.gameserver.network.SystemMessageId THE_QUANTITY_OF_SEED_SHOULD_BE_MORE_THAN_S1_AND_LESS_THAN_S2 -> THE_QUANTITY_OF_SEED_SHOULD_BE_MORE_THAN_S1_AND_LESS_THAN_S2
    com.l2jfrozen.gameserver.network.SystemMessageId CROP_PRICE_SHOULD_BE_MORE_THAN_S1_AND_LESS_THAN_S2 -> CROP_PRICE_SHOULD_BE_MORE_THAN_S1_AND_LESS_THAN_S2
    com.l2jfrozen.gameserver.network.SystemMessageId THE_QUANTITY_OF_CROP_SHOULD_BE_MORE_THAN_S1_AND_LESS_THAN_S2 -> THE_QUANTITY_OF_CROP_SHOULD_BE_MORE_THAN_S1_AND_LESS_THAN_S2
    com.l2jfrozen.gameserver.network.SystemMessageId HERE_YOU_CAN_BUY_ONLY_SEEDS_OF_S1_MANOR -> HERE_YOU_CAN_BUY_ONLY_SEEDS_OF_S1_MANOR
    com.l2jfrozen.gameserver.network.SystemMessageId A_MANOR_CANNOT_BE_SET_UP_BETWEEN_6_AM_AND_8_PM -> A_MANOR_CANNOT_BE_SET_UP_BETWEEN_6_AM_AND_8_PM
    com.l2jfrozen.gameserver.network.SystemMessageId NO_SERVITOR_CANNOT_AUTOMATE_USE -> NO_SERVITOR_CANNOT_AUTOMATE_USE
    com.l2jfrozen.gameserver.network.SystemMessageId YOUR_SEED_OR_REMAINING_PURCHASE_AMOUNT_IS_INADEQUATE -> YOUR_SEED_OR_REMAINING_PURCHASE_AMOUNT_IS_INADEQUATE
    com.l2jfrozen.gameserver.network.SystemMessageId DEATH_PENALTY_LEVEL_S1_ADDED -> DEATH_PENALTY_LEVEL_S1_ADDED
    com.l2jfrozen.gameserver.network.SystemMessageId DEATH_PENALTY_LIFTED -> DEATH_PENALTY_LIFTED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ADENA_HAS_BEEN_WITHDRAWN_TO_PAY_FOR_PURCHASING_FEES -> S1_ADENA_HAS_BEEN_WITHDRAWN_TO_PAY_FOR_PURCHASING_FEES
    com.l2jfrozen.gameserver.network.SystemMessageId HACKING_TOOL -> HACKING_TOOL
    com.l2jfrozen.gameserver.network.SystemMessageId ATTACK_WAS_BLOCKED -> ATTACK_WAS_BLOCKED
    com.l2jfrozen.gameserver.network.SystemMessageId OBSERVERS_CANNOT_PARTICIPATE -> OBSERVERS_CANNOT_PARTICIPATE
    com.l2jfrozen.gameserver.network.SystemMessageId DOUBLE_POINTS_YOU_GOT_$51_GLASSES_PC -> DOUBLE_POINTS_YOU_GOT_$51_GLASSES_PC
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_RECEVIED_$51_GLASSES_PC -> YOU_RECEVIED_$51_GLASSES_PC
    com.l2jfrozen.gameserver.network.SystemMessageId THE_PORTAL_HAS_BEEN_CREATED -> THE_PORTAL_HAS_BEEN_CREATED
    com.l2jfrozen.gameserver.network.SystemMessageId ONLY_NOBLESSE_LEADER_CAN_VIEW_SIEGE_STATUS_WINDOW -> ONLY_NOBLESSE_LEADER_CAN_VIEW_SIEGE_STATUS_WINDOW
    com.l2jfrozen.gameserver.network.SystemMessageId S1 -> S1
    com.l2jfrozen.gameserver.network.SystemMessageId FRIEND_LIST_FOOTER -> FRIEND_LIST_FOOTER
    com.l2jfrozen.gameserver.network.SystemMessageId LEFT_COMMAND_CHANNEL -> LEFT_COMMAND_CHANNEL
    com.l2jfrozen.gameserver.network.SystemMessageId S1_PARTY_LEFT_COMMAND_CHANNEL -> S1_PARTY_LEFT_COMMAND_CHANNEL
    com.l2jfrozen.gameserver.network.SystemMessageId COMMAND_CHANNEL_ONLY_BY_LEVEL_5_CLAN_LEADER_PARTY_LEADER -> COMMAND_CHANNEL_ONLY_BY_LEVEL_5_CLAN_LEADER_PARTY_LEADER
    com.l2jfrozen.gameserver.network.SystemMessageId COMMAND_CHANNEL_CONFIRM -> COMMAND_CHANNEL_CONFIRM
    com.l2jfrozen.gameserver.network.SystemMessageId COMMAND_CHANNEL_FORMED -> COMMAND_CHANNEL_FORMED
    com.l2jfrozen.gameserver.network.SystemMessageId S1_DECLINED_CHANNEL_INVITATION -> S1_DECLINED_CHANNEL_INVITATION
    com.l2jfrozen.gameserver.network.SystemMessageId S1_ALREADY_MEMBER_OF_COMMAND_CHANNEL -> S1_ALREADY_MEMBER_OF_COMMAND_CHANNEL
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_INVITE_TO_COMMAND_CHANNEL -> CANNOT_INVITE_TO_COMMAND_CHANNEL
    com.l2jfrozen.gameserver.network.SystemMessageId USING_S1_PCPOINT -> USING_S1_PCPOINT
    com.l2jfrozen.gameserver.network.SystemMessageId YOU_WILL_BE_MOVED_TO_TOWN_IN_S1_SECONDS -> YOU_WILL_BE_MOVED_TO_TOWN_IN_S1_SECONDS
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_JOIN_OLYMPIAD_POSSESSING_S1 -> CANNOT_JOIN_OLYMPIAD_POSSESSING_S1
    com.l2jfrozen.gameserver.network.SystemMessageId GAME_REQUEST_CANNOT_BE_MADE -> GAME_REQUEST_CANNOT_BE_MADE
    com.l2jfrozen.gameserver.network.SystemMessageId CANNOT_PARTICIPATE_OLYMPIAD_WHILE_DEAD -> CANNOT_PARTICIPATE_OLYMPIAD_WHILE_DEAD
    com.l2jfrozen.gameserver.network.SystemMessageId OLYMPIAD_REGISTRATION_PERIOD_ENDED -> OLYMPIAD_REGISTRATION_PERIOD_ENDED
    com.l2jfrozen.gameserver.network.SystemMessageId THE_CURRENT_RECORD_FOR_THIS_OLYMPIAD_SESSION_IS_S1_MATCHES_S2_WINS_S3_DEFEATS_YOU_HAVE_EARNED_S4_OLYMPIAD_POINTS -> THE_CURRENT_RECORD_FOR_THIS_OLYMPIAD_SESSION_IS_S1_MATCHES_S2_WINS_S3_DEFEATS_YOU_HAVE_EARNED_S4_OLYMPIAD_POINTS
    int _id -> _id
    com.l2jfrozen.gameserver.network.SystemMessageId[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.network.SystemMessageId[] values() -> values
    com.l2jfrozen.gameserver.network.SystemMessageId valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getId() -> getId
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.Action -> com.l2jfrozen.gameserver.network.clientpackets.Action:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _objectId -> _objectId
    int _originX -> _originX
    int _originY -> _originY
    int _originZ -> _originZ
    int _actionId -> _actionId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.AddTradeItem -> com.l2jfrozen.gameserver.network.clientpackets.AddTradeItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _tradeId -> _tradeId
    int _objectId -> _objectId
    int _count -> _count
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.AllyDismiss -> com.l2jfrozen.gameserver.network.clientpackets.AllyDismiss:
    java.lang.String _clanName -> _clanName
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.AllyLeave -> com.l2jfrozen.gameserver.network.clientpackets.AllyLeave:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.AnswerJoinPartyRoom -> com.l2jfrozen.gameserver.network.clientpackets.AnswerJoinPartyRoom:
    int _answer -> _answer
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.AnswerTradeRequest -> com.l2jfrozen.gameserver.network.clientpackets.AnswerTradeRequest:
    int _response -> _response
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.Appearing -> com.l2jfrozen.gameserver.network.clientpackets.Appearing:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.AttackRequest -> com.l2jfrozen.gameserver.network.clientpackets.AttackRequest:
    int _objectId -> _objectId
    int _originX -> _originX
    int _originY -> _originY
    int _originZ -> _originZ
    int _attackId -> _attackId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.AuthLogin -> com.l2jfrozen.gameserver.network.clientpackets.AuthLogin:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _loginName -> _loginName
    int _playKey1 -> _playKey1
    int _playKey2 -> _playKey2
    int _loginKey1 -> _loginKey1
    int _loginKey2 -> _loginKey2
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.CannotMoveAnymore -> com.l2jfrozen.gameserver.network.clientpackets.CannotMoveAnymore:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.CannotMoveAnymoreInVehicle -> com.l2jfrozen.gameserver.network.clientpackets.CannotMoveAnymoreInVehicle:
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    int _boatId -> _boatId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.ChangeMoveType2 -> com.l2jfrozen.gameserver.network.clientpackets.ChangeMoveType2:
    boolean _typeRun -> _typeRun
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.ChangeWaitType2 -> com.l2jfrozen.gameserver.network.clientpackets.ChangeWaitType2:
    boolean _typeStand -> _typeStand
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.CharacterCreate -> com.l2jfrozen.gameserver.network.clientpackets.CharacterCreate:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.Object CREATION_LOCK -> CREATION_LOCK
    java.lang.String _name -> _name
    byte _sex -> _sex
    byte _hairStyle -> _hairStyle
    byte _hairColor -> _hairColor
    byte _face -> _face
    int _race -> _race
    int _classId -> _classId
    int _int -> _int
    int _str -> _str
    int _con -> _con
    int _men -> _men
    int _dex -> _dex
    int _wit -> _wit
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    boolean isValidName(java.lang.String) -> isValidName
    void initNewChar(com.l2jfrozen.gameserver.network.L2GameClient,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> initNewChar
    void startTutorialQuest(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> startTutorialQuest
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.CharacterDelete -> com.l2jfrozen.gameserver.network.clientpackets.CharacterDelete:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _charSlot -> _charSlot
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.CharacterRestore -> com.l2jfrozen.gameserver.network.clientpackets.CharacterRestore:
    int _charSlot -> _charSlot
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.CharacterSelected -> com.l2jfrozen.gameserver.network.clientpackets.CharacterSelected:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _charSlot -> _charSlot
    int _unk1 -> _unk1
    int _unk2 -> _unk2
    int _unk3 -> _unk3
    int _unk4 -> _unk4
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.DlgAnswer -> com.l2jfrozen.gameserver.network.clientpackets.DlgAnswer:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _messageId -> _messageId
    int _answer -> _answer
    int _requestId -> _requestId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.DummyPacket -> com.l2jfrozen.gameserver.network.clientpackets.DummyPacket:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.EnterWorld -> com.l2jfrozen.gameserver.network.clientpackets.EnterWorld:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    com.l2jfrozen.common.thread.TaskPriority getPriority() -> getPriority
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    boolean isValidName(java.lang.String) -> isValidName
    void EnterGM(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> EnterGM
    void Hellows(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> Hellows
    void ColorSystem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> ColorSystem
    void onEnterAio(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> onEnterAio
    void engage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> engage
    void notifyPartner(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> notifyPartner
    void notifyClanMembers(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> notifyClanMembers
    void notifySponsorOrApprentice(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> notifySponsorOrApprentice
    void loadTutorial(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> loadTutorial
    void setPledgeClass(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> setPledgeClass
    void notifyCastleOwner(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> notifyCastleOwner
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.FinishRotating -> com.l2jfrozen.gameserver.network.clientpackets.FinishRotating:
    int _degree -> _degree
    int _unknown -> _unknown
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.GameGuardReply -> com.l2jfrozen.gameserver.network.clientpackets.GameGuardReply:
    int[] _reply -> _reply
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.L2GameClientPacket -> com.l2jfrozen.gameserver.network.clientpackets.L2GameClientPacket:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    boolean read() -> r
    void readImpl() -> readImpl
    void run() -> run
    void runImpl() -> runImpl
    void sendPacket(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> sendPacket
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.Logout -> com.l2jfrozen.gameserver.network.clientpackets.Logout:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.MoveBackwardToLocation -> com.l2jfrozen.gameserver.network.clientpackets.MoveBackwardToLocation:
    int _targetX -> _targetX
    int _targetY -> _targetY
    int _targetZ -> _targetZ
    int _originX -> _originX
    int _originY -> _originY
    int _originZ -> _originZ
    int _moveMovement -> _moveMovement
    int _curX -> _curX
    int _curY -> _curY
    int _curZ -> _curZ
    void <init>() -> <init>
    com.l2jfrozen.common.thread.TaskPriority getPriority() -> getPriority
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.MoveWithDelta -> com.l2jfrozen.gameserver.network.clientpackets.MoveWithDelta:
    int _dx -> _dx
    int _dy -> _dy
    int _dz -> _dz
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.MultiSellChoose -> com.l2jfrozen.gameserver.network.clientpackets.MultiSellChoose:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _listId -> _listId
    int _entryId -> _entryId
    int _amount -> _amount
    int _enchantment -> _enchantment
    int _transactionTax -> _transactionTax
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    void doExchange(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.multisell.MultiSellEntry,boolean,boolean,int) -> doExchange
    com.l2jfrozen.gameserver.model.multisell.MultiSellEntry prepareEntry(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.multisell.MultiSellEntry,boolean,boolean,int) -> prepareEntry
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.NewCharacter -> com.l2jfrozen.gameserver.network.clientpackets.NewCharacter:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.ObserverReturn -> com.l2jfrozen.gameserver.network.clientpackets.ObserverReturn:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.ProtocolVersion -> com.l2jfrozen.gameserver.network.clientpackets.ProtocolVersion:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _version -> _version
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestActionUse -> com.l2jfrozen.gameserver.network.clientpackets.RequestActionUse:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _actionId -> _actionId
    boolean _ctrlPressed -> _ctrlPressed
    boolean _shiftPressed -> _shiftPressed
    java.util.List _petActions -> _petActions
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    void useSkill(int,com.l2jfrozen.gameserver.model.L2Object) -> useSkill
    void useSkill(int) -> useSkill
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestAllyCrest -> com.l2jfrozen.gameserver.network.clientpackets.RequestAllyCrest:
    int _crestId -> _crestId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestAllyInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestAllyInfo:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestAnswerFriendInvite -> com.l2jfrozen.gameserver.network.clientpackets.RequestAnswerFriendInvite:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _response -> _response
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    void notifyFriends(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> notifyFriends
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestAnswerJoinAlly -> com.l2jfrozen.gameserver.network.clientpackets.RequestAnswerJoinAlly:
    int _response -> _response
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestAnswerJoinParty -> com.l2jfrozen.gameserver.network.clientpackets.RequestAnswerJoinParty:
    int _response -> _response
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestAnswerJoinPledge -> com.l2jfrozen.gameserver.network.clientpackets.RequestAnswerJoinPledge:
    int _answer -> _answer
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestAquireSkill -> com.l2jfrozen.gameserver.network.clientpackets.RequestAquireSkill:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _id -> _id
    int _level -> _level
    int _skillType -> _skillType
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestAquireSkillInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestAquireSkillInfo:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _id -> _id
    int _level -> _level
    int _skillType -> _skillType
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestAskJoinPartyRoom -> com.l2jfrozen.gameserver.network.clientpackets.RequestAskJoinPartyRoom:
    java.lang.String _name -> _name
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestAutoSoulShot -> com.l2jfrozen.gameserver.network.clientpackets.RequestAutoSoulShot:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _itemId -> _itemId
    int _type -> _type
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestBBSwrite -> com.l2jfrozen.gameserver.network.clientpackets.RequestBBSwrite:
    java.lang.String _url -> _url
    java.lang.String _arg1 -> _arg1
    java.lang.String _arg2 -> _arg2
    java.lang.String _arg3 -> _arg3
    java.lang.String _arg4 -> _arg4
    java.lang.String _arg5 -> _arg5
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestBlock -> com.l2jfrozen.gameserver.network.clientpackets.RequestBlock:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int BLOCK -> BLOCK
    int UNBLOCK -> UNBLOCK
    int BLOCKLIST -> BLOCKLIST
    int ALLBLOCK -> ALLBLOCK
    int ALLUNBLOCK -> ALLUNBLOCK
    java.lang.String _name -> _name
    java.lang.Integer _type -> _type
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestBuyItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestBuyItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _listId -> _listId
    int _count -> _count
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestBuyProcure -> com.l2jfrozen.gameserver.network.clientpackets.RequestBuyProcure:
    int _listId -> _listId
    int _count -> _count
    int[] _items -> _items
    java.util.List _procureList -> _procureList
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestBuySeed -> com.l2jfrozen.gameserver.network.clientpackets.RequestBuySeed:
    int _count -> _count
    int _manorId -> _manorId
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestBypassToServer -> com.l2jfrozen.gameserver.network.clientpackets.RequestBypassToServer:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _command -> _command
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    void comeHere(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> comeHere
    void playerHelp(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> playerHelp
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestChangePartyLeader -> com.l2jfrozen.gameserver.network.clientpackets.RequestChangePartyLeader:
    java.lang.String _name -> _name
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestChangePetName -> com.l2jfrozen.gameserver.network.clientpackets.RequestChangePetName:
    java.lang.String _name -> _name
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestConfirmCancelItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestConfirmCancelItem:
    int _itemId -> _itemId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestConfirmGemStone -> com.l2jfrozen.gameserver.network.clientpackets.RequestConfirmGemStone:
    int _targetItemObjId -> _targetItemObjId
    int _refinerItemObjId -> _refinerItemObjId
    int _gemstoneItemObjId -> _gemstoneItemObjId
    int _gemstoneCount -> _gemstoneCount
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestConfirmRefinerItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestConfirmRefinerItem:
    int GEMSTONE_D -> GEMSTONE_D
    int GEMSTONE_C -> GEMSTONE_C
    int _targetItemObjId -> _targetItemObjId
    int _refinerItemObjId -> _refinerItemObjId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    int getLifeStoneGrade(int) -> getLifeStoneGrade
    int getLifeStoneLevel(int) -> getLifeStoneLevel
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestConfirmSiegeWaitingList -> com.l2jfrozen.gameserver.network.clientpackets.RequestConfirmSiegeWaitingList:
    int _approved -> _approved
    int _castleId -> _castleId
    int _clanId -> _clanId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestConfirmTargetItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestConfirmTargetItem:
    int _itemObjId -> _itemObjId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestCrystallizeItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestCrystallizeItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _objectId -> _objectId
    int _count -> _count
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestCursedWeaponList -> com.l2jfrozen.gameserver.network.clientpackets.RequestCursedWeaponList:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestCursedWeaponLocation -> com.l2jfrozen.gameserver.network.clientpackets.RequestCursedWeaponLocation:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestDeleteMacro -> com.l2jfrozen.gameserver.network.clientpackets.RequestDeleteMacro:
    int _id -> _id
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestDestroyItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestDestroyItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _objectId -> _objectId
    int _count -> _count
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestDismissAlly -> com.l2jfrozen.gameserver.network.clientpackets.RequestDismissAlly:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestDismissPartyRoom -> com.l2jfrozen.gameserver.network.clientpackets.RequestDismissPartyRoom:
    int _roomid -> _roomid
    int _data2 -> _data2
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestDropItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestDropItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _objectId -> _objectId
    int _count -> _count
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestDuelAnswerStart -> com.l2jfrozen.gameserver.network.clientpackets.RequestDuelAnswerStart:
    int _partyDuel -> _partyDuel
    int _unk1 -> _unk1
    int _response -> _response
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestDuelStart -> com.l2jfrozen.gameserver.network.clientpackets.RequestDuelStart:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _player -> _player
    int _partyDuel -> _partyDuel
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestDuelSurrender -> com.l2jfrozen.gameserver.network.clientpackets.RequestDuelSurrender:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestEnchantItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestEnchantItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int[] CRYSTAL_SCROLLS -> CRYSTAL_SCROLLS
    int[] NORMAL_WEAPON_SCROLLS -> NORMAL_WEAPON_SCROLLS
    int[] BLESSED_WEAPON_SCROLLS -> BLESSED_WEAPON_SCROLLS
    int[] CRYSTAL_WEAPON_SCROLLS -> CRYSTAL_WEAPON_SCROLLS
    int[] NORMAL_ARMOR_SCROLLS -> NORMAL_ARMOR_SCROLLS
    int[] BLESSED_ARMOR_SCROLLS -> BLESSED_ARMOR_SCROLLS
    int[] CRYSTAL_ARMOR_SCROLLS -> CRYSTAL_ARMOR_SCROLLS
    int _objectId -> _objectId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestEvaluate -> com.l2jfrozen.gameserver.network.clientpackets.RequestEvaluate:
    int _targetId -> _targetId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestExAcceptJoinMPCC -> com.l2jfrozen.gameserver.network.clientpackets.RequestExAcceptJoinMPCC:
    int _response -> _response
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestExAskJoinMPCC -> com.l2jfrozen.gameserver.network.clientpackets.RequestExAskJoinMPCC:
    java.lang.String _name -> _name
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    void askJoinMPCC(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> askJoinMPCC
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestExEnchantSkill -> com.l2jfrozen.gameserver.network.clientpackets.RequestExEnchantSkill:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _skillId -> _skillId
    int _skillLvl -> _skillLvl
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestExEnchantSkillInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestExEnchantSkillInfo:
    int _skillId -> _skillId
    int _skillLvl -> _skillLvl
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestExFishRanking -> com.l2jfrozen.gameserver.network.clientpackets.RequestExFishRanking:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestExMPCCShowPartyMembersInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestExMPCCShowPartyMembersInfo:
    int _partyLeaderId -> _partyLeaderId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestExMagicSkillUseGround -> com.l2jfrozen.gameserver.network.clientpackets.RequestExMagicSkillUseGround:
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _skillId -> _skillId
    boolean _ctrlPressed -> _ctrlPressed
    boolean _shiftPressed -> _shiftPressed
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestExOustFromMPCC -> com.l2jfrozen.gameserver.network.clientpackets.RequestExOustFromMPCC:
    java.lang.String _name -> _name
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestExPledgeCrestLarge -> com.l2jfrozen.gameserver.network.clientpackets.RequestExPledgeCrestLarge:
    int _crestId -> _crestId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestExSetPledgeCrestLarge -> com.l2jfrozen.gameserver.network.clientpackets.RequestExSetPledgeCrestLarge:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _size -> _size
    byte[] _data -> _data
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestExitPartyMatchingWaitingRoom -> com.l2jfrozen.gameserver.network.clientpackets.RequestExitPartyMatchingWaitingRoom:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestFriendDel -> com.l2jfrozen.gameserver.network.clientpackets.RequestFriendDel:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _name -> _name
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestFriendInvite -> com.l2jfrozen.gameserver.network.clientpackets.RequestFriendInvite:
    java.lang.String _name -> _name
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestFriendList -> com.l2jfrozen.gameserver.network.clientpackets.RequestFriendList:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestGMCommand -> com.l2jfrozen.gameserver.network.clientpackets.RequestGMCommand:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _targetName -> _targetName
    int _command -> _command
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestGetBossRecord -> com.l2jfrozen.gameserver.network.clientpackets.RequestGetBossRecord:
    int _bossId -> _bossId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestGetItemFromPet -> com.l2jfrozen.gameserver.network.clientpackets.RequestGetItemFromPet:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _objectId -> _objectId
    int _amount -> _amount
    int _unknown -> _unknown
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestGetOffVehicle -> com.l2jfrozen.gameserver.network.clientpackets.RequestGetOffVehicle:
    int _id -> _id
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestGetOnVehicle -> com.l2jfrozen.gameserver.network.clientpackets.RequestGetOnVehicle:
    int _id -> _id
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestGiveItemToPet -> com.l2jfrozen.gameserver.network.clientpackets.RequestGiveItemToPet:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _objectId -> _objectId
    int _amount -> _amount
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestGiveNickName -> com.l2jfrozen.gameserver.network.clientpackets.RequestGiveNickName:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _target -> _target
    java.lang.String _title -> _title
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestGmList -> com.l2jfrozen.gameserver.network.clientpackets.RequestGmList:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestHennaEquip -> com.l2jfrozen.gameserver.network.clientpackets.RequestHennaEquip:
    int _symbolId -> _symbolId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestHennaItemInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestHennaItemInfo:
    int _symbolId -> _symbolId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestHennaList -> com.l2jfrozen.gameserver.network.clientpackets.RequestHennaList:
    int _unknown -> _unknown
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestItemList -> com.l2jfrozen.gameserver.network.clientpackets.RequestItemList:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestJoinAlly -> com.l2jfrozen.gameserver.network.clientpackets.RequestJoinAlly:
    int _id -> _id
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestJoinParty -> com.l2jfrozen.gameserver.network.clientpackets.RequestJoinParty:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _name -> _name
    int _itemDistribution -> _itemDistribution
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    void addTargetToParty(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> addTargetToParty
    void createNewParty(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> createNewParty
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestJoinPledge -> com.l2jfrozen.gameserver.network.clientpackets.RequestJoinPledge:
    int _target -> _target
    int _pledgeType -> _pledgeType
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    int getPledgeType() -> getPledgeType
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestJoinSiege -> com.l2jfrozen.gameserver.network.clientpackets.RequestJoinSiege:
    int _castleId -> _castleId
    int _isAttacker -> _isAttacker
    int _isJoining -> _isJoining
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestLinkHtml -> com.l2jfrozen.gameserver.network.clientpackets.RequestLinkHtml:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _link -> _link
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestListPartyMatchingWaitingRoom -> com.l2jfrozen.gameserver.network.clientpackets.RequestListPartyMatchingWaitingRoom:
    int _page -> _page
    int _minlvl -> _minlvl
    int _maxlvl -> _maxlvl
    int _mode -> _mode
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestMagicSkillUse -> com.l2jfrozen.gameserver.network.clientpackets.RequestMagicSkillUse:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _magicId -> _magicId
    boolean _ctrlPressed -> _ctrlPressed
    boolean _shiftPressed -> _shiftPressed
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestMakeMacro -> com.l2jfrozen.gameserver.network.clientpackets.RequestMakeMacro:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.L2Macro _macro -> _macro
    int _commandsLenght -> _commandsLenght
    int MAX_MACRO_LENGTH -> MAX_MACRO_LENGTH
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    boolean checkSecurityOnCommand(com.l2jfrozen.gameserver.model.L2Macro$L2MacroCmd) -> checkSecurityOnCommand
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestManorList -> com.l2jfrozen.gameserver.network.clientpackets.RequestManorList:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestMoveToLocationInVehicle -> com.l2jfrozen.gameserver.network.clientpackets.RequestMoveToLocationInVehicle:
    com.l2jfrozen.common.util.Point3D _pos -> _pos
    com.l2jfrozen.common.util.Point3D _origin_pos -> _origin_pos
    int _boatId -> _boatId
    void <init>() -> <init>
    com.l2jfrozen.common.thread.TaskPriority getPriority() -> getPriority
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestOlympiadMatchList -> com.l2jfrozen.gameserver.network.clientpackets.RequestOlympiadMatchList:
    java.lang.String _C__D0_13_REQUESTOLYMPIADMATCHLIST -> _C__D0_13_REQUESTOLYMPIADMATCHLIST
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestOlympiadObserverEnd -> com.l2jfrozen.gameserver.network.clientpackets.RequestOlympiadObserverEnd:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestOustFromPartyRoom -> com.l2jfrozen.gameserver.network.clientpackets.RequestOustFromPartyRoom:
    int _charid -> _charid
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestOustPartyMember -> com.l2jfrozen.gameserver.network.clientpackets.RequestOustPartyMember:
    java.lang.String _name -> _name
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestOustPledgeMember -> com.l2jfrozen.gameserver.network.clientpackets.RequestOustPledgeMember:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _target -> _target
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestPCCafeCouponUse -> com.l2jfrozen.gameserver.network.clientpackets.RequestPCCafeCouponUse:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _str -> _str
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPackageSend -> com.l2jfrozen.gameserver.network.clientpackets.RequestPackageSend:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _items -> _items
    int _objectID -> _objectID
    int _count -> _count
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestPackageSend$Item -> com.l2jfrozen.gameserver.network.clientpackets.RequestPackageSend$Item:
    int id -> id
    int count -> count
    com.l2jfrozen.gameserver.network.clientpackets.RequestPackageSend this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.clientpackets.RequestPackageSend,int,int) -> <init>
com.l2jfrozen.gameserver.network.clientpackets.RequestPackageSendableItemList -> com.l2jfrozen.gameserver.network.clientpackets.RequestPackageSendableItemList:
    int _objectID -> _objectID
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPartyMatchConfig -> com.l2jfrozen.gameserver.network.clientpackets.RequestPartyMatchConfig:
    int _auto -> _auto
    int _loc -> _loc
    int _lvl -> _lvl
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPartyMatchDetail -> com.l2jfrozen.gameserver.network.clientpackets.RequestPartyMatchDetail:
    int _roomid -> _roomid
    int _unk1 -> _unk1
    int _unk2 -> _unk2
    int _unk3 -> _unk3
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPartyMatchList -> com.l2jfrozen.gameserver.network.clientpackets.RequestPartyMatchList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _roomid -> _roomid
    int _membersmax -> _membersmax
    int _lvlmin -> _lvlmin
    int _lvlmax -> _lvlmax
    int _loot -> _loot
    java.lang.String _roomtitle -> _roomtitle
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestPetGetItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestPetGetItem:
    int _objectId -> _objectId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPetUseItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestPetUseItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _objectId -> _objectId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    void useItem(com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> useItem
    void feed(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> feed
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestPetition -> com.l2jfrozen.gameserver.network.clientpackets.RequestPetition:
    java.lang.String _content -> _content
    int _type -> _type
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPetitionCancel -> com.l2jfrozen.gameserver.network.clientpackets.RequestPetitionCancel:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeCrest -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeCrest:
    int _crestId -> _crestId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeExtendedInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeExtendedInfo:
    java.lang.String _name -> _name
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeInfo:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int clanId -> clanId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeMemberInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeMemberInfo:
    int _unk1 -> _unk1
    java.lang.String _player -> _player
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeMemberList -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeMemberList:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeMemberPowerInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeMemberPowerInfo:
    int _unk1 -> _unk1
    java.lang.String _player -> _player
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgePower -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgePower:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _rank -> _rank
    int _action -> _action
    int _privs -> _privs
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgePowerGradeList -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgePowerGradeList:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeReorganizeMember -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeReorganizeMember:
    int _unk1 -> _unk1
    java.lang.String _memberName -> _memberName
    int _newPledgeType -> _newPledgeType
    java.lang.String _unk2 -> _unk2
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeSetAcademyMaster -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeSetAcademyMaster:
    java.lang.String _currPlayerName -> _currPlayerName
    int _set -> _set
    java.lang.String _targetPlayerName -> _targetPlayerName
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeSetMemberPowerGrade -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeSetMemberPowerGrade:
    int _powerGrade -> _powerGrade
    java.lang.String _member -> _member
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeWarList -> com.l2jfrozen.gameserver.network.clientpackets.RequestPledgeWarList:
    int _unk1 -> _unk1
    int _tab -> _tab
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreBuy -> com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreBuy:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _storePlayerId -> _storePlayerId
    int _count -> _count
    com.l2jfrozen.gameserver.model.ItemRequest[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreManageBuy -> com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreManageBuy:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreManageSell -> com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreManageSell:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreQuitBuy -> com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreQuitBuy:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreQuitSell -> com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreQuitSell:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreSell -> com.l2jfrozen.gameserver.network.clientpackets.RequestPrivateStoreSell:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _storePlayerId -> _storePlayerId
    int _count -> _count
    int _price -> _price
    com.l2jfrozen.gameserver.model.ItemRequest[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestProcureCropList -> com.l2jfrozen.gameserver.network.clientpackets.RequestProcureCropList:
    int _size -> _size
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestQuestAbort -> com.l2jfrozen.gameserver.network.clientpackets.RequestQuestAbort:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _questId -> _questId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestQuestList -> com.l2jfrozen.gameserver.network.clientpackets.RequestQuestList:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeBookDestroy -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeBookDestroy:
    int _recipeID -> _recipeID
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeBookOpen -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeBookOpen:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean _isDwarvenCraft -> _isDwarvenCraft
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeItemMakeInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeItemMakeInfo:
    int _id -> _id
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeItemMakeSelf -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeItemMakeSelf:
    int _id -> _id
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopListSet -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopListSet:
    int _count -> _count
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopMakeInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopMakeInfo:
    int _playerObjectId -> _playerObjectId
    int _recipeId -> _recipeId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopMakeItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopMakeItem:
    int _id -> _id
    int _recipeId -> _recipeId
    int _unknow -> _unknow
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopManageList -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopManageList:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopManagePrev -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopManagePrev:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopManageQuit -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopManageQuit:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopMessageSet -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecipeShopMessageSet:
    java.lang.String _name -> _name
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRecordInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestRecordInfo:
    void <init>() -> <init>
    com.l2jfrozen.common.thread.TaskPriority getPriority() -> getPriority
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRefine -> com.l2jfrozen.gameserver.network.clientpackets.RequestRefine:
    int _targetItemObjId -> _targetItemObjId
    int _refinerItemObjId -> _refinerItemObjId
    int _gemstoneItemObjId -> _gemstoneItemObjId
    int _gemstoneCount -> _gemstoneCount
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    boolean TryAugmentItem(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> TryAugmentItem
    int getLifeStoneGrade(int) -> getLifeStoneGrade
    int getLifeStoneLevel(int) -> getLifeStoneLevel
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRefineCancel -> com.l2jfrozen.gameserver.network.clientpackets.RequestRefineCancel:
    int _targetItemObjId -> _targetItemObjId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestReplyStartPledgeWar -> com.l2jfrozen.gameserver.network.clientpackets.RequestReplyStartPledgeWar:
    int _answer -> _answer
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestReplyStopPledgeWar -> com.l2jfrozen.gameserver.network.clientpackets.RequestReplyStopPledgeWar:
    int _answer -> _answer
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestReplySurrenderPledgeWar -> com.l2jfrozen.gameserver.network.clientpackets.RequestReplySurrenderPledgeWar:
    int _answer -> _answer
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestRestart -> com.l2jfrozen.gameserver.network.clientpackets.RequestRestart:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestRestartPoint -> com.l2jfrozen.gameserver.network.clientpackets.RequestRestartPoint:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _requestedPointType -> _requestedPointType
    boolean _continuation -> _continuation
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestRestartPoint$DeathTask -> com.l2jfrozen.gameserver.network.clientpackets.RequestRestartPoint$DeathTask:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance activeChar -> activeChar
    com.l2jfrozen.gameserver.network.clientpackets.RequestRestartPoint this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.clientpackets.RequestRestartPoint,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.network.clientpackets.RequestSSQStatus -> com.l2jfrozen.gameserver.network.clientpackets.RequestSSQStatus:
    int _page -> _page
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestSellItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestSellItem:
    int _listId -> _listId
    int _count -> _count
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestSendFriendMsg -> com.l2jfrozen.gameserver.network.clientpackets.RequestSendFriendMsg:
    java.util.logging.Logger _logChat -> _logChat
    java.lang.String _message -> _message
    java.lang.String _reciever -> _reciever
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestSetAllyCrest -> com.l2jfrozen.gameserver.network.clientpackets.RequestSetAllyCrest:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _length -> _length
    byte[] _data -> _data
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestSetCrop -> com.l2jfrozen.gameserver.network.clientpackets.RequestSetCrop:
    int _size -> _size
    int _manorId -> _manorId
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestSetPledgeCrest -> com.l2jfrozen.gameserver.network.clientpackets.RequestSetPledgeCrest:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _length -> _length
    byte[] _data -> _data
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestSetSeed -> com.l2jfrozen.gameserver.network.clientpackets.RequestSetSeed:
    int _size -> _size
    int _manorId -> _manorId
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestShortCutDel -> com.l2jfrozen.gameserver.network.clientpackets.RequestShortCutDel:
    int _slot -> _slot
    int _page -> _page
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestShortCutReg -> com.l2jfrozen.gameserver.network.clientpackets.RequestShortCutReg:
    int _type -> _type
    int _id -> _id
    int _slot -> _slot
    int _page -> _page
    int _unk -> _unk
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestShowBoard -> com.l2jfrozen.gameserver.network.clientpackets.RequestShowBoard:
    int _unknown -> _unknown
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestShowMiniMap -> com.l2jfrozen.gameserver.network.clientpackets.RequestShowMiniMap:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestSiegeAttackerList -> com.l2jfrozen.gameserver.network.clientpackets.RequestSiegeAttackerList:
    int _castleId -> _castleId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestSiegeDefenderList -> com.l2jfrozen.gameserver.network.clientpackets.RequestSiegeDefenderList:
    int _castleId -> _castleId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestSiegeInfo -> com.l2jfrozen.gameserver.network.clientpackets.RequestSiegeInfo:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestSkillCoolTime -> com.l2jfrozen.gameserver.network.clientpackets.RequestSkillCoolTime:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestSkillList -> com.l2jfrozen.gameserver.network.clientpackets.RequestSkillList:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestSocialAction -> com.l2jfrozen.gameserver.network.clientpackets.RequestSocialAction:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _actionId -> _actionId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestStartPledgeWar -> com.l2jfrozen.gameserver.network.clientpackets.RequestStartPledgeWar:
    java.lang.String _pledgeName -> _pledgeName
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance player -> player
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestStopPledgeWar -> com.l2jfrozen.gameserver.network.clientpackets.RequestStopPledgeWar:
    java.lang.String _pledgeName -> _pledgeName
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestSurrenderPersonally -> com.l2jfrozen.gameserver.network.clientpackets.RequestSurrenderPersonally:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _pledgeName -> _pledgeName
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestSurrenderPledgeWar -> com.l2jfrozen.gameserver.network.clientpackets.RequestSurrenderPledgeWar:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _pledgeName -> _pledgeName
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestTargetCanceld -> com.l2jfrozen.gameserver.network.clientpackets.RequestTargetCanceld:
    int _unselect -> _unselect
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestTutorialClientEvent -> com.l2jfrozen.gameserver.network.clientpackets.RequestTutorialClientEvent:
    int eventId -> eventId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestTutorialLinkHtml -> com.l2jfrozen.gameserver.network.clientpackets.RequestTutorialLinkHtml:
    java.lang.String _bypass -> _bypass
    boolean protector_packet -> protector_packet
    int answer_id -> answer_id
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestTutorialPassCmdToServer -> com.l2jfrozen.gameserver.network.clientpackets.RequestTutorialPassCmdToServer:
    java.lang.String _bypass -> _bypass
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestTutorialQuestionMark -> com.l2jfrozen.gameserver.network.clientpackets.RequestTutorialQuestionMark:
    int _number -> _number
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestUnEquipItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestUnEquipItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _slot -> _slot
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestUserCommand -> com.l2jfrozen.gameserver.network.clientpackets.RequestUserCommand:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _command -> _command
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestWearItem -> com.l2jfrozen.gameserver.network.clientpackets.RequestWearItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.concurrent.Future _removeWearItemsTask -> _removeWearItemsTask
    int _unknow -> _unknow
    int _listId -> _listId
    int _count -> _count
    int[] _items -> _items
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.RequestWearItem$RemoveWearItemsTask -> com.l2jfrozen.gameserver.network.clientpackets.RequestWearItem$RemoveWearItemsTask:
    com.l2jfrozen.gameserver.network.clientpackets.RequestWearItem this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.clientpackets.RequestWearItem) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.network.clientpackets.RequestWithDrawalParty -> com.l2jfrozen.gameserver.network.clientpackets.RequestWithDrawalParty:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestWithdrawPartyRoom -> com.l2jfrozen.gameserver.network.clientpackets.RequestWithdrawPartyRoom:
    int _roomid -> _roomid
    int _unk1 -> _unk1
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestWithdrawalPledge -> com.l2jfrozen.gameserver.network.clientpackets.RequestWithdrawalPledge:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.RequestWriteHeroWords -> com.l2jfrozen.gameserver.network.clientpackets.RequestWriteHeroWords:
    java.lang.String _heroWords -> _heroWords
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.Say2 -> com.l2jfrozen.gameserver.network.clientpackets.Say2:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.logging.Logger _logChat -> _logChat
    int ALL -> ALL
    int SHOUT -> SHOUT
    int TELL -> TELL
    int PARTY -> PARTY
    int CLAN -> CLAN
    int GM -> GM
    int PETITION_PLAYER -> PETITION_PLAYER
    int PETITION_GM -> PETITION_GM
    int TRADE -> TRADE
    int ALLIANCE -> ALLIANCE
    int ANNOUNCEMENT -> ANNOUNCEMENT
    int PARTYROOM_ALL -> PARTYROOM_ALL
    int PARTYROOM_COMMANDER -> PARTYROOM_COMMANDER
    int HERO_VOICE -> HERO_VOICE
    int CRITICAL_ANNOUNCE -> CRITICAL_ANNOUNCE
    java.lang.String[] CHAT_NAMES -> CHAT_NAMES
    java.lang.String _text -> _text
    int _type -> _type
    com.l2jfrozen.gameserver.network.SystemChatChannelId _type2Check -> _type2Check
    java.lang.String _target -> _target
    java.lang.String[] WALKER_COMMAND_LIST -> WALKER_COMMAND_LIST
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    boolean checkBot(java.lang.String) -> checkBot
    void checkText(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkText
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.SendBypassBuildCmd -> com.l2jfrozen.gameserver.network.clientpackets.SendBypassBuildCmd:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int GM_MESSAGE -> GM_MESSAGE
    int ANNOUNCEMENT -> ANNOUNCEMENT
    java.lang.String _command -> _command
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.SendWareHouseDepositList -> com.l2jfrozen.gameserver.network.clientpackets.SendWareHouseDepositList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _count -> _count
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.SendWareHouseWithDrawList -> com.l2jfrozen.gameserver.network.clientpackets.SendWareHouseWithDrawList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _count -> _count
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.SetPrivateStoreListBuy -> com.l2jfrozen.gameserver.network.clientpackets.SetPrivateStoreListBuy:
    int _count -> _count
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.SetPrivateStoreListSell -> com.l2jfrozen.gameserver.network.clientpackets.SetPrivateStoreListSell:
    int _count -> _count
    boolean _packageSale -> _packageSale
    int[] _items -> _items
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.SetPrivateStoreMsgBuy -> com.l2jfrozen.gameserver.network.clientpackets.SetPrivateStoreMsgBuy:
    java.lang.String _storeMsg -> _storeMsg
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.SetPrivateStoreMsgSell -> com.l2jfrozen.gameserver.network.clientpackets.SetPrivateStoreMsgSell:
    java.lang.String _storeMsg -> _storeMsg
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.SnoopQuit -> com.l2jfrozen.gameserver.network.clientpackets.SnoopQuit:
    int _snoopID -> _snoopID
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.StartRotating -> com.l2jfrozen.gameserver.network.clientpackets.StartRotating:
    int _degree -> _degree
    int _side -> _side
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.SuperCmdCharacterInfo -> com.l2jfrozen.gameserver.network.clientpackets.SuperCmdCharacterInfo:
    java.lang.String _characterName -> _characterName
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.SuperCmdServerStatus -> com.l2jfrozen.gameserver.network.clientpackets.SuperCmdServerStatus:
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.SuperCmdSummonCmd -> com.l2jfrozen.gameserver.network.clientpackets.SuperCmdSummonCmd:
    java.lang.String _summonName -> _summonName
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.TradeDone -> com.l2jfrozen.gameserver.network.clientpackets.TradeDone:
    int _response -> _response
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.clientpackets.TradeRequest -> com.l2jfrozen.gameserver.network.clientpackets.TradeRequest:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _objectId -> _objectId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.UseItem -> com.l2jfrozen.gameserver.network.clientpackets.UseItem:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _objectId -> _objectId
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.clientpackets.ValidatePosition -> com.l2jfrozen.gameserver.network.clientpackets.ValidatePosition:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    int _data -> _data
    void <init>() -> <init>
    void readImpl() -> readImpl
    void runImpl() -> runImpl
    void clientToServer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> clientToServer
    boolean equal(com.l2jfrozen.gameserver.network.clientpackets.ValidatePosition) -> equal
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.gameserverpackets.AuthRequest -> com.l2jfrozen.gameserver.network.gameserverpackets.AuthRequest:
    void <init>(int,boolean,byte[],int,boolean,int,java.util.List,java.util.List) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.gameserver.network.gameserverpackets.BlowFishKey -> com.l2jfrozen.gameserver.network.gameserverpackets.BlowFishKey:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>(byte[],java.security.interfaces.RSAPublicKey) -> <init>
    byte[] getContent() -> gC
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.gameserverpackets.ChangeAccessLevel -> com.l2jfrozen.gameserver.network.gameserverpackets.ChangeAccessLevel:
    void <init>(java.lang.String,int) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.gameserver.network.gameserverpackets.PlayerAuthRequest -> com.l2jfrozen.gameserver.network.gameserverpackets.PlayerAuthRequest:
    void <init>(java.lang.String,com.l2jfrozen.netcore.SessionKey) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.gameserver.network.gameserverpackets.PlayerInGame -> com.l2jfrozen.gameserver.network.gameserverpackets.PlayerInGame:
    void <init>(java.lang.String) -> <init>
    void <init>(java.util.List) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.gameserver.network.gameserverpackets.PlayerLogout -> com.l2jfrozen.gameserver.network.gameserverpackets.PlayerLogout:
    void <init>(java.lang.String) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.gameserver.network.gameserverpackets.PlayerTracert -> com.l2jfrozen.gameserver.network.gameserverpackets.PlayerTracert:
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.gameserver.network.gameserverpackets.ServerStatus -> com.l2jfrozen.gameserver.network.gameserverpackets.ServerStatus:
    java.util.ArrayList _attributes -> _attributes
    java.lang.String[] STATUS_STRING -> STATUS_STRING
    int SERVER_LIST_STATUS -> SERVER_LIST_STATUS
    int SERVER_TYPE -> SERVER_TYPE
    int SERVER_LIST_SQUARE_BRACKET -> SERVER_LIST_SQUARE_BRACKET
    int MAX_PLAYERS -> MAX_PLAYERS
    int SERVER_AGE -> SERVER_AGE
    int STATUS_AUTO -> STATUS_AUTO
    int STATUS_GOOD -> STATUS_GOOD
    int STATUS_NORMAL -> STATUS_NORMAL
    int STATUS_FULL -> STATUS_FULL
    int STATUS_DOWN -> STATUS_DOWN
    int STATUS_GM_ONLY -> STATUS_GM_ONLY
    int SERVER_NORMAL -> SERVER_NORMAL
    int SERVER_RELAX -> SERVER_RELAX
    int SERVER_TEST -> SERVER_TEST
    int SERVER_NOLABEL -> SERVER_NOLABEL
    int SERVER_CREATION_RESTRICTED -> SERVER_CREATION_RESTRICTED
    int SERVER_EVENT -> SERVER_EVENT
    int SERVER_FREE -> SERVER_FREE
    int SERVER_AGE_ALL -> SERVER_AGE_ALL
    int SERVER_AGE_15 -> SERVER_AGE_15
    int SERVER_AGE_18 -> SERVER_AGE_18
    int ON -> ON
    int OFF -> OFF
    void <init>() -> <init>
    void addAttribute(int,int) -> addAttribute
    byte[] getContent() -> gC
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.gameserverpackets.ServerStatus$Attribute -> com.l2jfrozen.gameserver.network.gameserverpackets.ServerStatus$Attribute:
    int id -> id
    int value -> value
    void <init>(int,int) -> <init>
com.l2jfrozen.gameserver.network.loginserverpackets.AuthResponse -> com.l2jfrozen.gameserver.network.loginserverpackets.AuthResponse:
    int _serverId -> _serverId
    java.lang.String _serverName -> _serverName
    void <init>(byte[]) -> <init>
    int getServerId() -> getServerId
    java.lang.String getServerName() -> getServerName
com.l2jfrozen.gameserver.network.loginserverpackets.InitLS -> com.l2jfrozen.gameserver.network.loginserverpackets.InitLS:
    int _rev -> _rev
    byte[] _key -> _key
    int getRevision() -> getRevision
    byte[] getRSAKey() -> getRSAKey
    void <init>(byte[]) -> <init>
com.l2jfrozen.gameserver.network.loginserverpackets.KickPlayer -> com.l2jfrozen.gameserver.network.loginserverpackets.KickPlayer:
    java.lang.String _account -> _account
    void <init>(byte[]) -> <init>
    java.lang.String getAccount() -> getAccount
com.l2jfrozen.gameserver.network.loginserverpackets.LoginServerFail -> com.l2jfrozen.gameserver.network.loginserverpackets.LoginServerFail:
    java.lang.String[] REASONS -> REASONS
    int _reason -> _reason
    void <init>(byte[]) -> <init>
    java.lang.String getReasonString() -> getReasonString
    int getReason() -> getReason
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.loginserverpackets.PlayerAuthResponse -> com.l2jfrozen.gameserver.network.loginserverpackets.PlayerAuthResponse:
    java.lang.String _account -> _account
    boolean _authed -> _authed
    void <init>(byte[]) -> <init>
    java.lang.String getAccount() -> getAccount
    boolean isAuthed() -> isAuthed
com.l2jfrozen.gameserver.network.serverpackets.AbstractServerBasePacket -> com.l2jfrozen.gameserver.network.serverpackets.AbstractServerBasePacket:
    void <init>() -> <init>
    void runImpl() -> runImpl
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ActionFailed -> com.l2jfrozen.gameserver.network.serverpackets.ActionFailed:
    java.lang.String _S__25_ACTIONFAILED -> _S__25_ACTIONFAILED
    com.l2jfrozen.gameserver.network.serverpackets.ActionFailed STATIC_PACKET -> STATIC_PACKET
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.AdminForgePacket -> com.l2jfrozen.gameserver.network.serverpackets.AdminForgePacket:
    java.util.List _parts -> _parts
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    boolean generate(byte,java.lang.String) -> generate
    void addPart(byte,java.lang.String) -> addPart
com.l2jfrozen.gameserver.network.serverpackets.AdminForgePacket$Part -> com.l2jfrozen.gameserver.network.serverpackets.AdminForgePacket$Part:
    byte b -> b
    java.lang.String str -> str
    com.l2jfrozen.gameserver.network.serverpackets.AdminForgePacket this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.AdminForgePacket,byte,java.lang.String) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.AllyCrest -> com.l2jfrozen.gameserver.network.serverpackets.AllyCrest:
    java.lang.String _S__C7_ALLYCREST -> _S__C7_ALLYCREST
    int _crestId -> _crestId
    byte[] _data -> _data
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.AllyInfo -> com.l2jfrozen.gameserver.network.serverpackets.AllyInfo:
    java.lang.String _S__7A_FRIENDLIST -> _S__7A_FRIENDLIST
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _cha -> _cha
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.AquireSkillInfo -> com.l2jfrozen.gameserver.network.serverpackets.AquireSkillInfo:
    java.lang.String _S__A4_AQUIRESKILLINFO -> _S__A4_AQUIRESKILLINFO
    java.util.List _reqs -> _reqs
    int _id -> _id
    int _level -> _level
    int _spCost -> _spCost
    int _mode -> _mode
    void <init>(int,int,int,int) -> <init>
    void addRequirement(int,int,int,int) -> addRequirement
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.AquireSkillInfo$Req -> com.l2jfrozen.gameserver.network.serverpackets.AquireSkillInfo$Req:
    int itemId -> itemId
    int count -> count
    int type -> type
    int unk -> unk
    com.l2jfrozen.gameserver.network.serverpackets.AquireSkillInfo this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.AquireSkillInfo,int,int,int,int) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.AquireSkillList -> com.l2jfrozen.gameserver.network.serverpackets.AquireSkillList:
    java.lang.String _S__A3_AQUIRESKILLLIST -> _S__A3_AQUIRESKILLLIST
    java.util.List _skills -> _skills
    com.l2jfrozen.gameserver.network.serverpackets.skillType _fishingSkills -> _fishingSkills
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.skillType) -> <init>
    void addSkill(int,int,int,int,int) -> addSkill
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.AquireSkillList$Skill -> com.l2jfrozen.gameserver.network.serverpackets.AquireSkillList$Skill:
    int id -> id
    int nextLevel -> nextLevel
    int maxLevel -> maxLevel
    int spCost -> spCost
    int requirements -> requirements
    com.l2jfrozen.gameserver.network.serverpackets.AquireSkillList this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.AquireSkillList,int,int,int,int,int) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.AskJoinAlly -> com.l2jfrozen.gameserver.network.serverpackets.AskJoinAlly:
    java.lang.String _S__A8_ASKJOINALLY_0XA8 -> _S__A8_ASKJOINALLY_0XA8
    java.lang.String _requestorName -> _requestorName
    int _requestorObjId -> _requestorObjId
    void <init>(int,java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.AskJoinFriend -> com.l2jfrozen.gameserver.network.serverpackets.AskJoinFriend:
    java.lang.String _S__7d_ASKJoinFriend_0X7d -> _S__7d_ASKJoinFriend_0X7d
    java.lang.String _requestorName -> _requestorName
    void <init>(java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.AskJoinParty -> com.l2jfrozen.gameserver.network.serverpackets.AskJoinParty:
    java.lang.String _S__4B_ASKJOINPARTY_0X4B -> _S__4B_ASKJOINPARTY_0X4B
    java.lang.String _requestorName -> _requestorName
    int _itemDistribution -> _itemDistribution
    void <init>(java.lang.String,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.AskJoinPledge -> com.l2jfrozen.gameserver.network.serverpackets.AskJoinPledge:
    int _requestorObjId -> _requestorObjId
    java.lang.String _pledgeName -> _pledgeName
    void <init>(int,java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.Attack -> com.l2jfrozen.gameserver.network.serverpackets.Attack:
    java.lang.String _S__06_ATTACK -> _S__06_ATTACK
    int _attackerObjId -> _attackerObjId
    boolean soulshot -> soulshot
    int _grade -> _grade
    int _x -> _x
    int _y -> _y
    int _z -> _z
    com.l2jfrozen.gameserver.network.serverpackets.Attack$Hit[] _hits -> _hits
    void <init>(com.l2jfrozen.gameserver.model.L2Character,boolean,int) -> <init>
    void addHit(com.l2jfrozen.gameserver.model.L2Object,int,boolean,boolean,boolean) -> addHit
    boolean hasHits() -> hasHits
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.Attack$Hit -> com.l2jfrozen.gameserver.network.serverpackets.Attack$Hit:
    int _targetId -> _targetId
    int _damage -> _damage
    int _flags -> _flags
    com.l2jfrozen.gameserver.network.serverpackets.Attack this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.Attack,com.l2jfrozen.gameserver.model.L2Object,int,boolean,boolean,boolean) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.AuthLoginFail -> com.l2jfrozen.gameserver.network.serverpackets.AuthLoginFail:
    java.lang.String _S__12_AUTHLOGINFAIL -> _S__12_AUTHLOGINFAIL
    int NO_TEXT -> NO_TEXT
    int SYSTEM_ERROR_LOGIN_LATER -> SYSTEM_ERROR_LOGIN_LATER
    int PASSWORD_DOES_NOT_MATCH_THIS_ACCOUNT -> PASSWORD_DOES_NOT_MATCH_THIS_ACCOUNT
    int PASSWORD_DOES_NOT_MATCH_THIS_ACCOUNT2 -> PASSWORD_DOES_NOT_MATCH_THIS_ACCOUNT2
    int ACCESS_FAILED_TRY_LATER -> ACCESS_FAILED_TRY_LATER
    int INCORRECT_ACCOUNT_INFO_CONTACT_CUSTOMER_SUPPORT -> INCORRECT_ACCOUNT_INFO_CONTACT_CUSTOMER_SUPPORT
    int ACCESS_FAILED_TRY_LATER2 -> ACCESS_FAILED_TRY_LATER2
    int ACOUNT_ALREADY_IN_USE -> ACOUNT_ALREADY_IN_USE
    int ACCESS_FAILED_TRY_LATER3 -> ACCESS_FAILED_TRY_LATER3
    int ACCESS_FAILED_TRY_LATER4 -> ACCESS_FAILED_TRY_LATER4
    int ACCESS_FAILED_TRY_LATER5 -> ACCESS_FAILED_TRY_LATER5
    int _reason -> _reason
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.AutoAttackStart -> com.l2jfrozen.gameserver.network.serverpackets.AutoAttackStart:
    java.lang.String _S__3B_AUTOATTACKSTART -> _S__3B_AUTOATTACKSTART
    int _targetObjId -> _targetObjId
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.AutoAttackStop -> com.l2jfrozen.gameserver.network.serverpackets.AutoAttackStop:
    java.lang.String _S__3C_AUTOATTACKSTOP -> _S__3C_AUTOATTACKSTOP
    int _targetObjId -> _targetObjId
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.BeginRotation -> com.l2jfrozen.gameserver.network.serverpackets.BeginRotation:
    java.lang.String _S__62_BEGINROTATION -> _S__62_BEGINROTATION
    int _charObjId -> _charObjId
    int _degree -> _degree
    int _side -> _side
    int _speed -> _speed
    void <init>(com.l2jfrozen.gameserver.model.L2Character,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.BuyList -> com.l2jfrozen.gameserver.network.serverpackets.BuyList:
    java.lang.String _S__1D_BUYLIST -> _S__1D_BUYLIST
    int _listId -> _listId
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _list -> _list
    int _money -> _money
    double _taxRate -> _taxRate
    void <init>(com.l2jfrozen.gameserver.model.L2TradeList,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2TradeList,int,double) -> <init>
    void <init>(java.util.List,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.BuyListSeed -> com.l2jfrozen.gameserver.network.serverpackets.BuyListSeed:
    java.lang.String _S__E8_BUYLISTSEED -> _S__E8_BUYLISTSEED
    int _manorId -> _manorId
    java.util.List _list -> _list
    int _money -> _money
    void <init>(com.l2jfrozen.gameserver.model.L2TradeList,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.CameraMode -> com.l2jfrozen.gameserver.network.serverpackets.CameraMode:
    java.lang.String _S__F1_CAMERAMODE -> _S__F1_CAMERAMODE
    int _mode -> _mode
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ChairSit -> com.l2jfrozen.gameserver.network.serverpackets.ChairSit:
    java.lang.String _S__e1_CHAIRSIT -> _S__e1_CHAIRSIT
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _staticObjectId -> _staticObjectId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ChangeMoveType -> com.l2jfrozen.gameserver.network.serverpackets.ChangeMoveType:
    java.lang.String _S__3E_CHANGEMOVETYPE -> _S__3E_CHANGEMOVETYPE
    int WALK -> WALK
    int RUN -> RUN
    int _charObjId -> _charObjId
    boolean _running -> _running
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ChangeWaitType -> com.l2jfrozen.gameserver.network.serverpackets.ChangeWaitType:
    java.lang.String _S__3F_CHANGEWAITTYPE -> _S__3F_CHANGEWAITTYPE
    int _charObjId -> _charObjId
    int _moveType -> _moveType
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int WT_SITTING -> WT_SITTING
    int WT_STANDING -> WT_STANDING
    int WT_START_FAKEDEATH -> WT_START_FAKEDEATH
    int WT_STOP_FAKEDEATH -> WT_STOP_FAKEDEATH
    void <init>(com.l2jfrozen.gameserver.model.L2Character,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.CharCreateFail -> com.l2jfrozen.gameserver.network.serverpackets.CharCreateFail:
    java.lang.String _S__26_CHARCREATEFAIL -> _S__26_CHARCREATEFAIL
    int REASON_CREATION_FAILED -> REASON_CREATION_FAILED
    int REASON_TOO_MANY_CHARACTERS -> REASON_TOO_MANY_CHARACTERS
    int REASON_NAME_ALREADY_EXISTS -> REASON_NAME_ALREADY_EXISTS
    int REASON_16_ENG_CHARS -> REASON_16_ENG_CHARS
    int _error -> _error
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.CharCreateOk -> com.l2jfrozen.gameserver.network.serverpackets.CharCreateOk:
    java.lang.String _S__25_CHARCREATEOK -> _S__25_CHARCREATEOK
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.CharDeleteFail -> com.l2jfrozen.gameserver.network.serverpackets.CharDeleteFail:
    java.lang.String _S__34_CHARDELETEFAIL -> _S__34_CHARDELETEFAIL
    int REASON_DELETION_FAILED -> REASON_DELETION_FAILED
    int REASON_YOU_MAY_NOT_DELETE_CLAN_MEMBER -> REASON_YOU_MAY_NOT_DELETE_CLAN_MEMBER
    int REASON_CLAN_LEADERS_MAY_NOT_BE_DELETED -> REASON_CLAN_LEADERS_MAY_NOT_BE_DELETED
    int _error -> _error
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.CharDeleteOk -> com.l2jfrozen.gameserver.network.serverpackets.CharDeleteOk:
    java.lang.String _S__33_CHARDELETEOK -> _S__33_CHARDELETEOK
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.CharInfo -> com.l2jfrozen.gameserver.network.serverpackets.CharInfo:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _S__03_CHARINFO -> _S__03_CHARINFO
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.Inventory _inv -> _inv
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    int _mAtkSpd -> _mAtkSpd
    int _pAtkSpd -> _pAtkSpd
    int _runSpd -> _runSpd
    int _walkSpd -> _walkSpd
    int _swimRunSpd -> _swimRunSpd
    int _swimWalkSpd -> _swimWalkSpd
    int _flRunSpd -> _flRunSpd
    int _flWalkSpd -> _flWalkSpd
    int _flyRunSpd -> _flyRunSpd
    int _flyWalkSpd -> _flyWalkSpd
    float _moveMultiplier -> _moveMultiplier
    float _attackSpeedMultiplier -> _attackSpeedMultiplier
    int _maxCp -> _maxCp
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.CharMoveToLocation -> com.l2jfrozen.gameserver.network.serverpackets.CharMoveToLocation:
    java.lang.String _S__01_CHARMOVETOLOCATION -> _S__01_CHARMOVETOLOCATION
    int _charObjId -> _charObjId
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _xDst -> _xDst
    int _yDst -> _yDst
    int _zDst -> _zDst
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.CharSelectInfo -> com.l2jfrozen.gameserver.network.serverpackets.CharSelectInfo:
    java.lang.String _S__1F_CHARSELECTINFO -> _S__1F_CHARSELECTINFO
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _loginName -> _loginName
    int _sessionId -> _sessionId
    int _activeId -> _activeId
    com.l2jfrozen.gameserver.model.CharSelectInfoPackage[] _characterPackages -> _characterPackages
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,int) -> <init>
    com.l2jfrozen.gameserver.model.CharSelectInfoPackage[] getCharInfo() -> getCharInfo
    void writeImpl() -> writeImpl
    com.l2jfrozen.gameserver.model.CharSelectInfoPackage[] loadCharacterSelectInfo() -> loadCharacterSelectInfo
    void loadCharacterSubclassInfo(com.l2jfrozen.gameserver.model.CharSelectInfoPackage,int,int) -> loadCharacterSubclassInfo
    com.l2jfrozen.gameserver.model.CharSelectInfoPackage restoreChar(java.sql.ResultSet) -> restoreChar
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.CharSelected -> com.l2jfrozen.gameserver.network.serverpackets.CharSelected:
    java.lang.String _S__21_CHARSELECTED -> _S__21_CHARSELECTED
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _sessionId -> _sessionId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.CharTemplates -> com.l2jfrozen.gameserver.network.serverpackets.CharTemplates:
    java.lang.String _S__23_CHARTEMPLATES -> _S__23_CHARTEMPLATES
    java.util.List _chars -> _chars
    void <init>() -> <init>
    void addChar(com.l2jfrozen.gameserver.templates.L2PcTemplate) -> addChar
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ChooseInventoryItem -> com.l2jfrozen.gameserver.network.serverpackets.ChooseInventoryItem:
    java.lang.String _S__6F_CHOOSEINVENTORYITEM -> _S__6F_CHOOSEINVENTORYITEM
    int _itemId -> _itemId
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ClanHallDecoration -> com.l2jfrozen.gameserver.network.serverpackets.ClanHallDecoration:
    java.lang.String _S__F7_AGITDECOINFO -> _S__F7_AGITDECOINFO
    com.l2jfrozen.gameserver.model.entity.ClanHall _clanHall -> _clanHall
    com.l2jfrozen.gameserver.model.entity.ClanHall$ClanHallFunction _function -> _function
    void <init>(com.l2jfrozen.gameserver.model.entity.ClanHall) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ClientSetTime -> com.l2jfrozen.gameserver.network.serverpackets.ClientSetTime:
    java.lang.String _S__EC_CLIENTSETTIME -> _S__EC_CLIENTSETTIME
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg -> com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg:
    java.lang.String _S__ED_CONFIRMDLG -> _S__ED_CONFIRMDLG
    int _messageId -> _messageId
    int _skillLvL -> _skillLvL
    int TYPE_ZONE_NAME -> TYPE_ZONE_NAME
    int TYPE_SKILL_NAME -> TYPE_SKILL_NAME
    int TYPE_ITEM_NAME -> TYPE_ITEM_NAME
    int TYPE_NPC_NAME -> TYPE_NPC_NAME
    int TYPE_NUMBER -> TYPE_NUMBER
    int TYPE_TEXT -> TYPE_TEXT
    java.util.Vector _types -> _types
    java.util.Vector _values -> _values
    int _time -> _time
    int _requesterId -> _requesterId
    void <init>(int) -> <init>
    com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg addString(java.lang.String) -> addString
    com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg addNumber(int) -> addNumber
    com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg addNpcName(int) -> addNpcName
    com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg addItemName(int) -> addItemName
    com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg addZoneName(int,int,int) -> addZoneName
    com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg addSkillName(int) -> addSkillName
    com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg addSkillName(int,int) -> addSkillName
    com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg addTime(int) -> addTime
    com.l2jfrozen.gameserver.network.serverpackets.ConfirmDlg addRequesterId(int) -> addRequesterId
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.CreatureSay -> com.l2jfrozen.gameserver.network.serverpackets.CreatureSay:
    java.lang.String _S__4A_CREATURESAY -> _S__4A_CREATURESAY
    int _objectId -> _objectId
    int _textType -> _textType
    java.lang.String _charName -> _charName
    java.lang.String _text -> _text
    void <init>(int,int,java.lang.String,java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.CustomNpcInfo -> com.l2jfrozen.gameserver.network.serverpackets.CustomNpcInfo:
    java.lang.String _S__03_CUSTOMNPCINFO -> _S__03_CUSTOMNPCINFO
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void write(char,int,int) -> write
com.l2jfrozen.gameserver.network.serverpackets.DeleteObject -> com.l2jfrozen.gameserver.network.serverpackets.DeleteObject:
    java.lang.String _S__1E_DELETEOBJECT -> _S__1E_DELETEOBJECT
    int _objectId -> _objectId
    void <init>(com.l2jfrozen.gameserver.model.L2Object) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.Dice -> com.l2jfrozen.gameserver.network.serverpackets.Dice:
    java.lang.String _S__D4_Dice -> _S__D4_Dice
    int _charObjId -> _charObjId
    int _itemId -> _itemId
    int _number -> _number
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(int,int,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.Die -> com.l2jfrozen.gameserver.network.serverpackets.Die:
    java.lang.String _S__0B_DIE -> _S__0B_DIE
    int _charObjId -> _charObjId
    boolean _fake -> _fake
    boolean _sweepable -> _sweepable
    boolean _canTeleport -> _canTeleport
    com.l2jfrozen.gameserver.datatables.AccessLevel _access -> _access
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    com.l2jfrozen.gameserver.model.L2Character _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.DoorInfo -> com.l2jfrozen.gameserver.network.serverpackets.DoorInfo:
    java.lang.String _S__60_DOORINFO -> _S__60_DOORINFO
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance _door -> _door
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance,boolean) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.DoorStatusUpdate -> com.l2jfrozen.gameserver.network.serverpackets.DoorStatusUpdate:
    java.lang.String _S__61_DOORSTATUSUPDATE -> _S__61_DOORSTATUSUPDATE
    com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance _door -> _door
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2DoorInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.DropItem -> com.l2jfrozen.gameserver.network.serverpackets.DropItem:
    java.lang.String _S__16_DROPITEM -> _S__16_DROPITEM
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _item -> _item
    int _charObjId -> _charObjId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.Earthquake -> com.l2jfrozen.gameserver.network.serverpackets.Earthquake:
    java.lang.String _S__C4_EARTHQUAKE -> _S__C4_EARTHQUAKE
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _intensity -> _intensity
    int _duration -> _duration
    void <init>(int,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.EnchantResult -> com.l2jfrozen.gameserver.network.serverpackets.EnchantResult:
    java.lang.String _S__81_ENCHANTRESULT -> _S__81_ENCHANTRESULT
    int _unknown -> _unknown
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.EquipUpdate -> com.l2jfrozen.gameserver.network.serverpackets.EquipUpdate:
    java.lang.String _S__5E_EQUIPUPDATE -> _S__5E_EQUIPUPDATE
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _item -> _item
    int _change -> _change
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.EtcStatusUpdate -> com.l2jfrozen.gameserver.network.serverpackets.EtcStatusUpdate:
    java.lang.String _S__F3_ETCSTATUSUPDATE -> _S__F3_ETCSTATUSUPDATE
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.skills.effects.EffectCharge _effect -> _effect
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExAskJoinMPCC -> com.l2jfrozen.gameserver.network.serverpackets.ExAskJoinMPCC:
    java.lang.String _requestorName -> _requestorName
    void <init>(java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExAskJoinPartyRoom -> com.l2jfrozen.gameserver.network.serverpackets.ExAskJoinPartyRoom:
    java.lang.String _charName -> _charName
    void <init>(java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExAutoSoulShot -> com.l2jfrozen.gameserver.network.serverpackets.ExAutoSoulShot:
    java.lang.String _S__FE_12_EXAUTOSOULSHOT -> _S__FE_12_EXAUTOSOULSHOT
    int _itemId -> _itemId
    int _type -> _type
    void <init>(int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExCaptureOrc -> com.l2jfrozen.gameserver.network.serverpackets.ExCaptureOrc:
    java.lang.String _S__FE_44_EXCAPTUREORC -> _S__FE_44_EXCAPTUREORC
    byte[] _test -> _test
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.ExCloseMPCC -> com.l2jfrozen.gameserver.network.serverpackets.ExCloseMPCC:
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExClosePartyRoom -> com.l2jfrozen.gameserver.network.serverpackets.ExClosePartyRoom:
    void <init>() -> <init>
    java.lang.String getType() -> getType
    void writeImpl() -> writeImpl
com.l2jfrozen.gameserver.network.serverpackets.ExConfirmCancelItem -> com.l2jfrozen.gameserver.network.serverpackets.ExConfirmCancelItem:
    java.lang.String _S__FE_56_EXCONFIRMCANCELITEM -> _S__FE_56_EXCONFIRMCANCELITEM
    int _itemObjId -> _itemObjId
    int _price -> _price
    void <init>(int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExConfirmVariationGemstone -> com.l2jfrozen.gameserver.network.serverpackets.ExConfirmVariationGemstone:
    java.lang.String _S__FE_54_EXCONFIRMVARIATIONGEMSTONE -> _S__FE_54_EXCONFIRMVARIATIONGEMSTONE
    int _gemstoneObjId -> _gemstoneObjId
    int _unk1 -> _unk1
    int _gemstoneCount -> _gemstoneCount
    int _unk2 -> _unk2
    int _unk3 -> _unk3
    void <init>(int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExConfirmVariationItem -> com.l2jfrozen.gameserver.network.serverpackets.ExConfirmVariationItem:
    java.lang.String _S__FE_52_EXCONFIRMVARIATIONITEM -> _S__FE_52_EXCONFIRMVARIATIONITEM
    int _itemObjId -> _itemObjId
    int _unk1 -> _unk1
    int _unk2 -> _unk2
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExConfirmVariationRefiner -> com.l2jfrozen.gameserver.network.serverpackets.ExConfirmVariationRefiner:
    java.lang.String _S__FE_53_EXCONFIRMVARIATIONREFINER -> _S__FE_53_EXCONFIRMVARIATIONREFINER
    int _refinerItemObjId -> _refinerItemObjId
    int _lifestoneItemId -> _lifestoneItemId
    int _gemstoneItemId -> _gemstoneItemId
    int _gemstoneCount -> _gemstoneCount
    int _unk2 -> _unk2
    void <init>(int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExCursedWeaponList -> com.l2jfrozen.gameserver.network.serverpackets.ExCursedWeaponList:
    java.lang.String _S__FE_45_EXCURSEDWEAPONLIST -> _S__FE_45_EXCURSEDWEAPONLIST
    java.util.List _cursedWeaponIds -> _cursedWeaponIds
    void <init>(java.util.List) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExCursedWeaponLocation -> com.l2jfrozen.gameserver.network.serverpackets.ExCursedWeaponLocation:
    java.lang.String _S__FE_46_EXCURSEDWEAPONLOCATION -> _S__FE_46_EXCURSEDWEAPONLOCATION
    java.util.List _cursedWeaponInfo -> _cursedWeaponInfo
    void <init>(java.util.List) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExCursedWeaponLocation$CursedWeaponInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExCursedWeaponLocation$CursedWeaponInfo:
    com.l2jfrozen.common.util.Point3D pos -> pos
    int id -> id
    int activated -> activated
    void <init>(com.l2jfrozen.common.util.Point3D,int,int) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.ExDuelAskStart -> com.l2jfrozen.gameserver.network.serverpackets.ExDuelAskStart:
    java.lang.String _S__FE_4B_EXDUELASKSTART -> _S__FE_4B_EXDUELASKSTART
    java.lang.String _requestorName -> _requestorName
    int _partyDuel -> _partyDuel
    void <init>(java.lang.String,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExDuelEnd -> com.l2jfrozen.gameserver.network.serverpackets.ExDuelEnd:
    java.lang.String _S__FE_4E_EXDUELEND -> _S__FE_4E_EXDUELEND
    int _unk1 -> _unk1
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExDuelReady -> com.l2jfrozen.gameserver.network.serverpackets.ExDuelReady:
    java.lang.String _S__FE_4C_EXDUELREADY -> _S__FE_4C_EXDUELREADY
    int _unk1 -> _unk1
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExDuelStart -> com.l2jfrozen.gameserver.network.serverpackets.ExDuelStart:
    java.lang.String _S__FE_4D_EXDUELSTART -> _S__FE_4D_EXDUELSTART
    int _unk1 -> _unk1
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExDuelUpdateUserInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExDuelUpdateUserInfo:
    java.lang.String _S__FE_4F_EXDUELUPDATEUSERINFO -> _S__FE_4F_EXDUELUPDATEUSERINFO
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillInfo:
    java.lang.String _S__FE_18_EXENCHANTSKILLINFO -> _S__FE_18_EXENCHANTSKILLINFO
    javolution.util.FastList _reqs -> _reqs
    int _id -> _id
    int _level -> _level
    int _spCost -> _spCost
    int _xpCost -> _xpCost
    int _rate -> _rate
    void <init>(int,int,int,int,int) -> <init>
    void addRequirement(int,int,int,int) -> addRequirement
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillInfo$Req -> com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillInfo$Req:
    int id -> id
    int count -> count
    int type -> type
    int unk -> unk
    com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillInfo this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillInfo,int,int,int,int) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillList -> com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillList:
    java.lang.String _S__FE_17_EXENCHANTSKILLLIST -> _S__FE_17_EXENCHANTSKILLLIST
    java.util.List _skills -> _skills
    void addSkill(int,int,int,int) -> addSkill
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillList$Skill -> com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillList$Skill:
    int id -> id
    int nextLevel -> nextLevel
    int sp -> sp
    int exp -> exp
    com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillList this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.ExEnchantSkillList,int,int,int,int) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.ExFishingEnd -> com.l2jfrozen.gameserver.network.serverpackets.ExFishingEnd:
    java.lang.String _S__FE_14_EXFISHINGEND -> _S__FE_14_EXFISHINGEND
    boolean _win -> _win
    com.l2jfrozen.gameserver.model.L2Character _activeChar -> _activeChar
    void <init>(boolean,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExFishingHpRegen -> com.l2jfrozen.gameserver.network.serverpackets.ExFishingHpRegen:
    java.lang.String _S__FE_16_EXFISHINGHPREGEN -> _S__FE_16_EXFISHINGHPREGEN
    com.l2jfrozen.gameserver.model.L2Character _activeChar -> _activeChar
    int _time -> _time
    int _fishHP -> _fishHP
    int _hpMode -> _hpMode
    int _anim -> _anim
    int _goodUse -> _goodUse
    int _penalty -> _penalty
    int _hpBarColor -> _hpBarColor
    void <init>(com.l2jfrozen.gameserver.model.L2Character,int,int,int,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExFishingStart -> com.l2jfrozen.gameserver.network.serverpackets.ExFishingStart:
    java.lang.String _S__FE_13_EXFISHINGSTART -> _S__FE_13_EXFISHINGSTART
    com.l2jfrozen.gameserver.model.L2Character _activeChar -> _activeChar
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _fishType -> _fishType
    void <init>(com.l2jfrozen.gameserver.model.L2Character,int,int,int,int,boolean) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExFishingStartCombat -> com.l2jfrozen.gameserver.network.serverpackets.ExFishingStartCombat:
    java.lang.String _S__FE_15_EXFISHINGSTARTCOMBAT -> _S__FE_15_EXFISHINGSTARTCOMBAT
    com.l2jfrozen.gameserver.model.L2Character _activeChar -> _activeChar
    int _time -> _time
    int _hp -> _hp
    int _lureType -> _lureType
    int _deceptiveMode -> _deceptiveMode
    int _mode -> _mode
    void <init>(com.l2jfrozen.gameserver.model.L2Character,int,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExGetBossRecord -> com.l2jfrozen.gameserver.network.serverpackets.ExGetBossRecord:
    java.lang.String _S__FE_33_EXGETBOSSRECORD -> _S__FE_33_EXGETBOSSRECORD
    java.util.Map _bossRecordInfo -> _bossRecordInfo
    int _ranking -> _ranking
    int _totalPoints -> _totalPoints
    void <init>(int,int,java.util.Map) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExHeroList -> com.l2jfrozen.gameserver.network.serverpackets.ExHeroList:
    java.lang.String _S__FE_23_EXHEROLIST -> _S__FE_23_EXHEROLIST
    java.util.Map _heroList -> _heroList
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExListPartyMatchingWaitingRoom -> com.l2jfrozen.gameserver.network.serverpackets.ExListPartyMatchingWaitingRoom:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _minlvl -> _minlvl
    int _maxlvl -> _maxlvl
    int _mode -> _mode
    javolution.util.FastList _members -> _members
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExMPCCShowPartyMemberInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExMPCCShowPartyMemberInfo:
    com.l2jfrozen.gameserver.model.L2Party _party -> _party
    void <init>(com.l2jfrozen.gameserver.model.L2Party) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExMailArrived -> com.l2jfrozen.gameserver.network.serverpackets.ExMailArrived:
    java.lang.String _S__FE_2D_EXMAILARRIVED -> _S__FE_2D_EXMAILARRIVED
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExManagePartyRoomMember -> com.l2jfrozen.gameserver.network.serverpackets.ExManagePartyRoomMember:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.PartyMatchRoom _room -> _room
    int _mode -> _mode
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.PartyMatchRoom,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExMultiPartyCommandChannelInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExMultiPartyCommandChannelInfo:
    com.l2jfrozen.gameserver.model.L2CommandChannel _channel -> _channel
    void <init>(com.l2jfrozen.gameserver.model.L2CommandChannel) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadMode -> com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadMode:
    java.lang.String _S__FE_2B_OLYMPIADMODE -> _S__FE_2B_OLYMPIADMODE
    int _mode -> _mode
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadSpelledInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadSpelledInfo:
    java.lang.String _S__FE_2A_OLYMPIADSPELLEDINFO -> _S__FE_2A_OLYMPIADSPELLEDINFO
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    java.util.List _effects -> _effects
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void addEffect(int,int,int) -> addEffect
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadSpelledInfo$Effect -> com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadSpelledInfo$Effect:
    int _skillId -> _skillId
    int _level -> _level
    int _duration -> _duration
    com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadSpelledInfo this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadSpelledInfo,int,int,int) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadUserInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExOlympiadUserInfo:
    java.lang.String _S__FE_29_OLYMPIADUSERINFO -> _S__FE_29_OLYMPIADUSERINFO
    int _side -> _side
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExOpenMPCC -> com.l2jfrozen.gameserver.network.serverpackets.ExOpenMPCC:
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExOrcMove -> com.l2jfrozen.gameserver.network.serverpackets.ExOrcMove:
    java.lang.String _S__FE_44_EXORCMOVE -> _S__FE_44_EXORCMOVE
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExPCCafePointInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExPCCafePointInfo:
    java.lang.String _S__FE_31_EXPCCAFEPOINTINFO -> _S__FE_31_EXPCCAFEPOINTINFO
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _character -> _character
    int m_AddPoint -> m_AddPoint
    int m_PeriodType -> m_PeriodType
    int RemainTime -> RemainTime
    int PointType -> PointType
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,boolean,int,boolean) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExPartyRoomMember -> com.l2jfrozen.gameserver.network.serverpackets.ExPartyRoomMember:
    com.l2jfrozen.gameserver.model.PartyMatchRoom _room -> _room
    int _mode -> _mode
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.PartyMatchRoom,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExPledgeCrestLarge -> com.l2jfrozen.gameserver.network.serverpackets.ExPledgeCrestLarge:
    java.lang.String _S__FE_28_EXPLEDGECRESTLARGE -> _S__FE_28_EXPLEDGECRESTLARGE
    int _crestId -> _crestId
    byte[] _data -> _data
    void <init>(int,byte[]) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExQuestInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExQuestInfo:
    java.lang.String _S__FE_19_EXQUESTINFO -> _S__FE_19_EXQUESTINFO
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExRedSky -> com.l2jfrozen.gameserver.network.serverpackets.ExRedSky:
    java.lang.String _S__FE_40_EXREDSKYPACKET -> _S__FE_40_EXREDSKYPACKET
    int _duration -> _duration
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExRequestHackShield -> com.l2jfrozen.gameserver.network.serverpackets.ExRequestHackShield:
    java.lang.String _S__FE_48_EXREQUESTHACKSHIELD -> _S__FE_48_EXREQUESTHACKSHIELD
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExRestartClient -> com.l2jfrozen.gameserver.network.serverpackets.ExRestartClient:
    java.lang.String _S__FE_47_EXRESTARTCLIENT -> _S__FE_47_EXRESTARTCLIENT
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExSendManorList -> com.l2jfrozen.gameserver.network.serverpackets.ExSendManorList:
    java.lang.String _S__FE_1B_EXSENDMANORLIST -> _S__FE_1B_EXSENDMANORLIST
    javolution.util.FastList _manors -> _manors
    void <init>(javolution.util.FastList) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExSetCompassZoneCode -> com.l2jfrozen.gameserver.network.serverpackets.ExSetCompassZoneCode:
    java.lang.String _S__FE_32_EXSETCOMPASSZONECODE -> _S__FE_32_EXSETCOMPASSZONECODE
    int SIEGEWARZONE1 -> SIEGEWARZONE1
    int SIEGEWARZONE2 -> SIEGEWARZONE2
    int PEACEZONE -> PEACEZONE
    int SEVENSIGNSZONE -> SEVENSIGNSZONE
    int PVPZONE -> PVPZONE
    int GENERALZONE -> GENERALZONE
    int _zoneType -> _zoneType
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExShowAdventurerGuideBook -> com.l2jfrozen.gameserver.network.serverpackets.ExShowAdventurerGuideBook:
    java.lang.String _S__FE_37_EXSHOWADVENTURERGUIDEBOOK -> _S__FE_37_EXSHOWADVENTURERGUIDEBOOK
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExShowCropInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExShowCropInfo:
    java.lang.String _S__FE_1C_EXSHOWSEEDINFO -> _S__FE_1C_EXSHOWSEEDINFO
    javolution.util.FastList _crops -> _crops
    int _manorId -> _manorId
    void <init>(int,javolution.util.FastList) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExShowCropSetting -> com.l2jfrozen.gameserver.network.serverpackets.ExShowCropSetting:
    java.lang.String _S__FE_20_EXSHOWCROPSETTING -> _S__FE_20_EXSHOWCROPSETTING
    int _manorId -> _manorId
    int _count -> _count
    int[] _cropData -> _cropData
    void runImpl() -> runImpl
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExShowManorDefaultInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExShowManorDefaultInfo:
    java.lang.String _S__FE_1C_EXSHOWSEEDINFO -> _S__FE_1C_EXSHOWSEEDINFO
    javolution.util.FastList _crops -> _crops
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExShowProcureCropDetail -> com.l2jfrozen.gameserver.network.serverpackets.ExShowProcureCropDetail:
    java.lang.String _S__FE_22_EXSHOWPROCURECROPDETAIL -> _S__FE_22_EXSHOWPROCURECROPDETAIL
    int _cropId -> _cropId
    javolution.util.FastMap _castleCrops -> _castleCrops
    void <init>(int) -> <init>
    void runImpl() -> runImpl
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExShowQuestMark -> com.l2jfrozen.gameserver.network.serverpackets.ExShowQuestMark:
    int _questId -> _questId
    void <init>(int) -> <init>
    java.lang.String getType() -> getType
    void writeImpl() -> writeImpl
com.l2jfrozen.gameserver.network.serverpackets.ExShowScreenMessage -> com.l2jfrozen.gameserver.network.serverpackets.ExShowScreenMessage:
    int _type -> _type
    int _sysMessageId -> _sysMessageId
    int _unk1 -> _unk1
    int _unk2 -> _unk2
    int _unk3 -> _unk3
    int _unk4 -> _unk4
    int _size -> _size
    int _position -> _position
    boolean _effect -> _effect
    java.lang.String _text -> _text
    int _time -> _time
    void <init>(java.lang.String,int) -> <init>
    void <init>(int,int,int,int,int,int,int,boolean,int,int,java.lang.String) -> <init>
    java.lang.String getType() -> getType
    void writeImpl() -> writeImpl
com.l2jfrozen.gameserver.network.serverpackets.ExShowSeedInfo -> com.l2jfrozen.gameserver.network.serverpackets.ExShowSeedInfo:
    java.lang.String _S__FE_1C_EXSHOWSEEDINFO -> _S__FE_1C_EXSHOWSEEDINFO
    javolution.util.FastList _seeds -> _seeds
    int _manorId -> _manorId
    void <init>(int,javolution.util.FastList) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExShowSeedSetting -> com.l2jfrozen.gameserver.network.serverpackets.ExShowSeedSetting:
    java.lang.String _S__FE_1F_EXSHOWSEEDSETTING -> _S__FE_1F_EXSHOWSEEDSETTING
    int _manorId -> _manorId
    int _count -> _count
    int[] _seedData -> _seedData
    void runImpl() -> runImpl
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExShowSellCropList -> com.l2jfrozen.gameserver.network.serverpackets.ExShowSellCropList:
    java.lang.String _S__FE_21_EXSHOWSELLCROPLIST -> _S__FE_21_EXSHOWSELLCROPLIST
    int _manorId -> _manorId
    javolution.util.FastMap _cropsItems -> _cropsItems
    javolution.util.FastMap _castleCrops -> _castleCrops
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,javolution.util.FastList) -> <init>
    void runImpl() -> runImpl
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExShowVariationCancelWindow -> com.l2jfrozen.gameserver.network.serverpackets.ExShowVariationCancelWindow:
    java.lang.String _S__FE_51_EXSHOWVARIATIONCANCELWINDOW -> _S__FE_51_EXSHOWVARIATIONCANCELWINDOW
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExShowVariationMakeWindow -> com.l2jfrozen.gameserver.network.serverpackets.ExShowVariationMakeWindow:
    java.lang.String _S__FE_50_EXSHOWVARIATIONMAKEWINDOW -> _S__FE_50_EXSHOWVARIATIONMAKEWINDOW
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExStorageMaxCount -> com.l2jfrozen.gameserver.network.serverpackets.ExStorageMaxCount:
    java.lang.String _S__FE_2E_EXSTORAGEMAXCOUNT -> _S__FE_2E_EXSTORAGEMAXCOUNT
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _inventory -> _inventory
    int _warehouse -> _warehouse
    int _freight -> _freight
    int _privateSell -> _privateSell
    int _privateBuy -> _privateBuy
    int _receipeD -> _receipeD
    int _recipe -> _recipe
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExUseSharedGroupItem -> com.l2jfrozen.gameserver.network.serverpackets.ExUseSharedGroupItem:
    java.lang.String _S__FE_49_EXUSESHAREDGROUPITEM -> _S__FE_49_EXUSESHAREDGROUPITEM
    int _unk1 -> _unk1
    int _unk2 -> _unk2
    int _unk3 -> _unk3
    int _unk4 -> _unk4
    void <init>(int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExVariationCancelResult -> com.l2jfrozen.gameserver.network.serverpackets.ExVariationCancelResult:
    java.lang.String _S__FE_57_EXVARIATIONCANCELRESULT -> _S__FE_57_EXVARIATIONCANCELRESULT
    int _closeWindow -> _closeWindow
    int _unk1 -> _unk1
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ExVariationResult -> com.l2jfrozen.gameserver.network.serverpackets.ExVariationResult:
    java.lang.String _S__FE_55_EXVARIATIONRESULT -> _S__FE_55_EXVARIATIONRESULT
    int _stat12 -> _stat12
    int _stat34 -> _stat34
    int _unk3 -> _unk3
    void <init>(int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.FinishRotation -> com.l2jfrozen.gameserver.network.serverpackets.FinishRotation:
    java.lang.String _S__78_FINISHROTATION -> _S__78_FINISHROTATION
    int _heading -> _heading
    int _charObjId -> _charObjId
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.FortSiegeAttackerList -> com.l2jfrozen.gameserver.network.serverpackets.FortSiegeAttackerList:
    java.lang.String _S__CA_SiegeAttackerList -> _S__CA_SiegeAttackerList
    com.l2jfrozen.gameserver.model.entity.siege.Fort _fort -> _fort
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Fort) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.FortSiegeDefenderList -> com.l2jfrozen.gameserver.network.serverpackets.FortSiegeDefenderList:
    java.lang.String _S__CA_SiegeDefenderList -> _S__CA_SiegeDefenderList
    com.l2jfrozen.gameserver.model.entity.siege.Fort _fort -> _fort
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Fort) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.FortSiegeDefenderList$1 -> com.l2jfrozen.gameserver.network.serverpackets.FortSiegeDefenderList$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SiegeClanType -> $SwitchMap$com$l2jfrozen$gameserver$model$SiegeClanType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.FortressSiegeInfo -> com.l2jfrozen.gameserver.network.serverpackets.FortressSiegeInfo:
    java.lang.String _S__C9_SIEGEINFO -> _S__C9_SIEGEINFO
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.siege.Fort _fort -> _fort
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Fort) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.FriendList -> com.l2jfrozen.gameserver.network.serverpackets.FriendList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _S__FA_FRIENDLIST -> _S__FA_FRIENDLIST
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.FriendRecvMsg -> com.l2jfrozen.gameserver.network.serverpackets.FriendRecvMsg:
    java.lang.String _S__FD_FRIENDRECVMSG -> _S__FD_FRIENDRECVMSG
    java.lang.String _sender -> _sender
    java.lang.String _receiver -> _receiver
    java.lang.String _message -> _message
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.GMViewCharacterInfo -> com.l2jfrozen.gameserver.network.serverpackets.GMViewCharacterInfo:
    java.lang.String _S__8F_GMVIEWCHARINFO -> _S__8F_GMVIEWCHARINFO
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.GMViewItemList -> com.l2jfrozen.gameserver.network.serverpackets.GMViewItemList:
    java.lang.String _S__AD_GMVIEWITEMLIST -> _S__AD_GMVIEWITEMLIST
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _items -> _items
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _cha -> _cha
    java.lang.String _playerName -> _playerName
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.GMViewPledgeInfo -> com.l2jfrozen.gameserver.network.serverpackets.GMViewPledgeInfo:
    java.lang.String _S__A9_GMVIEWPLEDGEINFO -> _S__A9_GMVIEWPLEDGEINFO
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.L2Clan,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.GMViewQuestList -> com.l2jfrozen.gameserver.network.serverpackets.GMViewQuestList:
    java.lang.String _S__AC_GMVIEWQUESTLIST -> _S__AC_GMVIEWQUESTLIST
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.GMViewSkillInfo -> com.l2jfrozen.gameserver.network.serverpackets.GMViewSkillInfo:
    java.lang.String _S__91_GMViewSkillInfo -> _S__91_GMViewSkillInfo
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.L2Skill[] _skills -> _skills
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.GMViewWarehouseWithdrawList -> com.l2jfrozen.gameserver.network.serverpackets.GMViewWarehouseWithdrawList:
    java.lang.String _S__95_GMViewWarehouseWithdrawList -> _S__95_GMViewWarehouseWithdrawList
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _items -> _items
    java.lang.String _playerName -> _playerName
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _money -> _money
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.GameGuardQuery -> com.l2jfrozen.gameserver.network.serverpackets.GameGuardQuery:
    java.lang.String _S__F9_GAMEGUARDQUERY -> _S__F9_GAMEGUARDQUERY
    void <init>() -> <init>
    void runImpl() -> runImpl
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.GetItem -> com.l2jfrozen.gameserver.network.serverpackets.GetItem:
    java.lang.String _S__17_GETITEM -> _S__17_GETITEM
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance _item -> _item
    int _playerId -> _playerId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.GetOffVehicle -> com.l2jfrozen.gameserver.network.serverpackets.GetOffVehicle:
    int _x -> _x
    int _y -> _y
    int _z -> _z
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance _boat -> _boat
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.GetOnVehicle -> com.l2jfrozen.gameserver.network.serverpackets.GetOnVehicle:
    int _x -> _x
    int _y -> _y
    int _z -> _z
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance _boat -> _boat
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.HennaEquipList -> com.l2jfrozen.gameserver.network.serverpackets.HennaEquipList:
    java.lang.String _S__E2_HennaEquipList -> _S__E2_HennaEquipList
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance[] _hennaEquipList -> _hennaEquipList
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance[]) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.HennaInfo -> com.l2jfrozen.gameserver.network.serverpackets.HennaInfo:
    java.lang.String _S__E4_HennaInfo -> _S__E4_HennaInfo
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance[] _hennas -> _hennas
    int _count -> _count
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.HennaItemInfo -> com.l2jfrozen.gameserver.network.serverpackets.HennaItemInfo:
    java.lang.String _S__E3_HennaItemInfo -> _S__E3_HennaItemInfo
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance _henna -> _henna
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2HennaInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.InventoryUpdate -> com.l2jfrozen.gameserver.network.serverpackets.InventoryUpdate:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _S__37_INVENTORYUPDATE -> _S__37_INVENTORYUPDATE
    java.util.List _items -> _items
    void <init>() -> <init>
    void <init>(java.util.List) -> <init>
    void addItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addItem
    void addNewItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addNewItem
    void addModifiedItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addModifiedItem
    void addRemovedItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addRemovedItem
    void addItems(java.util.List) -> addItems
    void showDebug() -> showDebug
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.ItemList -> com.l2jfrozen.gameserver.network.serverpackets.ItemList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _S__27_ITEMLIST -> _S__27_ITEMLIST
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _items -> _items
    boolean _showWindow -> _showWindow
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[],boolean) -> <init>
    void showDebug() -> showDebug
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.JoinParty -> com.l2jfrozen.gameserver.network.serverpackets.JoinParty:
    java.lang.String _S__4C_JOINPARTY -> _S__4C_JOINPARTY
    int _response -> _response
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.JoinPledge -> com.l2jfrozen.gameserver.network.serverpackets.JoinPledge:
    java.lang.String _S__45_JOINPLEDGE -> _S__45_JOINPLEDGE
    int _pledgeId -> _pledgeId
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.KeyPacket -> com.l2jfrozen.gameserver.network.serverpackets.KeyPacket:
    java.lang.String _S__01_KEYPACKET -> _S__01_KEYPACKET
    byte[] _key -> _key
    void <init>(byte[]) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket -> com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void write() -> w
    void runImpl() -> runImpl
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.LeaveWorld -> com.l2jfrozen.gameserver.network.serverpackets.LeaveWorld:
    java.lang.String _S__96_LEAVEWORLD -> _S__96_LEAVEWORLD
    com.l2jfrozen.gameserver.network.serverpackets.LeaveWorld STATIC_PACKET -> STATIC_PACKET
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.MagicEffectIcons -> com.l2jfrozen.gameserver.network.serverpackets.MagicEffectIcons:
    java.lang.String _S__97_MAGICEFFECTICONS -> _S__97_MAGICEFFECTICONS
    javolution.util.FastList _effects -> _effects
    javolution.util.FastList _debuffs -> _debuffs
    void <init>() -> <init>
    void addEffect(int,int,int,boolean) -> addEffect
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.MagicEffectIcons$Effect -> com.l2jfrozen.gameserver.network.serverpackets.MagicEffectIcons$Effect:
    int _skillId -> _skillId
    int _level -> _level
    int _duration -> _duration
    com.l2jfrozen.gameserver.network.serverpackets.MagicEffectIcons this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.MagicEffectIcons,int,int,int) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.MagicSkillCanceld -> com.l2jfrozen.gameserver.network.serverpackets.MagicSkillCanceld:
    java.lang.String _S__5B_MAGICSKILLCANCELD -> _S__5B_MAGICSKILLCANCELD
    int _objectId -> _objectId
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.MagicSkillLaunched -> com.l2jfrozen.gameserver.network.serverpackets.MagicSkillLaunched:
    java.lang.String _S__8E_MAGICSKILLLAUNCHED -> _S__8E_MAGICSKILLLAUNCHED
    int _charObjId -> _charObjId
    int _skillId -> _skillId
    int _skillLevel -> _skillLevel
    int _numberOfTargets -> _numberOfTargets
    com.l2jfrozen.gameserver.model.L2Object[] _targets -> _targets
    int _singleTargetId -> _singleTargetId
    void <init>(com.l2jfrozen.gameserver.model.L2Character,int,int,com.l2jfrozen.gameserver.model.L2Object[]) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2Character,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.MagicSkillUser -> com.l2jfrozen.gameserver.network.serverpackets.MagicSkillUser:
    java.lang.String _S__5A_MAGICSKILLUSER -> _S__5A_MAGICSKILLUSER
    int _targetId -> _targetId
    int _skillId -> _skillId
    int _skillLevel -> _skillLevel
    int _hitTime -> _hitTime
    int _reuseDelay -> _reuseDelay
    int _charObjId -> _charObjId
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,int,int,int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2Character,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ManagePledgePower -> com.l2jfrozen.gameserver.network.serverpackets.ManagePledgePower:
    java.lang.String _S__30_MANAGEPLEDGEPOWER -> _S__30_MANAGEPLEDGEPOWER
    int _action -> _action
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    int _rank -> _rank
    int _privs -> _privs
    void <init>(com.l2jfrozen.gameserver.model.L2Clan,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.MonRaceInfo -> com.l2jfrozen.gameserver.network.serverpackets.MonRaceInfo:
    java.lang.String _S__DD_MonRaceInfo -> _S__DD_MonRaceInfo
    int _unknown1 -> _unknown1
    int _unknown2 -> _unknown2
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance[] _monsters -> _monsters
    int[][] _speeds -> _speeds
    void <init>(int,int,com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance[],int[][]) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.MoveOnVehicle -> com.l2jfrozen.gameserver.network.serverpackets.MoveOnVehicle:
    java.lang.String _S__71_MOVEONVEICLE -> _S__71_MOVEONVEICLE
    int _id -> _id
    int _x -> _x
    int _y -> _y
    int _z -> _z
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.MoveToLocationInVehicle -> com.l2jfrozen.gameserver.network.serverpackets.MoveToLocationInVehicle:
    int _charObjId -> _charObjId
    int _boatId -> _boatId
    com.l2jfrozen.gameserver.model.actor.position.L2CharPosition _destination -> _destination
    com.l2jfrozen.gameserver.model.actor.position.L2CharPosition _origin -> _origin
    void <init>(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.actor.position.L2CharPosition,com.l2jfrozen.gameserver.model.actor.position.L2CharPosition) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.MoveToPawn -> com.l2jfrozen.gameserver.network.serverpackets.MoveToPawn:
    java.lang.String _S__75_MOVETOPAWN -> _S__75_MOVETOPAWN
    int _charObjId -> _charObjId
    int _targetId -> _targetId
    int _distance -> _distance
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.MultiSellList -> com.l2jfrozen.gameserver.network.serverpackets.MultiSellList:
    java.lang.String _S__D0_MULTISELLLIST -> _S__D0_MULTISELLLIST
    int _listId -> _listId
    int _page -> _page
    int _finished -> _finished
    com.l2jfrozen.gameserver.model.multisell.MultiSellListContainer _list -> _list
    void <init>(com.l2jfrozen.gameserver.model.multisell.MultiSellListContainer,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.MyTargetSelected -> com.l2jfrozen.gameserver.network.serverpackets.MyTargetSelected:
    java.lang.String _S__BF_MYTARGETSELECTED -> _S__BF_MYTARGETSELECTED
    int _objectId -> _objectId
    int _color -> _color
    void <init>(int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.NormalCamera -> com.l2jfrozen.gameserver.network.serverpackets.NormalCamera:
    java.lang.String _S__C8_NORMALCAMERA -> _S__C8_NORMALCAMERA
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.NpcHtmlMessage -> com.l2jfrozen.gameserver.network.serverpackets.NpcHtmlMessage:
    java.lang.String _S__1B_NPCHTMLMESSAGE -> _S__1B_NPCHTMLMESSAGE
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _npcObjId -> _npcObjId
    java.lang.String _html -> _html
    boolean _validate -> _validate
    void <init>(int,java.lang.String) -> <init>
    void <init>(int) -> <init>
    void runImpl() -> runImpl
    void setHtml(java.lang.String) -> setHtml
    boolean setFile(java.lang.String) -> setFile
    void replace(java.lang.String,java.lang.String) -> replace
    void replace(java.lang.String,boolean) -> replace
    void replace(java.lang.String,int) -> replace
    void replace(java.lang.String,long) -> replace
    void replace(java.lang.String,double) -> replace
    void buildBypassCache(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> buildBypassCache
    void buildLinksCache(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> buildLinksCache
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    java.lang.String getContent() -> getContent
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.NpcInfo -> com.l2jfrozen.gameserver.network.serverpackets.NpcInfo:
    java.lang.String _S__22_NPCINFO -> _S__22_NPCINFO
    com.l2jfrozen.gameserver.model.L2Character _activeChar -> _activeChar
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    int _idTemplate -> _idTemplate
    boolean _isAttackable -> _isAttackable
    boolean _isSummoned -> _isSummoned
    int _mAtkSpd -> _mAtkSpd
    int _pAtkSpd -> _pAtkSpd
    int _runSpd -> _runSpd
    int _walkSpd -> _walkSpd
    int _swimRunSpd -> _swimRunSpd
    int _swimWalkSpd -> _swimWalkSpd
    int _flRunSpd -> _flRunSpd
    int _flWalkSpd -> _flWalkSpd
    int _flyRunSpd -> _flyRunSpd
    int _flyWalkSpd -> _flyWalkSpd
    int _rhand -> _rhand
    int _lhand -> _lhand
    int _collisionHeight -> _collisionHeight
    int _collisionRadius -> _collisionRadius
    java.lang.String _name -> _name
    java.lang.String _title -> _title
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance,com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2Summon,com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.NpcInfoPoly -> com.l2jfrozen.gameserver.network.serverpackets.NpcInfoPoly:
    java.lang.String _S__22_NPCINFO -> _S__22_NPCINFO
    com.l2jfrozen.gameserver.model.L2Character _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.L2Object _obj -> _obj
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    int _npcId -> _npcId
    boolean _isAttackable -> _isAttackable
    boolean _isSummoned -> _isSummoned
    boolean _isRunning -> _isRunning
    boolean _isInCombat -> _isInCombat
    boolean _isAlikeDead -> _isAlikeDead
    int _mAtkSpd -> _mAtkSpd
    int _pAtkSpd -> _pAtkSpd
    int _runSpd -> _runSpd
    int _walkSpd -> _walkSpd
    int _swimRunSpd -> _swimRunSpd
    int _swimWalkSpd -> _swimWalkSpd
    int _flRunSpd -> _flRunSpd
    int _flWalkSpd -> _flWalkSpd
    int _flyRunSpd -> _flyRunSpd
    int _flyWalkSpd -> _flyWalkSpd
    int _rhand -> _rhand
    int _lhand -> _lhand
    java.lang.String _name -> _name
    java.lang.String _title -> _title
    int _abnormalEffect -> _abnormalEffect
    com.l2jfrozen.gameserver.templates.L2NpcTemplate _template -> _template
    int _collisionRadius -> _collisionRadius
    int _collisionHeight -> _collisionHeight
    void <init>(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ObservationMode -> com.l2jfrozen.gameserver.network.serverpackets.ObservationMode:
    java.lang.String _S__DF_OBSERVMODE -> _S__DF_OBSERVMODE
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ObservationReturn -> com.l2jfrozen.gameserver.network.serverpackets.ObservationReturn:
    java.lang.String _S__E0_OBSERVRETURN -> _S__E0_OBSERVRETURN
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.OnVehicleCheckLocation -> com.l2jfrozen.gameserver.network.serverpackets.OnVehicleCheckLocation:
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance _boat -> _boat
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PackageSendableList -> com.l2jfrozen.gameserver.network.serverpackets.PackageSendableList:
    java.lang.String _S__C3_PACKAGESENDABLELIST -> _S__C3_PACKAGESENDABLELIST
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _items -> _items
    int _playerObjId -> _playerObjId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[],int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PackageToList -> com.l2jfrozen.gameserver.network.serverpackets.PackageToList:
    java.lang.String _S__C2_PACKAGETOLIST -> _S__C2_PACKAGETOLIST
    java.util.Map _players -> _players
    void <init>(java.util.Map) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PartyMatchDetail -> com.l2jfrozen.gameserver.network.serverpackets.PartyMatchDetail:
    com.l2jfrozen.gameserver.model.PartyMatchRoom _room -> _room
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.PartyMatchRoom) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PartyMatchList -> com.l2jfrozen.gameserver.network.serverpackets.PartyMatchList:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _cha -> _cha
    int _loc -> _loc
    int _lim -> _lim
    javolution.util.FastList _rooms -> _rooms
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PartyMemberPosition -> com.l2jfrozen.gameserver.network.serverpackets.PartyMemberPosition:
    java.util.Map locations -> locations
    void <init>(com.l2jfrozen.gameserver.model.L2Party) -> <init>
    void reuse(com.l2jfrozen.gameserver.model.L2Party) -> reuse
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PartySmallWindowAdd -> com.l2jfrozen.gameserver.network.serverpackets.PartySmallWindowAdd:
    java.lang.String _S__64_PARTYSMALLWINDOWADD -> _S__64_PARTYSMALLWINDOWADD
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _member -> _member
    int _leaderId -> _leaderId
    int _distribution -> _distribution
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Party) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PartySmallWindowAll -> com.l2jfrozen.gameserver.network.serverpackets.PartySmallWindowAll:
    java.lang.String _S__63_PARTYSMALLWINDOWALL -> _S__63_PARTYSMALLWINDOWALL
    com.l2jfrozen.gameserver.model.L2Party _party -> _party
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _exclude -> _exclude
    int _dist -> _dist
    int _LeaderOID -> _LeaderOID
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2Party) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PartySmallWindowDelete -> com.l2jfrozen.gameserver.network.serverpackets.PartySmallWindowDelete:
    java.lang.String _S__66_PARTYSMALLWINDOWDELETE -> _S__66_PARTYSMALLWINDOWDELETE
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _member -> _member
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PartySmallWindowDeleteAll -> com.l2jfrozen.gameserver.network.serverpackets.PartySmallWindowDeleteAll:
    java.lang.String _S__65_PARTYSMALLWINDOWDELETEALL -> _S__65_PARTYSMALLWINDOWDELETEALL
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PartySmallWindowUpdate -> com.l2jfrozen.gameserver.network.serverpackets.PartySmallWindowUpdate:
    java.lang.String _S__67_PARTYSMALLWINDOWUPDATE -> _S__67_PARTYSMALLWINDOWUPDATE
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _member -> _member
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PartySpelled -> com.l2jfrozen.gameserver.network.serverpackets.PartySpelled:
    java.lang.String _S__EE_PartySpelled -> _S__EE_PartySpelled
    java.util.List _effects -> _effects
    com.l2jfrozen.gameserver.model.L2Character _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    void addPartySpelledEffect(int,int,int) -> addPartySpelledEffect
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PartySpelled$Effect -> com.l2jfrozen.gameserver.network.serverpackets.PartySpelled$Effect:
    int _skillId -> _skillId
    int _dat -> _dat
    int _duration -> _duration
    com.l2jfrozen.gameserver.network.serverpackets.PartySpelled this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.PartySpelled,int,int,int) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.PetDelete -> com.l2jfrozen.gameserver.network.serverpackets.PetDelete:
    java.lang.String _S__CF_PETDELETE -> _S__CF_PETDELETE
    int _petId -> _petId
    int _petObjId -> _petObjId
    void <init>(int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PetInfo -> com.l2jfrozen.gameserver.network.serverpackets.PetInfo:
    java.lang.String _S__CA_PETINFO -> _S__CA_PETINFO
    com.l2jfrozen.gameserver.model.L2Summon _summon -> _summon
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    boolean _isSummoned -> _isSummoned
    int _mAtkSpd -> _mAtkSpd
    int _pAtkSpd -> _pAtkSpd
    int _runSpd -> _runSpd
    int _walkSpd -> _walkSpd
    int _swimRunSpd -> _swimRunSpd
    int _swimWalkSpd -> _swimWalkSpd
    int _flRunSpd -> _flRunSpd
    int _flWalkSpd -> _flWalkSpd
    int _flyRunSpd -> _flyRunSpd
    int _flyWalkSpd -> _flyWalkSpd
    int _maxHp -> _maxHp
    int _maxMp -> _maxMp
    int _maxFed -> _maxFed
    int _curFed -> _curFed
    void <init>(com.l2jfrozen.gameserver.model.L2Summon) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PetInventoryUpdate -> com.l2jfrozen.gameserver.network.serverpackets.PetInventoryUpdate:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _S__37_INVENTORYUPDATE -> _S__37_INVENTORYUPDATE
    java.util.List _items -> _items
    void <init>(java.util.List) -> <init>
    void <init>() -> <init>
    void addItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addItem
    void addNewItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addNewItem
    void addModifiedItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addModifiedItem
    void addRemovedItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addRemovedItem
    void addItems(java.util.List) -> addItems
    void showDebug() -> showDebug
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.PetItemList -> com.l2jfrozen.gameserver.network.serverpackets.PetItemList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _S__cb_PETITEMLIST -> _S__cb_PETITEMLIST
    com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PetInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.PetStatusShow -> com.l2jfrozen.gameserver.network.serverpackets.PetStatusShow:
    java.lang.String _S__C9_PETSTATUSSHOW -> _S__C9_PETSTATUSSHOW
    int _summonType -> _summonType
    void <init>(com.l2jfrozen.gameserver.model.L2Summon) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PetStatusUpdate -> com.l2jfrozen.gameserver.network.serverpackets.PetStatusUpdate:
    java.lang.String _S__CE_PETSTATUSSHOW -> _S__CE_PETSTATUSSHOW
    com.l2jfrozen.gameserver.model.L2Summon _summon -> _summon
    int _maxHp -> _maxHp
    int _maxMp -> _maxMp
    int _maxFed -> _maxFed
    int _curFed -> _curFed
    void <init>(com.l2jfrozen.gameserver.model.L2Summon) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PlaySound -> com.l2jfrozen.gameserver.network.serverpackets.PlaySound:
    java.lang.String _S__98_PlaySound -> _S__98_PlaySound
    int _unknown1 -> _unknown1
    java.lang.String _soundFile -> _soundFile
    int _unknown3 -> _unknown3
    int _unknown4 -> _unknown4
    int _unknown5 -> _unknown5
    int _unknown6 -> _unknown6
    int _unknown7 -> _unknown7
    void <init>(java.lang.String) -> <init>
    void <init>(int,java.lang.String,int,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeCrest -> com.l2jfrozen.gameserver.network.serverpackets.PledgeCrest:
    java.lang.String _S__84_PLEDGECREST -> _S__84_PLEDGECREST
    int _crestId -> _crestId
    byte[] _data -> _data
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeInfo -> com.l2jfrozen.gameserver.network.serverpackets.PledgeInfo:
    java.lang.String _S__9C_PLEDGEINFO -> _S__9C_PLEDGEINFO
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    void <init>(com.l2jfrozen.gameserver.model.L2Clan) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgePowerGradeList -> com.l2jfrozen.gameserver.network.serverpackets.PledgePowerGradeList:
    java.lang.String _S__FE_3B_PLEDGEPOWERGRADELIST -> _S__FE_3B_PLEDGEPOWERGRADELIST
    com.l2jfrozen.gameserver.model.L2Clan$RankPrivs[] _privs -> _privs
    void <init>(com.l2jfrozen.gameserver.model.L2Clan$RankPrivs[]) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeReceiveMemberInfo -> com.l2jfrozen.gameserver.network.serverpackets.PledgeReceiveMemberInfo:
    java.lang.String _S__FE_3D_PLEDGERECEIVEMEMBERINFO -> _S__FE_3D_PLEDGERECEIVEMEMBERINFO
    com.l2jfrozen.gameserver.model.L2ClanMember _member -> _member
    void <init>(com.l2jfrozen.gameserver.model.L2ClanMember) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeReceivePowerInfo -> com.l2jfrozen.gameserver.network.serverpackets.PledgeReceivePowerInfo:
    java.lang.String _S__FE_3C_PLEDGERECEIVEPOWERINFO -> _S__FE_3C_PLEDGERECEIVEPOWERINFO
    com.l2jfrozen.gameserver.model.L2ClanMember _member -> _member
    void <init>(com.l2jfrozen.gameserver.model.L2ClanMember) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeReceiveSubPledgeCreated -> com.l2jfrozen.gameserver.network.serverpackets.PledgeReceiveSubPledgeCreated:
    java.lang.String _S__FE_3F_PLEDGERECEIVESUBPLEDGECREATED -> _S__FE_3F_PLEDGERECEIVESUBPLEDGECREATED
    com.l2jfrozen.gameserver.model.L2Clan$SubPledge _subPledge -> _subPledge
    void <init>(com.l2jfrozen.gameserver.model.L2Clan$SubPledge) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeReceiveWarList -> com.l2jfrozen.gameserver.network.serverpackets.PledgeReceiveWarList:
    java.lang.String _S__FE_3E_PLEDGERECEIVEWARELIST -> _S__FE_3E_PLEDGERECEIVEWARELIST
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    int _tab -> _tab
    void <init>(com.l2jfrozen.gameserver.model.L2Clan,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeShowInfoUpdate -> com.l2jfrozen.gameserver.network.serverpackets.PledgeShowInfoUpdate:
    java.lang.String _S__A1_PLEDGESHOWINFOUPDATE -> _S__A1_PLEDGESHOWINFOUPDATE
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    void <init>(com.l2jfrozen.gameserver.model.L2Clan) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeShowMemberListAdd -> com.l2jfrozen.gameserver.network.serverpackets.PledgeShowMemberListAdd:
    java.lang.String _S__55_PLEDGESHOWMEMBERLISTADD -> _S__55_PLEDGESHOWMEMBERLISTADD
    java.lang.String _name -> _name
    int _lvl -> _lvl
    int _classId -> _classId
    int _isOnline -> _isOnline
    int _pledgeType -> _pledgeType
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2ClanMember) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeShowMemberListAll -> com.l2jfrozen.gameserver.network.serverpackets.PledgeShowMemberListAll:
    java.lang.String _S__68_PLEDGESHOWMEMBERLISTALL -> _S__68_PLEDGESHOWMEMBERLISTALL
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.L2ClanMember[] _members -> _members
    int _pledgeType -> _pledgeType
    void <init>(com.l2jfrozen.gameserver.model.L2Clan,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    void writePledge(int) -> writePledge
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeShowMemberListDelete -> com.l2jfrozen.gameserver.network.serverpackets.PledgeShowMemberListDelete:
    java.lang.String _S__6B_PLEDGESHOWMEMBERLISTDELETE -> _S__6B_PLEDGESHOWMEMBERLISTDELETE
    java.lang.String _player -> _player
    void <init>(java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeShowMemberListDeleteAll -> com.l2jfrozen.gameserver.network.serverpackets.PledgeShowMemberListDeleteAll:
    java.lang.String _S__9B_PLEDGESHOWMEMBERLISTDELETEALL -> _S__9B_PLEDGESHOWMEMBERLISTDELETEALL
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeShowMemberListUpdate -> com.l2jfrozen.gameserver.network.serverpackets.PledgeShowMemberListUpdate:
    java.lang.String _S__54_PLEDGESHOWMEMBERLISTUPDATE -> _S__54_PLEDGESHOWMEMBERLISTUPDATE
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _pledgeType -> _pledgeType
    int _hasSponsor -> _hasSponsor
    java.lang.String _name -> _name
    int _level -> _level
    int _classId -> _classId
    int _objectId -> _objectId
    int _isOnline -> _isOnline
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2ClanMember) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeSkillList -> com.l2jfrozen.gameserver.network.serverpackets.PledgeSkillList:
    java.lang.String _S__FE_39_PLEDGESKILLLIST -> _S__FE_39_PLEDGESKILLLIST
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    void <init>(com.l2jfrozen.gameserver.model.L2Clan) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeSkillListAdd -> com.l2jfrozen.gameserver.network.serverpackets.PledgeSkillListAdd:
    java.lang.String _S__FE_3A_PLEDGESKILLLISTADD -> _S__FE_3A_PLEDGESKILLLISTADD
    int _id -> _id
    int _lvl -> _lvl
    void <init>(int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PledgeStatusChanged -> com.l2jfrozen.gameserver.network.serverpackets.PledgeStatusChanged:
    java.lang.String _S__CD_PLEDGESTATUS_CHANGED -> _S__CD_PLEDGESTATUS_CHANGED
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    void <init>(com.l2jfrozen.gameserver.model.L2Clan) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreListBuy -> com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreListBuy:
    java.lang.String _S__D1_PRIVATESTORELISTBUY -> _S__D1_PRIVATESTORELISTBUY
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _storePlayer -> _storePlayer
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _playerAdena -> _playerAdena
    com.l2jfrozen.gameserver.model.TradeList$TradeItem[] _items -> _items
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreListSell -> com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreListSell:
    java.lang.String _S__B4_PRIVATESTORELISTSELL -> _S__B4_PRIVATESTORELISTSELL
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _storePlayer -> _storePlayer
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _playerAdena -> _playerAdena
    boolean _packageSale -> _packageSale
    com.l2jfrozen.gameserver.model.TradeList$TradeItem[] _items -> _items
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreManageListBuy -> com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreManageListBuy:
    java.lang.String _S__D0_PRIVATESELLLISTBUY -> _S__D0_PRIVATESELLLISTBUY
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _playerAdena -> _playerAdena
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _itemList -> _itemList
    com.l2jfrozen.gameserver.model.TradeList$TradeItem[] _buyList -> _buyList
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreManageListSell -> com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreManageListSell:
    java.lang.String _S__B3_PRIVATESELLLISTSELL -> _S__B3_PRIVATESELLLISTSELL
    int _objId -> _objId
    int _playerAdena -> _playerAdena
    boolean _packageSale -> _packageSale
    com.l2jfrozen.gameserver.model.TradeList$TradeItem[] _itemList -> _itemList
    com.l2jfrozen.gameserver.model.TradeList$TradeItem[] _sellList -> _sellList
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    boolean isItemInSelling(com.l2jfrozen.gameserver.model.TradeList$TradeItem) -> isItemInSelling
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreMsgBuy -> com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreMsgBuy:
    java.lang.String _S__D2_PRIVATESTOREMSGBUY -> _S__D2_PRIVATESTOREMSGBUY
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    java.lang.String _storeMsg -> _storeMsg
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreMsgSell -> com.l2jfrozen.gameserver.network.serverpackets.PrivateStoreMsgSell:
    java.lang.String _S__B5_PRIVATESTOREMSGSELL -> _S__B5_PRIVATESTOREMSGSELL
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    java.lang.String _storeMsg -> _storeMsg
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.QuestList -> com.l2jfrozen.gameserver.network.serverpackets.QuestList:
    java.lang.String _S__98_QUESTLIST -> _S__98_QUESTLIST
    com.l2jfrozen.gameserver.model.quest.Quest[] _quests -> _quests
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>() -> <init>
    void runImpl() -> runImpl
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.RadarControl -> com.l2jfrozen.gameserver.network.serverpackets.RadarControl:
    java.lang.String _S__EB_RadarControl -> _S__EB_RadarControl
    int _showRadar -> _showRadar
    int _type -> _type
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(int,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.RecipeBookItemList -> com.l2jfrozen.gameserver.network.serverpackets.RecipeBookItemList:
    java.lang.String _S__D6_RECIPEBOOKITEMLIST -> _S__D6_RECIPEBOOKITEMLIST
    com.l2jfrozen.gameserver.model.L2RecipeList[] _recipes -> _recipes
    boolean _isDwarvenCraft -> _isDwarvenCraft
    int _maxMp -> _maxMp
    void <init>(boolean,int) -> <init>
    void addRecipes(com.l2jfrozen.gameserver.model.L2RecipeList[]) -> addRecipes
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.RecipeItemMakeInfo -> com.l2jfrozen.gameserver.network.serverpackets.RecipeItemMakeInfo:
    java.lang.String _S__D7_RECIPEITEMMAKEINFO -> _S__D7_RECIPEITEMMAKEINFO
    org.apache.log4j.Logger LOGGER -> LOGGER
    int _id -> _id
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    boolean _success -> _success
    void <init>(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> <init>
    void <init>(int,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.RecipeShopItemInfo -> com.l2jfrozen.gameserver.network.serverpackets.RecipeShopItemInfo:
    java.lang.String _S__DA_RecipeShopItemInfo -> _S__DA_RecipeShopItemInfo
    int _shopId -> _shopId
    int _recipeId -> _recipeId
    void <init>(int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.RecipeShopManageList -> com.l2jfrozen.gameserver.network.serverpackets.RecipeShopManageList:
    java.lang.String _S__D8_RecipeShopManageList -> _S__D8_RecipeShopManageList
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _seller -> _seller
    boolean _isDwarven -> _isDwarven
    com.l2jfrozen.gameserver.model.L2RecipeList[] _recipes -> _recipes
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,boolean) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.RecipeShopMsg -> com.l2jfrozen.gameserver.network.serverpackets.RecipeShopMsg:
    java.lang.String _S__DB_RecipeShopMsg -> _S__DB_RecipeShopMsg
    int _chaObjectId -> _chaObjectId
    java.lang.String _chaStoreName -> _chaStoreName
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.RecipeShopSellList -> com.l2jfrozen.gameserver.network.serverpackets.RecipeShopSellList:
    java.lang.String _S__D9_RecipeShopSellList -> _S__D9_RecipeShopSellList
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _buyer -> _buyer
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _manufacturer -> _manufacturer
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.RelationChanged -> com.l2jfrozen.gameserver.network.serverpackets.RelationChanged:
    int RELATION_PVP_FLAG -> RELATION_PVP_FLAG
    int RELATION_HAS_KARMA -> RELATION_HAS_KARMA
    int RELATION_LEADER -> RELATION_LEADER
    int RELATION_INSIEGE -> RELATION_INSIEGE
    int RELATION_ATTACKER -> RELATION_ATTACKER
    int RELATION_ALLY -> RELATION_ALLY
    int RELATION_ENEMY -> RELATION_ENEMY
    int RELATION_MUTUAL_WAR -> RELATION_MUTUAL_WAR
    int RELATION_1SIDED_WAR -> RELATION_1SIDED_WAR
    java.lang.String _S__CE_RELATIONCHANGED -> _S__CE_RELATIONCHANGED
    int _objId -> _objId
    int _relation -> _relation
    int _autoAttackable -> _autoAttackable
    int _karma -> _karma
    int _pvpFlag -> _pvpFlag
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PlayableInstance,int,boolean) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.RestartResponse -> com.l2jfrozen.gameserver.network.serverpackets.RestartResponse:
    java.lang.String _S__74_RESTARTRESPONSE -> _S__74_RESTARTRESPONSE
    com.l2jfrozen.gameserver.network.serverpackets.RestartResponse STATIC_PACKET_TRUE -> STATIC_PACKET_TRUE
    com.l2jfrozen.gameserver.network.serverpackets.RestartResponse STATIC_PACKET_FALSE -> STATIC_PACKET_FALSE
    java.lang.String _message -> _message
    boolean _result -> _result
    com.l2jfrozen.gameserver.network.serverpackets.RestartResponse valueOf(boolean) -> valueOf
    void <init>(boolean) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.Revive -> com.l2jfrozen.gameserver.network.serverpackets.Revive:
    java.lang.String _S__0C_REVIVE -> _S__0C_REVIVE
    int _objectId -> _objectId
    void <init>(com.l2jfrozen.gameserver.model.L2Object) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.Ride -> com.l2jfrozen.gameserver.network.serverpackets.Ride:
    java.lang.String _S__86_Ride -> _S__86_Ride
    int ACTION_MOUNT -> ACTION_MOUNT
    int ACTION_DISMOUNT -> ACTION_DISMOUNT
    int _id -> _id
    int _bRide -> _bRide
    int _rideType -> _rideType
    int _rideClassID -> _rideClassID
    void <init>(int,int,int) -> <init>
    void runImpl() -> runImpl
    int getMountType() -> getMountType
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SSQStatus -> com.l2jfrozen.gameserver.network.serverpackets.SSQStatus:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _S__F5_SSQStatus -> _S__F5_SSQStatus
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activevChar -> _activevChar
    int _page -> _page
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.SellList -> com.l2jfrozen.gameserver.network.serverpackets.SellList:
    java.lang.String _S__10_SELLLIST -> _S__10_SELLLIST
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2MerchantInstance _lease -> _lease
    int _money -> _money
    java.util.List _selllist -> _selllist
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.actor.instance.L2MerchantInstance) -> <init>
    void doLease() -> doLease
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.SellListProcure -> com.l2jfrozen.gameserver.network.serverpackets.SellListProcure:
    java.lang.String _S__E9_SELLLISTPROCURE -> _S__E9_SELLLISTPROCURE
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _money -> _money
    java.util.Map _sellList -> _sellList
    java.util.List _procureList -> _procureList
    int _castle -> _castle
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SendMacroList -> com.l2jfrozen.gameserver.network.serverpackets.SendMacroList:
    java.lang.String _S__E7_SENDMACROLIST -> _S__E7_SENDMACROLIST
    int _rev -> _rev
    int _count -> _count
    com.l2jfrozen.gameserver.model.L2Macro _macro -> _macro
    void <init>(int,int,com.l2jfrozen.gameserver.model.L2Macro) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SendTradeDone -> com.l2jfrozen.gameserver.network.serverpackets.SendTradeDone:
    java.lang.String _S__32_SENDTRADEDONE -> _S__32_SENDTRADEDONE
    int _num -> _num
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SendTradeRequest -> com.l2jfrozen.gameserver.network.serverpackets.SendTradeRequest:
    java.lang.String _S__73_SENDTRADEREQUEST -> _S__73_SENDTRADEREQUEST
    int _senderID -> _senderID
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ServerClose -> com.l2jfrozen.gameserver.network.serverpackets.ServerClose:
    java.lang.String _S__26_SERVERCLOSE -> _S__26_SERVERCLOSE
    com.l2jfrozen.gameserver.network.serverpackets.ServerClose STATIC_PACKET -> STATIC_PACKET
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.SetSummonRemainTime -> com.l2jfrozen.gameserver.network.serverpackets.SetSummonRemainTime:
    java.lang.String _S__D1_SET_SUMMON_REMAIN_TIME -> _S__D1_SET_SUMMON_REMAIN_TIME
    int _maxTime -> _maxTime
    int _remainingTime -> _remainingTime
    void <init>(int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SetToLocation -> com.l2jfrozen.gameserver.network.serverpackets.SetToLocation:
    java.lang.String _S__76_SETTOLOCATION -> _S__76_SETTOLOCATION
    int _charObjId -> _charObjId
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SetupGauge -> com.l2jfrozen.gameserver.network.serverpackets.SetupGauge:
    java.lang.String _S__85_SETUPGAUGE -> _S__85_SETUPGAUGE
    int BLUE -> BLUE
    int RED -> RED
    int CYAN -> CYAN
    int _dat1 -> _dat1
    int _time -> _time
    void <init>(int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ShortBuffStatusUpdate -> com.l2jfrozen.gameserver.network.serverpackets.ShortBuffStatusUpdate:
    java.lang.String _S__F4_SHORTBUFFSTATUSUPDATE -> _S__F4_SHORTBUFFSTATUSUPDATE
    int _skillId -> _skillId
    int _skillLvl -> _skillLvl
    int _duration -> _duration
    void <init>(int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ShortCutInit -> com.l2jfrozen.gameserver.network.serverpackets.ShortCutInit:
    java.lang.String _S__57_SHORTCUTINIT -> _S__57_SHORTCUTINIT
    com.l2jfrozen.gameserver.model.L2ShortCut[] _shortCuts -> _shortCuts
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ShortCutRegister -> com.l2jfrozen.gameserver.network.serverpackets.ShortCutRegister:
    java.lang.String _S__56_SHORTCUTREGISTER -> _S__56_SHORTCUTREGISTER
    com.l2jfrozen.gameserver.model.L2ShortCut _shortcut -> _shortcut
    void <init>(com.l2jfrozen.gameserver.model.L2ShortCut) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ShowBoard -> com.l2jfrozen.gameserver.network.serverpackets.ShowBoard:
    java.lang.String _S__6E_SHOWBOARD -> _S__6E_SHOWBOARD
    java.lang.String _htmlCode -> _htmlCode
    java.lang.String _id -> _id
    java.util.List _arg -> _arg
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.util.List) -> <init>
    byte[] get1002() -> get1002
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ShowCalculator -> com.l2jfrozen.gameserver.network.serverpackets.ShowCalculator:
    java.lang.String _S__DC_SHOWCALCULATOR -> _S__DC_SHOWCALCULATOR
    int _calculatorId -> _calculatorId
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ShowMiniMap -> com.l2jfrozen.gameserver.network.serverpackets.ShowMiniMap:
    java.lang.String _S__B6_SHOWMINIMAP -> _S__B6_SHOWMINIMAP
    int _mapId -> _mapId
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ShowPCCafeCouponShowUI -> com.l2jfrozen.gameserver.network.serverpackets.ShowPCCafeCouponShowUI:
    java.lang.String _S__FE_43_SHOWPCCAFECOUPONSHOWUI -> _S__FE_43_SHOWPCCAFECOUPONSHOWUI
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ShowTownMap -> com.l2jfrozen.gameserver.network.serverpackets.ShowTownMap:
    java.lang.String _S__DE_ShowTownMap -> _S__DE_ShowTownMap
    java.lang.String _texture -> _texture
    int _x -> _x
    int _y -> _y
    void <init>(java.lang.String,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ShowXMasSeal -> com.l2jfrozen.gameserver.network.serverpackets.ShowXMasSeal:
    java.lang.String _S__F2_SHOWXMASSEAL -> _S__F2_SHOWXMASSEAL
    int _item -> _item
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SiegeAttackerList -> com.l2jfrozen.gameserver.network.serverpackets.SiegeAttackerList:
    java.lang.String _S__CA_SiegeAttackerList -> _S__CA_SiegeAttackerList
    com.l2jfrozen.gameserver.model.entity.siege.Castle _castle -> _castle
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Castle) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SiegeDefenderList -> com.l2jfrozen.gameserver.network.serverpackets.SiegeDefenderList:
    java.lang.String _S__CA_SiegeDefenderList -> _S__CA_SiegeDefenderList
    com.l2jfrozen.gameserver.model.entity.siege.Castle _castle -> _castle
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Castle) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SiegeDefenderList$1 -> com.l2jfrozen.gameserver.network.serverpackets.SiegeDefenderList$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SiegeClanType -> $SwitchMap$com$l2jfrozen$gameserver$model$SiegeClanType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.SiegeInfo -> com.l2jfrozen.gameserver.network.serverpackets.SiegeInfo:
    java.lang.String _S__C9_SIEGEINFO -> _S__C9_SIEGEINFO
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.entity.siege.Castle _castle -> _castle
    void <init>(com.l2jfrozen.gameserver.model.entity.siege.Castle) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.SignsSky -> com.l2jfrozen.gameserver.network.serverpackets.SignsSky:
    java.lang.String _S__F8_SignsSky -> _S__F8_SignsSky
    int _state -> _state
    void <init>() -> <init>
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SkillCoolTime -> com.l2jfrozen.gameserver.network.serverpackets.SkillCoolTime:
    java.util.Collection _reuseTimeStamps -> _reuseTimeStamps
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SkillList -> com.l2jfrozen.gameserver.network.serverpackets.SkillList:
    java.lang.String _S__6D_SKILLLIST -> _S__6D_SKILLLIST
    com.l2jfrozen.gameserver.network.serverpackets.SkillList$Skill[] _skills -> _skills
    void <init>() -> <init>
    void addSkill(int,int,boolean) -> addSkill
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SkillList$Skill -> com.l2jfrozen.gameserver.network.serverpackets.SkillList$Skill:
    int id -> id
    int level -> level
    boolean passive -> passive
    com.l2jfrozen.gameserver.network.serverpackets.SkillList this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.SkillList,int,int,boolean) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.Snoop -> com.l2jfrozen.gameserver.network.serverpackets.Snoop:
    java.lang.String _S__D5_SNOOP -> _S__D5_SNOOP
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _snooped -> _snooped
    int _type -> _type
    java.lang.String _speaker -> _speaker
    java.lang.String _msg -> _msg
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,java.lang.String,java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SocialAction -> com.l2jfrozen.gameserver.network.serverpackets.SocialAction:
    java.lang.String _S__3D_SOCIALACTION -> _S__3D_SOCIALACTION
    int _charObjId -> _charObjId
    int _actionId -> _actionId
    void <init>(int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SpawnItem -> com.l2jfrozen.gameserver.network.serverpackets.SpawnItem:
    java.lang.String _S__15_SPAWNITEM -> _S__15_SPAWNITEM
    int _objectId -> _objectId
    int _itemId -> _itemId
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _stackable -> _stackable
    int _count -> _count
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SpawnItemPoly -> com.l2jfrozen.gameserver.network.serverpackets.SpawnItemPoly:
    java.lang.String _S__15_SPAWNITEM -> _S__15_SPAWNITEM
    int _objectId -> _objectId
    int _itemId -> _itemId
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _stackable -> _stackable
    int _count -> _count
    void <init>(com.l2jfrozen.gameserver.model.L2Object) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SpecialCamera -> com.l2jfrozen.gameserver.network.serverpackets.SpecialCamera:
    java.lang.String _S__C7_SPECIALCAMERA -> _S__C7_SPECIALCAMERA
    int _id -> _id
    int _dist -> _dist
    int _yaw -> _yaw
    int _pitch -> _pitch
    int _time -> _time
    int _duration -> _duration
    void <init>(int,int,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.StartPledgeWar -> com.l2jfrozen.gameserver.network.serverpackets.StartPledgeWar:
    java.lang.String _S__65_STARTPLEDGEWAR -> _S__65_STARTPLEDGEWAR
    java.lang.String _pledgeName -> _pledgeName
    java.lang.String _playerName -> _playerName
    void <init>(java.lang.String,java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.StaticObject -> com.l2jfrozen.gameserver.network.serverpackets.StaticObject:
    java.lang.String _S__99_StaticObjectPacket -> _S__99_StaticObjectPacket
    com.l2jfrozen.gameserver.model.actor.instance.L2StaticObjectInstance _staticObject -> _staticObject
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2StaticObjectInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.StatusUpdate -> com.l2jfrozen.gameserver.network.serverpackets.StatusUpdate:
    java.lang.String _S__1A_STATUSUPDATE -> _S__1A_STATUSUPDATE
    int LEVEL -> LEVEL
    int EXP -> EXP
    int STR -> STR
    int DEX -> DEX
    int CON -> CON
    int INT -> INT
    int WIT -> WIT
    int MEN -> MEN
    int CUR_HP -> CUR_HP
    int MAX_HP -> MAX_HP
    int CUR_MP -> CUR_MP
    int MAX_MP -> MAX_MP
    int SP -> SP
    int CUR_LOAD -> CUR_LOAD
    int MAX_LOAD -> MAX_LOAD
    int P_ATK -> P_ATK
    int ATK_SPD -> ATK_SPD
    int P_DEF -> P_DEF
    int EVASION -> EVASION
    int ACCURACY -> ACCURACY
    int CRITICAL -> CRITICAL
    int M_ATK -> M_ATK
    int CAST_SPD -> CAST_SPD
    int M_DEF -> M_DEF
    int PVP_FLAG -> PVP_FLAG
    int KARMA -> KARMA
    int CUR_CP -> CUR_CP
    int MAX_CP -> MAX_CP
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _actor -> _actor
    java.util.Vector _attributes -> _attributes
    int _objectId -> _objectId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void <init>(int) -> <init>
    void addAttribute(int,int) -> addAttribute
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.StatusUpdate$Attribute -> com.l2jfrozen.gameserver.network.serverpackets.StatusUpdate$Attribute:
    int id -> id
    int value -> value
    com.l2jfrozen.gameserver.network.serverpackets.StatusUpdate this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.network.serverpackets.StatusUpdate,int,int) -> <init>
com.l2jfrozen.gameserver.network.serverpackets.StopMove -> com.l2jfrozen.gameserver.network.serverpackets.StopMove:
    java.lang.String _S__59_STOPMOVE -> _S__59_STOPMOVE
    int _objectId -> _objectId
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void <init>(int,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.StopMoveInVehicle -> com.l2jfrozen.gameserver.network.serverpackets.StopMoveInVehicle:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _boatId -> _boatId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.StopPledgeWar -> com.l2jfrozen.gameserver.network.serverpackets.StopPledgeWar:
    java.lang.String _S__7f_STOPPLEDGEWAR -> _S__7f_STOPPLEDGEWAR
    java.lang.String _pledgeName -> _pledgeName
    java.lang.String _playerName -> _playerName
    void <init>(java.lang.String,java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.StopRotation -> com.l2jfrozen.gameserver.network.serverpackets.StopRotation:
    java.lang.String _S__78_STOPROTATION -> _S__78_STOPROTATION
    int _charObjId -> _charObjId
    int _degree -> _degree
    int _speed -> _speed
    void <init>(com.l2jfrozen.gameserver.model.L2Character,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SunRise -> com.l2jfrozen.gameserver.network.serverpackets.SunRise:
    java.lang.String _S__28_SUNRISE -> _S__28_SUNRISE
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SunSet -> com.l2jfrozen.gameserver.network.serverpackets.SunSet:
    java.lang.String _S__29_SUNSET -> _S__29_SUNSET
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SurrenderPledgeWar -> com.l2jfrozen.gameserver.network.serverpackets.SurrenderPledgeWar:
    java.lang.String _S__81_SURRENDERPLEDGEWAR -> _S__81_SURRENDERPLEDGEWAR
    java.lang.String _pledgeName -> _pledgeName
    java.lang.String _playerName -> _playerName
    void <init>(java.lang.String,java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.SystemMessage -> com.l2jfrozen.gameserver.network.serverpackets.SystemMessage:
    int TYPE_ZONE_NAME -> TYPE_ZONE_NAME
    int TYPE_SKILL_NAME -> TYPE_SKILL_NAME
    int TYPE_ITEM_NAME -> TYPE_ITEM_NAME
    int TYPE_NPC_NAME -> TYPE_NPC_NAME
    int TYPE_NUMBER -> TYPE_NUMBER
    int TYPE_TEXT -> TYPE_TEXT
    int _messageId -> _messageId
    java.util.Vector _types -> _types
    java.util.Vector _values -> _values
    int _skillLvL -> _skillLvL
    void <init>(com.l2jfrozen.gameserver.network.SystemMessageId) -> <init>
    void <init>(int) -> <init>
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage sendString(java.lang.String) -> sendString
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage addString(java.lang.String) -> addString
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage addNumber(int) -> addNumber
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage addNpcName(int) -> addNpcName
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage addItemName(int) -> addItemName
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage addZoneName(int,int,int) -> addZoneName
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage addSkillName(int) -> addSkillName
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage addSkillName(int,int) -> addSkillName
    void addSkillName(com.l2jfrozen.gameserver.model.L2Skill) -> addSkillName
    void writeImpl() -> writeImpl
    int getMessageID() -> getMessageID
    com.l2jfrozen.gameserver.network.serverpackets.SystemMessage getSystemMessage(com.l2jfrozen.gameserver.network.SystemMessageId) -> getSystemMessage
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TargetSelected -> com.l2jfrozen.gameserver.network.serverpackets.TargetSelected:
    java.lang.String _S__39_TARGETSELECTED -> _S__39_TARGETSELECTED
    int _objectId -> _objectId
    int _targetObjId -> _targetObjId
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(int,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TargetUnselected -> com.l2jfrozen.gameserver.network.serverpackets.TargetUnselected:
    java.lang.String _S__3A_TARGETUNSELECTED -> _S__3A_TARGETUNSELECTED
    int _targetObjId -> _targetObjId
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TeleportToLocation -> com.l2jfrozen.gameserver.network.serverpackets.TeleportToLocation:
    java.lang.String _S__38_TELEPORTTOLOCATION -> _S__38_TELEPORTTOLOCATION
    int _targetObjId -> _targetObjId
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    void <init>(com.l2jfrozen.gameserver.model.L2Object,int,int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2Object,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TitleUpdate -> com.l2jfrozen.gameserver.network.serverpackets.TitleUpdate:
    java.lang.String _S__CC_TITLE_UPDATE -> _S__CC_TITLE_UPDATE
    java.lang.String _title -> _title
    int _objectId -> _objectId
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TradeOtherAdd -> com.l2jfrozen.gameserver.network.serverpackets.TradeOtherAdd:
    java.lang.String _S__31_TRADEOTHERADD -> _S__31_TRADEOTHERADD
    com.l2jfrozen.gameserver.model.TradeList$TradeItem _item -> _item
    void <init>(com.l2jfrozen.gameserver.model.TradeList$TradeItem) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TradeOwnAdd -> com.l2jfrozen.gameserver.network.serverpackets.TradeOwnAdd:
    java.lang.String _S__30_TRADEOWNADD -> _S__30_TRADEOWNADD
    com.l2jfrozen.gameserver.model.TradeList$TradeItem _item -> _item
    void <init>(com.l2jfrozen.gameserver.model.TradeList$TradeItem) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TradePressOtherOk -> com.l2jfrozen.gameserver.network.serverpackets.TradePressOtherOk:
    com.l2jfrozen.gameserver.network.serverpackets.TradePressOtherOk STATIC_PACKET -> STATIC_PACKET
    void <init>() -> <init>
    java.lang.String getType() -> getType
    void writeImpl() -> writeImpl
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.TradePressOwnOk -> com.l2jfrozen.gameserver.network.serverpackets.TradePressOwnOk:
    com.l2jfrozen.gameserver.network.serverpackets.TradePressOwnOk STATIC_PACKET -> STATIC_PACKET
    void <init>() -> <init>
    java.lang.String getType() -> getType
    void writeImpl() -> writeImpl
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.TradeStart -> com.l2jfrozen.gameserver.network.serverpackets.TradeStart:
    java.lang.String _S__2E_TRADESTART -> _S__2E_TRADESTART
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _itemList -> _itemList
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TradeUpdate -> com.l2jfrozen.gameserver.network.serverpackets.TradeUpdate:
    java.lang.String _S__74_TRADEUPDATE -> _S__74_TRADEUPDATE
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _items -> _items
    com.l2jfrozen.gameserver.model.TradeList$TradeItem[] _trade_items -> _trade_items
    void <init>(com.l2jfrozen.gameserver.model.TradeList,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    int getItemCount(int) -> getItemCount
    java.lang.String getType() -> getType
    void writeImpl() -> writeImpl
com.l2jfrozen.gameserver.network.serverpackets.TutorialCloseHtml -> com.l2jfrozen.gameserver.network.serverpackets.TutorialCloseHtml:
    java.lang.String _S__A3_TUTORIALCLOSEHTML -> _S__A3_TUTORIALCLOSEHTML
    void <init>() -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TutorialEnableClientEvent -> com.l2jfrozen.gameserver.network.serverpackets.TutorialEnableClientEvent:
    java.lang.String _S__A2_TUTORIALENABLECLIENTEVENT -> _S__A2_TUTORIALENABLECLIENTEVENT
    int _eventId -> _eventId
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TutorialShowHtml -> com.l2jfrozen.gameserver.network.serverpackets.TutorialShowHtml:
    java.lang.String _S__A0_TUTORIALSHOWHTML -> _S__A0_TUTORIALSHOWHTML
    java.lang.String _html -> _html
    void <init>(java.lang.String) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.TutorialShowQuestionMark -> com.l2jfrozen.gameserver.network.serverpackets.TutorialShowQuestionMark:
    java.lang.String _S__A1_TUTORIALSHOWQUESTIONMARK -> _S__A1_TUTORIALSHOWQUESTIONMARK
    int _blink -> _blink
    void <init>(int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.UserInfo -> com.l2jfrozen.gameserver.network.serverpackets.UserInfo:
    java.lang.String _S__04_USERINFO -> _S__04_USERINFO
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _runSpd -> _runSpd
    int _walkSpd -> _walkSpd
    int _swimRunSpd -> _swimRunSpd
    int _swimWalkSpd -> _swimWalkSpd
    int _flRunSpd -> _flRunSpd
    int _flWalkSpd -> _flWalkSpd
    int _flyRunSpd -> _flyRunSpd
    int _flyWalkSpd -> _flyWalkSpd
    int _relation -> _relation
    float _moveMultiplier -> _moveMultiplier
    boolean _critical_test -> _critical_test
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ValidateLocation -> com.l2jfrozen.gameserver.network.serverpackets.ValidateLocation:
    java.lang.String _S__76_SETTOLOCATION -> _S__76_SETTOLOCATION
    int _charObjId -> _charObjId
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.ValidateLocationInVehicle -> com.l2jfrozen.gameserver.network.serverpackets.ValidateLocationInVehicle:
    java.lang.String _S__73_ValidateLocationInVehicle -> _S__73_ValidateLocationInVehicle
    int _boat -> _boat
    int _x -> _x
    int _y -> _y
    int _z -> _z
    int _heading -> _heading
    int _playerObj -> _playerObj
    void <init>(com.l2jfrozen.gameserver.model.L2Character) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.VehicleDeparture -> com.l2jfrozen.gameserver.network.serverpackets.VehicleDeparture:
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance _boat -> _boat
    int _speed1 -> _speed1
    int _speed2 -> _speed2
    int _x -> _x
    int _y -> _y
    int _z -> _z
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance,int,int,int,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.VehicleInfo -> com.l2jfrozen.gameserver.network.serverpackets.VehicleInfo:
    com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance _boat -> _boat
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2BoatInstance) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.WareHouseDepositList -> com.l2jfrozen.gameserver.network.serverpackets.WareHouseDepositList:
    int PRIVATE -> PRIVATE
    int CLAN -> CLAN
    int CASTLE -> CASTLE
    int FREIGHT -> FREIGHT
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _S__53_WAREHOUSEDEPOSITLIST -> _S__53_WAREHOUSEDEPOSITLIST
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _playerAdena -> _playerAdena
    javolution.util.FastList _items -> _items
    int _whType -> _whType
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.WareHouseWithdrawalList -> com.l2jfrozen.gameserver.network.serverpackets.WareHouseWithdrawalList:
    int PRIVATE -> PRIVATE
    int CLAN -> CLAN
    int CASTLE -> CASTLE
    int FREIGHT -> FREIGHT
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _S__54_WAREHOUSEWITHDRAWALLIST -> _S__54_WAREHOUSEWITHDRAWALLIST
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _activeChar -> _activeChar
    int _playerAdena -> _playerAdena
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _items -> _items
    int _whType -> _whType
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.network.serverpackets.WearList -> com.l2jfrozen.gameserver.network.serverpackets.WearList:
    java.lang.String _S__EF_WEARLIST -> _S__EF_WEARLIST
    int _listId -> _listId
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance[] _list -> _list
    int _money -> _money
    int _expertise -> _expertise
    void <init>(com.l2jfrozen.gameserver.model.L2TradeList,int,int) -> <init>
    void <init>(java.util.List,int,int) -> <init>
    void writeImpl() -> writeImpl
    java.lang.String getType() -> getType
com.l2jfrozen.gameserver.network.serverpackets.skillType -> com.l2jfrozen.gameserver.network.serverpackets.skillType:
    com.l2jfrozen.gameserver.network.serverpackets.skillType Usual -> Usual
    com.l2jfrozen.gameserver.network.serverpackets.skillType Fishing -> Fishing
    com.l2jfrozen.gameserver.network.serverpackets.skillType Clan -> Clan
    com.l2jfrozen.gameserver.network.serverpackets.skillType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.network.serverpackets.skillType[] values() -> values
    com.l2jfrozen.gameserver.network.serverpackets.skillType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.powerpak.Buffer.BuffHandler -> com.l2jfrozen.gameserver.powerpak.Buffer.BuffHandler:
    java.lang.String PARENT_DIR -> PARENT_DIR
    java.util.Map _buffs -> _buffs
    java.util.Map _visitedPages -> _visitedPages
    java.lang.String[] _BYPASSCMD -> _BYPASSCMD
    java.lang.String[] _BBSCommand -> _BBSCommand
    java.util.ArrayList getOwnBuffs(int) -> getOwnBuffs
    void <init>() -> <init>
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    boolean checkAllowed(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkAllowed
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getByPassCommands() -> getByPassCommands
    void handleCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleCommand
    java.lang.String[] getBBSCommands() -> getBBSCommands
    void sendHtmlMessage(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.network.serverpackets.NpcHtmlMessage) -> sendHtmlMessage
    void showGiveBuffsWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> showGiveBuffsWindow
    void showManageSchemeWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> showManageSchemeWindow
    void showEditSchemeWindow(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> showEditSchemeWindow
    java.lang.String getPlayerSchemeListFrame(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> getPlayerSchemeListFrame
    java.lang.String getGroupSkillListFrame(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> getGroupSkillListFrame
    java.lang.String getPlayerSkillListFrame(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,java.lang.String) -> getPlayerSkillListFrame
    java.lang.String getTypesFrame(java.lang.String) -> getTypesFrame
    int getFee(javolution.util.FastList) -> getFee
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.powerpak.Buffer.BuffTable -> com.l2jfrozen.gameserver.powerpak.Buffer.BuffTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.powerpak.Buffer.BuffTable _instance -> _instance
    java.util.Map _buffs -> _buffs
    java.util.Map _buffs_by_id -> _buffs_by_id
    com.l2jfrozen.gameserver.powerpak.Buffer.BuffTable getInstance() -> getInstance
    void <init>() -> <init>
    java.util.ArrayList getBuffsForName(java.lang.String) -> getBuffsForName
    java.util.ArrayList getBuffsForID(java.lang.Integer) -> getBuffsForID
    java.util.Iterator skill_groups() -> skill_groups
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.powerpak.Buffer.BuffTable$Buff -> com.l2jfrozen.gameserver.powerpak.Buffer.BuffTable$Buff:
    int _skillId -> _skillId
    int _skillLevel -> _skillLevel
    boolean _force -> _force
    int _minLevel -> _minLevel
    int _maxLevel -> _maxLevel
    int _price -> _price
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    com.l2jfrozen.gameserver.powerpak.Buffer.BuffTable this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.powerpak.Buffer.BuffTable,java.sql.ResultSet) -> <init>
    boolean checkLevel(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkLevel
    boolean checkPrice(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkPrice
com.l2jfrozen.gameserver.powerpak.Buffer.L2BufferInstance -> com.l2jfrozen.gameserver.powerpak.Buffer.L2BufferInstance:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance selfBuffer -> selfBuffer
    com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance npcBuffer -> npcBuffer
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void makeBuffs(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,com.l2jfrozen.gameserver.model.L2Object,boolean) -> makeBuffs
    com.l2jfrozen.gameserver.model.L2Character getbufferType(com.l2jfrozen.gameserver.model.L2Object) -> getbufferType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.powerpak.L2Utils -> com.l2jfrozen.gameserver.powerpak.L2Utils:
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance loadPlayer(java.lang.String) -> loadPlayer
    java.lang.String formatUserItems(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,com.l2jfrozen.gameserver.powerpak.L2Utils$IItemFilter,java.lang.String) -> formatUserItems
    java.lang.String loadMessage(java.lang.String) -> loadMessage
com.l2jfrozen.gameserver.powerpak.L2Utils$IItemFilter -> com.l2jfrozen.gameserver.powerpak.L2Utils$IItemFilter:
    boolean isCanShow(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> isCanShow
com.l2jfrozen.gameserver.powerpak.PowerPak -> com.l2jfrozen.gameserver.powerpak.PowerPak:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.powerpak.PowerPak _instance -> _instance
    com.l2jfrozen.gameserver.powerpak.PowerPak getInstance() -> getInstance
    void <init>() -> <init>
    void chatHandler(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,java.lang.String) -> chatHandler
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.powerpak.PowerPakConfig -> com.l2jfrozen.gameserver.powerpak.PowerPakConfig:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int BUFFER_NPC -> BUFFER_NPC
    boolean BUFFER_ENABLED -> BUFFER_ENABLED
    java.util.List BUFFER_EXCLUDE_ON -> BUFFER_EXCLUDE_ON
    java.lang.String BUFFER_COMMAND -> BUFFER_COMMAND
    int BUFFER_PRICE -> BUFFER_PRICE
    boolean BUFFER_USEBBS -> BUFFER_USEBBS
    boolean BUFFER_USECOMMAND -> BUFFER_USECOMMAND
    javolution.util.FastMap FIGHTER_SKILL_LIST -> FIGHTER_SKILL_LIST
    javolution.util.FastMap MAGE_SKILL_LIST -> MAGE_SKILL_LIST
    int NPCBUFFER_MAX_SCHEMES -> NPCBUFFER_MAX_SCHEMES
    int NPCBUFFER_MAX_SKILLS -> NPCBUFFER_MAX_SKILLS
    boolean NPCBUFFER_STORE_SCHEMES -> NPCBUFFER_STORE_SCHEMES
    int NPCBUFFER_STATIC_BUFF_COST -> NPCBUFFER_STATIC_BUFF_COST
    java.util.List GLOBALGK_EXCLUDE_ON -> GLOBALGK_EXCLUDE_ON
    boolean GLOBALGK_ENABDLED -> GLOBALGK_ENABDLED
    boolean GLOBALGK_USEBBS -> GLOBALGK_USEBBS
    int GLOBALGK_NPC -> GLOBALGK_NPC
    int GLOBALGK_PRICE -> GLOBALGK_PRICE
    int GLOBALGK_TIMEOUT -> GLOBALGK_TIMEOUT
    java.lang.String GLOBALGK_COMMAND -> GLOBALGK_COMMAND
    boolean GLOBALGK_USECOMMAND -> GLOBALGK_USECOMMAND
    int GMSHOP_NPC -> GMSHOP_NPC
    boolean GMSHOP_ENABLED -> GMSHOP_ENABLED
    boolean GMSHOP_USEBBS -> GMSHOP_USEBBS
    java.lang.String GMSHOP_COMMAND -> GMSHOP_COMMAND
    java.util.List GMSHOP_EXCLUDE_ON -> GMSHOP_EXCLUDE_ON
    boolean GMSHOP_USECOMMAND -> GMSHOP_USECOMMAND
    boolean WEBSERVER_ENABLED -> WEBSERVER_ENABLED
    int WEBSERVER_PORT -> WEBSERVER_PORT
    java.lang.String WEBSERVER_HOST -> WEBSERVER_HOST
    boolean L2TOPDEMON_ENABLED -> L2TOPDEMON_ENABLED
    int L2TOPDEMON_POLLINTERVAL -> L2TOPDEMON_POLLINTERVAL
    boolean L2TOPDEMON_IGNOREFIRST -> L2TOPDEMON_IGNOREFIRST
    int L2TOPDEMON_MIN -> L2TOPDEMON_MIN
    int L2TOPDEMON_MAX -> L2TOPDEMON_MAX
    int L2TOPDEMON_ITEM -> L2TOPDEMON_ITEM
    java.lang.String L2TOPDEMON_MESSAGE -> L2TOPDEMON_MESSAGE
    java.lang.String L2TOPDEMON_URL -> L2TOPDEMON_URL
    java.lang.String L2TOPDEMON_PREFIX -> L2TOPDEMON_PREFIX
    int VOTES_FOR_REWARD -> VOTES_FOR_REWARD
    java.lang.String VOTES_REWARDS -> VOTES_REWARDS
    java.lang.String VOTES_SITE_TOPZONE_URL -> VOTES_SITE_TOPZONE_URL
    java.lang.String VOTES_SITE_HOPZONE_URL -> VOTES_SITE_HOPZONE_URL
    java.lang.String VOTES_SITE_L2NETWORK_URL -> VOTES_SITE_L2NETWORK_URL
    javolution.util.FastMap VOTES_REWARDS_LIST -> VOTES_REWARDS_LIST
    int VOTES_SYSYEM_INITIAL_DELAY -> VOTES_SYSYEM_INITIAL_DELAY
    int VOTES_SYSYEM_STEP_DELAY -> VOTES_SYSYEM_STEP_DELAY
    boolean ENABLE_VOTE_COMMAND -> ENABLE_VOTE_COMMAND
    java.lang.String SERVER_WEB_SITE -> SERVER_WEB_SITE
    boolean AUTOVOTEREWARD_ENABLED -> AUTOVOTEREWARD_ENABLED
    boolean ENABLE_SAY_SOCIAL_ACTIONS -> ENABLE_SAY_SOCIAL_ACTIONS
    boolean CHAR_REPAIR -> CHAR_REPAIR
    boolean VOTEMANAGER_LOG -> VOTEMANAGER_LOG
    void <init>() -> <init>
    void load() -> load
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.powerpak.RaidInfo.RaidInfoHandler -> com.l2jfrozen.gameserver.powerpak.RaidInfo.RaidInfoHandler:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int NPC_ID -> NPC_ID
    java.lang.String[] _BYPASSCMD -> _BYPASSCMD
    void <init>() -> <init>
    java.lang.String[] getByPassCommands() -> getByPassCommands
    void handleCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleCommand
    void sendInfo(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> sendInfo
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.powerpak.StringTable -> com.l2jfrozen.gameserver.powerpak.StringTable:
    java.util.Map _messagetable -> _messagetable
    void <init>(java.lang.String) -> <init>
    void load(java.io.File) -> load
    java.lang.String Message(java.lang.String) -> Message
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
com.l2jfrozen.gameserver.powerpak.globalGK.GKHandler -> com.l2jfrozen.gameserver.powerpak.globalGK.GKHandler:
    void <init>() -> <init>
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    boolean checkAllowed(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkAllowed
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getByPassCommands() -> getByPassCommands
    void handleCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleCommand
    java.lang.String[] getBBSCommands() -> getBBSCommands
com.l2jfrozen.gameserver.powerpak.globalGK.GKHandler$EscapeFinalizer -> com.l2jfrozen.gameserver.powerpak.globalGK.GKHandler$EscapeFinalizer:
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _player -> _player
    com.l2jfrozen.gameserver.model.L2TeleportLocation _tp -> _tp
    com.l2jfrozen.gameserver.powerpak.globalGK.GKHandler this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.powerpak.globalGK.GKHandler,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,com.l2jfrozen.gameserver.model.L2TeleportLocation) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.powerpak.gmshop.GMShop -> com.l2jfrozen.gameserver.powerpak.gmshop.GMShop:
    java.lang.String[] _CMD -> _CMD
    void <init>() -> <init>
    java.lang.String[] getVoicedCommandList() -> getVoicedCommandList
    boolean checkAllowed(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> checkAllowed
    boolean useVoicedCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> useVoicedCommand
    java.lang.String[] getByPassCommands() -> getByPassCommands
    void handleCommand(java.lang.String,com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String) -> handleCommand
    java.lang.String[] getBBSCommands() -> getBBSCommands
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon -> com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.concurrent.ScheduledFuture _task -> _task
    java.sql.Timestamp _lastVote -> _lastVote
    boolean _firstRun -> _firstRun
    void <init>() -> <init>
    boolean checkVotes() -> checkVotes
    void run() -> run
    com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon getInstance() -> getInstance
    void <init>(com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon$1 -> com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon$1:
com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon$SingletonHolder -> com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon$SingletonHolder:
    com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon$Terminator -> com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon$Terminator:
    com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon$VotesUpdate -> com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon$VotesUpdate:
    java.sql.Timestamp _votedate -> _votedate
    java.lang.String _charName -> _charName
    boolean _fr -> _fr
    com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.powerpak.vote.L2TopDeamon,java.sql.Timestamp,java.lang.String,boolean) -> <init>
    void execute(java.sql.Connection) -> execute
com.l2jfrozen.gameserver.script.DateRange -> com.l2jfrozen.gameserver.script.DateRange:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Date _startDate -> _startDate
    java.util.Date _endDate -> _endDate
    void <init>(java.util.Date,java.util.Date) -> <init>
    com.l2jfrozen.gameserver.script.DateRange parse(java.lang.String,java.text.DateFormat) -> parse
    boolean isValid() -> isValid
    boolean isWithinRange(java.util.Date) -> isWithinRange
    java.util.Date getEndDate() -> getEndDate
    java.util.Date getStartDate() -> getStartDate
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.EngineInterface -> com.l2jfrozen.gameserver.script.EngineInterface:
    com.l2jfrozen.gameserver.datatables.sql.CharNameTable charNametable -> charNametable
    com.l2jfrozen.gameserver.idfactory.IdFactory idFactory -> idFactory
    com.l2jfrozen.gameserver.datatables.sql.ItemTable itemTable -> itemTable
    com.l2jfrozen.gameserver.datatables.SkillTable skillTable -> skillTable
    com.l2jfrozen.gameserver.controllers.RecipeController recipeController -> recipeController
    com.l2jfrozen.gameserver.datatables.sql.SkillTreeTable skillTreeTable -> skillTreeTable
    com.l2jfrozen.gameserver.datatables.sql.CharTemplateTable charTemplates -> charTemplates
    com.l2jfrozen.gameserver.datatables.sql.ClanTable clanTable -> clanTable
    com.l2jfrozen.gameserver.datatables.sql.NpcTable npcTable -> npcTable
    com.l2jfrozen.gameserver.datatables.sql.TeleportLocationTable teleTable -> teleTable
    com.l2jfrozen.gameserver.datatables.sql.LevelUpData levelUpData -> levelUpData
    com.l2jfrozen.gameserver.model.L2World world -> world
    com.l2jfrozen.gameserver.datatables.sql.SpawnTable spawnTable -> spawnTable
    com.l2jfrozen.gameserver.controllers.GameTimeController gameTimeController -> gameTimeController
    com.l2jfrozen.gameserver.model.entity.Announcements announcements -> announcements
    com.l2jfrozen.gameserver.datatables.csv.MapRegionTable mapRegions -> mapRegions
    void addQuestDrop(int,int,int,int,int,java.lang.String,java.lang.String[]) -> addQuestDrop
    void addEventDrop(int[],int[],double,com.l2jfrozen.gameserver.script.DateRange) -> addEventDrop
    void onPlayerLogin(java.lang.String[],com.l2jfrozen.gameserver.script.DateRange) -> onPlayerLogin
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.EventDroplist -> com.l2jfrozen.gameserver.script.EventDroplist:
    com.l2jfrozen.gameserver.script.EventDroplist _instance -> _instance
    java.util.List _allNpcDateDrops -> _allNpcDateDrops
    com.l2jfrozen.gameserver.script.EventDroplist getInstance() -> getInstance
    void <init>() -> <init>
    void addGlobalDrop(int[],int[],int,com.l2jfrozen.gameserver.script.DateRange) -> addGlobalDrop
    java.util.List getAllDrops() -> getAllDrops
com.l2jfrozen.gameserver.script.EventDroplist$DateDrop -> com.l2jfrozen.gameserver.script.EventDroplist$DateDrop:
    com.l2jfrozen.gameserver.script.DateRange dateRange -> dateRange
    int[] items -> items
    int min -> min
    int max -> max
    int chance -> chance
    com.l2jfrozen.gameserver.script.EventDroplist this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.script.EventDroplist) -> <init>
com.l2jfrozen.gameserver.script.Expression -> com.l2jfrozen.gameserver.script.Expression:
    javax.script.ScriptContext _context -> _context
    java.lang.Object eval(java.lang.String,java.lang.String) -> eval
    java.lang.Object eval(javax.script.ScriptContext,java.lang.String,java.lang.String) -> eval
    com.l2jfrozen.gameserver.script.Expression create(javax.script.ScriptContext) -> create
    void <init>(javax.script.ScriptContext) -> <init>
    void addDynamicVariable(java.lang.String,java.lang.Object) -> addDynamicVariable
    void removeDynamicVariable(java.lang.String) -> removeDynamicVariable
com.l2jfrozen.gameserver.script.IntList -> com.l2jfrozen.gameserver.script.IntList:
    void <init>() -> <init>
    int[] parse(java.lang.String) -> parse
    int getInt(java.lang.String) -> getInt
    int[] getIntegerList(java.lang.String[]) -> getIntegerList
com.l2jfrozen.gameserver.script.Parser -> com.l2jfrozen.gameserver.script.Parser:
    void <init>() -> <init>
    void parseScript(org.w3c.dom.Node,javax.script.ScriptContext) -> parseScript
com.l2jfrozen.gameserver.script.ParserFactory -> com.l2jfrozen.gameserver.script.ParserFactory:
    void <init>() -> <init>
    com.l2jfrozen.gameserver.script.Parser create() -> create
com.l2jfrozen.gameserver.script.ParserNotCreatedException -> com.l2jfrozen.gameserver.script.ParserNotCreatedException:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
com.l2jfrozen.gameserver.script.ScriptDocument -> com.l2jfrozen.gameserver.script.ScriptDocument:
    org.w3c.dom.Document _document -> _document
    java.lang.String _name -> _name
    void <init>(java.lang.String,java.io.InputStream) -> <init>
    org.w3c.dom.Document getDocument() -> getDocument
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
com.l2jfrozen.gameserver.script.ScriptEngine -> com.l2jfrozen.gameserver.script.ScriptEngine:
    com.l2jfrozen.gameserver.script.EngineInterface _utils -> _utils
    java.util.Hashtable parserFactories -> parserFactories
    void <init>() -> <init>
    com.l2jfrozen.gameserver.script.Parser createParser(java.lang.String) -> createParser
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.ScriptPackage -> com.l2jfrozen.gameserver.script.ScriptPackage:
    java.util.List _scriptFiles -> _scriptFiles
    java.util.List _otherFiles -> _otherFiles
    java.lang.String _name -> _name
    void <init>(java.util.zip.ZipFile) -> <init>
    java.util.List getOtherFiles() -> getOtherFiles
    java.util.List getScriptFiles() -> getScriptFiles
    void addFiles(java.util.zip.ZipFile) -> addFiles
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
com.l2jfrozen.gameserver.script.ShortList -> com.l2jfrozen.gameserver.script.ShortList:
    void <init>() -> <init>
    short[] parse(java.lang.String) -> parse
    short getShort(java.lang.String) -> getShort
    short[] getShortList(java.lang.String[]) -> getShortList
com.l2jfrozen.gameserver.script.faenor.FaenorEventParser -> com.l2jfrozen.gameserver.script.faenor.FaenorEventParser:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.script.DateRange _eventDates -> _eventDates
    void <init>() -> <init>
    void parseScript(org.w3c.dom.Node,javax.script.ScriptContext) -> parseScript
    void parseEventDropAndMessage(org.w3c.dom.Node) -> parseEventDropAndMessage
    void parseEventMessage(org.w3c.dom.Node) -> parseEventMessage
    void parseEventDropList(org.w3c.dom.Node) -> parseEventDropList
    void parseEventDrop(org.w3c.dom.Node) -> parseEventDrop
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.faenor.FaenorEventParser$1 -> com.l2jfrozen.gameserver.script.faenor.FaenorEventParser$1:
    org.w3c.dom.Node val$eventNode -> val$eventNode
    com.l2jfrozen.gameserver.script.faenor.FaenorEventParser this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.script.faenor.FaenorEventParser,org.w3c.dom.Node) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.script.faenor.FaenorEventParser$FaenorEventParserFactory -> com.l2jfrozen.gameserver.script.faenor.FaenorEventParser$FaenorEventParserFactory:
    void <init>() -> <init>
    com.l2jfrozen.gameserver.script.Parser create() -> create
com.l2jfrozen.gameserver.script.faenor.FaenorInterface -> com.l2jfrozen.gameserver.script.faenor.FaenorInterface:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.script.faenor.FaenorInterface getInstance() -> getInstance
    void <init>() -> <init>
    java.util.List getAllPlayers() -> getAllPlayers
    void addQuestDrop(int,int,int,int,int,java.lang.String,java.lang.String[]) -> addQuestDrop
    void addDrop(int,int,int,int,boolean,int) -> addDrop
    void addDrop(com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.L2DropData,boolean) -> addDrop
    void addDrop(com.l2jfrozen.gameserver.templates.L2NpcTemplate,com.l2jfrozen.gameserver.model.L2DropData,int) -> addDrop
    java.util.List getQuestDrops(int) -> getQuestDrops
    void addEventDrop(int[],int[],double,com.l2jfrozen.gameserver.script.DateRange) -> addEventDrop
    void onPlayerLogin(java.lang.String[],com.l2jfrozen.gameserver.script.DateRange) -> onPlayerLogin
    void addPetData(javax.script.ScriptContext,int,int,int,java.util.Map) -> addPetData
    void <init>(com.l2jfrozen.gameserver.script.faenor.FaenorInterface$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.faenor.FaenorInterface$1 -> com.l2jfrozen.gameserver.script.faenor.FaenorInterface$1:
com.l2jfrozen.gameserver.script.faenor.FaenorInterface$SingletonHolder -> com.l2jfrozen.gameserver.script.faenor.FaenorInterface$SingletonHolder:
    com.l2jfrozen.gameserver.script.faenor.FaenorInterface _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.faenor.FaenorParser -> com.l2jfrozen.gameserver.script.faenor.FaenorParser:
    com.l2jfrozen.gameserver.script.faenor.FaenorInterface _bridge -> _bridge
    java.text.DateFormat DATE_FORMAT -> DATE_FORMAT
    boolean DEBUG -> DEBUG
    void <init>() -> <init>
    java.lang.String attribute(org.w3c.dom.Node,java.lang.String) -> attribute
    java.lang.String element(org.w3c.dom.Node,java.lang.String) -> element
    java.lang.String attribute(org.w3c.dom.Node,java.lang.String,java.lang.String) -> attribute
    java.lang.String element(org.w3c.dom.Node,java.lang.String,java.lang.String) -> element
    boolean isNodeName(org.w3c.dom.Node,java.lang.String) -> isNodeName
    double getPercent(java.lang.String) -> getPercent
    int getInt(java.lang.String) -> getInt
    double getDouble(java.lang.String) -> getDouble
    float getFloat(java.lang.String) -> getFloat
    java.lang.String getParserName(java.lang.String) -> getParserName
    void parseScript(org.w3c.dom.Node,javax.script.ScriptContext) -> parseScript
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.faenor.FaenorQuestParser -> com.l2jfrozen.gameserver.script.faenor.FaenorQuestParser:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void parseScript(org.w3c.dom.Node,javax.script.ScriptContext) -> parseScript
    void parseQuestDropList(org.w3c.dom.Node,java.lang.String) -> parseQuestDropList
    void parseQuestDrop(org.w3c.dom.Node,java.lang.String) -> parseQuestDrop
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.faenor.FaenorQuestParser$FaenorQuestParserFactory -> com.l2jfrozen.gameserver.script.faenor.FaenorQuestParser$FaenorQuestParserFactory:
    void <init>() -> <init>
    com.l2jfrozen.gameserver.script.Parser create() -> create
com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine -> com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String PACKAGE_DIRECTORY -> PACKAGE_DIRECTORY
    boolean DEBUG -> DEBUG
    java.util.LinkedList _scripts -> _scripts
    com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine getInstance() -> getInstance
    void <init>() -> <init>
    void reloadPackages() -> reloadPackages
    void loadPackages() -> loadPackages
    void orderScripts() -> orderScripts
    void parsePackages() -> parsePackages
    void parseScript(com.l2jfrozen.gameserver.script.ScriptDocument,javax.script.ScriptContext) -> parseScript
    java.lang.String toString() -> toString
    void <init>(com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine$1 -> com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine$1:
    com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine) -> <init>
    boolean accept(java.io.File) -> accept
com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine$SingletonHolder -> com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine$SingletonHolder:
    com.l2jfrozen.gameserver.script.faenor.FaenorScriptEngine _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.faenor.FaenorWorldDataParser -> com.l2jfrozen.gameserver.script.faenor.FaenorWorldDataParser:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String PET_DATA -> PET_DATA
    void <init>() -> <init>
    void parseScript(org.w3c.dom.Node,javax.script.ScriptContext) -> parseScript
    void parsePetData(org.w3c.dom.Node,javax.script.ScriptContext) -> parsePetData
    void parseStat(org.w3c.dom.Node,com.l2jfrozen.gameserver.script.faenor.FaenorWorldDataParser$PetData) -> parseStat
    java.lang.String parseForumla(org.w3c.dom.Node) -> parseForumla
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.script.faenor.FaenorWorldDataParser$FaenorWorldDataParserFactory -> com.l2jfrozen.gameserver.script.faenor.FaenorWorldDataParser$FaenorWorldDataParserFactory:
    void <init>() -> <init>
    com.l2jfrozen.gameserver.script.Parser create() -> create
com.l2jfrozen.gameserver.script.faenor.FaenorWorldDataParser$PetData -> com.l2jfrozen.gameserver.script.faenor.FaenorWorldDataParser$PetData:
    int petId -> petId
    int levelStart -> levelStart
    int levelEnd -> levelEnd
    java.util.Map statValues -> statValues
    com.l2jfrozen.gameserver.script.faenor.FaenorWorldDataParser this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.script.faenor.FaenorWorldDataParser) -> <init>
com.l2jfrozen.gameserver.scripting.CompiledScriptCache -> com.l2jfrozen.gameserver.scripting.CompiledScriptCache:
    long serialVersionUID -> serialVersionUID
    org.apache.log4j.Logger LOG -> LOG
    java.util.Map _compiledScriptCache -> _compiledScriptCache
    boolean _modified -> _modified
    void <init>() -> <init>
    javax.script.CompiledScript loadCompiledScript(javax.script.ScriptEngine,java.io.File) -> loadCompiledScript
    boolean isModified() -> isModified
    void purge() -> purge
    void save() -> save
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.scripting.CompiledScriptHolder -> com.l2jfrozen.gameserver.scripting.CompiledScriptHolder:
    long serialVersionUID -> serialVersionUID
    long _lastModified -> _lastModified
    long _size -> _size
    javax.script.CompiledScript _compiledScript -> _compiledScript
    void <init>(javax.script.CompiledScript,long,long) -> <init>
    void <init>(javax.script.CompiledScript,java.io.File) -> <init>
    long getLastModified() -> getLastModified
    void setLastModified(long) -> setLastModified
    long getSize() -> getSize
    void setSize(long) -> setSize
    javax.script.CompiledScript getCompiledScript() -> getCompiledScript
    void setCompiledScript(javax.script.CompiledScript) -> setCompiledScript
    boolean matches(java.io.File) -> matches
com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager -> com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.io.File SCRIPT_FOLDER -> SCRIPT_FOLDER
    java.util.Map _nameEngines -> _nameEngines
    java.util.Map _extEngines -> _extEngines
    java.util.List _scriptManagers -> _scriptManagers
    com.l2jfrozen.gameserver.scripting.CompiledScriptCache _cache -> _cache
    java.io.File _currentLoadingScript -> _currentLoadingScript
    com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager getInstance() -> getInstance
    void <init>() -> <init>
    void preConfigure() -> preConfigure
    javax.script.ScriptEngine getEngineByName(java.lang.String) -> getEngineByName
    javax.script.ScriptEngine getEngineByExtension(java.lang.String) -> getEngineByExtension
    void executeScriptsList(java.io.File) -> executeScriptsList
    void executeAllScriptsInDirectory(java.io.File) -> executeAllScriptsInDirectory
    void executeAllScriptsInDirectory(java.io.File,boolean,int) -> executeAllScriptsInDirectory
    void executeAllScriptsInDirectory(java.io.File,boolean,int,int) -> executeAllScriptsInDirectory
    com.l2jfrozen.gameserver.scripting.CompiledScriptCache getCompiledScriptCache() -> getCompiledScriptCache
    com.l2jfrozen.gameserver.scripting.CompiledScriptCache loadCompiledScriptCache() -> loadCompiledScriptCache
    void executeScript(java.io.File) -> executeScript
    void executeScript(java.lang.String,java.io.File) -> executeScript
    void executeScript(javax.script.ScriptEngine,java.io.File) -> executeScript
    java.lang.String getClassForFile(java.io.File) -> getClassForFile
    javax.script.ScriptContext getScriptContext(javax.script.ScriptEngine) -> getScriptContext
    javax.script.ScriptContext getScriptContext(java.lang.String) -> getScriptContext
    java.lang.Object eval(javax.script.ScriptEngine,java.lang.String,javax.script.ScriptContext) -> eval
    java.lang.Object eval(java.lang.String,java.lang.String) -> eval
    java.lang.Object eval(java.lang.String,java.lang.String,javax.script.ScriptContext) -> eval
    java.lang.Object eval(javax.script.ScriptEngine,java.lang.String) -> eval
    void reportScriptFileError(java.io.File,javax.script.ScriptException) -> reportScriptFileError
    void registerScriptManager(com.l2jfrozen.gameserver.scripting.ScriptManager) -> registerScriptManager
    void removeScriptManager(com.l2jfrozen.gameserver.scripting.ScriptManager) -> removeScriptManager
    java.util.List getScriptManagers() -> getScriptManagers
    void setCurrentLoadingScript(java.io.File) -> setCurrentLoadingScript
    java.io.File getCurrentLoadScript() -> getCurrentLoadScript
    void <init>(com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager$1 -> com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager$1:
com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager$CleaneCache -> com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager$CleaneCache:
    com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager$SingletonHolder -> com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager$SingletonHolder:
    com.l2jfrozen.gameserver.scripting.L2ScriptEngineManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.scripting.ManagedScript -> com.l2jfrozen.gameserver.scripting.ManagedScript:
    java.io.File _scriptFile -> _scriptFile
    long _lastLoadTime -> _lastLoadTime
    boolean _isActive -> _isActive
    void <init>() -> <init>
    boolean reload() -> reload
    boolean unload() -> unload
    void setActive(boolean) -> setActive
    boolean isActive() -> isActive
    java.io.File getScriptFile() -> getScriptFile
    void setLastLoadTime(long) -> setLastLoadTime
    long getLastLoadTime() -> getLastLoadTime
    java.lang.String getScriptName() -> getScriptName
    com.l2jfrozen.gameserver.scripting.ScriptManager getScriptManager() -> getScriptManager
com.l2jfrozen.gameserver.scripting.ScriptManager -> com.l2jfrozen.gameserver.scripting.ScriptManager:
    void <init>() -> <init>
    java.lang.Iterable getAllManagedScripts() -> getAllManagedScripts
    boolean reload(com.l2jfrozen.gameserver.scripting.ManagedScript) -> reload
    boolean unload(com.l2jfrozen.gameserver.scripting.ManagedScript) -> unload
    void setActive(com.l2jfrozen.gameserver.scripting.ManagedScript,boolean) -> setActive
    java.lang.String getScriptManagerName() -> getScriptManagerName
com.l2jfrozen.gameserver.skills.BaseStats -> com.l2jfrozen.gameserver.skills.BaseStats:
    com.l2jfrozen.gameserver.skills.BaseStats STR -> STR
    com.l2jfrozen.gameserver.skills.BaseStats INT -> INT
    com.l2jfrozen.gameserver.skills.BaseStats DEX -> DEX
    com.l2jfrozen.gameserver.skills.BaseStats WIT -> WIT
    com.l2jfrozen.gameserver.skills.BaseStats CON -> CON
    com.l2jfrozen.gameserver.skills.BaseStats MEN -> MEN
    com.l2jfrozen.gameserver.skills.BaseStats NULL -> NULL
    org.apache.log4j.Logger LOGGER -> LOGGER
    int MAX_STAT_VALUE -> MAX_STAT_VALUE
    double[] STRbonus -> STRbonus
    double[] INTbonus -> INTbonus
    double[] DEXbonus -> DEXbonus
    double[] WITbonus -> WITbonus
    double[] CONbonus -> CONbonus
    double[] MENbonus -> MENbonus
    com.l2jfrozen.gameserver.skills.BaseStats$BaseStat _stat -> _stat
    com.l2jfrozen.gameserver.skills.BaseStats[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.skills.BaseStats[] values() -> values
    com.l2jfrozen.gameserver.skills.BaseStats valueOf(java.lang.String) -> valueOf
    java.lang.String getValue() -> getValue
    void <init>(java.lang.String,int,com.l2jfrozen.gameserver.skills.BaseStats$BaseStat) -> <init>
    double calcBonus(com.l2jfrozen.gameserver.model.L2Character) -> calcBonus
    com.l2jfrozen.gameserver.skills.BaseStats valueOfXml(java.lang.String) -> valueOfXml
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.BaseStats$BaseStat -> com.l2jfrozen.gameserver.skills.BaseStats$BaseStat:
    double calcBonus(com.l2jfrozen.gameserver.model.L2Character) -> calcBonus
com.l2jfrozen.gameserver.skills.BaseStats$CON -> com.l2jfrozen.gameserver.skills.BaseStats$CON:
    void <init>() -> <init>
    double calcBonus(com.l2jfrozen.gameserver.model.L2Character) -> calcBonus
com.l2jfrozen.gameserver.skills.BaseStats$DEX -> com.l2jfrozen.gameserver.skills.BaseStats$DEX:
    void <init>() -> <init>
    double calcBonus(com.l2jfrozen.gameserver.model.L2Character) -> calcBonus
com.l2jfrozen.gameserver.skills.BaseStats$INT -> com.l2jfrozen.gameserver.skills.BaseStats$INT:
    void <init>() -> <init>
    double calcBonus(com.l2jfrozen.gameserver.model.L2Character) -> calcBonus
com.l2jfrozen.gameserver.skills.BaseStats$MEN -> com.l2jfrozen.gameserver.skills.BaseStats$MEN:
    void <init>() -> <init>
    double calcBonus(com.l2jfrozen.gameserver.model.L2Character) -> calcBonus
com.l2jfrozen.gameserver.skills.BaseStats$NULL -> com.l2jfrozen.gameserver.skills.BaseStats$NULL:
    void <init>() -> <init>
    double calcBonus(com.l2jfrozen.gameserver.model.L2Character) -> calcBonus
com.l2jfrozen.gameserver.skills.BaseStats$STR -> com.l2jfrozen.gameserver.skills.BaseStats$STR:
    void <init>() -> <init>
    double calcBonus(com.l2jfrozen.gameserver.model.L2Character) -> calcBonus
com.l2jfrozen.gameserver.skills.BaseStats$WIT -> com.l2jfrozen.gameserver.skills.BaseStats$WIT:
    void <init>() -> <init>
    double calcBonus(com.l2jfrozen.gameserver.model.L2Character) -> calcBonus
com.l2jfrozen.gameserver.skills.Calculator -> com.l2jfrozen.gameserver.skills.Calculator:
    com.l2jfrozen.gameserver.skills.funcs.Func[] _emptyFuncs -> _emptyFuncs
    com.l2jfrozen.gameserver.skills.funcs.Func[] _functions -> _functions
    void <init>() -> <init>
    void <init>(com.l2jfrozen.gameserver.skills.Calculator) -> <init>
    boolean equalsCals(com.l2jfrozen.gameserver.skills.Calculator,com.l2jfrozen.gameserver.skills.Calculator) -> equalsCals
    int size() -> size
    void addFunc(com.l2jfrozen.gameserver.skills.funcs.Func) -> addFunc
    void removeFunc(com.l2jfrozen.gameserver.skills.funcs.Func) -> removeFunc
    javolution.util.FastList removeOwner(java.lang.Object) -> removeOwner
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.DocumentBase -> com.l2jfrozen.gameserver.skills.DocumentBase:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.io.File _file -> _file
    java.util.Map _tables -> _tables
    void <init>(java.io.File) -> <init>
    org.w3c.dom.Document parse() -> parse
    void parseDocument(org.w3c.dom.Document) -> parseDocument
    com.l2jfrozen.gameserver.templates.StatsSet getStatsSet() -> getStatsSet
    java.lang.String getTableValue(java.lang.String) -> getTableValue
    java.lang.String getTableValue(java.lang.String,int) -> getTableValue
    void resetTable() -> resetTable
    void setTable(java.lang.String,java.lang.String[]) -> setTable
    void parseTemplate(org.w3c.dom.Node,java.lang.Object) -> parseTemplate
    void attachFunc(org.w3c.dom.Node,java.lang.Object,java.lang.String,com.l2jfrozen.gameserver.skills.conditions.Condition) -> attachFunc
    void attachLambdaFunc(org.w3c.dom.Node,java.lang.Object,com.l2jfrozen.gameserver.skills.funcs.LambdaCalc) -> attachLambdaFunc
    void attachEffect(org.w3c.dom.Node,java.lang.Object,com.l2jfrozen.gameserver.skills.conditions.Condition) -> attachEffect
    void attachSkill(org.w3c.dom.Node,java.lang.Object,com.l2jfrozen.gameserver.skills.conditions.Condition) -> attachSkill
    com.l2jfrozen.gameserver.skills.conditions.Condition parseCondition(org.w3c.dom.Node,java.lang.Object) -> parseCondition
    com.l2jfrozen.gameserver.skills.conditions.Condition parseLogicAnd(org.w3c.dom.Node,java.lang.Object) -> parseLogicAnd
    com.l2jfrozen.gameserver.skills.conditions.Condition parseLogicOr(org.w3c.dom.Node,java.lang.Object) -> parseLogicOr
    com.l2jfrozen.gameserver.skills.conditions.Condition parseLogicNot(org.w3c.dom.Node,java.lang.Object) -> parseLogicNot
    com.l2jfrozen.gameserver.skills.conditions.Condition parsePlayerCondition(org.w3c.dom.Node) -> parsePlayerCondition
    com.l2jfrozen.gameserver.skills.conditions.Condition parseTargetCondition(org.w3c.dom.Node,java.lang.Object) -> parseTargetCondition
    com.l2jfrozen.gameserver.skills.conditions.Condition parseSkillCondition(org.w3c.dom.Node) -> parseSkillCondition
    com.l2jfrozen.gameserver.skills.conditions.Condition parseUsingCondition(org.w3c.dom.Node) -> parseUsingCondition
    com.l2jfrozen.gameserver.skills.conditions.Condition parseGameCondition(org.w3c.dom.Node) -> parseGameCondition
    void parseTable(org.w3c.dom.Node) -> parseTable
    void parseBeanSet(org.w3c.dom.Node,com.l2jfrozen.gameserver.templates.StatsSet,java.lang.Integer) -> parseBeanSet
    com.l2jfrozen.gameserver.skills.funcs.Lambda getLambda(org.w3c.dom.Node,java.lang.Object) -> getLambda
    java.lang.String getValue(java.lang.String,java.lang.Object) -> getValue
    com.l2jfrozen.gameserver.skills.conditions.Condition joinAnd(com.l2jfrozen.gameserver.skills.conditions.Condition,com.l2jfrozen.gameserver.skills.conditions.Condition) -> joinAnd
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.DocumentItem -> com.l2jfrozen.gameserver.skills.DocumentItem:
    com.l2jfrozen.gameserver.model.Item _currentItem -> _currentItem
    java.util.List _itemsInFile -> _itemsInFile
    java.util.Map _itemData -> _itemData
    void <init>(java.util.Map,java.io.File) -> <init>
    void setCurrentItem(com.l2jfrozen.gameserver.model.Item) -> setCurrentItem
    com.l2jfrozen.gameserver.templates.StatsSet getStatsSet() -> getStatsSet
    java.lang.String getTableValue(java.lang.String) -> getTableValue
    java.lang.String getTableValue(java.lang.String,int) -> getTableValue
    void parseDocument(org.w3c.dom.Document) -> parseDocument
    void parseItem(org.w3c.dom.Node) -> parseItem
    void makeItem() -> makeItem
    java.util.List getItemList() -> getItemList
com.l2jfrozen.gameserver.skills.DocumentSkill -> com.l2jfrozen.gameserver.skills.DocumentSkill:
    com.l2jfrozen.gameserver.skills.DocumentSkill$Skill _currentSkill -> _currentSkill
    java.util.List _skillsInFile -> _skillsInFile
    void <init>(java.io.File) -> <init>
    void setCurrentSkill(com.l2jfrozen.gameserver.skills.DocumentSkill$Skill) -> setCurrentSkill
    com.l2jfrozen.gameserver.templates.StatsSet getStatsSet() -> getStatsSet
    java.util.List getSkills() -> getSkills
    java.lang.String getTableValue(java.lang.String) -> getTableValue
    java.lang.String getTableValue(java.lang.String,int) -> getTableValue
    void parseDocument(org.w3c.dom.Document) -> parseDocument
    void parseSkill(org.w3c.dom.Node) -> parseSkill
    void makeSkills() -> makeSkills
com.l2jfrozen.gameserver.skills.DocumentSkill$Skill -> com.l2jfrozen.gameserver.skills.DocumentSkill$Skill:
    int id -> id
    java.lang.String name -> name
    com.l2jfrozen.gameserver.templates.StatsSet[] sets -> sets
    com.l2jfrozen.gameserver.templates.StatsSet[] enchsets1 -> enchsets1
    com.l2jfrozen.gameserver.templates.StatsSet[] enchsets2 -> enchsets2
    int currentLevel -> currentLevel
    java.util.List skills -> skills
    java.util.List currentSkills -> currentSkills
    com.l2jfrozen.gameserver.skills.DocumentSkill this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.skills.DocumentSkill) -> <init>
com.l2jfrozen.gameserver.skills.Env -> com.l2jfrozen.gameserver.skills.Env:
    com.l2jfrozen.gameserver.model.L2Character player -> player
    com.l2jfrozen.gameserver.model.L2Character target -> target
    com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance item -> item
    com.l2jfrozen.gameserver.model.L2Skill skill -> skill
    double value -> value
    double baseValue -> baseValue
    boolean skillMastery -> skillMastery
    com.l2jfrozen.gameserver.model.L2Character character -> character
    com.l2jfrozen.gameserver.model.L2Character _target -> _target
    void <init>() -> <init>
    com.l2jfrozen.gameserver.model.L2Character getCharacter() -> getCharacter
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance getPlayer() -> getPlayer
    com.l2jfrozen.gameserver.model.L2Character getTarget() -> getTarget
com.l2jfrozen.gameserver.skills.Formulas -> com.l2jfrozen.gameserver.skills.Formulas:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int HP_REGENERATE_PERIOD -> HP_REGENERATE_PERIOD
    com.l2jfrozen.gameserver.skills.Formulas _instance -> _instance
    com.l2jfrozen.gameserver.skills.Formulas getInstance() -> getInstance
    void <init>() -> <init>
    int getRegeneratePeriod(com.l2jfrozen.gameserver.model.L2Character) -> getRegeneratePeriod
    com.l2jfrozen.gameserver.skills.Calculator[] getStdNPCCalculators() -> getStdNPCCalculators
    void addFuncsToNewCharacter(com.l2jfrozen.gameserver.model.L2Character) -> addFuncsToNewCharacter
    double calcHpRegen(com.l2jfrozen.gameserver.model.L2Character) -> calcHpRegen
    double calcMpRegen(com.l2jfrozen.gameserver.model.L2Character) -> calcMpRegen
    double calcCpRegen(com.l2jfrozen.gameserver.model.L2Character) -> calcCpRegen
    double calcFestivalRegenModifier(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> calcFestivalRegenModifier
    double calcSiegeRegenModifer(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance) -> calcSiegeRegenModifer
    double calcBlowDamage(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean,boolean) -> calcBlowDamage
    double calcPhysDam(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean,boolean,boolean) -> calcPhysDam
    double calcMagicDam(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean,boolean) -> calcMagicDam
    double calcMagicDam(com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,boolean) -> calcMagicDam
    boolean calcCrit(double) -> calcCrit
    boolean calcBlow(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,int) -> calcBlow
    double calcLethal(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,int) -> calcLethal
    boolean calcLethalHit(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> calcLethalHit
    boolean calcMCrit(double) -> calcMCrit
    boolean calcAtkBreak(com.l2jfrozen.gameserver.model.L2Character,double) -> calcAtkBreak
    int calcPAtkSpd(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,double) -> calcPAtkSpd
    int calcMAtkSpd(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,double) -> calcMAtkSpd
    int calcMAtkSpd(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,double) -> calcMAtkSpd
    boolean calcHitMiss(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character) -> calcHitMiss
    boolean calcShldUse(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character) -> calcShldUse
    boolean calcMagicAffected(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> calcMagicAffected
    double calcSkillVulnerability(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> calcSkillVulnerability
    double calcSkillStatModifier(com.l2jfrozen.gameserver.model.L2Skill,com.l2jfrozen.gameserver.model.L2Character) -> calcSkillStatModifier
    boolean calcCubicSkillSuccess(com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> calcCubicSkillSuccess
    boolean calcSkillSuccess(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean,boolean) -> calcSkillSuccess
    boolean calcEffectSuccess(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.skills.effects.EffectTemplate,com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean,boolean) -> calcEffectSuccess
    double calcSkillTypeVulnerability(double,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.SkillType) -> calcSkillTypeVulnerability
    int calcLvlDependModifier(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> calcLvlDependModifier
    float getChanceMultiplier(com.l2jfrozen.gameserver.model.L2Skill) -> getChanceMultiplier
    boolean calcBuffSuccess(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> calcBuffSuccess
    boolean calcMagicSuccess(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> calcMagicSuccess
    boolean calculateUnlockChance(com.l2jfrozen.gameserver.model.L2Skill) -> calculateUnlockChance
    double calcManaDam(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean) -> calcManaDam
    double calculateSkillResurrectRestorePercent(double,com.l2jfrozen.gameserver.model.L2Character) -> calculateSkillResurrectRestorePercent
    boolean calcPhysicalSkillEvasion(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> calcPhysicalSkillEvasion
    boolean calcSkillMastery(com.l2jfrozen.gameserver.model.L2Character) -> calcSkillMastery
    double calcFallDam(com.l2jfrozen.gameserver.model.L2Character,int) -> calcFallDam
    double calcChargeSkillsDam(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill,boolean,boolean,boolean,int) -> calcChargeSkillsDam
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$1 -> com.l2jfrozen.gameserver.skills.Formulas$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$templates$L2WeaponType -> $SwitchMap$com$l2jfrozen$gameserver$templates$L2WeaponType
    int[] $SwitchMap$com$l2jfrozen$gameserver$templates$Race -> $SwitchMap$com$l2jfrozen$gameserver$templates$Race
    int[] $SwitchMap$com$l2jfrozen$gameserver$skills$Stats -> $SwitchMap$com$l2jfrozen$gameserver$skills$Stats
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$SkillType -> $SwitchMap$com$l2jfrozen$gameserver$model$SkillType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncAddLevel3 -> com.l2jfrozen.gameserver.skills.Formulas$FuncAddLevel3:
    com.l2jfrozen.gameserver.skills.Formulas$FuncAddLevel3[] _instancies -> _instancies
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance(com.l2jfrozen.gameserver.skills.Stats) -> getInstance
    void <init>(com.l2jfrozen.gameserver.skills.Stats) -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncAtkAccuracy -> com.l2jfrozen.gameserver.skills.Formulas$FuncAtkAccuracy:
    com.l2jfrozen.gameserver.skills.Formulas$FuncAtkAccuracy _faa_instance -> _faa_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncAtkCritical -> com.l2jfrozen.gameserver.skills.Formulas$FuncAtkCritical:
    com.l2jfrozen.gameserver.skills.Formulas$FuncAtkCritical _fac_instance -> _fac_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncAtkEvasion -> com.l2jfrozen.gameserver.skills.Formulas$FuncAtkEvasion:
    com.l2jfrozen.gameserver.skills.Formulas$FuncAtkEvasion _fae_instance -> _fae_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncBowAtkRange -> com.l2jfrozen.gameserver.skills.Formulas$FuncBowAtkRange:
    com.l2jfrozen.gameserver.skills.Formulas$FuncBowAtkRange _fbar_instance -> _fbar_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncHennaCON -> com.l2jfrozen.gameserver.skills.Formulas$FuncHennaCON:
    com.l2jfrozen.gameserver.skills.Formulas$FuncHennaCON _fh_instance -> _fh_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncHennaDEX -> com.l2jfrozen.gameserver.skills.Formulas$FuncHennaDEX:
    com.l2jfrozen.gameserver.skills.Formulas$FuncHennaDEX _fh_instance -> _fh_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncHennaINT -> com.l2jfrozen.gameserver.skills.Formulas$FuncHennaINT:
    com.l2jfrozen.gameserver.skills.Formulas$FuncHennaINT _fh_instance -> _fh_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncHennaMEN -> com.l2jfrozen.gameserver.skills.Formulas$FuncHennaMEN:
    com.l2jfrozen.gameserver.skills.Formulas$FuncHennaMEN _fh_instance -> _fh_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncHennaSTR -> com.l2jfrozen.gameserver.skills.Formulas$FuncHennaSTR:
    com.l2jfrozen.gameserver.skills.Formulas$FuncHennaSTR _fh_instance -> _fh_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncHennaWIT -> com.l2jfrozen.gameserver.skills.Formulas$FuncHennaWIT:
    com.l2jfrozen.gameserver.skills.Formulas$FuncHennaWIT _fh_instance -> _fh_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMAtkCritical -> com.l2jfrozen.gameserver.skills.Formulas$FuncMAtkCritical:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMAtkCritical _fac_instance -> _fac_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMAtkMod -> com.l2jfrozen.gameserver.skills.Formulas$FuncMAtkMod:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMAtkMod _fma_instance -> _fma_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMAtkSpeed -> com.l2jfrozen.gameserver.skills.Formulas$FuncMAtkSpeed:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMAtkSpeed _fas_instance -> _fas_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMDefMod -> com.l2jfrozen.gameserver.skills.Formulas$FuncMDefMod:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMDefMod _fmm_instance -> _fmm_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMaxCpAdd -> com.l2jfrozen.gameserver.skills.Formulas$FuncMaxCpAdd:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMaxCpAdd _fmca_instance -> _fmca_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMaxCpMul -> com.l2jfrozen.gameserver.skills.Formulas$FuncMaxCpMul:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMaxCpMul _fmcm_instance -> _fmcm_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMaxHpAdd -> com.l2jfrozen.gameserver.skills.Formulas$FuncMaxHpAdd:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMaxHpAdd _fmha_instance -> _fmha_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMaxHpMul -> com.l2jfrozen.gameserver.skills.Formulas$FuncMaxHpMul:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMaxHpMul _fmhm_instance -> _fmhm_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMaxMpAdd -> com.l2jfrozen.gameserver.skills.Formulas$FuncMaxMpAdd:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMaxMpAdd _fmma_instance -> _fmma_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMaxMpMul -> com.l2jfrozen.gameserver.skills.Formulas$FuncMaxMpMul:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMaxMpMul _fmmm_instance -> _fmmm_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMoveSpeed -> com.l2jfrozen.gameserver.skills.Formulas$FuncMoveSpeed:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMoveSpeed _fms_instance -> _fms_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMultLevelMod -> com.l2jfrozen.gameserver.skills.Formulas$FuncMultLevelMod:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMultLevelMod[] _instancies -> _instancies
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance(com.l2jfrozen.gameserver.skills.Stats) -> getInstance
    void <init>(com.l2jfrozen.gameserver.skills.Stats) -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncMultRegenResting -> com.l2jfrozen.gameserver.skills.Formulas$FuncMultRegenResting:
    com.l2jfrozen.gameserver.skills.Formulas$FuncMultRegenResting[] _instancies -> _instancies
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance(com.l2jfrozen.gameserver.skills.Stats) -> getInstance
    void <init>(com.l2jfrozen.gameserver.skills.Stats) -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncPAtkMod -> com.l2jfrozen.gameserver.skills.Formulas$FuncPAtkMod:
    com.l2jfrozen.gameserver.skills.Formulas$FuncPAtkMod _fpa_instance -> _fpa_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncPAtkSpeed -> com.l2jfrozen.gameserver.skills.Formulas$FuncPAtkSpeed:
    com.l2jfrozen.gameserver.skills.Formulas$FuncPAtkSpeed _fas_instance -> _fas_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Formulas$FuncPDefMod -> com.l2jfrozen.gameserver.skills.Formulas$FuncPDefMod:
    com.l2jfrozen.gameserver.skills.Formulas$FuncPDefMod _fmm_instance -> _fmm_instance
    com.l2jfrozen.gameserver.skills.funcs.Func getInstance() -> getInstance
    void <init>() -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.SkillHolder -> com.l2jfrozen.gameserver.skills.SkillHolder:
    int _skillId -> _skillId
    int _skillLvl -> _skillLvl
    void <init>(int,int) -> <init>
    void <init>(com.l2jfrozen.gameserver.model.L2Skill) -> <init>
    int getSkillId() -> getSkillId
    int getSkillLvl() -> getSkillLvl
    com.l2jfrozen.gameserver.model.L2Skill getSkill() -> getSkill
com.l2jfrozen.gameserver.skills.SkillsEngine -> com.l2jfrozen.gameserver.skills.SkillsEngine:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.skills.SkillsEngine _instance -> _instance
    java.util.List _armorFiles -> _armorFiles
    java.util.List _weaponFiles -> _weaponFiles
    java.util.List _etcitemFiles -> _etcitemFiles
    java.util.List _skillFiles -> _skillFiles
    com.l2jfrozen.gameserver.skills.SkillsEngine getInstance() -> getInstance
    void <init>() -> <init>
    void hashFiles(java.lang.String,java.util.List) -> hashFiles
    java.util.List loadSkills(java.io.File) -> loadSkills
    void loadAllSkills(java.util.HashMap) -> loadAllSkills
    java.util.List loadArmors(java.util.Map) -> loadArmors
    java.util.List loadWeapons(java.util.Map) -> loadWeapons
    java.util.List loadItems(java.util.Map) -> loadItems
    java.util.List loadData(java.util.Map,java.util.List) -> loadData
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.Stats -> com.l2jfrozen.gameserver.skills.Stats:
    com.l2jfrozen.gameserver.skills.Stats MAX_HP -> MAX_HP
    com.l2jfrozen.gameserver.skills.Stats MAX_MP -> MAX_MP
    com.l2jfrozen.gameserver.skills.Stats MAX_CP -> MAX_CP
    com.l2jfrozen.gameserver.skills.Stats REGENERATE_HP_RATE -> REGENERATE_HP_RATE
    com.l2jfrozen.gameserver.skills.Stats REGENERATE_CP_RATE -> REGENERATE_CP_RATE
    com.l2jfrozen.gameserver.skills.Stats REGENERATE_MP_RATE -> REGENERATE_MP_RATE
    com.l2jfrozen.gameserver.skills.Stats RECHARGE_MP_RATE -> RECHARGE_MP_RATE
    com.l2jfrozen.gameserver.skills.Stats HEAL_EFFECTIVNESS -> HEAL_EFFECTIVNESS
    com.l2jfrozen.gameserver.skills.Stats POWER_DEFENCE -> POWER_DEFENCE
    com.l2jfrozen.gameserver.skills.Stats MAGIC_DEFENCE -> MAGIC_DEFENCE
    com.l2jfrozen.gameserver.skills.Stats POWER_ATTACK -> POWER_ATTACK
    com.l2jfrozen.gameserver.skills.Stats MAGIC_ATTACK -> MAGIC_ATTACK
    com.l2jfrozen.gameserver.skills.Stats POWER_ATTACK_SPEED -> POWER_ATTACK_SPEED
    com.l2jfrozen.gameserver.skills.Stats MAGIC_ATTACK_SPEED -> MAGIC_ATTACK_SPEED
    com.l2jfrozen.gameserver.skills.Stats MAGIC_REUSE_RATE -> MAGIC_REUSE_RATE
    com.l2jfrozen.gameserver.skills.Stats SHIELD_DEFENCE -> SHIELD_DEFENCE
    com.l2jfrozen.gameserver.skills.Stats CRITICAL_DAMAGE -> CRITICAL_DAMAGE
    com.l2jfrozen.gameserver.skills.Stats CRITICAL_DAMAGE_ADD -> CRITICAL_DAMAGE_ADD
    com.l2jfrozen.gameserver.skills.Stats PVP_PHYSICAL_DMG -> PVP_PHYSICAL_DMG
    com.l2jfrozen.gameserver.skills.Stats PVP_MAGICAL_DMG -> PVP_MAGICAL_DMG
    com.l2jfrozen.gameserver.skills.Stats PVP_PHYS_SKILL_DMG -> PVP_PHYS_SKILL_DMG
    com.l2jfrozen.gameserver.skills.Stats EVASION_RATE -> EVASION_RATE
    com.l2jfrozen.gameserver.skills.Stats P_SKILL_EVASION -> P_SKILL_EVASION
    com.l2jfrozen.gameserver.skills.Stats SHIELD_RATE -> SHIELD_RATE
    com.l2jfrozen.gameserver.skills.Stats SHIELD_ANGLE -> SHIELD_ANGLE
    com.l2jfrozen.gameserver.skills.Stats CRITICAL_RATE -> CRITICAL_RATE
    com.l2jfrozen.gameserver.skills.Stats BLOW_RATE -> BLOW_RATE
    com.l2jfrozen.gameserver.skills.Stats LETHAL_RATE -> LETHAL_RATE
    com.l2jfrozen.gameserver.skills.Stats MCRITICAL_RATE -> MCRITICAL_RATE
    com.l2jfrozen.gameserver.skills.Stats EXPSP_RATE -> EXPSP_RATE
    com.l2jfrozen.gameserver.skills.Stats ATTACK_CANCEL -> ATTACK_CANCEL
    com.l2jfrozen.gameserver.skills.Stats ACCURACY_COMBAT -> ACCURACY_COMBAT
    com.l2jfrozen.gameserver.skills.Stats POWER_ATTACK_RANGE -> POWER_ATTACK_RANGE
    com.l2jfrozen.gameserver.skills.Stats MAGIC_ATTACK_RANGE -> MAGIC_ATTACK_RANGE
    com.l2jfrozen.gameserver.skills.Stats POWER_ATTACK_ANGLE -> POWER_ATTACK_ANGLE
    com.l2jfrozen.gameserver.skills.Stats ATTACK_COUNT_MAX -> ATTACK_COUNT_MAX
    com.l2jfrozen.gameserver.skills.Stats RUN_SPEED -> RUN_SPEED
    com.l2jfrozen.gameserver.skills.Stats WALK_SPEED -> WALK_SPEED
    com.l2jfrozen.gameserver.skills.Stats STAT_STR -> STAT_STR
    com.l2jfrozen.gameserver.skills.Stats STAT_CON -> STAT_CON
    com.l2jfrozen.gameserver.skills.Stats STAT_DEX -> STAT_DEX
    com.l2jfrozen.gameserver.skills.Stats STAT_INT -> STAT_INT
    com.l2jfrozen.gameserver.skills.Stats STAT_WIT -> STAT_WIT
    com.l2jfrozen.gameserver.skills.Stats STAT_MEN -> STAT_MEN
    com.l2jfrozen.gameserver.skills.Stats BREATH -> BREATH
    com.l2jfrozen.gameserver.skills.Stats FALL -> FALL
    com.l2jfrozen.gameserver.skills.Stats AGGRESSION -> AGGRESSION
    com.l2jfrozen.gameserver.skills.Stats BLEED -> BLEED
    com.l2jfrozen.gameserver.skills.Stats POISON -> POISON
    com.l2jfrozen.gameserver.skills.Stats STUN -> STUN
    com.l2jfrozen.gameserver.skills.Stats ROOT -> ROOT
    com.l2jfrozen.gameserver.skills.Stats MOVEMENT -> MOVEMENT
    com.l2jfrozen.gameserver.skills.Stats CONFUSION -> CONFUSION
    com.l2jfrozen.gameserver.skills.Stats SLEEP -> SLEEP
    com.l2jfrozen.gameserver.skills.Stats FIRE -> FIRE
    com.l2jfrozen.gameserver.skills.Stats WIND -> WIND
    com.l2jfrozen.gameserver.skills.Stats WATER -> WATER
    com.l2jfrozen.gameserver.skills.Stats EARTH -> EARTH
    com.l2jfrozen.gameserver.skills.Stats HOLY -> HOLY
    com.l2jfrozen.gameserver.skills.Stats DARK -> DARK
    com.l2jfrozen.gameserver.skills.Stats AGGRESSION_VULN -> AGGRESSION_VULN
    com.l2jfrozen.gameserver.skills.Stats BLEED_VULN -> BLEED_VULN
    com.l2jfrozen.gameserver.skills.Stats POISON_VULN -> POISON_VULN
    com.l2jfrozen.gameserver.skills.Stats STUN_VULN -> STUN_VULN
    com.l2jfrozen.gameserver.skills.Stats PARALYZE_VULN -> PARALYZE_VULN
    com.l2jfrozen.gameserver.skills.Stats ROOT_VULN -> ROOT_VULN
    com.l2jfrozen.gameserver.skills.Stats SLEEP_VULN -> SLEEP_VULN
    com.l2jfrozen.gameserver.skills.Stats CONFUSION_VULN -> CONFUSION_VULN
    com.l2jfrozen.gameserver.skills.Stats MOVEMENT_VULN -> MOVEMENT_VULN
    com.l2jfrozen.gameserver.skills.Stats FIRE_VULN -> FIRE_VULN
    com.l2jfrozen.gameserver.skills.Stats WIND_VULN -> WIND_VULN
    com.l2jfrozen.gameserver.skills.Stats WATER_VULN -> WATER_VULN
    com.l2jfrozen.gameserver.skills.Stats EARTH_VULN -> EARTH_VULN
    com.l2jfrozen.gameserver.skills.Stats HOLY_VULN -> HOLY_VULN
    com.l2jfrozen.gameserver.skills.Stats DARK_VULN -> DARK_VULN
    com.l2jfrozen.gameserver.skills.Stats CANCEL_VULN -> CANCEL_VULN
    com.l2jfrozen.gameserver.skills.Stats DERANGEMENT_VULN -> DERANGEMENT_VULN
    com.l2jfrozen.gameserver.skills.Stats DEBUFF_VULN -> DEBUFF_VULN
    com.l2jfrozen.gameserver.skills.Stats BUFF_VULN -> BUFF_VULN
    com.l2jfrozen.gameserver.skills.Stats FALL_VULN -> FALL_VULN
    com.l2jfrozen.gameserver.skills.Stats CAST_INTERRUPT -> CAST_INTERRUPT
    com.l2jfrozen.gameserver.skills.Stats CRIT_VULN -> CRIT_VULN
    com.l2jfrozen.gameserver.skills.Stats DEBUFF_IMMUNITY -> DEBUFF_IMMUNITY
    com.l2jfrozen.gameserver.skills.Stats NONE_WPN_VULN -> NONE_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats SWORD_WPN_VULN -> SWORD_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats BLUNT_WPN_VULN -> BLUNT_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats DAGGER_WPN_VULN -> DAGGER_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats BOW_WPN_VULN -> BOW_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats POLE_WPN_VULN -> POLE_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats ETC_WPN_VULN -> ETC_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats FIST_WPN_VULN -> FIST_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats DUAL_WPN_VULN -> DUAL_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats DUALFIST_WPN_VULN -> DUALFIST_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats POLE_TARGERT_COUNT -> POLE_TARGERT_COUNT
    com.l2jfrozen.gameserver.skills.Stats BIGSWORD_WPN_VULN -> BIGSWORD_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats BIGBLUNT_WPN_VULN -> BIGBLUNT_WPN_VULN
    com.l2jfrozen.gameserver.skills.Stats REFLECT_DAMAGE_PERCENT -> REFLECT_DAMAGE_PERCENT
    com.l2jfrozen.gameserver.skills.Stats REFLECT_SKILL_MAGIC -> REFLECT_SKILL_MAGIC
    com.l2jfrozen.gameserver.skills.Stats REFLECT_SKILL_PHYSIC -> REFLECT_SKILL_PHYSIC
    com.l2jfrozen.gameserver.skills.Stats VENGEANCE_SKILL_PHYSICAL_DAMAGE -> VENGEANCE_SKILL_PHYSICAL_DAMAGE
    com.l2jfrozen.gameserver.skills.Stats ABSORB_DAMAGE_PERCENT -> ABSORB_DAMAGE_PERCENT
    com.l2jfrozen.gameserver.skills.Stats TRANSFER_DAMAGE_PERCENT -> TRANSFER_DAMAGE_PERCENT
    com.l2jfrozen.gameserver.skills.Stats MAX_LOAD -> MAX_LOAD
    com.l2jfrozen.gameserver.skills.Stats WEIGHT_PENALTY -> WEIGHT_PENALTY
    com.l2jfrozen.gameserver.skills.Stats PATK_PLANTS -> PATK_PLANTS
    com.l2jfrozen.gameserver.skills.Stats PATK_INSECTS -> PATK_INSECTS
    com.l2jfrozen.gameserver.skills.Stats PATK_ANIMALS -> PATK_ANIMALS
    com.l2jfrozen.gameserver.skills.Stats PATK_MONSTERS -> PATK_MONSTERS
    com.l2jfrozen.gameserver.skills.Stats PATK_DRAGONS -> PATK_DRAGONS
    com.l2jfrozen.gameserver.skills.Stats PATK_UNDEAD -> PATK_UNDEAD
    com.l2jfrozen.gameserver.skills.Stats PATK_ANGELS -> PATK_ANGELS
    com.l2jfrozen.gameserver.skills.Stats PATK_GIANTS -> PATK_GIANTS
    com.l2jfrozen.gameserver.skills.Stats PATK_MCREATURES -> PATK_MCREATURES
    com.l2jfrozen.gameserver.skills.Stats PDEF_GIANTS -> PDEF_GIANTS
    com.l2jfrozen.gameserver.skills.Stats PDEF_MCREATURES -> PDEF_MCREATURES
    com.l2jfrozen.gameserver.skills.Stats PDEF_UNDEAD -> PDEF_UNDEAD
    com.l2jfrozen.gameserver.skills.Stats PDEF_PLANTS -> PDEF_PLANTS
    com.l2jfrozen.gameserver.skills.Stats PDEF_INSECTS -> PDEF_INSECTS
    com.l2jfrozen.gameserver.skills.Stats PDEF_ANIMALS -> PDEF_ANIMALS
    com.l2jfrozen.gameserver.skills.Stats PDEF_MONSTERS -> PDEF_MONSTERS
    com.l2jfrozen.gameserver.skills.Stats PDEF_DRAGONS -> PDEF_DRAGONS
    com.l2jfrozen.gameserver.skills.Stats PDEF_ANGELS -> PDEF_ANGELS
    com.l2jfrozen.gameserver.skills.Stats ATK_REUSE -> ATK_REUSE
    com.l2jfrozen.gameserver.skills.Stats P_REUSE -> P_REUSE
    com.l2jfrozen.gameserver.skills.Stats INV_LIM -> INV_LIM
    com.l2jfrozen.gameserver.skills.Stats WH_LIM -> WH_LIM
    com.l2jfrozen.gameserver.skills.Stats FREIGHT_LIM -> FREIGHT_LIM
    com.l2jfrozen.gameserver.skills.Stats P_SELL_LIM -> P_SELL_LIM
    com.l2jfrozen.gameserver.skills.Stats P_BUY_LIM -> P_BUY_LIM
    com.l2jfrozen.gameserver.skills.Stats REC_D_LIM -> REC_D_LIM
    com.l2jfrozen.gameserver.skills.Stats REC_C_LIM -> REC_C_LIM
    com.l2jfrozen.gameserver.skills.Stats PHYSICAL_MP_CONSUME_RATE -> PHYSICAL_MP_CONSUME_RATE
    com.l2jfrozen.gameserver.skills.Stats MAGICAL_MP_CONSUME_RATE -> MAGICAL_MP_CONSUME_RATE
    com.l2jfrozen.gameserver.skills.Stats DANCE_MP_CONSUME_RATE -> DANCE_MP_CONSUME_RATE
    com.l2jfrozen.gameserver.skills.Stats HP_CONSUME_RATE -> HP_CONSUME_RATE
    com.l2jfrozen.gameserver.skills.Stats MP_CONSUME -> MP_CONSUME
    com.l2jfrozen.gameserver.skills.Stats SOULSHOT_COUNT -> SOULSHOT_COUNT
    com.l2jfrozen.gameserver.skills.Stats SKILL_MASTERY -> SKILL_MASTERY
    int NUM_STATS -> NUM_STATS
    java.lang.String _value -> _value
    com.l2jfrozen.gameserver.skills.Stats[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.skills.Stats[] values() -> values
    com.l2jfrozen.gameserver.skills.Stats valueOf(java.lang.String) -> valueOf
    java.lang.String getValue() -> getValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    com.l2jfrozen.gameserver.skills.Stats valueOfXml(java.lang.String) -> valueOfXml
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.BaseStat -> com.l2jfrozen.gameserver.skills.conditions.BaseStat:
    com.l2jfrozen.gameserver.skills.conditions.BaseStat Int -> Int
    com.l2jfrozen.gameserver.skills.conditions.BaseStat Str -> Str
    com.l2jfrozen.gameserver.skills.conditions.BaseStat Con -> Con
    com.l2jfrozen.gameserver.skills.conditions.BaseStat Dex -> Dex
    com.l2jfrozen.gameserver.skills.conditions.BaseStat Men -> Men
    com.l2jfrozen.gameserver.skills.conditions.BaseStat Wit -> Wit
    com.l2jfrozen.gameserver.skills.conditions.BaseStat[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.skills.conditions.BaseStat[] values() -> values
    com.l2jfrozen.gameserver.skills.conditions.BaseStat valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.CheckGameTime -> com.l2jfrozen.gameserver.skills.conditions.CheckGameTime:
    com.l2jfrozen.gameserver.skills.conditions.CheckGameTime NIGHT -> NIGHT
    com.l2jfrozen.gameserver.skills.conditions.CheckGameTime[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.skills.conditions.CheckGameTime[] values() -> values
    com.l2jfrozen.gameserver.skills.conditions.CheckGameTime valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState -> com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState:
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState RESTING -> RESTING
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState MOVING -> MOVING
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState RUNNING -> RUNNING
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState FLYING -> FLYING
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState BEHIND -> BEHIND
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState FRONT -> FRONT
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState SIDE -> SIDE
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState[] values() -> values
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.Condition -> com.l2jfrozen.gameserver.skills.conditions.Condition:
    com.l2jfrozen.gameserver.skills.conditions.ConditionListener _listener -> _listener
    java.lang.String _msg -> _msg
    boolean _result -> _result
    void <init>() -> <init>
    void setMessage(java.lang.String) -> setMessage
    java.lang.String getMessage() -> getMessage
    void setListener(com.l2jfrozen.gameserver.skills.conditions.ConditionListener) -> setListener
    com.l2jfrozen.gameserver.skills.conditions.ConditionListener getListener() -> getListener
    boolean test(com.l2jfrozen.gameserver.skills.Env) -> test
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
    void notifyChanged() -> notifyChanged
com.l2jfrozen.gameserver.skills.conditions.ConditionElementSeed -> com.l2jfrozen.gameserver.skills.conditions.ConditionElementSeed:
    int[] seedSkills -> seedSkills
    int[] _requiredSeeds -> _requiredSeeds
    void <init>(int[]) -> <init>
    void <init>(int,int,int,int,int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.ConditionForceBuff -> com.l2jfrozen.gameserver.skills.conditions.ConditionForceBuff:
    int BATTLE_FORCE -> BATTLE_FORCE
    int SPELL_FORCE -> SPELL_FORCE
    int _battleForces -> _battleForces
    int _spellForces -> _spellForces
    void <init>(int[]) -> <init>
    void <init>(int,int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.ConditionGameChance -> com.l2jfrozen.gameserver.skills.conditions.ConditionGameChance:
    int _chance -> _chance
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionGameTime -> com.l2jfrozen.gameserver.skills.conditions.ConditionGameTime:
    com.l2jfrozen.gameserver.skills.conditions.CheckGameTime _check -> _check
    boolean _required -> _required
    void <init>(com.l2jfrozen.gameserver.skills.conditions.CheckGameTime,boolean) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionGameTime$1 -> com.l2jfrozen.gameserver.skills.conditions.ConditionGameTime$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$skills$conditions$CheckGameTime -> $SwitchMap$com$l2jfrozen$gameserver$skills$conditions$CheckGameTime
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.ConditionInventory -> com.l2jfrozen.gameserver.skills.conditions.ConditionInventory:
    int _slot -> _slot
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionItemId -> com.l2jfrozen.gameserver.skills.conditions.ConditionItemId:
    int _itemId -> _itemId
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionListener -> com.l2jfrozen.gameserver.skills.conditions.ConditionListener:
    void notifyChanged() -> notifyChanged
com.l2jfrozen.gameserver.skills.conditions.ConditionLogicAnd -> com.l2jfrozen.gameserver.skills.conditions.ConditionLogicAnd:
    com.l2jfrozen.gameserver.skills.conditions.Condition[] _emptyConditions -> _emptyConditions
    com.l2jfrozen.gameserver.skills.conditions.Condition[] conditions -> conditions
    void <init>() -> <init>
    void add(com.l2jfrozen.gameserver.skills.conditions.Condition) -> add
    void setListener(com.l2jfrozen.gameserver.skills.conditions.ConditionListener) -> setListener
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.ConditionLogicNot -> com.l2jfrozen.gameserver.skills.conditions.ConditionLogicNot:
    com.l2jfrozen.gameserver.skills.conditions.Condition _condition -> _condition
    void <init>(com.l2jfrozen.gameserver.skills.conditions.Condition) -> <init>
    void setListener(com.l2jfrozen.gameserver.skills.conditions.ConditionListener) -> setListener
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionLogicOr -> com.l2jfrozen.gameserver.skills.conditions.ConditionLogicOr:
    com.l2jfrozen.gameserver.skills.conditions.Condition[] _emptyConditions -> _emptyConditions
    com.l2jfrozen.gameserver.skills.conditions.Condition[] conditions -> conditions
    void <init>() -> <init>
    void add(com.l2jfrozen.gameserver.skills.conditions.Condition) -> add
    void setListener(com.l2jfrozen.gameserver.skills.conditions.ConditionListener) -> setListener
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerBaseStats -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerBaseStats:
    com.l2jfrozen.gameserver.skills.conditions.BaseStat _stat -> _stat
    int _value -> _value
    void <init>(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.skills.conditions.BaseStat,int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerBaseStats$1 -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerBaseStats$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$skills$conditions$BaseStat -> $SwitchMap$com$l2jfrozen$gameserver$skills$conditions$BaseStat
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerClassIdRestriction -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerClassIdRestriction:
    java.util.ArrayList _classIds -> _classIds
    void <init>(java.util.ArrayList) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerHp -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerHp:
    int _hp -> _hp
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerHpPercentage -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerHpPercentage:
    double _p -> _p
    void <init>(double) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerLevel -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerLevel:
    int _level -> _level
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerMp -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerMp:
    int _mp -> _mp
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerRace -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerRace:
    com.l2jfrozen.gameserver.model.base.Race _race -> _race
    void <init>(com.l2jfrozen.gameserver.model.base.Race) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerState -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerState:
    com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState _check -> _check
    boolean _required -> _required
    void <init>(com.l2jfrozen.gameserver.skills.conditions.CheckPlayerState,boolean) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerState$1 -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerState$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$skills$conditions$CheckPlayerState -> $SwitchMap$com$l2jfrozen$gameserver$skills$conditions$CheckPlayerState
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerWeight -> com.l2jfrozen.gameserver.skills.conditions.ConditionPlayerWeight:
    int _weight -> _weight
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionSkillStats -> com.l2jfrozen.gameserver.skills.conditions.ConditionSkillStats:
    com.l2jfrozen.gameserver.skills.Stats _stat -> _stat
    void <init>(com.l2jfrozen.gameserver.skills.Stats) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionSlotItemId -> com.l2jfrozen.gameserver.skills.conditions.ConditionSlotItemId:
    int _itemId -> _itemId
    int _enchantLevel -> _enchantLevel
    void <init>(int,int,int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionSlotItemType -> com.l2jfrozen.gameserver.skills.conditions.ConditionSlotItemType:
    int _mask -> _mask
    void <init>(int,int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionTargetAggro -> com.l2jfrozen.gameserver.skills.conditions.ConditionTargetAggro:
    boolean _isAggro -> _isAggro
    void <init>(boolean) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionTargetBodyPart -> com.l2jfrozen.gameserver.skills.conditions.ConditionTargetBodyPart:
    com.l2jfrozen.gameserver.templates.L2Armor _armor -> _armor
    void <init>(com.l2jfrozen.gameserver.templates.L2Armor) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionTargetClassIdRestriction -> com.l2jfrozen.gameserver.skills.conditions.ConditionTargetClassIdRestriction:
    javolution.util.FastList _classIds -> _classIds
    void <init>(javolution.util.FastList) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionTargetLevel -> com.l2jfrozen.gameserver.skills.conditions.ConditionTargetLevel:
    int _level -> _level
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionTargetNone -> com.l2jfrozen.gameserver.skills.conditions.ConditionTargetNone:
    void <init>() -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionTargetPvp -> com.l2jfrozen.gameserver.skills.conditions.ConditionTargetPvp:
    int _pvp -> _pvp
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionTargetRaceId -> com.l2jfrozen.gameserver.skills.conditions.ConditionTargetRaceId:
    javolution.util.FastList _raceIds -> _raceIds
    void <init>(javolution.util.FastList) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionTargetUsesWeaponKind -> com.l2jfrozen.gameserver.skills.conditions.ConditionTargetUsesWeaponKind:
    int _weaponMask -> _weaponMask
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionTargetWeight -> com.l2jfrozen.gameserver.skills.conditions.ConditionTargetWeight:
    int _weight -> _weight
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionUsingItemType -> com.l2jfrozen.gameserver.skills.conditions.ConditionUsingItemType:
    boolean _armor -> _armor
    int _mask -> _mask
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionUsingSkill -> com.l2jfrozen.gameserver.skills.conditions.ConditionUsingSkill:
    int _skillId -> _skillId
    void <init>(int) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.conditions.ConditionWithSkill -> com.l2jfrozen.gameserver.skills.conditions.ConditionWithSkill:
    boolean _skill -> _skill
    void <init>(boolean) -> <init>
    boolean testImpl(com.l2jfrozen.gameserver.skills.Env) -> testImpl
com.l2jfrozen.gameserver.skills.effects.EffectBattleForce -> com.l2jfrozen.gameserver.skills.effects.EffectBattleForce:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectBestowSkill -> com.l2jfrozen.gameserver.skills.effects.EffectBestowSkill:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectBetray -> com.l2jfrozen.gameserver.skills.effects.EffectBetray:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectBigHead -> com.l2jfrozen.gameserver.skills.effects.EffectBigHead:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
    void onStart() -> onStart
com.l2jfrozen.gameserver.skills.effects.EffectBlockBuff -> com.l2jfrozen.gameserver.skills.effects.EffectBlockBuff:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectBluff -> com.l2jfrozen.gameserver.skills.effects.EffectBluff:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
    void onStart() -> onStart
com.l2jfrozen.gameserver.skills.effects.EffectBuff -> com.l2jfrozen.gameserver.skills.effects.EffectBuff:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectCancel -> com.l2jfrozen.gameserver.skills.effects.EffectCancel:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectCancel$1 -> com.l2jfrozen.gameserver.skills.effects.EffectCancel$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$EffectType -> $SwitchMap$com$l2jfrozen$gameserver$model$EffectType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.effects.EffectChameleonRest -> com.l2jfrozen.gameserver.skills.effects.EffectChameleonRest:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
    void setChameleon(boolean) -> setChameleon
com.l2jfrozen.gameserver.skills.effects.EffectCharge -> com.l2jfrozen.gameserver.skills.effects.EffectCharge:
    int numCharges -> numCharges
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
    int getLevel() -> getLevel
    void addNumCharges(int) -> addNumCharges
com.l2jfrozen.gameserver.skills.effects.EffectCharmOfLuck -> com.l2jfrozen.gameserver.skills.effects.EffectCharmOfLuck:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectClanGate -> com.l2jfrozen.gameserver.skills.effects.EffectClanGate:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
com.l2jfrozen.gameserver.skills.effects.EffectCombatPointHealOverTime -> com.l2jfrozen.gameserver.skills.effects.EffectCombatPointHealOverTime:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectConfuseMob -> com.l2jfrozen.gameserver.skills.effects.EffectConfuseMob:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectConfusion -> com.l2jfrozen.gameserver.skills.effects.EffectConfusion:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectDamOverTime -> com.l2jfrozen.gameserver.skills.effects.EffectDamOverTime:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectDebuff -> com.l2jfrozen.gameserver.skills.effects.EffectDebuff:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectDeflectBuff -> com.l2jfrozen.gameserver.skills.effects.EffectDeflectBuff:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
    void onStart() -> onStart
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectFakeDeath -> com.l2jfrozen.gameserver.skills.effects.EffectFakeDeath:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectFear -> com.l2jfrozen.gameserver.skills.effects.EffectFear:
    int FEAR_RANGE -> FEAR_RANGE
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectForce -> com.l2jfrozen.gameserver.skills.effects.EffectForce:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int forces -> forces
    int _range -> _range
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    boolean onActionTime() -> onActionTime
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void increaseForce() -> increaseForce
    void decreaseForce() -> decreaseForce
    void updateBuff() -> updateBuff
    void onExit() -> onExit
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.effects.EffectFusion -> com.l2jfrozen.gameserver.skills.effects.EffectFusion:
    int _effect -> _effect
    int _maxEffect -> _maxEffect
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    boolean onActionTime() -> onActionTime
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void increaseEffect() -> increaseEffect
    void decreaseForce() -> decreaseForce
    void updateBuff() -> updateBuff
com.l2jfrozen.gameserver.skills.effects.EffectGrow -> com.l2jfrozen.gameserver.skills.effects.EffectGrow:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectHealOverTime -> com.l2jfrozen.gameserver.skills.effects.EffectHealOverTime:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectHeroCancel -> com.l2jfrozen.gameserver.skills.effects.EffectHeroCancel:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectHeroCancel$1 -> com.l2jfrozen.gameserver.skills.effects.EffectHeroCancel$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$model$EffectType -> $SwitchMap$com$l2jfrozen$gameserver$model$EffectType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.effects.EffectImmobileUntilAttacked -> com.l2jfrozen.gameserver.skills.effects.EffectImmobileUntilAttacked:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
    void onStart() -> onStart
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.effects.EffectImobileBuff -> com.l2jfrozen.gameserver.skills.effects.EffectImobileBuff:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.effects.EffectImobilePetBuff -> com.l2jfrozen.gameserver.skills.effects.EffectImobilePetBuff:
    com.l2jfrozen.gameserver.model.L2Summon _pet -> _pet
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectInterrupt -> com.l2jfrozen.gameserver.skills.effects.EffectInterrupt:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectInvincible -> com.l2jfrozen.gameserver.skills.effects.EffectInvincible:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectManaDamOverTime -> com.l2jfrozen.gameserver.skills.effects.EffectManaDamOverTime:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectManaHealOverTime -> com.l2jfrozen.gameserver.skills.effects.EffectManaHealOverTime:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectMeditation -> com.l2jfrozen.gameserver.skills.effects.EffectMeditation:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectMpConsumePerLevel -> com.l2jfrozen.gameserver.skills.effects.EffectMpConsumePerLevel:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectMute -> com.l2jfrozen.gameserver.skills.effects.EffectMute:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectNegate -> com.l2jfrozen.gameserver.skills.effects.EffectNegate:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.effects.EffectNoblesseBless -> com.l2jfrozen.gameserver.skills.effects.EffectNoblesseBless:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectParalyze -> com.l2jfrozen.gameserver.skills.effects.EffectParalyze:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectPetrification -> com.l2jfrozen.gameserver.skills.effects.EffectPetrification:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectPhoenixBless -> com.l2jfrozen.gameserver.skills.effects.EffectPhoenixBless:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectProtectionBlessing -> com.l2jfrozen.gameserver.skills.effects.EffectProtectionBlessing:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectPsychicalMute -> com.l2jfrozen.gameserver.skills.effects.EffectPsychicalMute:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectRelax -> com.l2jfrozen.gameserver.skills.effects.EffectRelax:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
    void setRelax(boolean) -> setRelax
com.l2jfrozen.gameserver.skills.effects.EffectRemoveTarget -> com.l2jfrozen.gameserver.skills.effects.EffectRemoveTarget:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
    void onStart() -> onStart
com.l2jfrozen.gameserver.skills.effects.EffectRoot -> com.l2jfrozen.gameserver.skills.effects.EffectRoot:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectSeed -> com.l2jfrozen.gameserver.skills.effects.EffectSeed:
    int _power -> _power
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
    int getPower() -> getPower
    void increasePower() -> increasePower
com.l2jfrozen.gameserver.skills.effects.EffectSignet -> com.l2jfrozen.gameserver.skills.effects.EffectSignet:
    com.l2jfrozen.gameserver.model.L2Skill _skill -> _skill
    com.l2jfrozen.gameserver.model.actor.instance.L2EffectPointInstance _actor -> _actor
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectSignetAntiSummon -> com.l2jfrozen.gameserver.skills.effects.EffectSignetAntiSummon:
    com.l2jfrozen.gameserver.model.actor.instance.L2EffectPointInstance _actor -> _actor
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectSignetMDam -> com.l2jfrozen.gameserver.skills.effects.EffectSignetMDam:
    com.l2jfrozen.gameserver.model.actor.instance.L2EffectPointInstance _actor -> _actor
    boolean bss -> bss
    boolean sps -> sps
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectSignetNoise -> com.l2jfrozen.gameserver.skills.effects.EffectSignetNoise:
    com.l2jfrozen.gameserver.model.actor.instance.L2EffectPointInstance _actor -> _actor
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectSilenceMagicPhysical -> com.l2jfrozen.gameserver.skills.effects.EffectSilenceMagicPhysical:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    boolean onActionTime() -> onActionTime
    void onExit() -> onExit
com.l2jfrozen.gameserver.skills.effects.EffectSilentMove -> com.l2jfrozen.gameserver.skills.effects.EffectSilentMove:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    void onStart() -> onStart
    void onExit() -> onExit
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectSleep -> com.l2jfrozen.gameserver.skills.effects.EffectSleep:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectSpellForce -> com.l2jfrozen.gameserver.skills.effects.EffectSpellForce:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectStun -> com.l2jfrozen.gameserver.skills.effects.EffectStun:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectStunSelf -> com.l2jfrozen.gameserver.skills.effects.EffectStunSelf:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectTargetMe -> com.l2jfrozen.gameserver.skills.effects.EffectTargetMe:
    void <init>(com.l2jfrozen.gameserver.skills.Env,com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> <init>
    com.l2jfrozen.gameserver.model.EffectType getEffectType() -> getEffectType
    void onStart() -> onStart
    void onExit() -> onExit
    boolean onActionTime() -> onActionTime
com.l2jfrozen.gameserver.skills.effects.EffectTemplate -> com.l2jfrozen.gameserver.skills.effects.EffectTemplate:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.Class _func -> _func
    java.lang.reflect.Constructor _constructor -> _constructor
    com.l2jfrozen.gameserver.skills.conditions.Condition attachCond -> attachCond
    com.l2jfrozen.gameserver.skills.conditions.Condition applayCond -> applayCond
    com.l2jfrozen.gameserver.skills.funcs.Lambda lambda -> lambda
    int counter -> counter
    int period -> period
    int abnormalEffect -> abnormalEffect
    com.l2jfrozen.gameserver.skills.funcs.FuncTemplate[] funcTemplates -> funcTemplates
    boolean showIcon -> showIcon
    java.lang.String stackType -> stackType
    float stackOrder -> stackOrder
    double effectPower -> effectPower
    com.l2jfrozen.gameserver.model.SkillType effectType -> effectType
    void <init>(com.l2jfrozen.gameserver.skills.conditions.Condition,com.l2jfrozen.gameserver.skills.conditions.Condition,java.lang.String,com.l2jfrozen.gameserver.skills.funcs.Lambda,int,int,int,java.lang.String,float,int,com.l2jfrozen.gameserver.model.SkillType,double) -> <init>
    com.l2jfrozen.gameserver.model.L2Effect getEffect(com.l2jfrozen.gameserver.skills.Env) -> getEffect
    void attach(com.l2jfrozen.gameserver.skills.funcs.FuncTemplate) -> attach
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.funcs.Func -> com.l2jfrozen.gameserver.skills.funcs.Func:
    com.l2jfrozen.gameserver.skills.Stats stat -> stat
    int order -> order
    java.lang.Object funcOwner -> funcOwner
    com.l2jfrozen.gameserver.skills.conditions.Condition cond -> cond
    void <init>(com.l2jfrozen.gameserver.skills.Stats,int,java.lang.Object) -> <init>
    void setCondition(com.l2jfrozen.gameserver.skills.conditions.Condition) -> setCondition
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.FuncAdd -> com.l2jfrozen.gameserver.skills.funcs.FuncAdd:
    com.l2jfrozen.gameserver.skills.funcs.Lambda _lambda -> _lambda
    void <init>(com.l2jfrozen.gameserver.skills.Stats,int,java.lang.Object,com.l2jfrozen.gameserver.skills.funcs.Lambda) -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.FuncBaseMul -> com.l2jfrozen.gameserver.skills.funcs.FuncBaseMul:
    com.l2jfrozen.gameserver.skills.funcs.Lambda _lambda -> _lambda
    void <init>(com.l2jfrozen.gameserver.skills.Stats,int,java.lang.Object,com.l2jfrozen.gameserver.skills.funcs.Lambda) -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.FuncDiv -> com.l2jfrozen.gameserver.skills.funcs.FuncDiv:
    com.l2jfrozen.gameserver.skills.funcs.Lambda _lambda -> _lambda
    void <init>(com.l2jfrozen.gameserver.skills.Stats,int,java.lang.Object,com.l2jfrozen.gameserver.skills.funcs.Lambda) -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.FuncEnchant -> com.l2jfrozen.gameserver.skills.funcs.FuncEnchant:
    void <init>(com.l2jfrozen.gameserver.skills.Stats,int,java.lang.Object,com.l2jfrozen.gameserver.skills.funcs.Lambda) -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.FuncMul -> com.l2jfrozen.gameserver.skills.funcs.FuncMul:
    com.l2jfrozen.gameserver.skills.funcs.Lambda _lambda -> _lambda
    void <init>(com.l2jfrozen.gameserver.skills.Stats,int,java.lang.Object,com.l2jfrozen.gameserver.skills.funcs.Lambda) -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.FuncSet -> com.l2jfrozen.gameserver.skills.funcs.FuncSet:
    com.l2jfrozen.gameserver.skills.funcs.Lambda _lambda -> _lambda
    void <init>(com.l2jfrozen.gameserver.skills.Stats,int,java.lang.Object,com.l2jfrozen.gameserver.skills.funcs.Lambda) -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.FuncSub -> com.l2jfrozen.gameserver.skills.funcs.FuncSub:
    com.l2jfrozen.gameserver.skills.funcs.Lambda _lambda -> _lambda
    void <init>(com.l2jfrozen.gameserver.skills.Stats,int,java.lang.Object,com.l2jfrozen.gameserver.skills.funcs.Lambda) -> <init>
    void calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.FuncTemplate -> com.l2jfrozen.gameserver.skills.funcs.FuncTemplate:
    com.l2jfrozen.gameserver.skills.conditions.Condition attachCond -> attachCond
    com.l2jfrozen.gameserver.skills.conditions.Condition applayCond -> applayCond
    java.lang.Class func -> func
    java.lang.reflect.Constructor constructor -> constructor
    com.l2jfrozen.gameserver.skills.Stats stat -> stat
    int order -> order
    com.l2jfrozen.gameserver.skills.funcs.Lambda lambda -> lambda
    void <init>(com.l2jfrozen.gameserver.skills.conditions.Condition,com.l2jfrozen.gameserver.skills.conditions.Condition,java.lang.String,com.l2jfrozen.gameserver.skills.Stats,int,com.l2jfrozen.gameserver.skills.funcs.Lambda) -> <init>
    com.l2jfrozen.gameserver.skills.funcs.Func getFunc(com.l2jfrozen.gameserver.skills.Env,java.lang.Object) -> getFunc
com.l2jfrozen.gameserver.skills.funcs.Lambda -> com.l2jfrozen.gameserver.skills.funcs.Lambda:
    void <init>() -> <init>
    double calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.LambdaCalc -> com.l2jfrozen.gameserver.skills.funcs.LambdaCalc:
    com.l2jfrozen.gameserver.skills.funcs.Func[] funcs -> funcs
    void <init>() -> <init>
    double calc(com.l2jfrozen.gameserver.skills.Env) -> calc
    void addFunc(com.l2jfrozen.gameserver.skills.funcs.Func) -> addFunc
com.l2jfrozen.gameserver.skills.funcs.LambdaConst -> com.l2jfrozen.gameserver.skills.funcs.LambdaConst:
    double _value -> _value
    void <init>(double) -> <init>
    double calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.LambdaRnd -> com.l2jfrozen.gameserver.skills.funcs.LambdaRnd:
    com.l2jfrozen.gameserver.skills.funcs.Lambda _max -> _max
    boolean _linear -> _linear
    void <init>(com.l2jfrozen.gameserver.skills.funcs.Lambda,boolean) -> <init>
    double calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.LambdaStats -> com.l2jfrozen.gameserver.skills.funcs.LambdaStats:
    com.l2jfrozen.gameserver.skills.funcs.StatsType _stat -> _stat
    void <init>(com.l2jfrozen.gameserver.skills.funcs.StatsType) -> <init>
    double calc(com.l2jfrozen.gameserver.skills.Env) -> calc
com.l2jfrozen.gameserver.skills.funcs.LambdaStats$1 -> com.l2jfrozen.gameserver.skills.funcs.LambdaStats$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$skills$funcs$StatsType -> $SwitchMap$com$l2jfrozen$gameserver$skills$funcs$StatsType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.funcs.StatsType -> com.l2jfrozen.gameserver.skills.funcs.StatsType:
    com.l2jfrozen.gameserver.skills.funcs.StatsType PLAYER_LEVEL -> PLAYER_LEVEL
    com.l2jfrozen.gameserver.skills.funcs.StatsType TARGET_LEVEL -> TARGET_LEVEL
    com.l2jfrozen.gameserver.skills.funcs.StatsType PLAYER_MAX_HP -> PLAYER_MAX_HP
    com.l2jfrozen.gameserver.skills.funcs.StatsType PLAYER_MAX_MP -> PLAYER_MAX_MP
    com.l2jfrozen.gameserver.skills.funcs.StatsType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.skills.funcs.StatsType[] values() -> values
    com.l2jfrozen.gameserver.skills.funcs.StatsType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.hitConditionBonus -> com.l2jfrozen.gameserver.skills.hitConditionBonus:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int frontBonus -> frontBonus
    int sideBonus -> sideBonus
    int backBonus -> backBonus
    int highBonus -> highBonus
    int lowBonus -> lowBonus
    int darkBonus -> darkBonus
    void <init>() -> <init>
    double getConditionBonus(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character) -> getConditionBonus
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.skills.holders.ISkillsHolder -> com.l2jfrozen.gameserver.skills.holders.ISkillsHolder:
    java.util.Map getSkills() -> getSkills
    com.l2jfrozen.gameserver.model.L2Skill addSkill(com.l2jfrozen.gameserver.model.L2Skill) -> addSkill
    com.l2jfrozen.gameserver.model.L2Skill getKnownSkill(int) -> getKnownSkill
    int getSkillLevel(int) -> getSkillLevel
com.l2jfrozen.gameserver.skills.holders.PlayerSkillHolder -> com.l2jfrozen.gameserver.skills.holders.PlayerSkillHolder:
    java.util.Map _skills -> _skills
    void <init>(java.util.Map) -> <init>
    java.util.Map getSkills() -> getSkills
    com.l2jfrozen.gameserver.model.L2Skill addSkill(com.l2jfrozen.gameserver.model.L2Skill) -> addSkill
    int getSkillLevel(int) -> getSkillLevel
    com.l2jfrozen.gameserver.model.L2Skill getKnownSkill(int) -> getKnownSkill
com.l2jfrozen.gameserver.skills.l2skills.L2SkillCharge -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillCharge:
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    boolean checkCondition(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object,boolean) -> checkCondition
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
com.l2jfrozen.gameserver.skills.l2skills.L2SkillChargeDmg -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillChargeDmg:
    int chargeSkillId -> chargeSkillId
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    boolean checkCondition(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object,boolean) -> checkCondition
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
com.l2jfrozen.gameserver.skills.l2skills.L2SkillChargeEffect -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillChargeEffect:
    int chargeSkillId -> chargeSkillId
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    boolean checkCondition(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object,boolean) -> checkCondition
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
com.l2jfrozen.gameserver.skills.l2skills.L2SkillCreateItem -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillCreateItem:
    int[] _createItemId -> _createItemId
    int _createItemCount -> _createItemCount
    int _randomCount -> _randomCount
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    void giveItems(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,int,int) -> giveItems
com.l2jfrozen.gameserver.skills.l2skills.L2SkillDefault -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillDefault:
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
com.l2jfrozen.gameserver.skills.l2skills.L2SkillDrain -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillDrain:
    float _absorbPart -> _absorbPart
    int _absorbAbs -> _absorbAbs
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    void useCubicSkill(com.l2jfrozen.gameserver.model.actor.instance.L2CubicInstance,com.l2jfrozen.gameserver.model.L2Object[]) -> useCubicSkill
com.l2jfrozen.gameserver.skills.l2skills.L2SkillElemental -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillElemental:
    int[] _seeds -> _seeds
    boolean _seedAny -> _seedAny
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
com.l2jfrozen.gameserver.skills.l2skills.L2SkillSeed -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillSeed:
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
com.l2jfrozen.gameserver.skills.l2skills.L2SkillSignet -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillSignet:
    int _effectNpcId -> _effectNpcId
    int effectId -> effectId
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
com.l2jfrozen.gameserver.skills.l2skills.L2SkillSignetCasttime -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillSignetCasttime:
    int _effectNpcId -> _effectNpcId
    int effectId -> effectId
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
com.l2jfrozen.gameserver.skills.l2skills.L2SkillSummon -> com.l2jfrozen.gameserver.skills.l2skills.L2SkillSummon:
    int SKILL_CUBIC_MASTERY -> SKILL_CUBIC_MASTERY
    int _npcId -> _npcId
    float _expPenalty -> _expPenalty
    boolean _isCubic -> _isCubic
    int _activationtime -> _activationtime
    int _activationchance -> _activationchance
    int _summonTotalLifeTime -> _summonTotalLifeTime
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    boolean checkCondition(com.l2jfrozen.gameserver.model.L2Character) -> checkCondition
    void useSkill(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Object[]) -> useSkill
    boolean isCubic() -> isCubic
com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager -> com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _attackStanceTasks -> _attackStanceTasks
    void <init>() -> <init>
    com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager getInstance() -> getInstance
    void addAttackStanceTask(com.l2jfrozen.gameserver.model.L2Character) -> addAttackStanceTask
    void removeAttackStanceTask(com.l2jfrozen.gameserver.model.L2Character) -> removeAttackStanceTask
    boolean getAttackStanceTask(com.l2jfrozen.gameserver.model.L2Character) -> getAttackStanceTask
    void <init>(com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager$1 -> com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager$1:
com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager$FightModeScheduler -> com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager$FightModeScheduler:
    com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager$SingletonHolder -> com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager$SingletonHolder:
    com.l2jfrozen.gameserver.taskmanager.AttackStanceTaskManager _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.taskmanager.DecayTaskManager -> com.l2jfrozen.gameserver.taskmanager.DecayTaskManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _decayTasks -> _decayTasks
    com.l2jfrozen.gameserver.taskmanager.DecayTaskManager _instance -> _instance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.taskmanager.DecayTaskManager getInstance() -> getInstance
    void addDecayTask(com.l2jfrozen.gameserver.model.L2Character) -> addDecayTask
    void addDecayTask(com.l2jfrozen.gameserver.model.L2Character,int) -> addDecayTask
    void cancelDecayTask(com.l2jfrozen.gameserver.model.L2Character) -> cancelDecayTask
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.taskmanager.DecayTaskManager$DecayScheduler -> com.l2jfrozen.gameserver.taskmanager.DecayTaskManager$DecayScheduler:
    com.l2jfrozen.gameserver.taskmanager.DecayTaskManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.taskmanager.DecayTaskManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.taskmanager.KnownListUpdateTaskManager -> com.l2jfrozen.gameserver.taskmanager.KnownListUpdateTaskManager:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.taskmanager.KnownListUpdateTaskManager _instance -> _instance
    void <init>() -> <init>
    com.l2jfrozen.gameserver.taskmanager.KnownListUpdateTaskManager getInstance() -> getInstance
    void updateRegion(com.l2jfrozen.gameserver.model.L2WorldRegion,boolean,boolean) -> updateRegion
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.taskmanager.KnownListUpdateTaskManager$KnownListUpdate -> com.l2jfrozen.gameserver.taskmanager.KnownListUpdateTaskManager$KnownListUpdate:
    boolean toggle -> toggle
    boolean fullUpdate -> fullUpdate
    com.l2jfrozen.gameserver.taskmanager.KnownListUpdateTaskManager this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.taskmanager.KnownListUpdateTaskManager) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.taskmanager.tasks.TaskCleanUp -> com.l2jfrozen.gameserver.taskmanager.tasks.TaskCleanUp:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String NAME -> NAME
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void onTimeElapsed(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> onTimeElapsed
    void initializate() -> initializate
com.l2jfrozen.gameserver.taskmanager.tasks.TaskJython -> com.l2jfrozen.gameserver.taskmanager.tasks.TaskJython:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String NAME -> NAME
    org.python.util.PythonInterpreter _python -> _python
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void onTimeElapsed(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> onTimeElapsed
com.l2jfrozen.gameserver.taskmanager.tasks.TaskOlympiadSave -> com.l2jfrozen.gameserver.taskmanager.tasks.TaskOlympiadSave:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String NAME -> NAME
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void onTimeElapsed(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> onTimeElapsed
    void initializate() -> initializate
com.l2jfrozen.gameserver.taskmanager.tasks.TaskRaidPointsReset -> com.l2jfrozen.gameserver.taskmanager.tasks.TaskRaidPointsReset:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String NAME -> NAME
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void onTimeElapsed(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> onTimeElapsed
    void initializate() -> initializate
com.l2jfrozen.gameserver.taskmanager.tasks.TaskRecom -> com.l2jfrozen.gameserver.taskmanager.tasks.TaskRecom:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String NAME -> NAME
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void onTimeElapsed(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> onTimeElapsed
    void initializate() -> initializate
com.l2jfrozen.gameserver.taskmanager.tasks.TaskRestart -> com.l2jfrozen.gameserver.taskmanager.tasks.TaskRestart:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String NAME -> NAME
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void onTimeElapsed(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> onTimeElapsed
com.l2jfrozen.gameserver.taskmanager.tasks.TaskSevenSignsUpdate -> com.l2jfrozen.gameserver.taskmanager.tasks.TaskSevenSignsUpdate:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String NAME -> NAME
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void onTimeElapsed(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> onTimeElapsed
    void initializate() -> initializate
com.l2jfrozen.gameserver.taskmanager.tasks.TaskShutdown -> com.l2jfrozen.gameserver.taskmanager.tasks.TaskShutdown:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String NAME -> NAME
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void onTimeElapsed(com.l2jfrozen.common.util.taskmanager.ExecutedTask) -> onTimeElapsed
com.l2jfrozen.gameserver.templates.AbsorbCrystalType -> com.l2jfrozen.gameserver.templates.AbsorbCrystalType:
    com.l2jfrozen.gameserver.templates.AbsorbCrystalType LAST_HIT -> LAST_HIT
    com.l2jfrozen.gameserver.templates.AbsorbCrystalType FULL_PARTY -> FULL_PARTY
    com.l2jfrozen.gameserver.templates.AbsorbCrystalType PARTY_ONE_RANDOM -> PARTY_ONE_RANDOM
    com.l2jfrozen.gameserver.templates.AbsorbCrystalType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.templates.AbsorbCrystalType[] values() -> values
    com.l2jfrozen.gameserver.templates.AbsorbCrystalType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.templates.L2Armor -> com.l2jfrozen.gameserver.templates.L2Armor:
    int _avoidModifier -> _avoidModifier
    int _pDef -> _pDef
    int _mDef -> _mDef
    int _mpBonus -> _mpBonus
    int _hpBonus -> _hpBonus
    com.l2jfrozen.gameserver.model.L2Skill _itemSkill -> _itemSkill
    void <init>(com.l2jfrozen.gameserver.templates.L2ArmorType,com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    com.l2jfrozen.gameserver.templates.L2ArmorType getItemType() -> getItemType
    int getItemMask() -> getItemMask
    int getMDef() -> getMDef
    int getPDef() -> getPDef
    int getAvoidModifier() -> getAvoidModifier
    int getMpBonus() -> getMpBonus
    int getHpBonus() -> getHpBonus
    com.l2jfrozen.gameserver.model.L2Skill getSkill() -> getSkill
    com.l2jfrozen.gameserver.skills.funcs.Func[] getStatFuncs(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.L2Character) -> getStatFuncs
    java.lang.Enum getItemType() -> getItemType
com.l2jfrozen.gameserver.templates.L2ArmorType -> com.l2jfrozen.gameserver.templates.L2ArmorType:
    com.l2jfrozen.gameserver.templates.L2ArmorType NONE -> NONE
    com.l2jfrozen.gameserver.templates.L2ArmorType LIGHT -> LIGHT
    com.l2jfrozen.gameserver.templates.L2ArmorType HEAVY -> HEAVY
    com.l2jfrozen.gameserver.templates.L2ArmorType MAGIC -> MAGIC
    com.l2jfrozen.gameserver.templates.L2ArmorType PET -> PET
    int _id -> _id
    java.lang.String _name -> _name
    com.l2jfrozen.gameserver.templates.L2ArmorType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.templates.L2ArmorType[] values() -> values
    com.l2jfrozen.gameserver.templates.L2ArmorType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    int mask() -> mask
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.templates.L2CharTemplate -> com.l2jfrozen.gameserver.templates.L2CharTemplate:
    int baseSTR -> baseSTR
    int baseCON -> baseCON
    int baseDEX -> baseDEX
    int baseINT -> baseINT
    int baseWIT -> baseWIT
    int baseMEN -> baseMEN
    float baseHpMax -> baseHpMax
    float baseCpMax -> baseCpMax
    float baseMpMax -> baseMpMax
    float baseHpReg -> baseHpReg
    float baseMpReg -> baseMpReg
    int basePAtk -> basePAtk
    int baseMAtk -> baseMAtk
    int basePDef -> basePDef
    int baseMDef -> baseMDef
    int basePAtkSpd -> basePAtkSpd
    int baseMAtkSpd -> baseMAtkSpd
    float baseMReuseRate -> baseMReuseRate
    int baseShldDef -> baseShldDef
    int baseAtkRange -> baseAtkRange
    int baseShldRate -> baseShldRate
    int baseCritRate -> baseCritRate
    int baseMCritRate -> baseMCritRate
    int baseWalkSpd -> baseWalkSpd
    int baseRunSpd -> baseRunSpd
    int baseBreath -> baseBreath
    int baseAggression -> baseAggression
    int baseBleed -> baseBleed
    int basePoison -> basePoison
    int baseStun -> baseStun
    int baseRoot -> baseRoot
    int baseMovement -> baseMovement
    int baseConfusion -> baseConfusion
    int baseSleep -> baseSleep
    int baseFire -> baseFire
    int baseWind -> baseWind
    int baseWater -> baseWater
    int baseEarth -> baseEarth
    int baseHoly -> baseHoly
    int baseDark -> baseDark
    double baseAggressionVuln -> baseAggressionVuln
    double baseBleedVuln -> baseBleedVuln
    double basePoisonVuln -> basePoisonVuln
    double baseStunVuln -> baseStunVuln
    double baseRootVuln -> baseRootVuln
    double baseMovementVuln -> baseMovementVuln
    double baseConfusionVuln -> baseConfusionVuln
    double baseSleepVuln -> baseSleepVuln
    double baseFireVuln -> baseFireVuln
    double baseWindVuln -> baseWindVuln
    double baseWaterVuln -> baseWaterVuln
    double baseEarthVuln -> baseEarthVuln
    double baseHolyVuln -> baseHolyVuln
    double baseDarkVuln -> baseDarkVuln
    double baseCritVuln -> baseCritVuln
    boolean isUndead -> isUndead
    int baseMpConsumeRate -> baseMpConsumeRate
    int baseHpConsumeRate -> baseHpConsumeRate
    int collisionRadius -> collisionRadius
    int collisionHeight -> collisionHeight
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
com.l2jfrozen.gameserver.templates.L2EtcItem -> com.l2jfrozen.gameserver.templates.L2EtcItem:
    void <init>(com.l2jfrozen.gameserver.templates.L2EtcItemType,com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    com.l2jfrozen.gameserver.templates.L2EtcItemType getItemType() -> getItemType
    boolean isConsumable() -> isConsumable
    int getItemMask() -> getItemMask
    java.lang.Enum getItemType() -> getItemType
com.l2jfrozen.gameserver.templates.L2EtcItemType -> com.l2jfrozen.gameserver.templates.L2EtcItemType:
    com.l2jfrozen.gameserver.templates.L2EtcItemType ARROW -> ARROW
    com.l2jfrozen.gameserver.templates.L2EtcItemType MATERIAL -> MATERIAL
    com.l2jfrozen.gameserver.templates.L2EtcItemType PET_COLLAR -> PET_COLLAR
    com.l2jfrozen.gameserver.templates.L2EtcItemType POTION -> POTION
    com.l2jfrozen.gameserver.templates.L2EtcItemType RECEIPE -> RECEIPE
    com.l2jfrozen.gameserver.templates.L2EtcItemType SCROLL -> SCROLL
    com.l2jfrozen.gameserver.templates.L2EtcItemType QUEST -> QUEST
    com.l2jfrozen.gameserver.templates.L2EtcItemType MONEY -> MONEY
    com.l2jfrozen.gameserver.templates.L2EtcItemType OTHER -> OTHER
    com.l2jfrozen.gameserver.templates.L2EtcItemType SPELLBOOK -> SPELLBOOK
    com.l2jfrozen.gameserver.templates.L2EtcItemType SEED -> SEED
    com.l2jfrozen.gameserver.templates.L2EtcItemType SHOT -> SHOT
    com.l2jfrozen.gameserver.templates.L2EtcItemType HERB -> HERB
    int _id -> _id
    java.lang.String _name -> _name
    com.l2jfrozen.gameserver.templates.L2EtcItemType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.templates.L2EtcItemType[] values() -> values
    com.l2jfrozen.gameserver.templates.L2EtcItemType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    int mask() -> mask
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.templates.L2HelperBuff -> com.l2jfrozen.gameserver.templates.L2HelperBuff:
    int _lowerLevel -> _lowerLevel
    int _upperLevel -> _upperLevel
    int _skillID -> _skillID
    int _skillLevel -> _skillLevel
    boolean _isMagicClass -> _isMagicClass
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    int getLowerLevel() -> getLowerLevel
    void setLowerLevel(int) -> setLowerLevel
    int getUpperLevel() -> getUpperLevel
    void setUpperLevel(int) -> setUpperLevel
    int getSkillID() -> getSkillID
    void setSkillID(int) -> setSkillID
    int getSkillLevel() -> getSkillLevel
    void setSkillLevel(int) -> setSkillLevel
    boolean isMagicClassBuff() -> isMagicClassBuff
    void setIsMagicClass(boolean) -> setIsMagicClass
com.l2jfrozen.gameserver.templates.L2Henna -> com.l2jfrozen.gameserver.templates.L2Henna:
    int symbolId -> symbolId
    java.lang.String symbolName -> symbolName
    int dye -> dye
    int price -> price
    int amount -> amount
    int statINT -> statINT
    int statSTR -> statSTR
    int statCON -> statCON
    int statMEM -> statMEM
    int statDEX -> statDEX
    int statWIT -> statWIT
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    int getSymbolId() -> getSymbolId
    int getDyeId() -> getDyeId
    int getPrice() -> getPrice
    int getAmountDyeRequire() -> getAmountDyeRequire
    int getStatINT() -> getStatINT
    int getStatSTR() -> getStatSTR
    int getStatCON() -> getStatCON
    int getStatMEM() -> getStatMEM
    int getStatDEX() -> getStatDEX
    int getStatWIT() -> getStatWIT
com.l2jfrozen.gameserver.templates.L2Item -> com.l2jfrozen.gameserver.templates.L2Item:
    int TYPE1_WEAPON_RING_EARRING_NECKLACE -> TYPE1_WEAPON_RING_EARRING_NECKLACE
    int TYPE1_SHIELD_ARMOR -> TYPE1_SHIELD_ARMOR
    int TYPE1_ITEM_QUESTITEM_ADENA -> TYPE1_ITEM_QUESTITEM_ADENA
    int TYPE2_WEAPON -> TYPE2_WEAPON
    int TYPE2_SHIELD_ARMOR -> TYPE2_SHIELD_ARMOR
    int TYPE2_ACCESSORY -> TYPE2_ACCESSORY
    int TYPE2_QUEST -> TYPE2_QUEST
    int TYPE2_MONEY -> TYPE2_MONEY
    int TYPE2_OTHER -> TYPE2_OTHER
    int TYPE2_PET_WOLF -> TYPE2_PET_WOLF
    int TYPE2_PET_HATCHLING -> TYPE2_PET_HATCHLING
    int TYPE2_PET_STRIDER -> TYPE2_PET_STRIDER
    int TYPE2_PET_BABY -> TYPE2_PET_BABY
    int SLOT_NONE -> SLOT_NONE
    int SLOT_UNDERWEAR -> SLOT_UNDERWEAR
    int SLOT_R_EAR -> SLOT_R_EAR
    int SLOT_L_EAR -> SLOT_L_EAR
    int SLOT_NECK -> SLOT_NECK
    int SLOT_R_FINGER -> SLOT_R_FINGER
    int SLOT_L_FINGER -> SLOT_L_FINGER
    int SLOT_HEAD -> SLOT_HEAD
    int SLOT_R_HAND -> SLOT_R_HAND
    int SLOT_L_HAND -> SLOT_L_HAND
    int SLOT_GLOVES -> SLOT_GLOVES
    int SLOT_CHEST -> SLOT_CHEST
    int SLOT_LEGS -> SLOT_LEGS
    int SLOT_FEET -> SLOT_FEET
    int SLOT_BACK -> SLOT_BACK
    int SLOT_LR_HAND -> SLOT_LR_HAND
    int SLOT_FULL_ARMOR -> SLOT_FULL_ARMOR
    int SLOT_HAIR -> SLOT_HAIR
    int SLOT_WOLF -> SLOT_WOLF
    int SLOT_HATCHLING -> SLOT_HATCHLING
    int SLOT_STRIDER -> SLOT_STRIDER
    int SLOT_BABYPET -> SLOT_BABYPET
    int SLOT_FACE -> SLOT_FACE
    int SLOT_DHAIR -> SLOT_DHAIR
    int CRYSTAL_NONE -> CRYSTAL_NONE
    int CRYSTAL_D -> CRYSTAL_D
    int CRYSTAL_C -> CRYSTAL_C
    int CRYSTAL_B -> CRYSTAL_B
    int CRYSTAL_A -> CRYSTAL_A
    int CRYSTAL_S -> CRYSTAL_S
    int[] crystalItemId -> crystalItemId
    int[] crystalEnchantBonusArmor -> crystalEnchantBonusArmor
    int[] crystalEnchantBonusWeapon -> crystalEnchantBonusWeapon
    int _itemId -> _itemId
    java.lang.String _name -> _name
    int _type1 -> _type1
    int _type2 -> _type2
    int _weight -> _weight
    boolean _crystallizable -> _crystallizable
    boolean _stackable -> _stackable
    int _crystalType -> _crystalType
    int _duration -> _duration
    int _bodyPart -> _bodyPart
    int _referencePrice -> _referencePrice
    int _crystalCount -> _crystalCount
    boolean _sellable -> _sellable
    boolean _dropable -> _dropable
    boolean _destroyable -> _destroyable
    boolean _tradeable -> _tradeable
    java.lang.Enum _type -> _type
    com.l2jfrozen.gameserver.skills.funcs.FuncTemplate[] _funcTemplates -> _funcTemplates
    com.l2jfrozen.gameserver.skills.effects.EffectTemplate[] _effectTemplates -> _effectTemplates
    com.l2jfrozen.gameserver.model.L2Skill[] _skills -> _skills
    com.l2jfrozen.gameserver.skills.funcs.Func[] _emptyFunctionSet -> _emptyFunctionSet
    com.l2jfrozen.gameserver.model.L2Effect[] _emptyEffectSet -> _emptyEffectSet
    void <init>(java.lang.Enum,com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    java.lang.Enum getItemType() -> getItemType
    int getDuration() -> getDuration
    int getItemId() -> getItemId
    int getItemMask() -> getItemMask
    int getType2() -> getType2
    int getWeight() -> getWeight
    boolean isCrystallizable() -> isCrystallizable
    int getCrystalType() -> getCrystalType
    int getCrystalItemId() -> getCrystalItemId
    int getItemGrade() -> getItemGrade
    int getCrystalCount() -> getCrystalCount
    int getCrystalCount(int) -> getCrystalCount
    java.lang.String getName() -> getName
    int getBodyPart() -> getBodyPart
    int getType1() -> getType1
    boolean isStackable() -> isStackable
    boolean isConsumable() -> isConsumable
    int getReferencePrice() -> getReferencePrice
    boolean isSellable() -> isSellable
    boolean isDropable() -> isDropable
    boolean isDestroyable() -> isDestroyable
    boolean isTradeable() -> isTradeable
    boolean isPotion() -> isPotion
    boolean isForHatchling() -> isForHatchling
    boolean isForStrider() -> isForStrider
    boolean isForWolf() -> isForWolf
    boolean isForBabyPet() -> isForBabyPet
    com.l2jfrozen.gameserver.skills.funcs.Func[] getStatFuncs(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.L2Character) -> getStatFuncs
    com.l2jfrozen.gameserver.model.L2Effect[] getEffects(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.L2Character) -> getEffects
    com.l2jfrozen.gameserver.model.L2Effect[] getSkillEffects(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character) -> getSkillEffects
    void attach(com.l2jfrozen.gameserver.skills.funcs.FuncTemplate) -> attach
    void attach(com.l2jfrozen.gameserver.skills.effects.EffectTemplate) -> attach
    void attach(com.l2jfrozen.gameserver.model.L2Skill) -> attach
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.templates.L2ItemType -> com.l2jfrozen.gameserver.templates.L2ItemType:
    com.l2jfrozen.gameserver.templates.L2ItemType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.templates.L2ItemType[] values() -> values
    com.l2jfrozen.gameserver.templates.L2ItemType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.templates.L2NpcTemplate -> com.l2jfrozen.gameserver.templates.L2NpcTemplate:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int npcId -> npcId
    int idTemplate -> idTemplate
    java.lang.String type -> type
    java.lang.String name -> name
    boolean serverSideName -> serverSideName
    java.lang.String title -> title
    boolean serverSideTitle -> serverSideTitle
    java.lang.String sex -> sex
    byte level -> level
    int rewardExp -> rewardExp
    int rewardSp -> rewardSp
    int aggroRange -> aggroRange
    int rhand -> rhand
    int lhand -> lhand
    int armor -> armor
    java.lang.String factionId -> factionId
    int factionRange -> factionRange
    int absorbLevel -> absorbLevel
    com.l2jfrozen.gameserver.templates.AbsorbCrystalType absorbType -> absorbType
    com.l2jfrozen.gameserver.templates.Race race -> race
    boolean _custom -> _custom
    com.l2jfrozen.gameserver.templates.StatsSet _npcStatsSet -> _npcStatsSet
    javolution.util.FastList _categories -> _categories
    java.util.List _minions -> _minions
    java.util.List _teachInfo -> _teachInfo
    java.util.Map _skills -> _skills
    java.util.Map _vulnerabilities -> _vulnerabilities
    java.util.Map _questEvents -> _questEvents
    javolution.util.FastMap _aiEvents -> _aiEvents
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet,boolean) -> <init>
    void addTeachInfo(com.l2jfrozen.gameserver.model.base.ClassId) -> addTeachInfo
    com.l2jfrozen.gameserver.model.base.ClassId[] getTeachInfo() -> getTeachInfo
    boolean canTeach(com.l2jfrozen.gameserver.model.base.ClassId) -> canTeach
    void addDropData(com.l2jfrozen.gameserver.model.L2DropData,int) -> addDropData
    void addRaidData(com.l2jfrozen.gameserver.model.L2MinionData) -> addRaidData
    void addSkill(com.l2jfrozen.gameserver.model.L2Skill) -> addSkill
    void addVulnerability(com.l2jfrozen.gameserver.skills.Stats,double) -> addVulnerability
    double getVulnerability(com.l2jfrozen.gameserver.skills.Stats) -> getVulnerability
    double removeVulnerability(com.l2jfrozen.gameserver.skills.Stats) -> removeVulnerability
    javolution.util.FastList getDropData() -> getDropData
    java.util.List getAllDropData() -> getAllDropData
    void clearAllDropData() -> clearAllDropData
    java.util.List getMinionData() -> getMinionData
    java.util.Map getSkills() -> getSkills
    void addQuestEvent(com.l2jfrozen.gameserver.model.quest.QuestEventType,com.l2jfrozen.gameserver.model.quest.Quest) -> addQuestEvent
    com.l2jfrozen.gameserver.model.quest.Quest[] getEventQuests(com.l2jfrozen.gameserver.model.quest.QuestEventType) -> getEventQuests
    void addAIEvent(com.l2jfrozen.gameserver.ai.special.manager.Action,com.l2jfrozen.gameserver.ai.special.manager.AIExtend) -> addAIEvent
    void clearAI() -> clearAI
    com.l2jfrozen.gameserver.templates.StatsSet getStatsSet() -> getStatsSet
    void setRace(int) -> setRace
    com.l2jfrozen.gameserver.templates.Race getRace() -> getRace
    byte getLevel() -> getLevel
    java.lang.String getName() -> getName
    int getNpcId() -> getNpcId
    boolean isCustom() -> isCustom
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.templates.L2PcTemplate -> com.l2jfrozen.gameserver.templates.L2PcTemplate:
    com.l2jfrozen.gameserver.model.base.Race race -> race
    com.l2jfrozen.gameserver.model.base.ClassId classId -> classId
    int _currentCollisionRadius -> _currentCollisionRadius
    int _currentCollisionHeight -> _currentCollisionHeight
    java.lang.String className -> className
    int spawnX -> spawnX
    int spawnY -> spawnY
    int spawnZ -> spawnZ
    int classBaseLevel -> classBaseLevel
    float lvlHpAdd -> lvlHpAdd
    float lvlHpMod -> lvlHpMod
    float lvlCpAdd -> lvlCpAdd
    float lvlCpMod -> lvlCpMod
    float lvlMpAdd -> lvlMpAdd
    float lvlMpMod -> lvlMpMod
    java.util.List _items -> _items
    void <init>(com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    void addItem(int) -> addItem
    com.l2jfrozen.gameserver.templates.L2Item[] getItems() -> getItems
    double getCollisionRadius() -> getCollisionRadius
    double getCollisionHeight() -> getCollisionHeight
    int getBaseFallSafeHeight(boolean) -> getBaseFallSafeHeight
    int getFallHeight() -> getFallHeight
com.l2jfrozen.gameserver.templates.L2Weapon -> com.l2jfrozen.gameserver.templates.L2Weapon:
    int _soulShotCount -> _soulShotCount
    int _spiritShotCount -> _spiritShotCount
    int _pDam -> _pDam
    int _rndDam -> _rndDam
    int _critical -> _critical
    double _hitModifier -> _hitModifier
    int _avoidModifier -> _avoidModifier
    int _shieldDef -> _shieldDef
    double _shieldDefRate -> _shieldDefRate
    int _atkSpeed -> _atkSpeed
    int _atkReuse -> _atkReuse
    int _mpConsume -> _mpConsume
    int _mDam -> _mDam
    com.l2jfrozen.gameserver.model.L2Skill _itemSkill -> _itemSkill
    com.l2jfrozen.gameserver.model.L2Skill _enchant4Skill -> _enchant4Skill
    com.l2jfrozen.gameserver.model.L2Skill[] _skillsOnCast -> _skillsOnCast
    com.l2jfrozen.gameserver.model.L2Skill[] _skillsOnCrit -> _skillsOnCrit
    void <init>(com.l2jfrozen.gameserver.templates.L2WeaponType,com.l2jfrozen.gameserver.templates.StatsSet) -> <init>
    com.l2jfrozen.gameserver.templates.L2WeaponType getItemType() -> getItemType
    int getItemMask() -> getItemMask
    int getSoulShotCount() -> getSoulShotCount
    int getSpiritShotCount() -> getSpiritShotCount
    int getPDamage() -> getPDamage
    int getRandomDamage() -> getRandomDamage
    int getAttackSpeed() -> getAttackSpeed
    int getAttackReuseDelay() -> getAttackReuseDelay
    int getAvoidModifier() -> getAvoidModifier
    int getCritical() -> getCritical
    double getHitModifier() -> getHitModifier
    int getMDamage() -> getMDamage
    int getMpConsume() -> getMpConsume
    int getShieldDef() -> getShieldDef
    double getShieldDefRate() -> getShieldDefRate
    com.l2jfrozen.gameserver.model.L2Skill getSkill() -> getSkill
    com.l2jfrozen.gameserver.model.L2Skill getEnchant4Skill() -> getEnchant4Skill
    com.l2jfrozen.gameserver.skills.funcs.Func[] getStatFuncs(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance,com.l2jfrozen.gameserver.model.L2Character) -> getStatFuncs
    com.l2jfrozen.gameserver.model.L2Effect[] getSkillEffects(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,boolean) -> getSkillEffects
    boolean getSkillEffects(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.model.L2Skill) -> getSkillEffects
    void attachOnCrit(com.l2jfrozen.gameserver.model.L2Skill) -> attachOnCrit
    void attachOnCast(com.l2jfrozen.gameserver.model.L2Skill) -> attachOnCast
    java.lang.Enum getItemType() -> getItemType
com.l2jfrozen.gameserver.templates.L2WeaponType -> com.l2jfrozen.gameserver.templates.L2WeaponType:
    com.l2jfrozen.gameserver.templates.L2WeaponType NONE -> NONE
    com.l2jfrozen.gameserver.templates.L2WeaponType SWORD -> SWORD
    com.l2jfrozen.gameserver.templates.L2WeaponType BLUNT -> BLUNT
    com.l2jfrozen.gameserver.templates.L2WeaponType DAGGER -> DAGGER
    com.l2jfrozen.gameserver.templates.L2WeaponType BOW -> BOW
    com.l2jfrozen.gameserver.templates.L2WeaponType POLE -> POLE
    com.l2jfrozen.gameserver.templates.L2WeaponType ETC -> ETC
    com.l2jfrozen.gameserver.templates.L2WeaponType FIST -> FIST
    com.l2jfrozen.gameserver.templates.L2WeaponType DUAL -> DUAL
    com.l2jfrozen.gameserver.templates.L2WeaponType DUALFIST -> DUALFIST
    com.l2jfrozen.gameserver.templates.L2WeaponType BIGSWORD -> BIGSWORD
    com.l2jfrozen.gameserver.templates.L2WeaponType PET -> PET
    com.l2jfrozen.gameserver.templates.L2WeaponType ROD -> ROD
    com.l2jfrozen.gameserver.templates.L2WeaponType BIGBLUNT -> BIGBLUNT
    int _id -> _id
    java.lang.String _name -> _name
    com.l2jfrozen.gameserver.templates.L2WeaponType[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.templates.L2WeaponType[] values() -> values
    com.l2jfrozen.gameserver.templates.L2WeaponType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    int mask() -> mask
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.templates.Race -> com.l2jfrozen.gameserver.templates.Race:
    com.l2jfrozen.gameserver.templates.Race UNDEAD -> UNDEAD
    com.l2jfrozen.gameserver.templates.Race MAGICCREATURE -> MAGICCREATURE
    com.l2jfrozen.gameserver.templates.Race BEAST -> BEAST
    com.l2jfrozen.gameserver.templates.Race ANIMAL -> ANIMAL
    com.l2jfrozen.gameserver.templates.Race PLANT -> PLANT
    com.l2jfrozen.gameserver.templates.Race HUMANOID -> HUMANOID
    com.l2jfrozen.gameserver.templates.Race SPIRIT -> SPIRIT
    com.l2jfrozen.gameserver.templates.Race ANGEL -> ANGEL
    com.l2jfrozen.gameserver.templates.Race DEMON -> DEMON
    com.l2jfrozen.gameserver.templates.Race DRAGON -> DRAGON
    com.l2jfrozen.gameserver.templates.Race GIANT -> GIANT
    com.l2jfrozen.gameserver.templates.Race BUG -> BUG
    com.l2jfrozen.gameserver.templates.Race FAIRIE -> FAIRIE
    com.l2jfrozen.gameserver.templates.Race HUMAN -> HUMAN
    com.l2jfrozen.gameserver.templates.Race ELVE -> ELVE
    com.l2jfrozen.gameserver.templates.Race DARKELVE -> DARKELVE
    com.l2jfrozen.gameserver.templates.Race ORC -> ORC
    com.l2jfrozen.gameserver.templates.Race DWARVE -> DWARVE
    com.l2jfrozen.gameserver.templates.Race OTHER -> OTHER
    com.l2jfrozen.gameserver.templates.Race NONLIVING -> NONLIVING
    com.l2jfrozen.gameserver.templates.Race SIEGEWEAPON -> SIEGEWEAPON
    com.l2jfrozen.gameserver.templates.Race DEFENDINGARMY -> DEFENDINGARMY
    com.l2jfrozen.gameserver.templates.Race MERCENARIE -> MERCENARIE
    com.l2jfrozen.gameserver.templates.Race UNKNOWN -> UNKNOWN
    com.l2jfrozen.gameserver.templates.Race[] $VALUES -> $VALUES
    com.l2jfrozen.gameserver.templates.Race[] values() -> values
    com.l2jfrozen.gameserver.templates.Race valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.templates.StatsSet -> com.l2jfrozen.gameserver.templates.StatsSet:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map _set -> _set
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    java.util.Map getSet() -> getSet
    void add(com.l2jfrozen.gameserver.templates.StatsSet) -> add
    boolean getBool(java.lang.String) -> getBool
    boolean getBool(java.lang.String,boolean) -> getBool
    byte getByte(java.lang.String,byte) -> getByte
    byte getByte(java.lang.String) -> getByte
    short getShort(java.lang.String,short) -> getShort
    short getShort(java.lang.String) -> getShort
    int getInteger(java.lang.String) -> getInteger
    int getInteger(java.lang.String,int) -> getInteger
    int[] getIntegerArray(java.lang.String) -> getIntegerArray
    long getLong(java.lang.String) -> getLong
    long getLong(java.lang.String,int) -> getLong
    float getFloat(java.lang.String) -> getFloat
    float getFloat(java.lang.String,float) -> getFloat
    double getDouble(java.lang.String) -> getDouble
    double getDouble(java.lang.String,float) -> getDouble
    java.lang.String getString(java.lang.String) -> getString
    java.lang.String getString(java.lang.String,java.lang.String) -> getString
    java.lang.Enum getEnum(java.lang.String,java.lang.Class) -> getEnum
    java.lang.Enum getEnum(java.lang.String,java.lang.Class,java.lang.Enum) -> getEnum
    void set(java.lang.String,java.lang.String) -> set
    void set(java.lang.String,boolean) -> set
    void set(java.lang.String,int) -> set
    void set(java.lang.String,double) -> set
    void set(java.lang.String,long) -> set
    void set(java.lang.String,java.lang.Enum) -> set
    void safeSet(java.lang.String,int,int,int,java.lang.String) -> safeSet
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.thread.daemons.ItemsAutoDestroy -> com.l2jfrozen.gameserver.thread.daemons.ItemsAutoDestroy:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.thread.daemons.ItemsAutoDestroy _instance -> _instance
    java.util.List _items -> _items
    long _sleep -> _sleep
    void <init>() -> <init>
    com.l2jfrozen.gameserver.thread.daemons.ItemsAutoDestroy getInstance() -> getInstance
    void addItem(com.l2jfrozen.gameserver.model.actor.instance.L2ItemInstance) -> addItem
    void removeItems() -> removeItems
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.thread.daemons.ItemsAutoDestroy$CheckItemsForDestroy -> com.l2jfrozen.gameserver.thread.daemons.ItemsAutoDestroy$CheckItemsForDestroy:
    com.l2jfrozen.gameserver.thread.daemons.ItemsAutoDestroy this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.thread.daemons.ItemsAutoDestroy) -> <init>
    void run() -> run
com.l2jfrozen.gameserver.thread.daemons.PcPoint -> com.l2jfrozen.gameserver.thread.daemons.PcPoint:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.thread.daemons.PcPoint _instance -> _instance
    com.l2jfrozen.gameserver.thread.daemons.PcPoint getInstance() -> getInstance
    void <init>() -> <init>
    void run() -> run
com.l2jfrozen.gameserver.updaters.CastleUpdater -> com.l2jfrozen.gameserver.updaters.CastleUpdater:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.model.L2Clan _clan -> _clan
    int _runCount -> _runCount
    void <init>(com.l2jfrozen.gameserver.model.L2Clan,int) -> <init>
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.Broadcast -> com.l2jfrozen.gameserver.util.Broadcast:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void toPlayersTargettingMyself(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> toPlayersTargettingMyself
    void toKnownPlayers(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> toKnownPlayers
    void toKnownPlayersInRadius(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket,int) -> toKnownPlayersInRadius
    void toSelfAndKnownPlayers(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> toSelfAndKnownPlayers
    void toSelfAndKnownPlayersInRadius(com.l2jfrozen.gameserver.model.L2Character,com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket,long) -> toSelfAndKnownPlayersInRadius
    void toAllOnlinePlayers(com.l2jfrozen.gameserver.network.serverpackets.L2GameServerPacket) -> toAllOnlinePlayers
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.EventData -> com.l2jfrozen.gameserver.util.EventData:
    int eventX -> eventX
    int eventY -> eventY
    int eventZ -> eventZ
    int eventKarma -> eventKarma
    int eventPvpKills -> eventPvpKills
    int eventPkKills -> eventPkKills
    java.lang.String eventTitle -> eventTitle
    java.util.List kills -> kills
    boolean eventSitForced -> eventSitForced
    void <init>(int,int,int,int,int,int,java.lang.String,java.util.List,boolean) -> <init>
com.l2jfrozen.gameserver.util.FloodProtectorAction -> com.l2jfrozen.gameserver.util.FloodProtectorAction:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.gameserver.network.L2GameClient client -> client
    com.l2jfrozen.gameserver.config.FloodProtectorConfig config -> config
    float _nextGameTick -> _nextGameTick
    java.util.concurrent.atomic.AtomicInteger _count -> _count
    boolean _logged -> _logged
    boolean _punishmentInProgress -> _punishmentInProgress
    int _untilBlock -> _untilBlock
    java.util.Hashtable received_commands_actions -> received_commands_actions
    void <init>(com.l2jfrozen.gameserver.network.L2GameClient,com.l2jfrozen.gameserver.config.FloodProtectorConfig) -> <init>
    boolean tryPerformAction(java.lang.String) -> tryPerformAction
    void kickPlayer() -> kickPlayer
    void banChat() -> banChat
    void banAccount() -> banAccount
    void jailChar() -> jailChar
    void LOGGER(java.lang.String[]) -> LOGGER
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.FloodProtectorAction$1 -> com.l2jfrozen.gameserver.util.FloodProtectorAction$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$network$GameClientState -> $SwitchMap$com$l2jfrozen$gameserver$network$GameClientState
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.FloodProtectors -> com.l2jfrozen.gameserver.util.FloodProtectors:
    com.l2jfrozen.gameserver.util.FloodProtectorAction _useItem -> _useItem
    com.l2jfrozen.gameserver.util.FloodProtectorAction _rollDice -> _rollDice
    com.l2jfrozen.gameserver.util.FloodProtectorAction _firework -> _firework
    com.l2jfrozen.gameserver.util.FloodProtectorAction _itemPetSummon -> _itemPetSummon
    com.l2jfrozen.gameserver.util.FloodProtectorAction _heroVoice -> _heroVoice
    com.l2jfrozen.gameserver.util.FloodProtectorAction _globalChat -> _globalChat
    com.l2jfrozen.gameserver.util.FloodProtectorAction _subclass -> _subclass
    com.l2jfrozen.gameserver.util.FloodProtectorAction _dropItem -> _dropItem
    com.l2jfrozen.gameserver.util.FloodProtectorAction _augmentScript -> _augmentScript
    com.l2jfrozen.gameserver.util.FloodProtectorAction _enchantItem -> _enchantItem
    com.l2jfrozen.gameserver.util.FloodProtectorAction _serverBypass -> _serverBypass
    com.l2jfrozen.gameserver.util.FloodProtectorAction _multiSell -> _multiSell
    com.l2jfrozen.gameserver.util.FloodProtectorAction _transaction -> _transaction
    com.l2jfrozen.gameserver.util.FloodProtectorAction _manufacture -> _manufacture
    com.l2jfrozen.gameserver.util.FloodProtectorAction _manor -> _manor
    com.l2jfrozen.gameserver.util.FloodProtectorAction _characterSelect -> _characterSelect
    com.l2jfrozen.gameserver.util.FloodProtectorAction _unknownPackets -> _unknownPackets
    com.l2jfrozen.gameserver.util.FloodProtectorAction _partyInvitation -> _partyInvitation
    com.l2jfrozen.gameserver.util.FloodProtectorAction _sayAction -> _sayAction
    com.l2jfrozen.gameserver.util.FloodProtectorAction _moveAction -> _moveAction
    com.l2jfrozen.gameserver.util.FloodProtectorAction _genericAction -> _genericAction
    com.l2jfrozen.gameserver.util.FloodProtectorAction _macro -> _macro
    com.l2jfrozen.gameserver.util.FloodProtectorAction _potion -> _potion
    void <init>(com.l2jfrozen.gameserver.network.L2GameClient) -> <init>
    com.l2jfrozen.gameserver.util.FloodProtectorAction getUseItem() -> getUseItem
    com.l2jfrozen.gameserver.util.FloodProtectorAction getRollDice() -> getRollDice
    com.l2jfrozen.gameserver.util.FloodProtectorAction getFirework() -> getFirework
    com.l2jfrozen.gameserver.util.FloodProtectorAction getItemPetSummon() -> getItemPetSummon
    com.l2jfrozen.gameserver.util.FloodProtectorAction getHeroVoice() -> getHeroVoice
    com.l2jfrozen.gameserver.util.FloodProtectorAction getGlobalChat() -> getGlobalChat
    com.l2jfrozen.gameserver.util.FloodProtectorAction getSubclass() -> getSubclass
    com.l2jfrozen.gameserver.util.FloodProtectorAction getDropItem() -> getDropItem
    com.l2jfrozen.gameserver.util.FloodProtectorAction getAugmentItem() -> getAugmentItem
    com.l2jfrozen.gameserver.util.FloodProtectorAction getEnchantItem() -> getEnchantItem
    com.l2jfrozen.gameserver.util.FloodProtectorAction getServerBypass() -> getServerBypass
    com.l2jfrozen.gameserver.util.FloodProtectorAction getMultiSell() -> getMultiSell
    com.l2jfrozen.gameserver.util.FloodProtectorAction getTransaction() -> getTransaction
    com.l2jfrozen.gameserver.util.FloodProtectorAction getManufacture() -> getManufacture
    com.l2jfrozen.gameserver.util.FloodProtectorAction getManor() -> getManor
    com.l2jfrozen.gameserver.util.FloodProtectorAction getCharacterSelect() -> getCharacterSelect
    com.l2jfrozen.gameserver.util.FloodProtectorAction getUnknownPackets() -> getUnknownPackets
    com.l2jfrozen.gameserver.util.FloodProtectorAction getPartyInvitation() -> getPartyInvitation
    com.l2jfrozen.gameserver.util.FloodProtectorAction getSayAction() -> getSayAction
    com.l2jfrozen.gameserver.util.FloodProtectorAction getMoveAction() -> getMoveAction
    com.l2jfrozen.gameserver.util.FloodProtectorAction getGenericAction() -> getGenericAction
    com.l2jfrozen.gameserver.util.FloodProtectorAction getMacro() -> getMacro
    com.l2jfrozen.gameserver.util.FloodProtectorAction getUsePotion() -> getUsePotion
com.l2jfrozen.gameserver.util.GMAudit -> com.l2jfrozen.gameserver.util.GMAudit:
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    void auditGMAction(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> auditGMAction
    void auditGMAction(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> auditGMAction
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.GameServerFloodProtectorActions -> com.l2jfrozen.gameserver.util.GameServerFloodProtectorActions:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int MAX_CONCURRENT_ACTIONS_PER_PLAYER -> MAX_CONCURRENT_ACTIONS_PER_PLAYER
    java.util.Hashtable clients_concurrent_actions -> clients_concurrent_actions
    java.util.Hashtable clients_actions -> clients_actions
    java.util.Hashtable clients_nextGameTick -> clients_nextGameTick
    java.util.Hashtable punishes_in_progress -> punishes_in_progress
    void <init>() -> <init>
    boolean tryPerformAction(int,int,com.l2jfrozen.netcore.MMOClient) -> t
    boolean isOpCodeToBeTested(int,int) -> i
    void kickPlayer(com.l2jfrozen.netcore.MMOClient,int) -> kickPlayer
    void banAccount(com.l2jfrozen.netcore.MMOClient,int) -> banAccount
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.IllegalPlayerAction -> com.l2jfrozen.gameserver.util.IllegalPlayerAction:
    java.util.logging.Logger _logAudit -> _logAudit
    java.lang.String _message -> _message
    int _punishment -> _punishment
    com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance _actor -> _actor
    int PUNISH_BROADCAST -> PUNISH_BROADCAST
    int PUNISH_KICK -> PUNISH_KICK
    int PUNISH_KICKBAN -> PUNISH_KICKBAN
    int PUNISH_JAIL -> PUNISH_JAIL
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int) -> <init>
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.MinionList -> com.l2jfrozen.gameserver.util.MinionList:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List minionReferences -> minionReferences
    javolution.util.FastMap _respawnTasks -> _respawnTasks
    com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance master -> master
    void <init>(com.l2jfrozen.gameserver.model.actor.instance.L2MonsterInstance) -> <init>
    int countSpawnedMinions() -> countSpawnedMinions
    int countSpawnedMinionsById(int) -> countSpawnedMinionsById
    boolean hasMinions() -> hasMinions
    java.util.List getSpawnedMinions() -> getSpawnedMinions
    void addSpawnedMinion(com.l2jfrozen.gameserver.model.actor.instance.L2MinionInstance) -> addSpawnedMinion
    int lazyCountSpawnedMinionsGroups() -> lazyCountSpawnedMinionsGroups
    void removeSpawnedMinion(com.l2jfrozen.gameserver.model.actor.instance.L2MinionInstance) -> removeSpawnedMinion
    void moveMinionToRespawnList(com.l2jfrozen.gameserver.model.actor.instance.L2MinionInstance) -> moveMinionToRespawnList
    void clearRespawnList() -> clearRespawnList
    void maintainMinions() -> maintainMinions
    void spawnMinions() -> spawnMinions
    void spawnSingleMinion(int) -> spawnSingleMinion
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.MultiSort -> com.l2jfrozen.gameserver.util.MultiSort:
    int SORT_ASCENDING -> SORT_ASCENDING
    int SORT_DESCENDING -> SORT_DESCENDING
    java.util.List _keyList -> _keyList
    java.util.List _valueList -> _valueList
    boolean _isSortDescending -> _isSortDescending
    boolean _isSorted -> _isSorted
    void <init>(int[]) -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(java.lang.Object[],int[]) -> <init>
    void <init>(java.util.Map) -> <init>
    java.util.List getIntList(java.util.Collection) -> getIntList
    java.util.List getIntList(int[]) -> getIntList
    java.util.List getList(java.util.Collection) -> getList
    java.util.List getList(java.lang.Object[]) -> getList
    int getCount() -> getCount
    int getHarmonicMean() -> getHarmonicMean
    java.util.List getKeys() -> getKeys
    int getFrequency(int) -> getFrequency
    int getMaxValue() -> getMaxValue
    int getMinValue() -> getMinValue
    int getMean() -> getMean
    double getStandardDeviation() -> getStandardDeviation
    int getTotalValue() -> getTotalValue
    java.util.List getValues() -> getValues
    boolean isSortDescending() -> isSortDescending
    boolean isSorted() -> isSorted
    void setSortDescending(boolean) -> setSortDescending
    boolean sort() -> sort
com.l2jfrozen.gameserver.util.Util -> com.l2jfrozen.gameserver.util.Util:
    void <init>() -> <init>
    void handleIllegalPlayerAction(com.l2jfrozen.gameserver.model.actor.instance.L2PcInstance,java.lang.String,int) -> handleIllegalPlayerAction
    java.lang.String getRelativePath(java.io.File,java.io.File) -> getRelativePath
    double calculateAngleFrom(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Object) -> calculateAngleFrom
    double calculateAngleFrom(int,int,int,int) -> calculateAngleFrom
    double calculateDistance(int,int,int,int,int) -> calculateDistance
    double calculateDistance(int,int,int,int,int,int,boolean) -> calculateDistance
    double calculateDistance(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Object,boolean) -> calculateDistance
    java.lang.String capitalizeFirst(java.lang.String) -> capitalizeFirst
    java.lang.String capitalizeWords(java.lang.String) -> capitalizeWords
    boolean checkIfInRange(int,com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Object,boolean) -> checkIfInRange
    double convertHeadingToDegree(int) -> convertHeadingToDegree
    int countWords(java.lang.String) -> countWords
    java.lang.String implodeString(java.lang.String[],java.lang.String) -> implodeString
    java.lang.String implodeString(java.util.Collection,java.lang.String) -> implodeString
    float roundTo(float,int) -> roundTo
    boolean isAlphaNumeric(java.lang.String) -> isAlphaNumeric
    java.lang.String formatAdena(int) -> formatAdena
    java.lang.String reverseColor(java.lang.String) -> reverseColor
    int convertMinutesToMiliseconds(int) -> convertMinutesToMiliseconds
    int calculateHeadingFrom(com.l2jfrozen.gameserver.model.L2Object,com.l2jfrozen.gameserver.model.L2Object) -> calculateHeadingFrom
    int calculateHeadingFrom(int,int,int,int) -> calculateHeadingFrom
    int calculateHeadingFrom(double,double) -> calculateHeadingFrom
    int calcCameraAngle(int) -> calcCameraAngle
    int calcCameraAngle(com.l2jfrozen.gameserver.model.actor.instance.L2NpcInstance) -> calcCameraAngle
    boolean contains(int[],int) -> contains
com.l2jfrozen.gameserver.util.monitoring.ServerConfigStatus -> com.l2jfrozen.gameserver.util.monitoring.ServerConfigStatus:
    long serialVersionUID -> serialVersionUID
    java.lang.String ServerName -> ServerName
    java.lang.String GameServerIps -> GameServerIps
    int GameServerPort -> GameServerPort
    float GameServerRate -> GameServerRate
    float GameServerAdenaRate -> GameServerAdenaRate
    java.lang.String GameServerLink -> GameServerLink
    java.lang.String GameServerHopzoneLink -> GameServerHopzoneLink
    java.lang.String GameServerTopzoneLink -> GameServerTopzoneLink
    java.lang.String GameServerL2NetworkLink -> GameServerL2NetworkLink
    void <init>() -> <init>
    java.lang.String getStaticStatus() -> getStaticStatus
    java.lang.String getDynamicStatus() -> getDynamicStatus
    java.lang.String getServerName() -> getServerName
    java.lang.String getGameServerIPs() -> getGameServerIPs
    int getGameServerPort() -> getGameServerPort
    float getGameServerRate() -> getGameServerRate
    float getGameServerAdenaRate() -> getGameServerAdenaRate
    java.lang.String getGameServerLink() -> getGameServerLink
    java.lang.String getGameServerHopzoneLink() -> getGameServerHopzoneLink
    java.lang.String getGameServerTopzoneLink() -> getGameServerTopzoneLink
    java.lang.String getGameServerL2NetworkLink() -> getGameServerL2NetworkLink
    long getSerialversionuid() -> getSerialversionuid
    java.lang.String toString() -> toString
    void refreshStatus() -> refreshStatus
com.l2jfrozen.gameserver.util.monitoring.ServerStatus -> com.l2jfrozen.gameserver.util.monitoring.ServerStatus:
    long serialVersionUID -> serialVersionUID
    int TotalOnline -> TotalOnline
    int ActivePlayers -> ActivePlayers
    int OfflinePlayers -> OfflinePlayers
    int FakePlayers -> FakePlayers
    int ActiveClients -> ActiveClients
    void <init>() -> <init>
    java.lang.String getDynamicStatus() -> getDynamicStatus
    java.lang.String getStaticStatus() -> getStaticStatus
    long getSerialversionuid() -> getSerialversionuid
    int getTotalOnline() -> getTotalOnline
    int getActivePlayers() -> getActivePlayers
    int getOfflinePlayers() -> getOfflinePlayers
    int getFakePlayers() -> getFakePlayers
    int getActiveClients() -> getActiveClients
    java.lang.String toString() -> toString
    void refreshStatus() -> refreshStatus
com.l2jfrozen.gameserver.util.object.L2ObjectHashMap -> com.l2jfrozen.gameserver.util.object.L2ObjectHashMap:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean TRACE -> TRACE
    boolean DEBUG -> DEBUG
    int[] PRIMES -> PRIMES
    com.l2jfrozen.gameserver.model.L2Object[] _table -> _table
    int[] _keys -> _keys
    int _count -> _count
    boolean $assertionsDisabled -> $assertionsDisabled
    int getPrime(int) -> getPrime
    void <init>() -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    void check() -> check
    void put(com.l2jfrozen.gameserver.model.L2Object) -> put
    void remove(com.l2jfrozen.gameserver.model.L2Object) -> remove
    com.l2jfrozen.gameserver.model.L2Object get(int) -> get
    boolean contains(com.l2jfrozen.gameserver.model.L2Object) -> contains
    void expand() -> expand
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.object.L2ObjectHashMap$Itr -> com.l2jfrozen.gameserver.util.object.L2ObjectHashMap$Itr:
    com.l2jfrozen.gameserver.model.L2Object[] _array -> _array
    int _nextIdx -> _nextIdx
    com.l2jfrozen.gameserver.model.L2Object _nextObj -> _nextObj
    com.l2jfrozen.gameserver.model.L2Object _lastRet -> _lastRet
    com.l2jfrozen.gameserver.util.object.L2ObjectHashMap this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.util.object.L2ObjectHashMap,com.l2jfrozen.gameserver.model.L2Object[]) -> <init>
    boolean hasNext() -> hasNext
    com.l2jfrozen.gameserver.model.L2Object next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.l2jfrozen.gameserver.util.object.L2ObjectHashSet -> com.l2jfrozen.gameserver.util.object.L2ObjectHashSet:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean TRACE -> TRACE
    boolean DEBUG -> DEBUG
    int[] PRIMES -> PRIMES
    com.l2jfrozen.gameserver.model.L2Object[] _table -> _table
    int[] _collisions -> _collisions
    int _count -> _count
    boolean $assertionsDisabled -> $assertionsDisabled
    int getPrime(int) -> getPrime
    void <init>() -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    void check() -> check
    void put(com.l2jfrozen.gameserver.model.L2Object) -> put
    void remove(com.l2jfrozen.gameserver.model.L2Object) -> remove
    boolean contains(com.l2jfrozen.gameserver.model.L2Object) -> contains
    void expand() -> expand
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.object.L2ObjectHashSet$Itr -> com.l2jfrozen.gameserver.util.object.L2ObjectHashSet$Itr:
    com.l2jfrozen.gameserver.model.L2Object[] _array -> _array
    int _nextIdx -> _nextIdx
    com.l2jfrozen.gameserver.model.L2Object _nextObj -> _nextObj
    com.l2jfrozen.gameserver.model.L2Object _lastRet -> _lastRet
    com.l2jfrozen.gameserver.util.object.L2ObjectHashSet this$0 -> this$0
    void <init>(com.l2jfrozen.gameserver.util.object.L2ObjectHashSet,com.l2jfrozen.gameserver.model.L2Object[]) -> <init>
    boolean hasNext() -> hasNext
    com.l2jfrozen.gameserver.model.L2Object next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.l2jfrozen.gameserver.util.object.L2ObjectMap -> com.l2jfrozen.gameserver.util.object.L2ObjectMap:
    void <init>() -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    void put(com.l2jfrozen.gameserver.model.L2Object) -> put
    void remove(com.l2jfrozen.gameserver.model.L2Object) -> remove
    com.l2jfrozen.gameserver.model.L2Object get(int) -> get
    boolean contains(com.l2jfrozen.gameserver.model.L2Object) -> contains
    java.util.Iterator iterator() -> iterator
    com.l2jfrozen.gameserver.util.object.L2ObjectMap createL2ObjectMap() -> createL2ObjectMap
com.l2jfrozen.gameserver.util.object.L2ObjectMap$1 -> com.l2jfrozen.gameserver.util.object.L2ObjectMap$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$config$ObjectMapType -> $SwitchMap$com$l2jfrozen$gameserver$config$ObjectMapType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.object.L2ObjectSet -> com.l2jfrozen.gameserver.util.object.L2ObjectSet:
    void <init>() -> <init>
    com.l2jfrozen.gameserver.util.object.L2ObjectSet createL2ObjectSet() -> createL2ObjectSet
    com.l2jfrozen.gameserver.util.object.L2ObjectSet createL2PlayerSet() -> createL2PlayerSet
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    void put(com.l2jfrozen.gameserver.model.L2Object) -> put
    void remove(com.l2jfrozen.gameserver.model.L2Object) -> remove
    boolean contains(com.l2jfrozen.gameserver.model.L2Object) -> contains
    java.util.Iterator iterator() -> iterator
com.l2jfrozen.gameserver.util.object.L2ObjectSet$1 -> com.l2jfrozen.gameserver.util.object.L2ObjectSet$1:
    int[] $SwitchMap$com$l2jfrozen$gameserver$config$ObjectSetType -> $SwitchMap$com$l2jfrozen$gameserver$config$ObjectSetType
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.object.WorldObjectMap -> com.l2jfrozen.gameserver.util.object.WorldObjectMap:
    java.util.Map _objectMap -> _objectMap
    void <init>() -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    void put(com.l2jfrozen.gameserver.model.L2Object) -> put
    void remove(com.l2jfrozen.gameserver.model.L2Object) -> remove
    com.l2jfrozen.gameserver.model.L2Object get(int) -> get
    boolean contains(com.l2jfrozen.gameserver.model.L2Object) -> contains
    java.util.Iterator iterator() -> iterator
com.l2jfrozen.gameserver.util.object.WorldObjectSet -> com.l2jfrozen.gameserver.util.object.WorldObjectSet:
    java.util.Map _objectMap -> _objectMap
    void <init>() -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    void put(com.l2jfrozen.gameserver.model.L2Object) -> put
    void remove(com.l2jfrozen.gameserver.model.L2Object) -> remove
    boolean contains(com.l2jfrozen.gameserver.model.L2Object) -> contains
    java.util.Iterator iterator() -> iterator
com.l2jfrozen.gameserver.util.object.WorldObjectTree -> com.l2jfrozen.gameserver.util.object.WorldObjectTree:
    java.util.TreeMap _objectMap -> _objectMap
    java.util.concurrent.locks.ReentrantReadWriteLock _rwl -> _rwl
    java.util.concurrent.locks.Lock _r -> _r
    java.util.concurrent.locks.Lock _w -> _w
    void <init>() -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    void put(com.l2jfrozen.gameserver.model.L2Object) -> put
    void remove(com.l2jfrozen.gameserver.model.L2Object) -> remove
    com.l2jfrozen.gameserver.model.L2Object get(int) -> get
    boolean contains(com.l2jfrozen.gameserver.model.L2Object) -> contains
    java.util.Iterator iterator() -> iterator
com.l2jfrozen.gameserver.util.sql.SQLQuery -> com.l2jfrozen.gameserver.util.sql.SQLQuery:
    void execute(java.sql.Connection) -> execute
com.l2jfrozen.gameserver.util.sql.SQLQueue -> com.l2jfrozen.gameserver.util.sql.SQLQueue:
    com.l2jfrozen.gameserver.util.sql.SQLQueue _instance -> _instance
    javolution.util.FastList _query -> _query
    java.util.concurrent.ScheduledFuture _task -> _task
    boolean _inShutdown -> _inShutdown
    boolean _isRuning -> _isRuning
    com.l2jfrozen.gameserver.util.sql.SQLQueue getInstance() -> getInstance
    void <init>() -> <init>
    void shutdown() -> shutdown
    void add(com.l2jfrozen.gameserver.util.sql.SQLQuery) -> add
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.xml.IXmlReader -> com.l2jfrozen.gameserver.util.xml.IXmlReader:
    org.apache.log4j.Logger LOG -> LOG
    java.lang.String JAXP_SCHEMA_LANGUAGE -> JAXP_SCHEMA_LANGUAGE
    java.lang.String W3C_XML_SCHEMA -> W3C_XML_SCHEMA
    com.l2jfrozen.gameserver.util.xml.XMLFilter XML_FILTER -> XML_FILTER
    void load() -> load
    void parseFile(java.io.File) -> parseFile
    boolean parseDirectory(java.io.File) -> parseDirectory
    boolean parseDirectory(java.lang.String) -> parseDirectory
    boolean parseDirectory(java.lang.String,boolean) -> parseDirectory
    boolean parseDirectory(java.io.File,boolean) -> parseDirectory
    void parseDocument(org.w3c.dom.Document,java.io.File) -> parseDocument
    void parseDocument(org.w3c.dom.Document) -> parseDocument
    java.lang.Boolean parseBoolean(org.w3c.dom.Node,java.lang.Boolean) -> parseBoolean
    java.lang.Boolean parseBoolean(org.w3c.dom.Node) -> parseBoolean
    java.lang.Boolean parseBoolean(org.w3c.dom.NamedNodeMap,java.lang.String) -> parseBoolean
    java.lang.Boolean parseBoolean(org.w3c.dom.NamedNodeMap,java.lang.String,java.lang.Boolean) -> parseBoolean
    java.lang.Byte parseByte(org.w3c.dom.Node,java.lang.Byte) -> parseByte
    java.lang.Byte parseByte(org.w3c.dom.Node) -> parseByte
    java.lang.Byte parseByte(org.w3c.dom.NamedNodeMap,java.lang.String) -> parseByte
    java.lang.Byte parseByte(org.w3c.dom.NamedNodeMap,java.lang.String,java.lang.Byte) -> parseByte
    java.lang.Short parseShort(org.w3c.dom.Node,java.lang.Short) -> parseShort
    java.lang.Short parseShort(org.w3c.dom.Node) -> parseShort
    java.lang.Short parseShort(org.w3c.dom.NamedNodeMap,java.lang.String) -> parseShort
    java.lang.Short parseShort(org.w3c.dom.NamedNodeMap,java.lang.String,java.lang.Short) -> parseShort
    int parseInt(org.w3c.dom.Node,java.lang.Integer) -> parseInt
    int parseInt(org.w3c.dom.Node) -> parseInt
    java.lang.Integer parseInteger(org.w3c.dom.Node,java.lang.Integer) -> parseInteger
    java.lang.Integer parseInteger(org.w3c.dom.Node) -> parseInteger
    java.lang.Integer parseInteger(org.w3c.dom.NamedNodeMap,java.lang.String) -> parseInteger
    java.lang.Integer parseInteger(org.w3c.dom.NamedNodeMap,java.lang.String,java.lang.Integer) -> parseInteger
    java.lang.Long parseLong(org.w3c.dom.Node,java.lang.Long) -> parseLong
    java.lang.Long parseLong(org.w3c.dom.Node) -> parseLong
    java.lang.Long parseLong(org.w3c.dom.NamedNodeMap,java.lang.String) -> parseLong
    java.lang.Long parseLong(org.w3c.dom.NamedNodeMap,java.lang.String,java.lang.Long) -> parseLong
    java.lang.Float parseFloat(org.w3c.dom.Node,java.lang.Float) -> parseFloat
    java.lang.Float parseFloat(org.w3c.dom.Node) -> parseFloat
    java.lang.Float parseFloat(org.w3c.dom.NamedNodeMap,java.lang.String) -> parseFloat
    java.lang.Float parseFloat(org.w3c.dom.NamedNodeMap,java.lang.String,java.lang.Float) -> parseFloat
    java.lang.Double parseDouble(org.w3c.dom.Node,java.lang.Double) -> parseDouble
    java.lang.Double parseDouble(org.w3c.dom.Node) -> parseDouble
    java.lang.Double parseDouble(org.w3c.dom.NamedNodeMap,java.lang.String) -> parseDouble
    java.lang.Double parseDouble(org.w3c.dom.NamedNodeMap,java.lang.String,java.lang.Double) -> parseDouble
    java.lang.String parseString(org.w3c.dom.Node,java.lang.String) -> parseString
    java.lang.String parseString(org.w3c.dom.Node) -> parseString
    java.lang.String parseString(org.w3c.dom.NamedNodeMap,java.lang.String) -> parseString
    java.lang.String parseString(org.w3c.dom.NamedNodeMap,java.lang.String,java.lang.String) -> parseString
    java.lang.Enum parseEnum(org.w3c.dom.Node,java.lang.Class,java.lang.Enum) -> parseEnum
    java.lang.Enum parseEnum(org.w3c.dom.Node,java.lang.Class) -> parseEnum
    java.lang.Enum parseEnum(org.w3c.dom.NamedNodeMap,java.lang.Class,java.lang.String) -> parseEnum
    java.lang.Enum parseEnum(org.w3c.dom.NamedNodeMap,java.lang.Class,java.lang.String,java.lang.Enum) -> parseEnum
    java.io.FileFilter getCurrentFileFilter() -> getCurrentFileFilter
    void <clinit>() -> <clinit>
com.l2jfrozen.gameserver.util.xml.IXmlReader$XMLErrorHandler -> com.l2jfrozen.gameserver.util.xml.IXmlReader$XMLErrorHandler:
    void <init>() -> <init>
    void warning(org.xml.sax.SAXParseException) -> warning
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
com.l2jfrozen.gameserver.util.xml.XMLFilter -> com.l2jfrozen.gameserver.util.xml.XMLFilter:
    void <init>() -> <init>
    boolean accept(java.io.File) -> accept
com.l2jfrozen.loginserver.AuthLoginResult -> com.l2jfrozen.loginserver.AuthLoginResult:
    com.l2jfrozen.loginserver.AuthLoginResult INVALID_PASSWORD -> INVALID_PASSWORD
    com.l2jfrozen.loginserver.AuthLoginResult ACCOUNT_BANNED -> ACCOUNT_BANNED
    com.l2jfrozen.loginserver.AuthLoginResult ALREADY_ON_LS -> ALREADY_ON_LS
    com.l2jfrozen.loginserver.AuthLoginResult ALREADY_ON_GS -> ALREADY_ON_GS
    com.l2jfrozen.loginserver.AuthLoginResult AUTH_SUCCESS -> AUTH_SUCCESS
    com.l2jfrozen.loginserver.AuthLoginResult[] $VALUES -> $VALUES
    com.l2jfrozen.loginserver.AuthLoginResult[] values() -> values
    com.l2jfrozen.loginserver.AuthLoginResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.FloodProtectedListener -> com.l2jfrozen.loginserver.FloodProtectedListener:
    java.util.logging.Logger _log -> _log
    java.util.Map _floodProtection -> _floodProtection
    java.net.ServerSocket _serverSocket -> _serverSocket
    void <init>(java.lang.String,int) -> <init>
    void run() -> run
    void addClient(java.net.Socket) -> addClient
    void removeFloodProtection(java.lang.String) -> removeFloodProtection
    void close() -> close
com.l2jfrozen.loginserver.ForeignConnection -> com.l2jfrozen.loginserver.ForeignConnection:
    int connectionNumber -> connectionNumber
    long lastConnection -> lastConnection
    boolean isFlooding -> isFlooding
    void <init>(long) -> <init>
com.l2jfrozen.loginserver.GameServerAddress -> com.l2jfrozen.loginserver.GameServerAddress:
    java.lang.String _serverAddress -> _serverAddress
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getServerAddress() -> getServerAddress
    java.lang.String toString() -> toString
com.l2jfrozen.loginserver.GameServerInfo -> com.l2jfrozen.loginserver.GameServerInfo:
    int _id -> _id
    byte[] _hexId -> _hexId
    boolean _isAuthed -> _isAuthed
    com.l2jfrozen.loginserver.GameServerThread _gst -> _gst
    int _status -> _status
    java.util.ArrayList _addrs -> _addrs
    int _port -> _port
    boolean _isPvp -> _isPvp
    int _serverType -> _serverType
    int _ageLimit -> _ageLimit
    boolean _isShowingBrackets -> _isShowingBrackets
    int _maxPlayers -> _maxPlayers
    void <init>(int,byte[],com.l2jfrozen.loginserver.GameServerThread) -> <init>
    void <init>(int,byte[]) -> <init>
    void setId(int) -> setId
    int getId() -> getId
    byte[] getHexId() -> getHexId
    java.lang.String getName() -> getName
    void setAuthed(boolean) -> setAuthed
    boolean isAuthed() -> isAuthed
    void setGameServerThread(com.l2jfrozen.loginserver.GameServerThread) -> setGameServerThread
    com.l2jfrozen.loginserver.GameServerThread getGameServerThread() -> getGameServerThread
    void setStatus(int) -> setStatus
    int getStatus() -> getStatus
    java.lang.String getStatusName() -> getStatusName
    int getCurrentPlayerCount() -> getCurrentPlayerCount
    java.lang.String getExternalHost() -> getExternalHost
    int getPort() -> getPort
    void setPort(int) -> setPort
    void setMaxPlayers(int) -> setMaxPlayers
    int getMaxPlayers() -> getMaxPlayers
    boolean isPvp() -> isPvp
    void setAgeLimit(int) -> setAgeLimit
    int getAgeLimit() -> getAgeLimit
    void setServerType(int) -> setServerType
    int getServerType() -> getServerType
    void setShowingBrackets(boolean) -> setShowingBrackets
    boolean isShowingBrackets() -> isShowingBrackets
    void setDown() -> setDown
    void addServerAddress(java.lang.String,java.lang.String) -> addServerAddress
    java.lang.String getServerAddress(java.net.InetAddress) -> getServerAddress
    java.lang.String[] getServerAddresses() -> getServerAddresses
    void clearServerAddresses() -> clearServerAddresses
com.l2jfrozen.loginserver.GameServerListener -> com.l2jfrozen.loginserver.GameServerListener:
    java.util.List _gameServers -> _gameServers
    void <init>() -> <init>
    void addClient(java.net.Socket) -> addClient
    void removeGameServer(com.l2jfrozen.loginserver.GameServerThread) -> removeGameServer
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.GameServerTable -> com.l2jfrozen.loginserver.GameServerTable:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map SERVER_NAMES -> SERVER_NAMES
    java.util.Map GAME_SERVER_TABLE -> GAME_SERVER_TABLE
    int KEYS_SIZE -> KEYS_SIZE
    java.security.KeyPair[] _keyPairs -> _keyPairs
    void <init>() -> <init>
    void loadServerNames() -> loadServerNames
    void initRSAKeys() -> initRSAKeys
    void loadRegisteredGameServers() -> loadRegisteredGameServers
    java.util.Map getRegisteredGameServers() -> getRegisteredGameServers
    com.l2jfrozen.loginserver.GameServerInfo getRegisteredGameServerById(int) -> getRegisteredGameServerById
    boolean hasRegisteredGameServerOnId(int) -> hasRegisteredGameServerOnId
    boolean registerWithFirstAvailableId(com.l2jfrozen.loginserver.GameServerInfo) -> registerWithFirstAvailableId
    boolean register(int,com.l2jfrozen.loginserver.GameServerInfo) -> register
    void registerServerOnDB(com.l2jfrozen.loginserver.GameServerInfo) -> registerServerOnDB
    void registerServerOnDB(byte[],int,java.lang.String) -> registerServerOnDB
    java.lang.String getServerNameById(int) -> getServerNameById
    java.util.Map getServerNames() -> getServerNames
    java.security.KeyPair getKeyPair() -> getKeyPair
    byte[] stringToHex(java.lang.String) -> stringToHex
    java.lang.String hexToString(byte[]) -> hexToString
    com.l2jfrozen.loginserver.GameServerTable getInstance() -> getInstance
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.GameServerTable$SingletonHolder -> com.l2jfrozen.loginserver.GameServerTable$SingletonHolder:
    com.l2jfrozen.loginserver.GameServerTable _instance -> _instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.GameServerThread -> com.l2jfrozen.loginserver.GameServerThread:
    java.util.logging.Logger _log -> _log
    java.net.Socket _connection -> _connection
    java.io.InputStream _in -> _in
    java.io.OutputStream _out -> _out
    java.security.interfaces.RSAPublicKey _publicKey -> _publicKey
    java.security.interfaces.RSAPrivateKey _privateKey -> _privateKey
    com.l2jfrozen.netcore.util.crypt.NewCrypt _blowfish -> _blowfish
    com.l2jfrozen.loginserver.network.GameServerState _loginConnectionState -> _loginConnectionState
    java.lang.String _connectionIp -> _connectionIp
    com.l2jfrozen.loginserver.GameServerInfo _gsi -> _gsi
    java.util.Set _accountsOnGameServer -> _accountsOnGameServer
    java.lang.String _connectionIPAddress -> _connectionIPAddress
    void run() -> run
    boolean hasAccountOnGameServer(java.lang.String) -> hasAccountOnGameServer
    int getPlayerCount() -> getPlayerCount
    void attachGameServerInfo(com.l2jfrozen.loginserver.GameServerInfo,int,java.lang.String[],int) -> attachGameServerInfo
    void forceClose(int) -> forceClose
    boolean isBannedGameserverIP(java.lang.String) -> isBannedGameserverIP
    void <init>(java.net.Socket) -> <init>
    void sendPacket(com.l2jfrozen.netcore.util.network.BaseSendablePacket) -> sendPacket
    void kickPlayer(java.lang.String) -> kickPlayer
    void setGameHosts(java.lang.String[]) -> setGameHosts
    boolean isAuthed() -> isAuthed
    void setGameServerInfo(com.l2jfrozen.loginserver.GameServerInfo) -> setGameServerInfo
    com.l2jfrozen.loginserver.GameServerInfo getGameServerInfo() -> getGameServerInfo
    java.lang.String getConnectionIpAddress() -> getConnectionIpAddress
    int getServerId() -> getServerId
    java.security.interfaces.RSAPrivateKey getPrivateKey() -> getPrivateKey
    void SetBlowFish(com.l2jfrozen.netcore.util.crypt.NewCrypt) -> SetBlowFish
    void addAccountOnGameServer(java.lang.String) -> addAccountOnGameServer
    void removeAccountOnGameServer(java.lang.String) -> removeAccountOnGameServer
    com.l2jfrozen.loginserver.network.GameServerState getLoginConnectionState() -> getLoginConnectionState
    void setLoginConnectionState(com.l2jfrozen.loginserver.network.GameServerState) -> setLoginConnectionState
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.HackingException -> com.l2jfrozen.loginserver.HackingException:
    long serialVersionUID -> serialVersionUID
    java.lang.String _ip -> _ip
    int _connects -> _connects
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getIP() -> getIP
    int getConnects() -> getConnects
com.l2jfrozen.loginserver.LoginConfig -> com.l2jfrozen.loginserver.LoginConfig:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int BRUT_LOGON_ATTEMPTS -> BRUT_LOGON_ATTEMPTS
    int BRUT_AVG_TIME -> BRUT_AVG_TIME
    int BRUT_BAN_IP_TIME -> BRUT_BAN_IP_TIME
    boolean FLOOD_PROTECTION -> FLOOD_PROTECTION
    int FAST_CONNECTION_LIMIT -> FAST_CONNECTION_LIMIT
    int MAX_CONNECTION_PER_IP -> MAX_CONNECTION_PER_IP
    long FAST_CONNECTION_TIME -> FAST_CONNECTION_TIME
    long NORMAL_CONNECTION_TIME -> NORMAL_CONNECTION_TIME
    java.lang.String GAME_SERVER_LOGIN_HOST -> GAME_SERVER_LOGIN_HOST
    int GAME_SERVER_LOGIN_PORT -> GAME_SERVER_LOGIN_PORT
    boolean ACCEPT_NEW_GAMESERVER -> ACCEPT_NEW_GAMESERVER
    java.lang.String NETWORK_IP_LIST -> NETWORK_IP_LIST
    boolean DEBUG_PACKETS -> DEBUG_PACKETS
    java.lang.String LOGIN_BIND_ADDRESS -> LOGIN_BIND_ADDRESS
    int PORT_LOGIN -> PORT_LOGIN
    long SESSION_TTL -> SESSION_TTL
    int MAX_LOGINSESSIONS -> MAX_LOGINSESSIONS
    int LOGIN_TRY_BEFORE_BAN -> LOGIN_TRY_BEFORE_BAN
    long LOGIN_BLOCK_AFTER_BAN -> LOGIN_BLOCK_AFTER_BAN
    boolean AUTO_CREATE_ACCOUNTS -> AUTO_CREATE_ACCOUNTS
    boolean ENABLE_DDOS_PROTECTION_SYSTEM -> ENABLE_DDOS_PROTECTION_SYSTEM
    java.lang.String DDOS_COMMAND_BLOCK -> DDOS_COMMAND_BLOCK
    boolean ENABLE_DEBUG_DDOS_PROTECTION_SYSTEM -> ENABLE_DEBUG_DDOS_PROTECTION_SYSTEM
    long LOGIN_SERVER_SCHEDULE_RESTART_TIME -> LOGIN_SERVER_SCHEDULE_RESTART_TIME
    boolean LOGIN_SERVER_SCHEDULE_RESTART -> LOGIN_SERVER_SCHEDULE_RESTART
    void <init>() -> <init>
    void load() -> load
    void load(java.lang.String) -> load
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.LoginConfigFiles -> com.l2jfrozen.loginserver.LoginConfigFiles:
    java.lang.String LOGIN_CONFIGURATION_FILE -> LOGIN_CONFIGURATION_FILE
    java.lang.String BANNED_IP -> BANNED_IP
    java.lang.String SERVER_NAME_FILE -> SERVER_NAME_FILE
    void <init>() -> <init>
    void loadConfigurationFilesPaths(java.lang.String) -> loadConfigurationFilesPaths
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.LoginController -> com.l2jfrozen.loginserver.LoginController:
    org.apache.log4j.Logger LOGGER -> LOGGER
    com.l2jfrozen.loginserver.LoginController _instance -> _instance
    int LOGIN_TIMEOUT -> LOGIN_TIMEOUT
    java.util.Map _loginServerClients -> _loginServerClients
    java.util.Map _failedLoginAttemps -> _failedLoginAttemps
    java.util.Map _bannedIps -> _bannedIps
    com.l2jfrozen.netcore.util.crypt.ScrambledKeyPair[] _keyPairs -> _keyPairs
    byte[][] _blowfishKeys -> _blowfishKeys
    int BLOWFISH_KEYS -> BLOWFISH_KEYS
    java.lang.String USER_INFO_SELECT -> USER_INFO_SELECT
    java.lang.String AUTOCREATE_ACCOUNTS_INSERT -> AUTOCREATE_ACCOUNTS_INSERT
    java.lang.String ACCOUNT_INFO_UPDATE -> ACCOUNT_INFO_UPDATE
    java.lang.String ACCOUNT_LAST_SERVER_UPDATE -> ACCOUNT_LAST_SERVER_UPDATE
    java.lang.String ACCOUNT_ACCESS_LEVEL_UPDATE -> ACCOUNT_ACCESS_LEVEL_UPDATE
    java.lang.String ACCOUNT_IPS_UPDATE -> ACCOUNT_IPS_UPDATE
    java.lang.String ACCOUNT_IPAUTH_SELECT -> ACCOUNT_IPAUTH_SELECT
    void <init>() -> <init>
    void testCipher(java.security.interfaces.RSAPrivateKey) -> testCipher
    void generateBlowFishKeys() -> generateBlowFishKeys
    byte[] getBlowfishKey() -> getBlowfishKey
    com.l2jfrozen.netcore.SessionKey assignSessionKeyToClient(java.lang.String,com.l2jfrozen.loginserver.network.L2LoginClient) -> assignSessionKeyToClient
    void removeAuthedLoginClient(java.lang.String) -> removeAuthedLoginClient
    com.l2jfrozen.loginserver.network.L2LoginClient getAuthedClient(java.lang.String) -> getAuthedClient
    com.l2jfrozen.loginserver.model.data.AccountInfo retriveAccountInfo(java.net.InetAddress,java.lang.String,java.lang.String) -> retriveAccountInfo
    void recordFailedLoginAttemp(java.net.InetAddress) -> recordFailedLoginAttemp
    void clearFailedLoginAttemps(java.net.InetAddress) -> clearFailedLoginAttemps
    com.l2jfrozen.loginserver.model.data.AccountInfo retriveAccountInfo(java.net.InetAddress,java.lang.String,java.lang.String,boolean) -> retriveAccountInfo
    com.l2jfrozen.loginserver.AuthLoginResult tryCheckinAccount(com.l2jfrozen.loginserver.network.L2LoginClient,java.net.InetAddress,com.l2jfrozen.loginserver.model.data.AccountInfo) -> tryCheckinAccount
    void addBanForAddress(java.lang.String,long) -> addBanForAddress
    void addBanForAddress(java.net.InetAddress,long) -> addBanForAddress
    boolean isBannedAddress(java.net.InetAddress) -> isBannedAddress
    java.util.Map getBannedIps() -> getBannedIps
    boolean removeBanForAddress(java.net.InetAddress) -> removeBanForAddress
    boolean removeBanForAddress(java.lang.String) -> removeBanForAddress
    com.l2jfrozen.netcore.SessionKey getKeyForAccount(java.lang.String) -> getKeyForAccount
    boolean isAccountInAnyGameServer(java.lang.String) -> isAccountInAnyGameServer
    com.l2jfrozen.loginserver.GameServerInfo getAccountOnGameServer(java.lang.String) -> getAccountOnGameServer
    boolean isLoginPossible(com.l2jfrozen.loginserver.network.L2LoginClient,int) -> isLoginPossible
    void setAccountAccessLevel(java.lang.String,int) -> setAccountAccessLevel
    void setAccountLastTracert(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> setAccountLastTracert
    com.l2jfrozen.netcore.util.crypt.ScrambledKeyPair getScrambledRSAKeyPair() -> getScrambledRSAKeyPair
    boolean canCheckin(com.l2jfrozen.loginserver.network.L2LoginClient,java.net.InetAddress,com.l2jfrozen.loginserver.model.data.AccountInfo) -> canCheckin
    boolean isValidIPAddress(java.lang.String) -> isValidIPAddress
    void load() -> load
    com.l2jfrozen.loginserver.LoginController getInstance() -> getInstance
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.LoginController$PurgeThread -> com.l2jfrozen.loginserver.LoginController$PurgeThread:
    com.l2jfrozen.loginserver.LoginController this$0 -> this$0
    void <init>(com.l2jfrozen.loginserver.LoginController) -> <init>
    void run() -> run
com.l2jfrozen.loginserver.LoginServer -> com.l2jfrozen.loginserver.LoginServer:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int PROTOCOL_REV -> PROTOCOL_REV
    com.l2jfrozen.loginserver.LoginServer _instance -> _instance
    com.l2jfrozen.loginserver.GameServerListener _gameServerListener -> _gameServerListener
    com.l2jfrozen.netcore.SelectorThread _selectorThread -> _selectorThread
    java.lang.Thread _restartLoginServer -> _restartLoginServer
    void main(java.lang.String[]) -> main
    com.l2jfrozen.loginserver.LoginServer getInstance() -> getInstance
    void <init>() -> <init>
    com.l2jfrozen.loginserver.GameServerListener getGameServerListener() -> getGameServerListener
    void loadBanFile() -> loadBanFile
    void shutdown(boolean) -> shutdown
    void lambda$loadBanFile$1(java.io.File,java.io.LineNumberReader,java.lang.String) -> lambda$loadBanFile$1
    boolean lambda$loadBanFile$0(java.lang.String) -> lambda$loadBanFile$0
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.LoginServer$LoginServerRestart -> com.l2jfrozen.loginserver.LoginServer$LoginServerRestart:
    com.l2jfrozen.loginserver.LoginServer this$0 -> this$0
    void <init>(com.l2jfrozen.loginserver.LoginServer) -> <init>
    void run() -> run
com.l2jfrozen.loginserver.SelectorHelper -> com.l2jfrozen.loginserver.SelectorHelper:
    java.util.logging.Logger LOG -> LOG
    java.util.concurrent.ThreadPoolExecutor _generalPacketsThreadPool -> _generalPacketsThreadPool
    com.l2jfrozen.netcore.util.IPv4Filter _ipv4filter -> _ipv4filter
    void <init>() -> <init>
    void execute(com.l2jfrozen.netcore.ReceivablePacket) -> e
    com.l2jfrozen.loginserver.network.L2LoginClient create(com.l2jfrozen.netcore.MMOConnection) -> create
    boolean accept(java.nio.channels.SocketChannel) -> a
    com.l2jfrozen.netcore.MMOClient create(com.l2jfrozen.netcore.MMOConnection) -> c
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.gsregistering.GameServerRegister -> com.l2jfrozen.loginserver.gsregistering.GameServerRegister:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _choice -> _choice
    boolean _choiceOk -> _choiceOk
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    void cleanRegisteredGameServersFromDB() -> cleanRegisteredGameServersFromDB
    byte[] generateHex(int) -> generateHex
    void saveHexid(int,java.lang.String,java.lang.String) -> saveHexid
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.model.data.AccountInfo -> com.l2jfrozen.loginserver.model.data.AccountInfo:
    java.lang.String _login -> _login
    java.lang.String _passHash -> _passHash
    int _accessLevel -> _accessLevel
    int _lastServer -> _lastServer
    void <init>(java.lang.String,java.lang.String,int,int) -> <init>
    boolean checkPassHash(java.lang.String) -> checkPassHash
    java.lang.String getLogin() -> getLogin
    int getAccessLevel() -> getAccessLevel
    int getLastServer() -> getLastServer
com.l2jfrozen.loginserver.network.GameServerState -> com.l2jfrozen.loginserver.network.GameServerState:
    com.l2jfrozen.loginserver.network.GameServerState CONNECTED -> CONNECTED
    com.l2jfrozen.loginserver.network.GameServerState BF_CONNECTED -> BF_CONNECTED
    com.l2jfrozen.loginserver.network.GameServerState AUTHED -> AUTHED
    com.l2jfrozen.loginserver.network.GameServerState[] $VALUES -> $VALUES
    com.l2jfrozen.loginserver.network.GameServerState[] values() -> values
    com.l2jfrozen.loginserver.network.GameServerState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.L2JGameServerPacketHandler -> com.l2jfrozen.loginserver.network.L2JGameServerPacketHandler:
    java.util.logging.Logger _log -> _log
    void <init>() -> <init>
    com.l2jfrozen.netcore.util.network.BaseRecievePacket handlePacket(byte[],com.l2jfrozen.loginserver.GameServerThread) -> handlePacket
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.L2JGameServerPacketHandler$1 -> com.l2jfrozen.loginserver.network.L2JGameServerPacketHandler$1:
    int[] $SwitchMap$com$l2jfrozen$loginserver$network$GameServerState -> $SwitchMap$com$l2jfrozen$loginserver$network$GameServerState
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.L2LoginClient -> com.l2jfrozen.loginserver.network.L2LoginClient:
    java.util.logging.Logger _log -> _log
    com.l2jfrozen.loginserver.network.LoginClientState _state -> _state
    com.l2jfrozen.netcore.util.crypt.LoginCrypt _loginCrypt -> _loginCrypt
    com.l2jfrozen.netcore.util.crypt.ScrambledKeyPair _scrambledPair -> _scrambledPair
    byte[] _blowfishKey -> _blowfishKey
    java.lang.String _account -> _account
    int _accessLevel -> _accessLevel
    int _lastServer -> _lastServer
    com.l2jfrozen.netcore.SessionKey _sessionKey -> _sessionKey
    int _sessionId -> _sessionId
    boolean _joinedGS -> _joinedGS
    java.util.Map _charsOnServers -> _charsOnServers
    java.util.Map _charsToDelete -> _charsToDelete
    long _connectionStartTime -> _connectionStartTime
    void <init>(com.l2jfrozen.netcore.MMOConnection) -> <init>
    boolean decrypt(java.nio.ByteBuffer,int) -> decrypt
    boolean encrypt(java.nio.ByteBuffer,int) -> encrypt
    com.l2jfrozen.loginserver.network.LoginClientState getState() -> getState
    void setState(com.l2jfrozen.loginserver.network.LoginClientState) -> setState
    byte[] getBlowfishKey() -> getBlowfishKey
    byte[] getScrambledModulus() -> getScrambledModulus
    java.security.interfaces.RSAPrivateKey getRSAPrivateKey() -> getRSAPrivateKey
    java.lang.String getAccount() -> getAccount
    void setAccount(java.lang.String) -> setAccount
    void setAccessLevel(int) -> setAccessLevel
    int getAccessLevel() -> getAccessLevel
    void setLastServer(int) -> setLastServer
    int getLastServer() -> getLastServer
    int getSessionId() -> getSessionId
    boolean hasJoinedGS() -> hasJoinedGS
    void setJoinedGS(boolean) -> setJoinedGS
    void setSessionKey(com.l2jfrozen.netcore.SessionKey) -> setSessionKey
    com.l2jfrozen.netcore.SessionKey getSessionKey() -> getSessionKey
    long getConnectionStartTime() -> getConnectionStartTime
    void sendPacket(com.l2jfrozen.loginserver.network.serverpackets.L2LoginServerPacket) -> sendPacket
    void close(com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason) -> close
    void close(com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason) -> close
    void close(com.l2jfrozen.loginserver.network.serverpackets.L2LoginServerPacket) -> close
    void setCharsOnServ(int,int) -> setCharsOnServ
    java.util.Map getCharsOnServ() -> getCharsOnServ
    void serCharsWaitingDelOnServ(int,long[]) -> serCharsWaitingDelOnServ
    java.util.Map getCharsWaitingDelOnServ() -> getCharsWaitingDelOnServ
    void onDisconnection() -> onDisconnection
    java.lang.String toString() -> toString
    void onForcedDisconnection(boolean) -> onForcedDisconnection
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.L2LoginPacketHandler -> com.l2jfrozen.loginserver.network.L2LoginPacketHandler:
    java.util.logging.Logger _log -> _log
    void <init>() -> <init>
    com.l2jfrozen.netcore.ReceivablePacket handlePacket(java.nio.ByteBuffer,com.l2jfrozen.loginserver.network.L2LoginClient) -> handlePacket
    void debugOpcode(int,com.l2jfrozen.loginserver.network.LoginClientState) -> debugOpcode
    com.l2jfrozen.netcore.ReceivablePacket handlePacket(java.nio.ByteBuffer,com.l2jfrozen.netcore.MMOClient) -> h
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.L2LoginPacketHandler$1 -> com.l2jfrozen.loginserver.network.L2LoginPacketHandler$1:
    int[] $SwitchMap$com$l2jfrozen$loginserver$network$LoginClientState -> $SwitchMap$com$l2jfrozen$loginserver$network$LoginClientState
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.LoginClientState -> com.l2jfrozen.loginserver.network.LoginClientState:
    com.l2jfrozen.loginserver.network.LoginClientState CONNECTED -> CONNECTED
    com.l2jfrozen.loginserver.network.LoginClientState AUTHED_GG -> AUTHED_GG
    com.l2jfrozen.loginserver.network.LoginClientState AUTHED_LOGIN -> AUTHED_LOGIN
    com.l2jfrozen.loginserver.network.LoginClientState[] $VALUES -> $VALUES
    com.l2jfrozen.loginserver.network.LoginClientState[] values() -> values
    com.l2jfrozen.loginserver.network.LoginClientState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.clientpackets.AuthGameGuard -> com.l2jfrozen.loginserver.network.clientpackets.AuthGameGuard:
    int _sessionId -> _sessionId
    int _data1 -> _data1
    int _data2 -> _data2
    int _data3 -> _data3
    int _data4 -> _data4
    void <init>() -> <init>
    int getSessionId() -> getSessionId
    int getData1() -> getData1
    int getData2() -> getData2
    int getData3() -> getData3
    int getData4() -> getData4
    boolean readImpl() -> readImpl
    void run() -> run
com.l2jfrozen.loginserver.network.clientpackets.L2LoginClientPacket -> com.l2jfrozen.loginserver.network.clientpackets.L2LoginClientPacket:
    java.util.logging.Logger _log -> _log
    void <init>() -> <init>
    boolean read() -> r
    boolean readImpl() -> readImpl
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.clientpackets.RequestAuthLogin -> com.l2jfrozen.loginserver.network.clientpackets.RequestAuthLogin:
    java.util.logging.Logger _log -> _log
    byte[] _raw -> _raw
    java.lang.String _user -> _user
    java.lang.String _password -> _password
    int _ncotp -> _ncotp
    void <init>() -> <init>
    java.lang.String getPassword() -> getPassword
    java.lang.String getUser() -> getUser
    int getOneTimePassword() -> getOneTimePassword
    boolean readImpl() -> readImpl
    void run() -> run
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.clientpackets.RequestAuthLogin$1 -> com.l2jfrozen.loginserver.network.clientpackets.RequestAuthLogin$1:
    int[] $SwitchMap$com$l2jfrozen$loginserver$AuthLoginResult -> $SwitchMap$com$l2jfrozen$loginserver$AuthLoginResult
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.clientpackets.RequestServerList -> com.l2jfrozen.loginserver.network.clientpackets.RequestServerList:
    int _skey1 -> _skey1
    int _skey2 -> _skey2
    int _data3 -> _data3
    void <init>() -> <init>
    int getSessionKey1() -> getSessionKey1
    int getSessionKey2() -> getSessionKey2
    int getData3() -> getData3
    boolean readImpl() -> readImpl
    void run() -> run
com.l2jfrozen.loginserver.network.clientpackets.RequestServerLogin -> com.l2jfrozen.loginserver.network.clientpackets.RequestServerLogin:
    int _skey1 -> _skey1
    int _skey2 -> _skey2
    int _serverId -> _serverId
    void <init>() -> <init>
    int getSessionKey1() -> getSessionKey1
    int getSessionKey2() -> getSessionKey2
    int getServerID() -> getServerID
    boolean readImpl() -> readImpl
    void run() -> run
com.l2jfrozen.loginserver.network.gameserverpackets.BlowFishKey -> com.l2jfrozen.loginserver.network.gameserverpackets.BlowFishKey:
    java.util.logging.Logger _log -> _log
    void <init>(byte[],com.l2jfrozen.loginserver.GameServerThread) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.gameserverpackets.ChangeAccessLevel -> com.l2jfrozen.loginserver.network.gameserverpackets.ChangeAccessLevel:
    java.util.logging.Logger _log -> _log
    void <init>(byte[],com.l2jfrozen.loginserver.GameServerThread) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.gameserverpackets.GameServerAuth -> com.l2jfrozen.loginserver.network.gameserverpackets.GameServerAuth:
    java.util.logging.Logger _log -> _log
    com.l2jfrozen.loginserver.GameServerThread _server -> _server
    byte[] _hexId -> _hexId
    int _desiredId -> _desiredId
    boolean _hostReserved -> _hostReserved
    boolean _acceptAlternativeId -> _acceptAlternativeId
    int _maxPlayers -> _maxPlayers
    int _port -> _port
    java.lang.String[] _hosts -> _hosts
    void <init>(byte[],com.l2jfrozen.loginserver.GameServerThread) -> <init>
    boolean handleRegProcess() -> handleRegProcess
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.gameserverpackets.PlayerAuthRequest -> com.l2jfrozen.loginserver.network.gameserverpackets.PlayerAuthRequest:
    java.util.logging.Logger _log -> _log
    void <init>(byte[],com.l2jfrozen.loginserver.GameServerThread) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.gameserverpackets.PlayerInGame -> com.l2jfrozen.loginserver.network.gameserverpackets.PlayerInGame:
    java.util.logging.Logger _log -> _log
    void <init>(byte[],com.l2jfrozen.loginserver.GameServerThread) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.gameserverpackets.PlayerLogout -> com.l2jfrozen.loginserver.network.gameserverpackets.PlayerLogout:
    java.util.logging.Logger _log -> _log
    void <init>(byte[],com.l2jfrozen.loginserver.GameServerThread) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.gameserverpackets.PlayerTracert -> com.l2jfrozen.loginserver.network.gameserverpackets.PlayerTracert:
    java.util.logging.Logger _log -> _log
    void <init>(byte[]) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.gameserverpackets.ServerStatus -> com.l2jfrozen.loginserver.network.gameserverpackets.ServerStatus:
    java.util.logging.Logger _log -> _log
    java.lang.String[] STATUS_STRING -> STATUS_STRING
    int SERVER_LIST_STATUS -> SERVER_LIST_STATUS
    int SERVER_TYPE -> SERVER_TYPE
    int SERVER_LIST_SQUARE_BRACKET -> SERVER_LIST_SQUARE_BRACKET
    int MAX_PLAYERS -> MAX_PLAYERS
    int TEST_SERVER -> TEST_SERVER
    int SERVER_AGE -> SERVER_AGE
    int STATUS_AUTO -> STATUS_AUTO
    int STATUS_GOOD -> STATUS_GOOD
    int STATUS_NORMAL -> STATUS_NORMAL
    int STATUS_FULL -> STATUS_FULL
    int STATUS_DOWN -> STATUS_DOWN
    int STATUS_GM_ONLY -> STATUS_GM_ONLY
    int SERVER_NORMAL -> SERVER_NORMAL
    int SERVER_RELAX -> SERVER_RELAX
    int SERVER_TEST -> SERVER_TEST
    int SERVER_NOLABEL -> SERVER_NOLABEL
    int SERVER_CREATION_RESTRICTED -> SERVER_CREATION_RESTRICTED
    int SERVER_EVENT -> SERVER_EVENT
    int SERVER_FREE -> SERVER_FREE
    int SERVER_AGE_ALL -> SERVER_AGE_ALL
    int SERVER_AGE_15 -> SERVER_AGE_15
    int SERVER_AGE_18 -> SERVER_AGE_18
    int ON -> ON
    int OFF -> OFF
    void <init>(byte[],com.l2jfrozen.loginserver.GameServerThread) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.loginserverpackets.AuthResponse -> com.l2jfrozen.loginserver.network.loginserverpackets.AuthResponse:
    void <init>(int) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.loginserver.network.loginserverpackets.InitLS -> com.l2jfrozen.loginserver.network.loginserverpackets.InitLS:
    void <init>(byte[]) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.loginserver.network.loginserverpackets.KickPlayer -> com.l2jfrozen.loginserver.network.loginserverpackets.KickPlayer:
    void <init>(java.lang.String) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.loginserver.network.loginserverpackets.LoginServerFail -> com.l2jfrozen.loginserver.network.loginserverpackets.LoginServerFail:
    int REASON_IP_BANNED -> REASON_IP_BANNED
    int REASON_IP_RESERVED -> REASON_IP_RESERVED
    int REASON_WRONG_HEXID -> REASON_WRONG_HEXID
    int REASON_ID_RESERVED -> REASON_ID_RESERVED
    int REASON_NO_FREE_ID -> REASON_NO_FREE_ID
    int NOT_AUTHED -> NOT_AUTHED
    int REASON_ALREADY_LOGGED8IN -> REASON_ALREADY_LOGGED8IN
    void <init>(int) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.loginserver.network.loginserverpackets.PlayerAuthResponse -> com.l2jfrozen.loginserver.network.loginserverpackets.PlayerAuthResponse:
    void <init>(java.lang.String,boolean) -> <init>
    byte[] getContent() -> gC
com.l2jfrozen.loginserver.network.serverpackets.AccountKicked -> com.l2jfrozen.loginserver.network.serverpackets.AccountKicked:
    com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason _reason -> _reason
    void <init>(com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason) -> <init>
    void write() -> w
com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason -> com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason:
    com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason REASON_DATA_STEALER -> REASON_DATA_STEALER
    com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason REASON_GENERIC_VIOLATION -> REASON_GENERIC_VIOLATION
    com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason REASON_7_DAYS_SUSPENDED -> REASON_7_DAYS_SUSPENDED
    com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason REASON_PERMANENTLY_BANNED -> REASON_PERMANENTLY_BANNED
    int _code -> _code
    com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason[] $VALUES -> $VALUES
    com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason[] values() -> values
    com.l2jfrozen.loginserver.network.serverpackets.AccountKickedReason valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getCode() -> getCode
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.serverpackets.GGAuth -> com.l2jfrozen.loginserver.network.serverpackets.GGAuth:
    java.util.logging.Logger _log -> _log
    int SKIP_GG_AUTH_REQUEST -> SKIP_GG_AUTH_REQUEST
    int _response -> _response
    void <init>(int) -> <init>
    void write() -> w
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.serverpackets.Init -> com.l2jfrozen.loginserver.network.serverpackets.Init:
    int _sessionId -> _sessionId
    byte[] _publicKey -> _publicKey
    byte[] _blowfishKey -> _blowfishKey
    void <init>(com.l2jfrozen.loginserver.network.L2LoginClient) -> <init>
    void <init>(byte[],byte[],int) -> <init>
    void write() -> w
com.l2jfrozen.loginserver.network.serverpackets.L2LoginServerPacket -> com.l2jfrozen.loginserver.network.serverpackets.L2LoginServerPacket:
    void <init>() -> <init>
com.l2jfrozen.loginserver.network.serverpackets.LoginFail -> com.l2jfrozen.loginserver.network.serverpackets.LoginFail:
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason _reason -> _reason
    void <init>(com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason) -> <init>
    void write() -> w
com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason -> com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason:
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_NO_MESSAGE -> REASON_NO_MESSAGE
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_SYSTEM_ERROR_LOGIN_LATER -> REASON_SYSTEM_ERROR_LOGIN_LATER
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_USER_OR_PASS_WRONG -> REASON_USER_OR_PASS_WRONG
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_ACCESS_FAILED_TRY_AGAIN_LATER -> REASON_ACCESS_FAILED_TRY_AGAIN_LATER
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_ACCOUNT_INFO_INCORRECT_CONTACT_SUPPORT -> REASON_ACCOUNT_INFO_INCORRECT_CONTACT_SUPPORT
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_ACCOUNT_IN_USE -> REASON_ACCOUNT_IN_USE
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_UNDER_18_YEARS_KR -> REASON_UNDER_18_YEARS_KR
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_SERVER_OVERLOADED -> REASON_SERVER_OVERLOADED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_SERVER_MAINTENANCE -> REASON_SERVER_MAINTENANCE
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_TEMP_PASS_EXPIRED -> REASON_TEMP_PASS_EXPIRED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_GAME_TIME_EXPIRED -> REASON_GAME_TIME_EXPIRED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_NO_TIME_LEFT -> REASON_NO_TIME_LEFT
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_SYSTEM_ERROR -> REASON_SYSTEM_ERROR
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_ACCESS_FAILED -> REASON_ACCESS_FAILED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_RESTRICTED_IP -> REASON_RESTRICTED_IP
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_WEEK_USAGE_FINISHED -> REASON_WEEK_USAGE_FINISHED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_SECURITY_CARD_NUMBER_INVALID -> REASON_SECURITY_CARD_NUMBER_INVALID
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_AGE_NOT_VERIFIED_CANT_LOG_BEETWEEN_10PM_6AM -> REASON_AGE_NOT_VERIFIED_CANT_LOG_BEETWEEN_10PM_6AM
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_SERVER_CANNOT_BE_ACCESSED_BY_YOUR_COUPON -> REASON_SERVER_CANNOT_BE_ACCESSED_BY_YOUR_COUPON
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_DUAL_BOX -> REASON_DUAL_BOX
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_INACTIVE -> REASON_INACTIVE
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_USER_AGREEMENT_REJECTED_ON_WEBSITE -> REASON_USER_AGREEMENT_REJECTED_ON_WEBSITE
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_GUARDIAN_CONSENT_REQUIRED -> REASON_GUARDIAN_CONSENT_REQUIRED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_USER_AGREEMENT_DECLINED_OR_WITHDRAWL_REQUEST -> REASON_USER_AGREEMENT_DECLINED_OR_WITHDRAWL_REQUEST
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_ACCOUNT_SUSPENDED_CALL -> REASON_ACCOUNT_SUSPENDED_CALL
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_CHANGE_PASSWORD_AND_QUIZ_ON_WEBSITE -> REASON_CHANGE_PASSWORD_AND_QUIZ_ON_WEBSITE
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_ALREADY_LOGGED_INTO_10_ACCOUNTS -> REASON_ALREADY_LOGGED_INTO_10_ACCOUNTS
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_MASTER_ACCOUNT_RESTRICTED -> REASON_MASTER_ACCOUNT_RESTRICTED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_CERTIFICATION_FAILED -> REASON_CERTIFICATION_FAILED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_TELEPHONE_CERTIFICATION_UNAVAILABLE -> REASON_TELEPHONE_CERTIFICATION_UNAVAILABLE
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_TELEPHONE_SIGNALS_DELAYED -> REASON_TELEPHONE_SIGNALS_DELAYED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_CERTIFICATION_FAILED_LINE_BUSY -> REASON_CERTIFICATION_FAILED_LINE_BUSY
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_CERTIFICATION_SERVICE_NUMBER_EXPIRED_OR_INCORRECT -> REASON_CERTIFICATION_SERVICE_NUMBER_EXPIRED_OR_INCORRECT
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_CERTIFICATION_SERVICE_CURRENTLY_BEING_CHECKED -> REASON_CERTIFICATION_SERVICE_CURRENTLY_BEING_CHECKED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_CERTIFICATION_SERVICE_CANT_BE_USED_HEAVY_VOLUME -> REASON_CERTIFICATION_SERVICE_CANT_BE_USED_HEAVY_VOLUME
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_CERTIFICATION_SERVICE_EXPIRED_GAMEPLAY_BLOCKED -> REASON_CERTIFICATION_SERVICE_EXPIRED_GAMEPLAY_BLOCKED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_CERTIFICATION_FAILED_3_TIMES_GAMEPLAY_BLOCKED_30_MIN -> REASON_CERTIFICATION_FAILED_3_TIMES_GAMEPLAY_BLOCKED_30_MIN
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_CERTIFICATION_DAILY_USE_EXCEEDED -> REASON_CERTIFICATION_DAILY_USE_EXCEEDED
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason REASON_CERTIFICATION_UNDERWAY_TRY_AGAIN_LATER -> REASON_CERTIFICATION_UNDERWAY_TRY_AGAIN_LATER
    int _code -> _code
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason[] $VALUES -> $VALUES
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason[] values() -> values
    com.l2jfrozen.loginserver.network.serverpackets.LoginFailReason valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getCode() -> getCode
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.serverpackets.LoginOk -> com.l2jfrozen.loginserver.network.serverpackets.LoginOk:
    int _loginOk1 -> _loginOk1
    int _loginOk2 -> _loginOk2
    void <init>(com.l2jfrozen.netcore.SessionKey) -> <init>
    void write() -> w
com.l2jfrozen.loginserver.network.serverpackets.PlayFail -> com.l2jfrozen.loginserver.network.serverpackets.PlayFail:
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason _reason -> _reason
    void <init>(com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason) -> <init>
    void write() -> w
com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason -> com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason:
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_NO_MESSAGE -> REASON_NO_MESSAGE
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_SYSTEM_ERROR_LOGIN_LATER -> REASON_SYSTEM_ERROR_LOGIN_LATER
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_USER_OR_PASS_WRONG -> REASON_USER_OR_PASS_WRONG
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_ACCESS_FAILED_TRY_AGAIN_LATER -> REASON_ACCESS_FAILED_TRY_AGAIN_LATER
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_ACCOUNT_INFO_INCORRECT_CONTACT_SUPPORT -> REASON_ACCOUNT_INFO_INCORRECT_CONTACT_SUPPORT
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_ACCOUNT_IN_USE -> REASON_ACCOUNT_IN_USE
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_UNDER_18_YEARS_KR -> REASON_UNDER_18_YEARS_KR
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_SERVER_OVERLOADED -> REASON_SERVER_OVERLOADED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_SERVER_MAINTENANCE -> REASON_SERVER_MAINTENANCE
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_TEMP_PASS_EXPIRED -> REASON_TEMP_PASS_EXPIRED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_GAME_TIME_EXPIRED -> REASON_GAME_TIME_EXPIRED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_NO_TIME_LEFT -> REASON_NO_TIME_LEFT
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_SYSTEM_ERROR -> REASON_SYSTEM_ERROR
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_ACCESS_FAILED -> REASON_ACCESS_FAILED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_RESTRICTED_IP -> REASON_RESTRICTED_IP
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_WEEK_USAGE_FINISHED -> REASON_WEEK_USAGE_FINISHED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_SECURITY_CARD_NUMBER_INVALID -> REASON_SECURITY_CARD_NUMBER_INVALID
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_AGE_NOT_VERIFIED_CANT_LOG_BEETWEEN_10PM_6AM -> REASON_AGE_NOT_VERIFIED_CANT_LOG_BEETWEEN_10PM_6AM
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_SERVER_CANNOT_BE_ACCESSED_BY_YOUR_COUPON -> REASON_SERVER_CANNOT_BE_ACCESSED_BY_YOUR_COUPON
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_DUAL_BOX -> REASON_DUAL_BOX
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_INACTIVE -> REASON_INACTIVE
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_USER_AGREEMENT_REJECTED_ON_WEBSITE -> REASON_USER_AGREEMENT_REJECTED_ON_WEBSITE
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_GUARDIAN_CONSENT_REQUIRED -> REASON_GUARDIAN_CONSENT_REQUIRED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_USER_AGREEMENT_DECLINED_OR_WITHDRAWL_REQUEST -> REASON_USER_AGREEMENT_DECLINED_OR_WITHDRAWL_REQUEST
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_ACCOUNT_SUSPENDED_CALL -> REASON_ACCOUNT_SUSPENDED_CALL
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_CHANGE_PASSWORD_AND_QUIZ_ON_WEBSITE -> REASON_CHANGE_PASSWORD_AND_QUIZ_ON_WEBSITE
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_ALREADY_LOGGED_INTO_10_ACCOUNTS -> REASON_ALREADY_LOGGED_INTO_10_ACCOUNTS
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_MASTER_ACCOUNT_RESTRICTED -> REASON_MASTER_ACCOUNT_RESTRICTED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_CERTIFICATION_FAILED -> REASON_CERTIFICATION_FAILED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_TELEPHONE_CERTIFICATION_UNAVAILABLE -> REASON_TELEPHONE_CERTIFICATION_UNAVAILABLE
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_TELEPHONE_SIGNALS_DELAYED -> REASON_TELEPHONE_SIGNALS_DELAYED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_CERTIFICATION_FAILED_LINE_BUSY -> REASON_CERTIFICATION_FAILED_LINE_BUSY
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_CERTIFICATION_SERVICE_NUMBER_EXPIRED_OR_INCORRECT -> REASON_CERTIFICATION_SERVICE_NUMBER_EXPIRED_OR_INCORRECT
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_CERTIFICATION_SERVICE_CURRENTLY_BEING_CHECKED -> REASON_CERTIFICATION_SERVICE_CURRENTLY_BEING_CHECKED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_CERTIFICATION_SERVICE_CANT_BE_USED_HEAVY_VOLUME -> REASON_CERTIFICATION_SERVICE_CANT_BE_USED_HEAVY_VOLUME
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_CERTIFICATION_SERVICE_EXPIRED_GAMEPLAY_BLOCKED -> REASON_CERTIFICATION_SERVICE_EXPIRED_GAMEPLAY_BLOCKED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_CERTIFICATION_FAILED_3_TIMES_GAMEPLAY_BLOCKED_30_MIN -> REASON_CERTIFICATION_FAILED_3_TIMES_GAMEPLAY_BLOCKED_30_MIN
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_CERTIFICATION_DAILY_USE_EXCEEDED -> REASON_CERTIFICATION_DAILY_USE_EXCEEDED
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason REASON_CERTIFICATION_UNDERWAY_TRY_AGAIN_LATER -> REASON_CERTIFICATION_UNDERWAY_TRY_AGAIN_LATER
    int _code -> _code
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason[] $VALUES -> $VALUES
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason[] values() -> values
    com.l2jfrozen.loginserver.network.serverpackets.PlayFailReason valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getCode() -> getCode
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.serverpackets.PlayOk -> com.l2jfrozen.loginserver.network.serverpackets.PlayOk:
    int _playOk1 -> _playOk1
    int _playOk2 -> _playOk2
    void <init>(com.l2jfrozen.netcore.SessionKey) -> <init>
    void write() -> w
com.l2jfrozen.loginserver.network.serverpackets.ServerData -> com.l2jfrozen.loginserver.network.serverpackets.ServerData:
    java.util.logging.Logger _log -> _log
    byte[] _ip -> _ip
    int _port -> _port
    int _ageLimit -> _ageLimit
    boolean _pvp -> _pvp
    int _currentPlayers -> _currentPlayers
    int _maxPlayers -> _maxPlayers
    boolean _brackets -> _brackets
    boolean _clock -> _clock
    int _status -> _status
    int _serverId -> _serverId
    int _serverType -> _serverType
    void <init>(com.l2jfrozen.loginserver.network.L2LoginClient,com.l2jfrozen.loginserver.GameServerInfo) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.network.serverpackets.ServerList -> com.l2jfrozen.loginserver.network.serverpackets.ServerList:
    java.util.logging.Logger _log -> _log
    java.util.List _servers -> _servers
    int _lastServer -> _lastServer
    java.util.Map _charsOnServers -> _charsOnServers
    java.util.Map _charsToDelete -> _charsToDelete
    void <init>(com.l2jfrozen.loginserver.network.L2LoginClient) -> <init>
    void write() -> w
    void <clinit>() -> <clinit>
com.l2jfrozen.loginserver.util.LoginServerFloodProtectorActions -> com.l2jfrozen.loginserver.util.LoginServerFloodProtectorActions:
    org.apache.log4j.Logger LOGGER -> LOGGER
    int MAX_CONCURRENT_ACTIONS_PER_PLAYER -> MAX_CONCURRENT_ACTIONS_PER_PLAYER
    java.util.Hashtable clients_concurrent_actions -> clients_concurrent_actions
    java.util.Hashtable clients_actions -> clients_actions
    java.util.Hashtable clients_nextGameTick -> clients_nextGameTick
    java.util.Hashtable punishes_in_progress -> punishes_in_progress
    void <init>() -> <init>
    boolean tryPerformAction(int,int,com.l2jfrozen.netcore.MMOClient) -> t
    boolean isOpCodeToBeTested(int,int) -> i
    void kickPlayer(com.l2jfrozen.netcore.MMOClient,int) -> kickPlayer
    void banAccount(com.l2jfrozen.netcore.MMOClient,int) -> banAccount
com.l2jfrozen.netcore.AbstractPacket -> a.a.ap:
    java.nio.ByteBuffer _buf -> _b
    java.lang.Long _clientIdentifier -> _c
    void <init>() -> <init>
    com.l2jfrozen.netcore.MMOClient getClient() -> g
com.l2jfrozen.netcore.IAcceptFilter -> a.a.af:
    boolean accept(java.nio.channels.SocketChannel) -> a
com.l2jfrozen.netcore.IClientFactory -> a.a.cf:
    com.l2jfrozen.netcore.MMOClient create(com.l2jfrozen.netcore.MMOConnection) -> c
com.l2jfrozen.netcore.IMMOExecutor -> a.a.am:
    void execute(com.l2jfrozen.netcore.ReceivablePacket) -> e
com.l2jfrozen.netcore.IPacketHandler -> a.a.ph:
    com.l2jfrozen.netcore.ReceivablePacket handlePacket(java.nio.ByteBuffer,com.l2jfrozen.netcore.MMOClient) -> h
com.l2jfrozen.netcore.MMOClient -> a.a.A:
    long _nextIdentifier -> _n
    com.l2jfrozen.netcore.MMOConnection _con -> _c
    long _identifier -> _i
    void <init>(com.l2jfrozen.netcore.MMOConnection) -> <init>
    com.l2jfrozen.netcore.MMOConnection getConnection() -> gco
    long getIdentifier() -> gi
    boolean decrypt(java.nio.ByteBuffer,int) -> d
    boolean encrypt(java.nio.ByteBuffer,int) -> e
    void onDisconnection() -> od
    void onForcedDisconnection(boolean) -> of
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.MMOClientsManager -> a.a.B:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.Map managedClients -> aj
    void <init>() -> <init>
    com.l2jfrozen.netcore.MMOClient getClient(java.lang.Long) -> a
    com.l2jfrozen.netcore.MMOClient removeClient(java.lang.Long) -> b
    com.l2jfrozen.netcore.MMOClient addClient(com.l2jfrozen.netcore.MMOClient) -> a
    com.l2jfrozen.netcore.MMOClientsManager getInstance() -> n
    void printClientsManagerStatus() -> o
    int getActiveClientsNumber() -> p
    void <init>(com.l2jfrozen.netcore.MMOClientsManager$1) -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.MMOClientsManager$1 -> a.a.C:
com.l2jfrozen.netcore.MMOClientsManager$SingletonHolder -> a.a.D:
    com.l2jfrozen.netcore.MMOClientsManager _instance -> ak
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.MMOConnection -> a.a.E:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String _selectorThreadName -> al
    java.net.Socket _socket -> am
    java.io.InputStream _socket_is -> an
    java.net.InetAddress _address -> ao
    java.nio.channels.ReadableByteChannel _readableByteChannel -> ap
    java.nio.channels.WritableByteChannel _writableByteChannel -> aq
    int _port -> _p
    com.l2jfrozen.netcore.NioNetStackList _sendQueue -> ar
    java.nio.channels.SelectionKey _selectionKey -> as
    java.nio.ByteBuffer _readBuffer -> at
    java.nio.ByteBuffer _primaryWriteBuffer -> au
    java.nio.ByteBuffer _secondaryWriteBuffer -> av
    boolean _pendingClose -> aw
    long _clientIdentifier -> ax
    void <init>(com.l2jfrozen.netcore.SelectorThread,java.net.Socket,java.nio.channels.SelectionKey) -> <init>
    void setClient(com.l2jfrozen.netcore.MMOClient) -> b
    com.l2jfrozen.netcore.MMOClient getClient() -> g
    void sendPacket(com.l2jfrozen.netcore.SendablePacket) -> a
    java.nio.channels.SelectionKey getSelectionKey() -> gs
    java.net.InetAddress getInetAddress() -> gi
    int getPort() -> gp
    void close() -> close
    int read(java.nio.ByteBuffer) -> r
    int write(java.nio.ByteBuffer) -> w
    void createWriteBuffer(java.nio.ByteBuffer) -> a
    boolean hasPendingWriteBuffer() -> q
    void movePendingWriteBufferTo(java.nio.ByteBuffer) -> b
    void setReadBuffer(java.nio.ByteBuffer) -> c
    java.nio.ByteBuffer getReadBuffer() -> s
    boolean isConnected() -> ico
    boolean isChannelConnected() -> t
    boolean isClosed() -> icl
    com.l2jfrozen.netcore.NioNetStackList getSendQueue() -> u
    void close(com.l2jfrozen.netcore.SendablePacket) -> b
    void close(com.l2jfrozen.netcore.SendablePacket[]) -> a
    void releaseBuffers() -> v
    com.l2jfrozen.netcore.SelectorThread getSelectorThread() -> x
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.NetcoreConfig -> com.l2jfrozen.netcore.NetcoreConfig:
    boolean SHOW_LICENCE -> SHOW_LICENCE
    boolean PACKET_HANDLER_DEBUG -> PACKET_HANDLER_DEBUG
    int MMO_SELECTOR_SLEEP_TIME -> MMO_SELECTOR_SLEEP_TIME
    int MMO_MAX_SEND_PER_PASS -> MMO_MAX_SEND_PER_PASS
    int MMO_MAX_READ_PER_PASS -> MMO_MAX_READ_PER_PASS
    int MMO_HELPER_BUFFER_COUNT -> MMO_HELPER_BUFFER_COUNT
    boolean ENABLE_MMOCORE_EXCEPTIONS -> ENABLE_MMOCORE_EXCEPTIONS
    boolean ENABLE_MMOCORE_DEBUG -> ENABLE_MMOCORE_DEBUG
    boolean ENABLE_MMOCORE_DEVELOP -> ENABLE_MMOCORE_DEVELOP
    boolean ENABLE_MMOCORE_PACKETS_LOG -> ENABLE_MMOCORE_PACKETS_LOG
    boolean ENABLE_CLIENT_FLOOD_PROTECTION -> ENABLE_CLIENT_FLOOD_PROTECTION
    int CLIENT_PACKET_QUEUE_SIZE -> CLIENT_PACKET_QUEUE_SIZE
    int CLIENT_PACKET_QUEUE_MAX_BURST_SIZE -> CLIENT_PACKET_QUEUE_MAX_BURST_SIZE
    int CLIENT_PACKET_QUEUE_MAX_PACKETS_PER_SECOND -> CLIENT_PACKET_QUEUE_MAX_PACKETS_PER_SECOND
    int CLIENT_PACKET_QUEUE_MEASURE_INTERVAL -> CLIENT_PACKET_QUEUE_MEASURE_INTERVAL
    int CLIENT_PACKET_QUEUE_MAX_AVERAGE_PACKETS_PER_SECOND -> CLIENT_PACKET_QUEUE_MAX_AVERAGE_PACKETS_PER_SECOND
    int CLIENT_PACKET_QUEUE_MAX_FLOODS_PER_MIN -> CLIENT_PACKET_QUEUE_MAX_FLOODS_PER_MIN
    int CLIENT_PACKET_QUEUE_MAX_OVERFLOWS_PER_MIN -> CLIENT_PACKET_QUEUE_MAX_OVERFLOWS_PER_MIN
    int CLIENT_PACKET_QUEUE_MAX_UNDERFLOWS_PER_MIN -> CLIENT_PACKET_QUEUE_MAX_UNDERFLOWS_PER_MIN
    int CLIENT_PACKET_QUEUE_MAX_UNKNOWN_PER_MIN -> CLIENT_PACKET_QUEUE_MAX_UNKNOWN_PER_MIN
    boolean DISABLE_FULL_PACKETS_FLOOD_PROTECTOR -> DISABLE_FULL_PACKETS_FLOOD_PROTECTOR
    int FLOOD_PACKET_PROTECTION_INTERVAL -> FLOOD_PACKET_PROTECTION_INTERVAL
    boolean LOG_PACKET_FLOODING -> LOG_PACKET_FLOODING
    int PACKET_FLOODING_PUNISHMENT_LIMIT -> PACKET_FLOODING_PUNISHMENT_LIMIT
    java.lang.String PACKET_FLOODING_PUNISHMENT_TYPE -> PACKET_FLOODING_PUNISHMENT_TYPE
    java.lang.String PROTECTED_OPCODES -> PROTECTED_OPCODES
    javolution.util.FastList GS_LIST_PROTECTED_OPCODES -> GS_LIST_PROTECTED_OPCODES
    javolution.util.FastList GS_LIST_PROTECTED_OPCODES2 -> GS_LIST_PROTECTED_OPCODES2
    javolution.util.FastList LS_LIST_PROTECTED_OPCODES -> LS_LIST_PROTECTED_OPCODES
    java.lang.String ALLOWED_OFFLINE_OPCODES -> ALLOWED_OFFLINE_OPCODES
    javolution.util.FastList LIST_ALLOWED_OFFLINE_OPCODES -> LIST_ALLOWED_OFFLINE_OPCODES
    javolution.util.FastList LIST_ALLOWED_OFFLINE_OPCODES2 -> LIST_ALLOWED_OFFLINE_OPCODES2
    boolean DUMP_CLOSE_CONNECTIONS -> DUMP_CLOSE_CONNECTIONS
    com.l2jfrozen.netcore.NetcoreConfig _instance -> _instance
    com.l2jfrozen.netcore.NetcoreConfig getInstance() -> getInstance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.NetcoreConfigFiles -> com.l2jfrozen.netcore.NetcoreConfigFiles:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.lang.String MAIN_CONFIGURATION_FILE -> MAIN_CONFIGURATION_FILE
    java.lang.String NETCORE_CONFIGURATION_FILE -> NETCORE_CONFIGURATION_FILE
    java.util.Properties configFiles -> configFiles
    void <init>() -> <init>
    void loadConfigurationFilesPaths() -> loadConfigurationFilesPaths
    void loadConfigurationFilesPaths(java.lang.String) -> loadConfigurationFilesPaths
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.NioNetStackList -> a.a.F:
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode _start -> ay
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNodeBuf _buf -> az
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode _end -> aA
    void <init>() -> <init>
    void addLast(java.lang.Object) -> addLast
    java.lang.Object removeFirst() -> removeFirst
    boolean isEmpty() -> isEmpty
    void clear() -> clear
com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode -> a.a.G:
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode _next -> aB
    java.lang.Object _value -> _v
    com.l2jfrozen.netcore.NioNetStackList this$0 -> aC
    void <init>(com.l2jfrozen.netcore.NioNetStackList) -> <init>
com.l2jfrozen.netcore.NioNetStackList$NioNetStackNodeBuf -> a.a.H:
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode _start -> ay
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode _end -> aA
    com.l2jfrozen.netcore.NioNetStackList this$0 -> aC
    void <init>(com.l2jfrozen.netcore.NioNetStackList) -> <init>
    void addLast(com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode) -> a
    com.l2jfrozen.netcore.NioNetStackList$NioNetStackNode removeFirst() -> y
com.l2jfrozen.netcore.NioNetStringBuffer -> a.a.I:
    char[] _buf -> aD
    int _size -> _s
    int _len -> aE
    void <init>(int) -> <init>
    void clear() -> clear
    void append(char) -> append
    java.lang.String toString() -> toString
com.l2jfrozen.netcore.ReceivablePacket -> a.a.z:
    com.l2jfrozen.netcore.NioNetStringBuffer _sbuf -> _s
    org.apache.log4j.Logger LOGGER -> LOGGER
    void <init>() -> <init>
    boolean read() -> r
    void run() -> run
    void readB(byte[]) -> B
    void readB(byte[],int,int) -> B
    int readC() -> C
    int readH(java.lang.String) -> H
    int readD() -> D
    long readQ() -> Q
    double readF() -> F
    java.lang.String readS() -> S
    void setBuffers(java.nio.ByteBuffer,com.l2jfrozen.netcore.MMOClient,com.l2jfrozen.netcore.NioNetStringBuffer) -> sB
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.SelectorConfig -> com.l2jfrozen.netcore.SelectorConfig:
    int readBufferSize -> readBufferSize
    int writeBufferSize -> writeBufferSize
    int helperBufferCount -> helperBufferCount
    int helperBufferSize -> helperBufferSize
    int maxSendPerPass -> maxSendPerPass
    int maxReadPerPass -> maxReadPerPass
    int sleepTime -> sleepTime
    void <init>() -> <init>
    int getReadBufferSize() -> getReadBufferSize
    void setReadBufferSize(int) -> setReadBufferSize
    int getWriteBufferSize() -> getWriteBufferSize
    void setWriteBufferSize(int) -> setWriteBufferSize
    int getHelperBufferCount() -> getHelperBufferCount
    void setHelperBufferCount(int) -> setHelperBufferCount
    int getHelperBufferSize() -> getHelperBufferSize
    void setHelperBufferSize(int) -> setHelperBufferSize
    int getMaxSendPerPass() -> getMaxSendPerPass
    void setMaxSendPerPass(int) -> setMaxSendPerPass
    int getMaxReadPerPass() -> getMaxReadPerPass
    void setMaxReadPerPass(int) -> setMaxReadPerPass
    int getSleepTime() -> getSleepTime
    void setSleepTime(int) -> setSleepTime
com.l2jfrozen.netcore.SelectorThread -> com.l2jfrozen.netcore.SelectorThread:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.nio.ByteOrder BYTE_ORDER -> BYTE_ORDER
    int HEADER_SIZE -> HEADER_SIZE
    java.nio.channels.Selector _selector -> _selector
    com.l2jfrozen.netcore.IPacketHandler _packetHandler -> _packetHandler
    com.l2jfrozen.netcore.IMMOExecutor _executor -> _executor
    com.l2jfrozen.netcore.IClientFactory _clientFactory -> _clientFactory
    com.l2jfrozen.netcore.IAcceptFilter _acceptFilter -> _acceptFilter
    int HELPER_BUFFER_SIZE -> HELPER_BUFFER_SIZE
    int HELPER_BUFFER_COUNT -> HELPER_BUFFER_COUNT
    int MAX_SEND_PER_PASS -> MAX_SEND_PER_PASS
    int MAX_READ_PER_PASS -> MAX_READ_PER_PASS
    long SLEEP_TIME -> st
    java.nio.ByteBuffer DIRECT_WRITE_BUFFER -> DIRECT_WRITE_BUFFER
    java.nio.ByteBuffer WRITE_BUFFER -> WRITE_BUFFER
    java.nio.ByteBuffer READ_BUFFER -> READ_BUFFER
    com.l2jfrozen.netcore.NioNetStringBuffer STRING_BUFFER -> STRING_BUFFER
    javolution.util.FastList _bufferPool -> _bufferPool
    com.l2jfrozen.netcore.NioNetStackList _pendingClose -> _pendingClose
    boolean _shutdown -> _shutdown
    java.util.HashMap selector_threads -> selector_threads
    com.l2jfrozen.netcore.SelectorThread getSelectorThread(java.lang.String) -> getSelectorThread
    void <init>(com.l2jfrozen.netcore.SelectorConfig,com.l2jfrozen.netcore.IMMOExecutor,com.l2jfrozen.netcore.IPacketHandler,com.l2jfrozen.netcore.IClientFactory,com.l2jfrozen.netcore.IAcceptFilter) -> <init>
    void openServerSocket(java.net.InetAddress,int) -> openServerSocket
    java.nio.ByteBuffer getPooledBuffer() -> getPooledBuffer
    void recycleBuffer(java.nio.ByteBuffer) -> recycleBuffer
    void run() -> run
    void finishConnection(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOConnection) -> finishConnection
    void acceptConnection(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOConnection) -> acceptConnection
    void readPacket(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOConnection) -> readPacket
    boolean tryReadPacket(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOClient,java.nio.ByteBuffer,com.l2jfrozen.netcore.MMOConnection) -> tryReadPacket
    void allocateReadBuffer(com.l2jfrozen.netcore.MMOConnection) -> allocateReadBuffer
    boolean parseClientPacket(int,java.nio.ByteBuffer,int,com.l2jfrozen.netcore.MMOClient) -> parseClientPacket
    void writeClosePacket(com.l2jfrozen.netcore.MMOConnection) -> writeClosePacket
    void writePacket(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOConnection) -> writePacket
    boolean prepareWriteBuffer(com.l2jfrozen.netcore.MMOConnection) -> prepareWriteBuffer
    void putPacketIntoWriteBuffer(com.l2jfrozen.netcore.MMOClient,com.l2jfrozen.netcore.SendablePacket) -> putPacketIntoWriteBuffer
    void closeConnection(com.l2jfrozen.netcore.MMOConnection) -> closeConnection
    void closeConnectionImpl(java.nio.channels.SelectionKey,com.l2jfrozen.netcore.MMOConnection,boolean,boolean) -> closeConnectionImpl
    void shutdown() -> shutdown
    boolean isShutdown() -> isShutdown
    void closeSelectorThread() -> closeSelectorThread
    void shutdownSelectorThreads() -> shutdownSelectorThreads
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.SendablePacket -> a.a.y:
    void <init>() -> <init>
    void putInt(int) -> pI
    void putDouble(double) -> pD
    void putFloat(float) -> pF
    void writeC(int) -> C
    void writeF(double) -> F
    void writeH(int) -> H
    void writeD(int) -> D
    void writeQ(long) -> Q
    void writeB(byte[]) -> B
    void writeS(java.lang.String) -> S
    void write() -> w
com.l2jfrozen.netcore.SessionKey -> a.a.aa:
    int playOkID1 -> a
    int playOkID2 -> b
    int loginOkID1 -> c
    int loginOkID2 -> d
    int clientKey -> e
    void <init>(int,int,int,int) -> <init>
    java.lang.String toString() -> toString
    boolean checkLoginPair(int,int) -> f
    boolean equals(com.l2jfrozen.netcore.SessionKey) -> equals
com.l2jfrozen.netcore.util.IPSubnet -> a.a.l:
    byte[] _addr -> _a
    byte[] _mask -> _m
    boolean _isIPv4 -> _i
    void <init>(java.lang.String) -> <init>
    void <init>(java.net.InetAddress,int) -> <init>
    byte[] getAddress() -> getAddress
    boolean applyMask(byte[]) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    byte[] getMask(int,int) -> gm
com.l2jfrozen.netcore.util.IPv4Filter -> a.a.m:
    java.util.HashMap _ipFloodMap -> C
    long SLEEP_TIME -> st
    void <init>() -> <init>
    int hash(byte[]) -> h
    boolean accept(java.nio.channels.SocketChannel) -> a
    void run() -> run
com.l2jfrozen.netcore.util.IPv4Filter$Flood -> a.a.n:
    long lastAccess -> D
    int trys -> E
    void <init>() -> <init>
com.l2jfrozen.netcore.util.PacketsFloodProtector -> a.a.o:
    com.l2jfrozen.netcore.util.PacketsFloodServer protected_server -> F
    void <init>() -> <init>
    void setProtectedServer(com.l2jfrozen.netcore.util.PacketsFloodServer) -> a
    boolean tryPerformAction(int,int,com.l2jfrozen.netcore.MMOClient) -> t
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.PacketsFloodServer -> a.a.p:
    boolean tryPerformAction(int,int,com.l2jfrozen.netcore.MMOClient) -> t
    boolean isOpCodeToBeTested(int,int) -> i
com.l2jfrozen.netcore.util.PacketsLoggerManager -> a.a.q:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.util.List _monitored_characters -> G
    java.util.Hashtable _character_blocked_packets -> H
    com.thoughtworks.xstream.XStream xstream -> I
    void <init>() -> <init>
    void startCharacterPacketsMonitoring(java.lang.String) -> c
    void stopCharacterPacketsMonitoring(java.lang.String) -> d
    void blockCharacterPacket(java.lang.String,java.lang.String) -> a
    void restoreCharacterPacket(java.lang.String,java.lang.String) -> b
    boolean isCharacterMonitored(java.lang.String) -> e
    boolean isCharacterPacketBlocked(java.lang.String,java.lang.String) -> c
    void logCharacterPacket(java.lang.String,java.lang.String) -> d
    void logReceivedPacket(com.l2jfrozen.netcore.ReceivablePacket) -> a
    com.l2jfrozen.netcore.util.PacketsLoggerManager getInstance() -> l
    void add(java.lang.String,java.lang.String,java.lang.String) -> ad
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.PacketsLoggerManager$SingletonHolder -> a.a.r:
    com.l2jfrozen.netcore.util.PacketsLoggerManager _instance -> J
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.crypt.BlowfishEngine -> a.a.s:
    int[] KP -> K
    int[] KS0 -> L
    int[] KS1 -> M
    int[] KS2 -> N
    int[] KS3 -> O
    int ROUNDS -> P
    int BLOCK_SIZE -> Q
    int SBOX_SK -> R
    int P_SZ -> S
    int[] S0 -> T
    int[] S1 -> U
    int[] S2 -> V
    int[] S3 -> W
    int[] P -> aa
    byte[] workingKey -> ab
    void <init>() -> <init>
    void init(byte[]) -> init
    java.lang.String getAlgorithmName() -> m
    int getBlockSize() -> b
    int func(int) -> a
    void processTable(int,int,int[]) -> a
    void setKey(byte[]) -> setKey
    void tryEncryptBlock(byte[],int) -> a
    void tryEncryptBlock(byte[],int,byte[],int) -> a
    void encryptBlock(byte[],int) -> b
    void encryptBlock(byte[],int,byte[],int) -> b
    void tryDecryptBlock(byte[],int) -> c
    void tryDecryptBlock(byte[],int,byte[],int) -> c
    void decryptBlock(byte[],int) -> d
    void decryptBlock(byte[],int,byte[],int) -> d
    int bytesTo32bits(byte[],int) -> e
    void bits32ToBytes(int,byte[],int) -> a
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.crypt.LoginCrypt -> a.a.t:
    byte[] STATIC_BLOWFISH_KEY -> ac
    com.l2jfrozen.netcore.util.crypt.NewCrypt _STATIC_CRYPT -> ad
    com.l2jfrozen.netcore.util.crypt.NewCrypt _crypt -> ae
    boolean _static -> af
    void <init>() -> <init>
    void setKey(byte[]) -> sk
    boolean decrypt(byte[],int,int) -> a
    int encrypt(byte[],int,int) -> b
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.crypt.NewCrypt -> a.a.u:
    com.l2jfrozen.netcore.util.crypt.BlowfishEngine _cipher -> ag
    void <init>(byte[]) -> <init>
    void <init>(java.lang.String) -> <init>
    boolean verifyChecksum(byte[]) -> b
    boolean verifyChecksum(byte[],int,int) -> c
    void appendChecksum(byte[]) -> c
    void appendChecksum(byte[],int,int) -> d
    void encXORPass(byte[],int) -> f
    void encXORPass(byte[],int,int,int) -> a
    void decrypt(byte[],int,int) -> de
    void crypt(byte[],int,int) -> e
com.l2jfrozen.netcore.util.crypt.ScrambledKeyPair -> a.a.v:
    org.apache.log4j.Logger LOGGER -> LOGGER
    java.security.KeyPair _pair -> ah
    byte[] _scrambledModulus -> ai
    void <init>(java.security.KeyPair) -> <init>
    byte[] scrambleModulus(java.math.BigInteger) -> a
    void <clinit>() -> <clinit>
com.l2jfrozen.netcore.util.network.BaseRecievePacket -> a.a.w:
    byte[] _decrypt -> _d
    int _off -> _o
    void <init>(byte[]) -> <init>
    int readD() -> D
    int readC() -> C
    int readH() -> H
    double readF() -> F
    java.lang.String readS() -> S
    byte[] readB(int) -> B
com.l2jfrozen.netcore.util.network.BaseSendablePacket -> a.a.x:
    java.io.ByteArrayOutputStream _bao -> _b
    void <init>() -> <init>
    void writeD(int) -> D
    void writeH(int) -> H
    void writeC(int) -> C
    void writeF(double) -> F
    void writeS(java.lang.String) -> S
    void writeB(byte[]) -> B
    int getLength() -> gL
    byte[] getBytes() -> getBytes
    byte[] getContent() -> gC
